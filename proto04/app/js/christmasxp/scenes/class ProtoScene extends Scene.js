var ProtoScene,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ProtoScene = (function(_super) {
  __extends(ProtoScene, _super);

  function ProtoScene() {
    this.onMouseUp = __bind(this.onMouseUp, this);
    this.onMouseMove = __bind(this.onMouseMove, this);
    this.onMouseDown = __bind(this.onMouseDown, this);
    this.onTouchEnd = __bind(this.onTouchEnd, this);
    this.onTouchMove = __bind(this.onTouchMove, this);
    this.onTouchStart = __bind(this.onTouchStart, this);
    this.onMouseMoveConstant = __bind(this.onMouseMoveConstant, this);
    this.vx = this.vy = 0;
    this.constantVy = 0;
    this.lastX = this.lastY = 0;
    this.friction = 0.98;
    this.maxSpeed = 15;
    this.height = 1200;
    this.radius = 200;
    this.camRadius = 500;
    this.camAngle = 0;
    this.camAngleAuto = false;
    this.navTopBottom = false;
    this.createLights();
    this.createMountain();
    this.createExperiments();
    this.createGround();
    this.createTree();
    this.initGUI();
    Stage3d.scene.fog = new THREE.Fog(0xFAFAFF, 0, 3000);
    Stage3d.renderer.setClearColor(0xFAFAFF, 1);
    this.addEvents();
    return;
  }

  ProtoScene.prototype.createLights = function() {
    this.ambient = new THREE.AmbientLight(0x444444);
    this.directional = new THREE.DirectionalLight(0x6666AA, .3);
    this.directional.position.set(.5, 1, .5);
    this.cameraLight = new THREE.PointLight(0xffffff, 1, 800);
    this.cameraLight.position.set(0, 0, 0);
    Stage3d.add(this.ambient);
    Stage3d.add(this.directional);
    Stage3d.add(this.cameraLight);
  };

  ProtoScene.prototype.createMountain = function() {
    var geometry, material, mesh;
    material = new THREE.MeshLambertMaterial({
      color: 0x99FFFF,
      wireframe: false,
      lights: true,
      transparent: true,
      opacity: .9
    });
    geometry = new THREE.CylinderGeometry(0, this.radius, this.height, 32, 32);
    mesh = new THREE.Mesh(geometry, material);
    mesh.position.y = this.height / 2;
    Stage3d.add(mesh);
    return mesh;
  };

  ProtoScene.prototype.createExperiments = function() {
    var angle, geometry, i, material, mesh, percent, _i;
    this.xpMesh = [];
    for (i = _i = 0; _i < 24; i = _i += 1) {
      percent = (((i + 1) / 24) * .9 + .05) * .9;
      material = new THREE.MeshBasicMaterial({
        color: 0xFFFF11,
        wireframe: false,
        transparent: true,
        opacity: 1
      });
      geometry = new THREE.SphereGeometry(5, 8, 8, 8);
      mesh = new THREE.Mesh(geometry, material);
      angle = percent * Math.PI * 6;
      mesh.position.x = Math.cos(angle) * this.radius * (1 - percent);
      mesh.position.y = this.height * percent;
      mesh.position.z = Math.sin(angle) * this.radius * (1 - percent);
      Stage3d.add(mesh);
      this.xpMesh.push(mesh);
    }
  };

  ProtoScene.prototype.createBackScreen = function() {
    var geometry, material, mesh;
    material = new THREE.MeshBasicMaterial({
      color: 0xFFFFFF,
      wireframe: false,
      transparent: true,
      opacity: 1,
      fog: false,
      light: false,
      map: THREE.ImageUtils.loadTexture("img/map.jpg")
    });
    geometry = new THREE.PlaneBufferGeometry(160 * 10, 90 * 10, 10, 10);
    mesh = new THREE.Mesh(geometry, material);
    mesh.position.set(0, 0, -this.radius * 1.3);
    this.backScreen = mesh;
    Stage3d.add(mesh);
  };

  ProtoScene.prototype.createGround = function() {
    var geometry, i, material, mesh, _i, _ref;
    material = new THREE.MeshLambertMaterial({
      color: 0xFFFFFF,
      lights: true
    });
    geometry = new THREE.PlaneBufferGeometry(10000, 10000, 128, 128);
    geometry.dynamic = true;
    for (i = _i = 1, _ref = geometry.attributes.position.array.length; _i < _ref; i = _i += 3) {
      geometry.attributes.position.array[i + 1] += 100 * Math.random();
    }
    geometry.attributes.position.needsUpdate = true;
    geometry.attributes.normal.needsUpdate = true;
    geometry.computeTangents();
    geometry.computeVertexNormals();
    mesh = new THREE.Mesh(geometry, material);
    mesh.rotation.x -= Math.PI / 2;
    this.geometry = geometry;
    Stage3d.add(mesh);
  };

  ProtoScene.prototype.createTree = function() {};

  ProtoScene.prototype.update = function(dt) {
    if (this.navTopBottom) {
      this.vy += this.constantVy;
    }
    this.vy *= this.friction;
    this.vx *= this.friction;
    this.vx = Math.min(this.maxSpeed, this.vx);
    this.vy = Math.min(this.maxSpeed, this.vy);
    this.vx = Math.max(-this.maxSpeed, this.vx);
    this.vy = Math.max(-this.maxSpeed, this.vy);
    Stage3d.camera.position.y += this.vy;
    if (this.camAngleAuto) {
      this.camAngle = Stage3d.camera.position.y / this.height * Math.PI * 6;
    } else {
      this.camAngle += this.vx * 0.00005;
    }
    Stage3d.camera.position.x = Math.cos(this.camAngle) * this.camRadius;
    Stage3d.camera.position.z = Math.sin(this.camAngle) * this.camRadius;
    this.cameraLight.position.set(Stage3d.camera.position.x, Stage3d.camera.position.y, Stage3d.camera.position.z);
    this.updateExperiment();
  };

  ProtoScene.prototype.updateExperiment = function() {
    var currentXP, dist, dx, materialOff, materialOn, minDist, xp, _i, _j, _len, _len1, _ref, _ref1;
    materialOn = new THREE.MeshBasicMaterial({
      color: 0xFFFF11,
      wireframe: false,
      transparent: true,
      opacity: 1
    });
    materialOff = new THREE.MeshBasicMaterial({
      color: 0xFF0000,
      wireframe: false,
      transparent: true,
      opacity: 1
    });
    minDist = 10000000;
    currentXP = null;
    _ref = this.xpMesh;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      xp = _ref[_i];
      dx = xp.position.y - Stage3d.camera.position.y;
      dist = dx * dx;
      if (dist < minDist) {
        minDist = dist;
        currentXP = xp;
      }
    }
    _ref1 = this.xpMesh;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      xp = _ref1[_j];
      if (xp === currentXP) {
        xp.material = materialOn;
      } else {
        xp.material = materialOff;
      }
    }
  };

  ProtoScene.prototype.initGUI = function() {
    var gui;
    gui = new dat.GUI();
    gui.add(this, 'camAngleAuto');
    gui.add(this, 'navTopBottom');
    gui.add(this, 'camRadius', 200, 1000);
    gui.add(Stage3d.camera, 'fov', 0, 180);
    gui.add(this, 'friction', 0.95, 1);
  };

  ProtoScene.prototype.addEvents = function() {
    window.addEventListener('mousedown', this.onMouseDown);
    window.addEventListener('touchstart', this.onTouchStart);
    window.addEventListener('mousemove', this.onMouseMoveConstant);
  };

  ProtoScene.prototype.onMouseMoveConstant = function(e) {
    var y;
    y = (e.pageY / window.innerHeight) - .5;
    if (y > .2) {
      this.constantVy = -.8 * (y - .2);
    } else if (y < -.2) {
      this.constantVy = -.8 * (y + .2);
    } else {
      this.constantVy = 0;
    }
  };

  ProtoScene.prototype.onTouchStart = function(e) {
    this.lastX = e.touches[0].pageX;
    this.lastY = e.touches[0].pageY;
    window.addEventListener('touchend', this.onTouchUp);
    window.addEventListener('touchmove', this.onTouchMove);
  };

  ProtoScene.prototype.onTouchMove = function(e) {
    this.vx = e.touches[0].pageX - this.lastX;
    this.vy = e.touches[0].pageY - this.lastY;
    this.lastX = e.touches[0].pageX;
    this.lastY = e.touches[0].pageY;
  };

  ProtoScene.prototype.onTouchEnd = function(e) {
    window.removeEventListener('touchend', this.onTouchUp);
    window.removeEventListener('touchmove', this.onTouchMove);
  };

  ProtoScene.prototype.onMouseDown = function(e) {
    this.lastX = e.pageX;
    this.lastY = e.pageY;
    window.addEventListener('mouseup', this.onMouseUp);
    window.addEventListener('mousemove', this.onMouseMove);
  };

  ProtoScene.prototype.onMouseMove = function(e) {
    this.vx = e.pageX - this.lastX;
    this.vy = e.pageY - this.lastY;
    this.lastX = e.pageX;
    this.lastY = e.pageY;
  };

  ProtoScene.prototype.onMouseUp = function(e) {
    window.removeEventListener('mouseup', this.onMouseUp);
    window.removeEventListener('mousemove', this.onMouseMove);
  };

  return ProtoScene;

})(Scene);

//# sourceMappingURL=data:application/json;base64,