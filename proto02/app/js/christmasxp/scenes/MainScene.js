var MainScene,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

MainScene = (function(_super) {
  __extends(MainScene, _super);

  function MainScene() {
    this.createGUI = __bind(this.createGUI, this);
    this.onMirrorLoad = __bind(this.onMirrorLoad, this);
    this.onDiamondLoad = __bind(this.onDiamondLoad, this);
    this.addEvent = __bind(this.addEvent, this);
    this.createLight = __bind(this.createLight, this);
    this.createBackground = __bind(this.createBackground, this);
    var loader;
    this.mouse = new THREE.Vector2(window.innerWidth / 2, window.innerHeight / 2);
    this.time = 0;
    this.useMap = true;
    this.shading = THREE.FlatShading;
    this.opacity = 1;
    this.container = new THREE.Object3D();
    Stage3d.add(this.container);
    this.createLight();
    this.map = THREE.ImageUtils.loadTexture("./3d/textures/preview01.jpg");
    this.envMap = THREE.ImageUtils.loadTextureCube(["./3d/textures/preview01.jpg", "./3d/textures/preview01.jpg", "./3d/textures/preview01.jpg", "./3d/textures/preview01.jpg", "./3d/textures/preview01.jpg", "./3d/textures/preview01.jpg"]);
    loader = new THREE.JSONLoader();
    loader.load('./3d/json/crystal.js', this.onDiamondLoad);
    loader = new THREE.JSONLoader();
    loader.load('./3d/json/mirror.js', this.onMirrorLoad);
    this.createBackground();
    this.createGUI();
    this.addEvent();
    Stage3d.initPostprocessing(this.gui);
    return;
  }

  MainScene.prototype.createBackground = function() {
    var geometry, i, material, mesh, _i, _ref;
    material = new THREE.MeshLambertMaterial({
      wireframe: false,
      color: 0xFFFFFF
    });
    geometry = new THREE.PlaneBufferGeometry(1000, 1000, 16, 16);
    for (i = _i = 1, _ref = geometry.attributes.position.array.length; _i < _ref; i = _i += 3) {
      geometry.attributes.position.array[i + 1] += 60 * Math.random();
    }
    geometry.attributes.position.needsUpdate = true;
    geometry.attributes.normal.needsUpdate = true;
    geometry.computeTangents();
    geometry.computeVertexNormals();
    mesh = new THREE.Mesh(geometry, material);
    mesh.position.z = -1000;
  };

  MainScene.prototype.createLight = function() {
    this.ambientLight = new THREE.AmbientLight(0xAAAAAA);
    Stage3d.add(this.ambientLight);
    this.cameraLight = new THREE.PointLight(0x443355, .3, 200);
    this.cameraLight.position.set(30, 60, 60);
    Stage3d.add(this.cameraLight);
    this.cameraLight2 = new THREE.PointLight(0x443355, .2, 200);
    this.cameraLight2.position.set(30, 60, 60);
    Stage3d.add(this.cameraLight2);
  };

  MainScene.prototype.addEvent = function() {
    window.addEventListener('mousemove', (function(_this) {
      return function(e) {
        _this.mouse.x = e.clientX;
        return _this.mouse.y = e.clientY;
      };
    })(this), false);
  };

  MainScene.prototype.onDiamondLoad = function(geometry) {
    var folder, material;
    this.computeGeometry(geometry);
    material = new THREE.MeshLambertMaterial({
      color: 0xffffff,
      transparent: true,
      envMap: this.envMap
    });
    if (this.useMap) {
      material.map = this.map;
    }
    material.shading = this.shading;
    material.opacity = .85;
    material.side = THREE.DoubleSide;
    material.combine = THREE.MixOperation;
    this.diamond = new THREE.Mesh(geometry, material);
    this.container.add(this.diamond);
    folder = this.gui.addFolder('diamond');
    folder.add(this.diamond.material, 'opacity', 0, 1);
    folder.add(this.diamond.material, 'reflectivity', 0, 1);
    this.diamondColor = 0xffffff;
    folder.add(this.diamond.material, 'combine', {
      multiply: THREE.Multiply,
      mix: THREE.MixOperation,
      add: THREE.AddOperation
    });
    folder.addColor(this, 'diamondColor').onChange((function(_this) {
      return function() {
        console.log(_this.diamond.material);
        return _this.diamond.material.color.setHex(_this.diamondColor);
      };
    })(this));
  };

  MainScene.prototype.onMirrorLoad = function(geometry) {
    var folder, material;
    this.computeGeometry(geometry);
    material = new THREE.MeshLambertMaterial({
      color: 0xffffff,
      transparent: true,
      envMap: this.envMap
    });
    if (this.useMap) {
      material.map = this.map;
    }
    material.shading = this.shading;
    material.combine = THREE.AddOperation;
    material.reflectivity = .41;
    material.opacity = 0.9;
    console.log(material);
    if (this.mirror) {
      this.container.remove(this.mirror);
    }
    this.mirror = new THREE.Mesh(geometry, material);
    this.container.add(this.mirror);
    folder = this.gui.addFolder('mirror');
    folder.add(this.mirror.material, 'opacity', 0, 1);
    folder.add(this.mirror.material, 'reflectivity', 0, 1);
    this.mirrorColor = 0xffffff;
    folder.add(this.mirror.material, 'combine', {
      multiply: THREE.Multiply,
      mix: THREE.MixOperation,
      add: THREE.AddOperation
    });
    folder.addColor(this, 'mirrorColor').onChange((function(_this) {
      return function() {
        return _this.mirror.material.color.setHex(_this.mirrorColor);
      };
    })(this));
  };

  MainScene.prototype.createGUI = function() {
    this.gui = new dat.GUI();
    this.textures = null;
    this.maps = [THREE.ImageUtils.loadTexture("./3d/textures/preview01.jpg"), THREE.ImageUtils.loadTexture("./3d/textures/crystal.jpg"), THREE.ImageUtils.loadTexture("./3d/textures/mario.png")];
    this.envMaps = [THREE.ImageUtils.loadTextureCube(["./3d/textures/preview01.jpg", "./3d/textures/preview01.jpg", "./3d/textures/preview01.jpg", "./3d/textures/preview01.jpg", "./3d/textures/preview01.jpg", "./3d/textures/preview01.jpg"]), THREE.ImageUtils.loadTextureCube(["./3d/textures/crystal.jpg", "./3d/textures/crystal.jpg", "./3d/textures/crystal.jpg", "./3d/textures/crystal.jpg", "./3d/textures/crystal.jpg", "./3d/textures/crystal.jpg"]), THREE.ImageUtils.loadTextureCube(["./3d/textures/mario.png", "./3d/textures/mario.png", "./3d/textures/mario.png", "./3d/textures/mario.png", "./3d/textures/mario.png", "./3d/textures/mario.png"])];
    this.gui.add(this, 'textures', {
      xp1: '0',
      xp2: '1',
      xp3: '2'
    }).onChange((function(_this) {
      return function(e) {
        _this.mirror.material.map = _this.maps[_this.textures];
        _this.mirror.material.envMaps = _this.envMaps[_this.textures];
        _this.diamond.material.envMap = _this.envMaps[_this.textures];
        _this.diamond.material.needsUpdate = true;
        console.log(_this.diamond.material);
      };
    })(this));
  };

  MainScene.prototype.computeGeometry = function(geometry) {
    geometry.computeBoundingSphere();
    geometry.computeFaceNormals();
    geometry.computeVertexNormals();
    geometry.computeTangents();
    geometry.computeMorphNormals();
    geometry.verticesNeedUpdate = true;
    geometry.normalsNeedUpdate = true;
  };

  MainScene.prototype.update = function(dt) {
    this.time += dt;
    this.cameraLight.position.x = Math.cos(this.time * 0.001) * 100;
    this.cameraLight2.position.x = Math.cos(this.time * 0.0015) * 120;
    this.cameraLight2.position.y = Math.sin(this.time * 0.0015) * 120;
    this.container.rotation.y += (this.mouse.x / window.innerWidth - .5 - this.container.rotation.y) * .09;
    this.container.rotation.x += (this.mouse.y / window.innerWidth - .5 - this.container.rotation.x) * .09;
  };

  return MainScene;

})(Scene);

//# sourceMappingURL=data:application/json;base64,