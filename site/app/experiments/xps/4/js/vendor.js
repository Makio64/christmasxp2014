/* Modernizr 2.8.3 (Custom Build) | MIT & BSD
 * Build: http://modernizr.com/download/#-audio-shiv-cssclasses-load
 */
;window.Modernizr=function(a,b,c){function u(a){j.cssText=a}function v(a,b){return u(prefixes.join(a+";")+(b||""))}function w(a,b){return typeof a===b}function x(a,b){return!!~(""+a).indexOf(b)}function y(a,b,d){for(var e in a){var f=b[a[e]];if(f!==c)return d===!1?a[e]:w(f,"function")?f.bind(d||b):f}return!1}var d="2.8.3",e={},f=!0,g=b.documentElement,h="modernizr",i=b.createElement(h),j=i.style,k,l={}.toString,m={},n={},o={},p=[],q=p.slice,r,s={}.hasOwnProperty,t;!w(s,"undefined")&&!w(s.call,"undefined")?t=function(a,b){return s.call(a,b)}:t=function(a,b){return b in a&&w(a.constructor.prototype[b],"undefined")},Function.prototype.bind||(Function.prototype.bind=function(b){var c=this;if(typeof c!="function")throw new TypeError;var d=q.call(arguments,1),e=function(){if(this instanceof e){var a=function(){};a.prototype=c.prototype;var f=new a,g=c.apply(f,d.concat(q.call(arguments)));return Object(g)===g?g:f}return c.apply(b,d.concat(q.call(arguments)))};return e}),m.audio=function(){var a=b.createElement("audio"),c=!1;try{if(c=!!a.canPlayType)c=new Boolean(c),c.ogg=a.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),c.mp3=a.canPlayType("audio/mpeg;").replace(/^no$/,""),c.wav=a.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),c.m4a=(a.canPlayType("audio/x-m4a;")||a.canPlayType("audio/aac;")).replace(/^no$/,"")}catch(d){}return c};for(var z in m)t(m,z)&&(r=z.toLowerCase(),e[r]=m[z](),p.push((e[r]?"":"no-")+r));return e.addTest=function(a,b){if(typeof a=="object")for(var d in a)t(a,d)&&e.addTest(d,a[d]);else{a=a.toLowerCase();if(e[a]!==c)return e;b=typeof b=="function"?b():b,typeof f!="undefined"&&f&&(g.className+=" "+(b?"":"no-")+a),e[a]=b}return e},u(""),i=k=null,function(a,b){function l(a,b){var c=a.createElement("p"),d=a.getElementsByTagName("head")[0]||a.documentElement;return c.innerHTML="x<style>"+b+"</style>",d.insertBefore(c.lastChild,d.firstChild)}function m(){var a=s.elements;return typeof a=="string"?a.split(" "):a}function n(a){var b=j[a[h]];return b||(b={},i++,a[h]=i,j[i]=b),b}function o(a,c,d){c||(c=b);if(k)return c.createElement(a);d||(d=n(c));var g;return d.cache[a]?g=d.cache[a].cloneNode():f.test(a)?g=(d.cache[a]=d.createElem(a)).cloneNode():g=d.createElem(a),g.canHaveChildren&&!e.test(a)&&!g.tagUrn?d.frag.appendChild(g):g}function p(a,c){a||(a=b);if(k)return a.createDocumentFragment();c=c||n(a);var d=c.frag.cloneNode(),e=0,f=m(),g=f.length;for(;e<g;e++)d.createElement(f[e]);return d}function q(a,b){b.cache||(b.cache={},b.createElem=a.createElement,b.createFrag=a.createDocumentFragment,b.frag=b.createFrag()),a.createElement=function(c){return s.shivMethods?o(c,a,b):b.createElem(c)},a.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+m().join().replace(/[\w\-]+/g,function(a){return b.createElem(a),b.frag.createElement(a),'c("'+a+'")'})+");return n}")(s,b.frag)}function r(a){a||(a=b);var c=n(a);return s.shivCSS&&!g&&!c.hasCSS&&(c.hasCSS=!!l(a,"article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")),k||q(a,c),a}var c="3.7.0",d=a.html5||{},e=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,f=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,g,h="_html5shiv",i=0,j={},k;(function(){try{var a=b.createElement("a");a.innerHTML="<xyz></xyz>",g="hidden"in a,k=a.childNodes.length==1||function(){b.createElement("a");var a=b.createDocumentFragment();return typeof a.cloneNode=="undefined"||typeof a.createDocumentFragment=="undefined"||typeof a.createElement=="undefined"}()}catch(c){g=!0,k=!0}})();var s={elements:d.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",version:c,shivCSS:d.shivCSS!==!1,supportsUnknownElements:k,shivMethods:d.shivMethods!==!1,type:"default",shivDocument:r,createElement:o,createDocumentFragment:p};a.html5=s,r(b)}(this,b),e._version=d,g.className=g.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+(f?" js "+p.join(" "):""),e}(this,this.document),function(a,b,c){function d(a){return"[object Function]"==o.call(a)}function e(a){return"string"==typeof a}function f(){}function g(a){return!a||"loaded"==a||"complete"==a||"uninitialized"==a}function h(){var a=p.shift();q=1,a?a.t?m(function(){("c"==a.t?B.injectCss:B.injectJs)(a.s,0,a.a,a.x,a.e,1)},0):(a(),h()):q=0}function i(a,c,d,e,f,i,j){function k(b){if(!o&&g(l.readyState)&&(u.r=o=1,!q&&h(),l.onload=l.onreadystatechange=null,b)){"img"!=a&&m(function(){t.removeChild(l)},50);for(var d in y[c])y[c].hasOwnProperty(d)&&y[c][d].onload()}}var j=j||B.errorTimeout,l=b.createElement(a),o=0,r=0,u={t:d,s:c,e:f,a:i,x:j};1===y[c]&&(r=1,y[c]=[]),"object"==a?l.data=c:(l.src=c,l.type=a),l.width=l.height="0",l.onerror=l.onload=l.onreadystatechange=function(){k.call(this,r)},p.splice(e,0,u),"img"!=a&&(r||2===y[c]?(t.insertBefore(l,s?null:n),m(k,j)):y[c].push(l))}function j(a,b,c,d,f){return q=0,b=b||"j",e(a)?i("c"==b?v:u,a,b,this.i++,c,d,f):(p.splice(this.i++,0,a),1==p.length&&h()),this}function k(){var a=B;return a.loader={load:j,i:0},a}var l=b.documentElement,m=a.setTimeout,n=b.getElementsByTagName("script")[0],o={}.toString,p=[],q=0,r="MozAppearance"in l.style,s=r&&!!b.createRange().compareNode,t=s?l:n.parentNode,l=a.opera&&"[object Opera]"==o.call(a.opera),l=!!b.attachEvent&&!l,u=r?"object":l?"script":"img",v=l?"script":u,w=Array.isArray||function(a){return"[object Array]"==o.call(a)},x=[],y={},z={timeout:function(a,b){return b.length&&(a.timeout=b[0]),a}},A,B;B=function(a){function b(a){var a=a.split("!"),b=x.length,c=a.pop(),d=a.length,c={url:c,origUrl:c,prefixes:a},e,f,g;for(f=0;f<d;f++)g=a[f].split("="),(e=z[g.shift()])&&(c=e(c,g));for(f=0;f<b;f++)c=x[f](c);return c}function g(a,e,f,g,h){var i=b(a),j=i.autoCallback;i.url.split(".").pop().split("?").shift(),i.bypass||(e&&(e=d(e)?e:e[a]||e[g]||e[a.split("/").pop().split("?")[0]]),i.instead?i.instead(a,e,f,g,h):(y[i.url]?i.noexec=!0:y[i.url]=1,f.load(i.url,i.forceCSS||!i.forceJS&&"css"==i.url.split(".").pop().split("?").shift()?"c":c,i.noexec,i.attrs,i.timeout),(d(e)||d(j))&&f.load(function(){k(),e&&e(i.origUrl,h,g),j&&j(i.origUrl,h,g),y[i.url]=2})))}function h(a,b){function c(a,c){if(a){if(e(a))c||(j=function(){var a=[].slice.call(arguments);k.apply(this,a),l()}),g(a,j,b,0,h);else if(Object(a)===a)for(n in m=function(){var b=0,c;for(c in a)a.hasOwnProperty(c)&&b++;return b}(),a)a.hasOwnProperty(n)&&(!c&&!--m&&(d(j)?j=function(){var a=[].slice.call(arguments);k.apply(this,a),l()}:j[n]=function(a){return function(){var b=[].slice.call(arguments);a&&a.apply(this,b),l()}}(k[n])),g(a[n],j,b,n,h))}else!c&&l()}var h=!!a.test,i=a.load||a.both,j=a.callback||f,k=j,l=a.complete||f,m,n;c(h?a.yep:a.nope,!!i),i&&c(i)}var i,j,l=this.yepnope.loader;if(e(a))g(a,0,l,0);else if(w(a))for(i=0;i<a.length;i++)j=a[i],e(j)?g(j,0,l,0):w(j)?B(j):Object(j)===j&&h(j,l);else Object(a)===a&&h(a,l)},B.addPrefix=function(a,b){z[a]=b},B.addFilter=function(a){x.push(a)},B.errorTimeout=1e4,null==b.readyState&&b.addEventListener&&(b.readyState="loading",b.addEventListener("DOMContentLoaded",A=function(){b.removeEventListener("DOMContentLoaded",A,0),b.readyState="complete"},0)),a.yepnope=k(),a.yepnope.executeStack=h,a.yepnope.injectJs=function(a,c,d,e,i,j){var k=b.createElement("script"),l,o,e=e||B.errorTimeout;k.src=a;for(o in d)k.setAttribute(o,d[o]);c=j?h:c||f,k.onreadystatechange=k.onload=function(){!l&&g(k.readyState)&&(l=1,c(),k.onload=k.onreadystatechange=null)},m(function(){l||(l=1,c(1))},e),i?k.onload():n.parentNode.insertBefore(k,n)},a.yepnope.injectCss=function(a,c,d,e,g,i){var e=b.createElement("link"),j,c=i?h:c||f;e.href=a,e.rel="stylesheet",e.type="text/css";for(j in d)e.setAttribute(j,d[j]);g||(n.parentNode.insertBefore(e,n),m(c,0))}}(this,document),Modernizr.load=function(){yepnope.apply(window,[].slice.call(arguments,0))};
/*! jQuery v2.1.1 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l=a.document,m="2.1.1",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return n.each(this,a,b)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){return!n.isArray(a)&&a-parseFloat(a)>=0},isPlainObject:function(a){return"object"!==n.type(a)||a.nodeType||n.isWindow(a)?!1:a.constructor&&!j.call(a.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf("use strict")?(b=l.createElement("script"),b.text=a,l.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=s(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:g.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=s(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(e=d.call(arguments,2),f=function(){return a.apply(b||this,e.concat(d.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:k}),n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function s(a){var b=a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+-new Date,v=a.document,w=0,x=0,y=gb(),z=gb(),A=gb(),B=function(a,b){return a===b&&(l=!0),0},C="undefined",D=1<<31,E={}.hasOwnProperty,F=[],G=F.pop,H=F.push,I=F.push,J=F.slice,K=F.indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(this[b]===a)return b;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",N="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",O=N.replace("w","w#"),P="\\["+M+"*("+N+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+O+"))|)"+M+"*\\]",Q=":("+N+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+P+")*)|.*)\\)|)",R=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),S=new RegExp("^"+M+"*,"+M+"*"),T=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),U=new RegExp("="+M+"*([^\\]'\"]*?)"+M+"*\\]","g"),V=new RegExp(Q),W=new RegExp("^"+O+"$"),X={ID:new RegExp("^#("+N+")"),CLASS:new RegExp("^\\.("+N+")"),TAG:new RegExp("^("+N.replace("w","w*")+")"),ATTR:new RegExp("^"+P),PSEUDO:new RegExp("^"+Q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ab=/[+~]/,bb=/'|\\/g,cb=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),db=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)};try{I.apply(F=J.call(v.childNodes),v.childNodes),F[v.childNodes.length].nodeType}catch(eb){I={apply:F.length?function(a,b){H.apply(a,J.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function fb(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],!a||"string"!=typeof a)return d;if(1!==(k=b.nodeType)&&9!==k)return[];if(p&&!e){if(f=_.exec(a))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return I.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName&&b.getElementsByClassName)return I.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=9===k&&a,1===k&&"object"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute("id"))?s=r.replace(bb,"\\$&"):b.setAttribute("id",s),s="[id='"+s+"'] ",l=o.length;while(l--)o[l]=s+qb(o[l]);w=ab.test(a)&&ob(b.parentNode)||b,x=o.join(",")}if(x)try{return I.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute("id")}}}return i(a.replace(R,"$1"),b,d,e)}function gb(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function hb(a){return a[u]=!0,a}function ib(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function jb(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function kb(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||D)-(~a.sourceIndex||D);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function lb(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function mb(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function nb(a){return hb(function(b){return b=+b,hb(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function ob(a){return a&&typeof a.getElementsByTagName!==C&&a}c=fb.support={},f=fb.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=fb.setDocument=function(a){var b,e=a?a.ownerDocument||a:v,g=e.defaultView;return e!==n&&9===e.nodeType&&e.documentElement?(n=e,o=e.documentElement,p=!f(e),g&&g!==g.top&&(g.addEventListener?g.addEventListener("unload",function(){m()},!1):g.attachEvent&&g.attachEvent("onunload",function(){m()})),c.attributes=ib(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ib(function(a){return a.appendChild(e.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=$.test(e.getElementsByClassName)&&ib(function(a){return a.innerHTML="<div class='a'></div><div class='a i'></div>",a.firstChild.className="i",2===a.getElementsByClassName("i").length}),c.getById=ib(function(a){return o.appendChild(a).id=u,!e.getElementsByName||!e.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if(typeof b.getElementById!==C&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){var c=typeof a.getAttributeNode!==C&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return typeof b.getElementsByTagName!==C?b.getElementsByTagName(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return typeof b.getElementsByClassName!==C&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(e.querySelectorAll))&&(ib(function(a){a.innerHTML="<select msallowclip=''><option selected=''></option></select>",a.querySelectorAll("[msallowclip^='']").length&&q.push("[*^$]="+M+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+M+"*(?:value|"+L+")"),a.querySelectorAll(":checked").length||q.push(":checked")}),ib(function(a){var b=e.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+M+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ib(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",Q)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===e||a.ownerDocument===v&&t(v,a)?-1:b===e||b.ownerDocument===v&&t(v,b)?1:k?K.call(k,a)-K.call(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,f=a.parentNode,g=b.parentNode,h=[a],i=[b];if(!f||!g)return a===e?-1:b===e?1:f?-1:g?1:k?K.call(k,a)-K.call(k,b):0;if(f===g)return kb(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?kb(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},e):n},fb.matches=function(a,b){return fb(a,null,null,b)},fb.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,"='$1']"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fb(b,n,null,[a]).length>0},fb.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fb.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&E.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fb.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},fb.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=fb.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=fb.selectors={cacheLength:50,createPseudo:hb,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(cb,db),a[3]=(a[3]||a[4]||a[5]||"").replace(cb,db),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||fb.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&fb.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(cb,db).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+M+")"+a+"("+M+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||typeof a.getAttribute!==C&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=fb.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fb.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?hb(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=K.call(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:hb(function(a){var b=[],c=[],d=h(a.replace(R,"$1"));return d[u]?hb(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),!c.pop()}}),has:hb(function(a){return function(b){return fb(a,b).length>0}}),contains:hb(function(a){return function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:hb(function(a){return W.test(a||"")||fb.error("unsupported lang: "+a),a=a.replace(cb,db).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:nb(function(){return[0]}),last:nb(function(a,b){return[b-1]}),eq:nb(function(a,b,c){return[0>c?c+b:c]}),even:nb(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:nb(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:nb(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:nb(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=lb(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=mb(b);function pb(){}pb.prototype=d.filters=d.pseudos,d.setFilters=new pb,g=fb.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R," ")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fb.error(a):z(a,i).slice(0)};function qb(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function rb(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function sb(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function tb(a,b,c){for(var d=0,e=b.length;e>d;d++)fb(a,b[d],c);return c}function ub(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function vb(a,b,c,d,e,f){return d&&!d[u]&&(d=vb(d)),e&&!e[u]&&(e=vb(e,f)),hb(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||tb(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ub(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ub(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?K.call(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ub(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):I.apply(g,r)})}function wb(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=rb(function(a){return a===b},h,!0),l=rb(function(a){return K.call(b,a)>-1},h,!0),m=[function(a,c,d){return!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d))}];f>i;i++)if(c=d.relative[a[i].type])m=[rb(sb(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return vb(i>1&&sb(m),i>1&&qb(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(R,"$1"),c,e>i&&wb(a.slice(i,e)),f>e&&wb(a=a.slice(e)),f>e&&qb(a))}m.push(c)}return sb(m)}function xb(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q="0",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG("*",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=G.call(i));s=ub(s)}I.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&fb.uniqueSort(i)}return k&&(w=v,j=t),r};return c?hb(f):f}return h=fb.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=wb(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xb(e,d)),f.selector=a}return f},i=fb.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(cb,db),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(cb,db),ab.test(j[0].type)&&ob(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&qb(j),!a)return I.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,ab.test(a)&&ob(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ib(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ib(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||jb("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ib(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||jb("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ib(function(a){return null==a.getAttribute("disabled")})||jb(L,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fb}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=n.expr.match.needsContext,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^.[^:#\[\.,]*$/;function x(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(w.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return g.call(b,a)>=0!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+" "+a:a,d},filter:function(a){return this.pushStack(x(this,a||[],!1))},not:function(a){return this.pushStack(x(this,a||[],!0))},is:function(a){return!!x(this,"string"==typeof a&&u.test(a)?n(a):a||[],!1).length}});var y,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,A=n.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||y).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:l,!0)),v.test(c[1])&&n.isPlainObject(b))for(c in b)n.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}return d=l.getElementById(c[2]),d&&d.parentNode&&(this.length=1,this[0]=d),this.context=l,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?"undefined"!=typeof y.ready?y.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};A.prototype=n.fn,y=n(l);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};n.extend({dir:function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=u.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.unique(f):f)},index:function(a){return a?"string"==typeof a?g.call(n(a),this[0]):g.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.unique(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return n.dir(a,"parentNode")},parentsUntil:function(a,b,c){return n.dir(a,"parentNode",c)},next:function(a){return D(a,"nextSibling")},prev:function(a){return D(a,"previousSibling")},nextAll:function(a){return n.dir(a,"nextSibling")},prevAll:function(a){return n.dir(a,"previousSibling")},nextUntil:function(a,b,c){return n.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return n.dir(a,"previousSibling",c)},siblings:function(a){return n.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return n.sibling(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(C[a]||n.unique(e),B.test(a)&&e.reverse()),this.pushStack(e)}});var E=/\S+/g,F={};function G(a){var b=F[a]={};return n.each(a.match(E)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?F[a]||G(a):n.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(b=a.memory&&l,c=!0,g=e||0,e=0,f=h.length,d=!0;h&&f>g;g++)if(h[g].apply(l[0],l[1])===!1&&a.stopOnFalse){b=!1;break}d=!1,h&&(i?i.length&&j(i.shift()):b?h=[]:k.disable())},k={add:function(){if(h){var c=h.length;!function g(b){n.each(b,function(b,c){var d=n.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&g(c)})}(arguments),d?f=h.length:b&&(e=c,j(b))}return this},remove:function(){return h&&n.each(arguments,function(a,b){var c;while((c=n.inArray(b,h,c))>-1)h.splice(c,1),d&&(f>=c&&f--,g>=c&&g--)}),this},has:function(a){return a?n.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],f=0,this},disable:function(){return h=i=b=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,b||k.disable(),this},locked:function(){return!i},fireWith:function(a,b){return!h||c&&!i||(b=b||[],b=[a,b.slice?b.slice():b],d?i.push(b):j(b)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!c}};return k},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&n.isFunction(a.promise)?e:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(H.resolveWith(l,[n]),n.fn.triggerHandler&&(n(l).triggerHandler("ready"),n(l).off("ready"))))}});function I(){l.removeEventListener("DOMContentLoaded",I,!1),a.removeEventListener("load",I,!1),n.ready()}n.ready.promise=function(b){return H||(H=n.Deferred(),"complete"===l.readyState?setTimeout(n.ready):(l.addEventListener("DOMContentLoaded",I,!1),a.addEventListener("load",I,!1))),H.promise(b)},n.ready.promise();var J=n.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)n.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f};n.acceptData=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function K(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=n.expando+Math.random()}K.uid=1,K.accepts=n.acceptData,K.prototype={key:function(a){if(!K.accepts(a))return 0;var b={},c=a[this.expando];if(!c){c=K.uid++;try{b[this.expando]={value:c},Object.defineProperties(a,b)}catch(d){b[this.expando]=c,n.extend(a,b)}}return this.cache[c]||(this.cache[c]={}),c},set:function(a,b,c){var d,e=this.key(a),f=this.cache[e];if("string"==typeof b)f[b]=c;else if(n.isEmptyObject(f))n.extend(this.cache[e],b);else for(d in b)f[d]=b[d];return f},get:function(a,b){var c=this.cache[this.key(a)];return void 0===b?c:c[b]},access:function(a,b,c){var d;return void 0===b||b&&"string"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=this.key(a),g=this.cache[f];if(void 0===b)this.cache[f]={};else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in g?d=[b,e]:(d=e,d=d in g?[d]:d.match(E)||[])),c=d.length;while(c--)delete g[d[c]]}},hasData:function(a){return!n.isEmptyObject(this.cache[a[this.expando]]||{})},discard:function(a){a[this.expando]&&delete this.cache[a[this.expando]]}};var L=new K,M=new K,N=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,O=/([A-Z])/g;function P(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(O,"-$1").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}M.set(a,b,c)}else c=void 0;return c}n.extend({hasData:function(a){return M.hasData(a)||L.hasData(a)},data:function(a,b,c){return M.access(a,b,c)},removeData:function(a,b){M.remove(a,b)
},_data:function(a,b,c){return L.access(a,b,c)},_removeData:function(a,b){L.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=M.get(f),1===f.nodeType&&!L.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d])));L.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){M.set(this,a)}):J(this,function(b){var c,d=n.camelCase(a);if(f&&void 0===b){if(c=M.get(f,a),void 0!==c)return c;if(c=M.get(f,d),void 0!==c)return c;if(c=P(f,d,void 0),void 0!==c)return c}else this.each(function(){var c=M.get(this,d);M.set(this,d,b),-1!==a.indexOf("-")&&void 0!==c&&M.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){M.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=L.get(a,b),c&&(!d||n.isArray(c)?d=L.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return L.get(a,c)||L.access(a,c,{empty:n.Callbacks("once memory").add(function(){L.remove(a,[b+"queue",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=L.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var Q=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,R=["Top","Right","Bottom","Left"],S=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)},T=/^(?:checkbox|radio)$/i;!function(){var a=l.createDocumentFragment(),b=a.appendChild(l.createElement("div")),c=l.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var U="undefined";k.focusinBubbles="onfocusin"in a;var V=/^key/,W=/^(?:mouse|pointer|contextmenu)|click/,X=/^(?:focusinfocus|focusoutblur)$/,Y=/^([^.]*)(?:\.(.+)|)$/;function Z(){return!0}function $(){return!1}function _(){try{return l.activeElement}catch(a){}}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return typeof n!==U&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(E)||[""],j=b.length;while(j--)h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g,!1)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.hasData(a)&&L.get(a);if(r&&(i=r.events)){b=(b||"").match(E)||[""],j=b.length;while(j--)if(h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&(delete r.handle,L.remove(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,m,o,p=[d||l],q=j.call(b,"type")?b.type:b,r=j.call(b,"namespace")?b.namespace.split("."):[];if(g=h=d=d||l,3!==d.nodeType&&8!==d.nodeType&&!X.test(q+n.event.triggered)&&(q.indexOf(".")>=0&&(r=q.split("."),q=r.shift(),r.sort()),k=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=r.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},e||!o.trigger||o.trigger.apply(d,c)!==!1)){if(!e&&!o.noBubble&&!n.isWindow(d)){for(i=o.delegateType||q,X.test(i+q)||(g=g.parentNode);g;g=g.parentNode)p.push(g),h=g;h===(d.ownerDocument||l)&&p.push(h.defaultView||h.parentWindow||a)}f=0;while((g=p[f++])&&!b.isPropagationStopped())b.type=f>1?i:o.bindType||q,m=(L.get(g,"events")||{})[b.type]&&L.get(g,"handle"),m&&m.apply(g,c),m=k&&g[k],m&&m.apply&&n.acceptData(g)&&(b.result=m.apply(g,c),b.result===!1&&b.preventDefault());return b.type=q,e||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!n.acceptData(d)||k&&n.isFunction(d[q])&&!n.isWindow(d)&&(h=d[k],h&&(d[k]=null),n.event.triggered=q,d[q](),n.event.triggered=void 0,h&&(d[k]=h)),b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(L.get(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(g.namespace))&&(a.handleObj=g,a.data=g.data,e=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==e&&(a.result=e)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!==this;i=i.parentNode||this)if(i.disabled!==!0||"click"!==a.type){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>=0:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||l,d=c.documentElement,e=c.body,a.pageX=b.clientX+(d&&d.scrollLeft||e&&e.scrollLeft||0)-(d&&d.clientLeft||e&&e.clientLeft||0),a.pageY=b.clientY+(d&&d.scrollTop||e&&e.scrollTop||0)-(d&&d.clientTop||e&&e.clientTop||0)),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=W.test(e)?this.mouseHooks:V.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new n.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=l),3===a.target.nodeType&&(a.target=a.target.parentNode),g.filter?g.filter(a,f):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==_()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===_()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&n.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=n.extend(new n.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?n.event.trigger(e,null,b):n.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?Z:$):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={isDefaultPrevented:$,isPropagationStopped:$,isImmediatePropagationStopped:$,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=Z,a&&a.preventDefault&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=Z,a&&a.stopPropagation&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=Z,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!n.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.focusinBubbles||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a),!0)};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=L.access(d,b);e||d.addEventListener(a,c,!0),L.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=L.access(d,b)-1;e?L.access(d,b,e):(d.removeEventListener(a,c,!0),L.remove(d,b))}}}),n.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(g in a)this.on(g,b,c,a[g],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=$;else if(!d)return this;return 1===e&&(f=d,d=function(a){return n().off(a),f.apply(this,arguments)},d.guid=f.guid||(f.guid=n.guid++)),this.each(function(){n.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=$),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});var ab=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,bb=/<([\w:]+)/,cb=/<|&#?\w+;/,db=/<(?:script|style|link)/i,eb=/checked\s*(?:[^=]|=\s*.checked.)/i,fb=/^$|\/(?:java|ecma)script/i,gb=/^true\/(.*)/,hb=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ib={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ib.optgroup=ib.option,ib.tbody=ib.tfoot=ib.colgroup=ib.caption=ib.thead,ib.th=ib.td;function jb(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function kb(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function lb(a){var b=gb.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function mb(a,b){for(var c=0,d=a.length;d>c;c++)L.set(a[c],"globalEval",!b||L.get(b[c],"globalEval"))}function nb(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(L.hasData(a)&&(f=L.access(a),g=L.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}M.hasData(a)&&(h=M.access(a),i=n.extend({},h),M.set(b,i))}}function ob(a,b){var c=a.getElementsByTagName?a.getElementsByTagName(b||"*"):a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function pb(a,b){var c=b.nodeName.toLowerCase();"input"===c&&T.test(a.type)?b.checked=a.checked:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}n.extend({clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=ob(h),f=ob(a),d=0,e=f.length;e>d;d++)pb(f[d],g[d]);if(b)if(c)for(f=f||ob(a),g=g||ob(h),d=0,e=f.length;e>d;d++)nb(f[d],g[d]);else nb(a,h);return g=ob(h,"script"),g.length>0&&mb(g,!i&&ob(a,"script")),h},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,k=b.createDocumentFragment(),l=[],m=0,o=a.length;o>m;m++)if(e=a[m],e||0===e)if("object"===n.type(e))n.merge(l,e.nodeType?[e]:e);else if(cb.test(e)){f=f||k.appendChild(b.createElement("div")),g=(bb.exec(e)||["",""])[1].toLowerCase(),h=ib[g]||ib._default,f.innerHTML=h[1]+e.replace(ab,"<$1></$2>")+h[2],j=h[0];while(j--)f=f.lastChild;n.merge(l,f.childNodes),f=k.firstChild,f.textContent=""}else l.push(b.createTextNode(e));k.textContent="",m=0;while(e=l[m++])if((!d||-1===n.inArray(e,d))&&(i=n.contains(e.ownerDocument,e),f=ob(k.appendChild(e),"script"),i&&mb(f),c)){j=0;while(e=f[j++])fb.test(e.type||"")&&c.push(e)}return k},cleanData:function(a){for(var b,c,d,e,f=n.event.special,g=0;void 0!==(c=a[g]);g++){if(n.acceptData(c)&&(e=c[L.expando],e&&(b=L.cache[e]))){if(b.events)for(d in b.events)f[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);L.cache[e]&&delete L.cache[e]}delete M.cache[c[M.expando]]}}}),n.fn.extend({text:function(a){return J(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=a)})},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=jb(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=jb(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?n.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||n.cleanData(ob(c)),c.parentNode&&(b&&n.contains(c.ownerDocument,c)&&mb(ob(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(ob(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return J(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!db.test(a)&&!ib[(bb.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(ab,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(ob(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,n.cleanData(ob(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,m=this,o=l-1,p=a[0],q=n.isFunction(p);if(q||l>1&&"string"==typeof p&&!k.checkClone&&eb.test(p))return this.each(function(c){var d=m.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(c=n.buildFragment(a,this[0].ownerDocument,!1,this),d=c.firstChild,1===c.childNodes.length&&(c=d),d)){for(f=n.map(ob(c,"script"),kb),g=f.length;l>j;j++)h=c,j!==o&&(h=n.clone(h,!0,!0),g&&n.merge(f,ob(h,"script"))),b.call(this[j],h,j);if(g)for(i=f[f.length-1].ownerDocument,n.map(f,lb),j=0;g>j;j++)h=f[j],fb.test(h.type||"")&&!L.access(h,"globalEval")&&n.contains(i,h)&&(h.src?n._evalUrl&&n._evalUrl(h.src):n.globalEval(h.textContent.replace(hb,"")))}return this}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),g=e.length-1,h=0;g>=h;h++)c=h===g?this:this.clone(!0),n(e[h])[b](c),f.apply(d,c.get());return this.pushStack(d)}});var qb,rb={};function sb(b,c){var d,e=n(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:n.css(e[0],"display");return e.detach(),f}function tb(a){var b=l,c=rb[a];return c||(c=sb(a,b),"none"!==c&&c||(qb=(qb||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=qb[0].contentDocument,b.write(),b.close(),c=sb(a,b),qb.detach()),rb[a]=c),c}var ub=/^margin/,vb=new RegExp("^("+Q+")(?!px)[a-z%]+$","i"),wb=function(a){return a.ownerDocument.defaultView.getComputedStyle(a,null)};function xb(a,b,c){var d,e,f,g,h=a.style;return c=c||wb(a),c&&(g=c.getPropertyValue(b)||c[b]),c&&(""!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),vb.test(g)&&ub.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+"":g}function yb(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d=l.documentElement,e=l.createElement("div"),f=l.createElement("div");if(f.style){f.style.backgroundClip="content-box",f.cloneNode(!0).style.backgroundClip="",k.clearCloneStyle="content-box"===f.style.backgroundClip,e.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",e.appendChild(f);function g(){f.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",f.innerHTML="",d.appendChild(e);var g=a.getComputedStyle(f,null);b="1%"!==g.top,c="4px"===g.width,d.removeChild(e)}a.getComputedStyle&&n.extend(k,{pixelPosition:function(){return g(),b},boxSizingReliable:function(){return null==c&&g(),c},reliableMarginRight:function(){var b,c=f.appendChild(l.createElement("div"));return c.style.cssText=f.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",f.style.width="1px",d.appendChild(e),b=!parseFloat(a.getComputedStyle(c,null).marginRight),d.removeChild(e),b}})}}(),n.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var zb=/^(none|table(?!-c[ea]).+)/,Ab=new RegExp("^("+Q+")(.*)$","i"),Bb=new RegExp("^([+-])=("+Q+")","i"),Cb={position:"absolute",visibility:"hidden",display:"block"},Db={letterSpacing:"0",fontWeight:"400"},Eb=["Webkit","O","Moz","ms"];function Fb(a,b){if(b in a)return b;var c=b[0].toUpperCase()+b.slice(1),d=b,e=Eb.length;while(e--)if(b=Eb[e]+c,b in a)return b;return d}function Gb(a,b,c){var d=Ab.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Hb(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+R[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+R[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+R[f]+"Width",!0,e))):(g+=n.css(a,"padding"+R[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+R[f]+"Width",!0,e)));return g}function Ib(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=wb(a),g="border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=xb(a,b,f),(0>e||null==e)&&(e=a.style[b]),vb.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Hb(a,b,c||(g?"border":"content"),d,f)+"px"}function Jb(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=L.get(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&S(d)&&(f[g]=L.access(d,"olddisplay",tb(d.nodeName)))):(e=S(d),"none"===c&&e||L.set(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=xb(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Fb(i,h)),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=Bb.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(n.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||n.cssNumber[h]||(c+="px"),k.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Fb(a.style,h)),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=xb(a,b,d)),"normal"===e&&b in Db&&(e=Db[b]),""===c||c?(f=parseFloat(e),c===!0||n.isNumeric(f)?f||0:e):e}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?zb.test(n.css(a,"display"))&&0===a.offsetWidth?n.swap(a,Cb,function(){return Ib(a,b,d)}):Ib(a,b,d):void 0},set:function(a,c,d){var e=d&&wb(a);return Gb(a,c,d?Hb(a,b,d,"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),n.cssHooks.marginRight=yb(k.reliableMarginRight,function(a,b){return b?n.swap(a,{display:"inline-block"},xb,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+R[d]+b]=f[d]||f[d-2]||f[0];return e}},ub.test(a)||(n.cssHooks[a+b].set=Gb)}),n.fn.extend({css:function(a,b){return J(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=wb(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Jb(this,!0)},hide:function(){return Jb(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){S(this)?n(this).show():n(this).hide()})}});function Kb(a,b,c,d,e){return new Kb.prototype.init(a,b,c,d,e)}n.Tween=Kb,Kb.prototype={constructor:Kb,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=Kb.propHooks[this.prop];return a&&a.get?a.get(this):Kb.propHooks._default.get(this)},run:function(a){var b,c=Kb.propHooks[this.prop];return this.pos=b=this.options.duration?n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Kb.propHooks._default.set(this),this}},Kb.prototype.init.prototype=Kb.prototype,Kb.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[n.cssProps[a.prop]]||n.cssHooks[a.prop])?n.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Kb.propHooks.scrollTop=Kb.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},n.fx=Kb.prototype.init,n.fx.step={};var Lb,Mb,Nb=/^(?:toggle|show|hide)$/,Ob=new RegExp("^(?:([+-])=|)("+Q+")([a-z%]*)$","i"),Pb=/queueHooks$/,Qb=[Vb],Rb={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=Ob.exec(b),f=e&&e[3]||(n.cssNumber[a]?"":"px"),g=(n.cssNumber[a]||"px"!==f&&+d)&&Ob.exec(n.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,n.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function Sb(){return setTimeout(function(){Lb=void 0}),Lb=n.now()}function Tb(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=R[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function Ub(a,b,c){for(var d,e=(Rb[b]||[]).concat(Rb["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Vb(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&S(a),q=L.get(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,"display"),k="none"===j?L.get(a,"olddisplay")||tb(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(o.display="inline-block")),c.overflow&&(o.overflow="hidden",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Nb.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))"inline"===("none"===j?tb(a.nodeName):j)&&(o.display=j);else{q?"hidden"in q&&(p=q.hidden):q=L.access(a,"fxshow",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;L.remove(a,"fxshow");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ub(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function Wb(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function Xb(a,b,c){var d,e,f=0,g=Qb.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=Lb||Sb(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:Lb||Sb(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(Wb(k,j.opts.specialEasing);g>f;f++)if(d=Qb[f].call(j,a,k,j.opts))return d;return n.map(k,Ub,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(Xb,{tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],Rb[c]=Rb[c]||[],Rb[c].unshift(b)},prefilter:function(a,b){b?Qb.unshift(a):Qb.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(S).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=Xb(this,n.extend({},a),f);(e||L.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=L.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Pb.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=L.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(Tb(b,!0),a,d,e)}}),n.each({slideDown:Tb("show"),slideUp:Tb("hide"),slideToggle:Tb("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(Lb=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),Lb=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Mb||(Mb=setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){clearInterval(Mb),Mb=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(a,b){return a=n.fx?n.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a=l.createElement("input"),b=l.createElement("select"),c=b.appendChild(l.createElement("option"));a.type="checkbox",k.checkOn=""!==a.value,k.optSelected=c.selected,b.disabled=!0,k.optDisabled=!c.disabled,a=l.createElement("input"),a.value="t",a.type="radio",k.radioValue="t"===a.value}();var Yb,Zb,$b=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return J(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===U?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),d=n.attrHooks[b]||(n.expr.match.bool.test(b)?Zb:Yb)),void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=n.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void n.removeAttr(a,b))
},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),Zb={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=$b[b]||n.find.attr;$b[b]=function(a,b,d){var e,f;return d||(f=$b[b],$b[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,$b[b]=f),e}});var _b=/^(?:input|select|textarea|button)$/i;n.fn.extend({prop:function(a,b){return J(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!n.isXMLDoc(a),f&&(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){return a.hasAttribute("tabindex")||_b.test(a.nodeName)||a.href?a.tabIndex:-1}}}}),k.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this});var ac=/[\t\r\n\f]/g;n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h="string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ac," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=n.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0===arguments.length||"string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ac," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?n.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(n.isFunction(a)?function(c){n(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=n(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===U||"boolean"===c)&&(this.className&&L.set(this,"__className__",this.className),this.className=this.className||a===!1?"":L.get(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(ac," ").indexOf(b)>=0)return!0;return!1}});var bc=/\r/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(bc,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(d.value,f)>=0)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>=0:void 0}},k.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var cc=n.now(),dc=/\?/;n.parseJSON=function(a){return JSON.parse(a+"")},n.parseXML=function(a){var b,c;if(!a||"string"!=typeof a)return null;try{c=new DOMParser,b=c.parseFromString(a,"text/xml")}catch(d){b=void 0}return(!b||b.getElementsByTagName("parsererror").length)&&n.error("Invalid XML: "+a),b};var ec,fc,gc=/#.*$/,hc=/([?&])_=[^&]*/,ic=/^(.*?):[ \t]*([^\r\n]*)$/gm,jc=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,kc=/^(?:GET|HEAD)$/,lc=/^\/\//,mc=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,nc={},oc={},pc="*/".concat("*");try{fc=location.href}catch(qc){fc=l.createElement("a"),fc.href="",fc=fc.href}ec=mc.exec(fc.toLowerCase())||[];function rc(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(E)||[];if(n.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function sc(a,b,c,d){var e={},f=a===oc;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function tc(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function uc(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function vc(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:fc,type:"GET",isLocal:jc.test(ec[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":pc,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?tc(tc(a,n.ajaxSettings),b):tc(n.ajaxSettings,a)},ajaxPrefilter:rc(nc),ajaxTransport:rc(oc),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=n.ajaxSetup({},b),l=k.context||k,m=k.context&&(l.nodeType||l.jquery)?n(l):n.event,o=n.Deferred(),p=n.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!f){f={};while(b=ic.exec(e))f[b[1].toLowerCase()]=b[2]}b=f[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?e:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return c&&c.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||fc)+"").replace(gc,"").replace(lc,ec[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=n.trim(k.dataType||"*").toLowerCase().match(E)||[""],null==k.crossDomain&&(h=mc.exec(k.url.toLowerCase()),k.crossDomain=!(!h||h[1]===ec[1]&&h[2]===ec[2]&&(h[3]||("http:"===h[1]?"80":"443"))===(ec[3]||("http:"===ec[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=n.param(k.data,k.traditional)),sc(nc,k,b,v),2===t)return v;i=k.global,i&&0===n.active++&&n.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!kc.test(k.type),d=k.url,k.hasContent||(k.data&&(d=k.url+=(dc.test(d)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=hc.test(d)?d.replace(hc,"$1_="+cc++):d+(dc.test(d)?"&":"?")+"_="+cc++)),k.ifModified&&(n.lastModified[d]&&v.setRequestHeader("If-Modified-Since",n.lastModified[d]),n.etag[d]&&v.setRequestHeader("If-None-Match",n.etag[d])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+pc+"; q=0.01":""):k.accepts["*"]);for(j in k.headers)v.setRequestHeader(j,k.headers[j]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(j in{success:1,error:1,complete:1})v[j](k[j]);if(c=sc(oc,k,b,v)){v.readyState=1,i&&m.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,c.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,f,h){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),c=void 0,e=h||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,f&&(u=uc(k,v,f)),u=vc(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(n.lastModified[d]=w),w=v.getResponseHeader("etag"),w&&(n.etag[d]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,i&&m.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),i&&(m.trigger("ajaxComplete",[v,k]),--n.active||n.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return this.each(n.isFunction(a)?function(b){n(this).wrapInner(a.call(this,b))}:function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var wc=/%20/g,xc=/\[\]$/,yc=/\r?\n/g,zc=/^(?:submit|button|image|reset|file)$/i,Ac=/^(?:input|select|textarea|keygen)/i;function Bc(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||xc.test(a)?d(a,e):Bc(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Bc(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Bc(c,a[c],b,e);return d.join("&").replace(wc,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&Ac.test(this.nodeName)&&!zc.test(a)&&(this.checked||!T.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(yc,"\r\n")}}):{name:b.name,value:c.replace(yc,"\r\n")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(a){}};var Cc=0,Dc={},Ec={0:200,1223:204},Fc=n.ajaxSettings.xhr();a.ActiveXObject&&n(a).on("unload",function(){for(var a in Dc)Dc[a]()}),k.cors=!!Fc&&"withCredentials"in Fc,k.ajax=Fc=!!Fc,n.ajaxTransport(function(a){var b;return k.cors||Fc&&!a.crossDomain?{send:function(c,d){var e,f=a.xhr(),g=++Cc;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)f.setRequestHeader(e,c[e]);b=function(a){return function(){b&&(delete Dc[g],b=f.onload=f.onerror=null,"abort"===a?f.abort():"error"===a?d(f.status,f.statusText):d(Ec[f.status]||f.status,f.statusText,"string"==typeof f.responseText?{text:f.responseText}:void 0,f.getAllResponseHeaders()))}},f.onload=b(),f.onerror=b("error"),b=Dc[g]=b("abort");try{f.send(a.hasContent&&a.data||null)}catch(h){if(b)throw h}},abort:function(){b&&b()}}:void 0}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(d,e){b=n("<script>").prop({async:!0,charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&e("error"===a.type?404:200,a.type)}),l.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Gc=[],Hc=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Gc.pop()||n.expando+"_"+cc++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Hc.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Hc.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Hc,"$1"+e):b.jsonp!==!1&&(b.url+=(dc.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Gc.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||l;var d=v.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=n.buildFragment([a],b,e),e&&e.length&&n(e).remove(),n.merge([],d.childNodes))};var Ic=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&Ic)return Ic.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e,dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,f||[a.responseText,b,a])}),this},n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};var Jc=a.document.documentElement;function Kc(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(typeof d.getBoundingClientRect!==U&&(e=d.getBoundingClientRect()),c=Kc(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===n.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(d=a.offset()),d.top+=n.css(a[0],"borderTopWidth",!0),d.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-d.top-n.css(c,"marginTop",!0),left:b.left-d.left-n.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||Jc;while(a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Jc})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(b,c){var d="pageYOffset"===c;n.fn[b]=function(e){return J(this,function(b,e,f){var g=Kc(b);return void 0===f?g?g[c]:b[e]:void(g?g.scrollTo(d?a.pageXOffset:f,d?f:a.pageYOffset):b[e]=f)},b,e,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=yb(k.pixelPosition,function(a,c){return c?(c=xb(a,b),vb.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return J(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var Lc=a.jQuery,Mc=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Mc),b&&a.jQuery===n&&(a.jQuery=Lc),n},typeof b===U&&(a.jQuery=a.$=n),n});

/*!
 * VERSION: beta 1.9.4
 * DATE: 2014-07-17
 * UPDATES AND DOCS AT: http://www.greensock.com
 *
 * @license Copyright (c) 2008-2014, GreenSock. All rights reserved.
 * This work is subject to the terms at http://www.greensock.com/terms_of_use.html or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/
var _gsScope="undefined"!=typeof module&&module.exports&&"undefined"!=typeof global?global:this||window;(_gsScope._gsQueue||(_gsScope._gsQueue=[])).push(function(){"use strict";_gsScope._gsDefine("easing.Back",["easing.Ease"],function(t){var e,i,s,r=_gsScope.GreenSockGlobals||_gsScope,n=r.com.greensock,a=2*Math.PI,o=Math.PI/2,h=n._class,l=function(e,i){var s=h("easing."+e,function(){},!0),r=s.prototype=new t;return r.constructor=s,r.getRatio=i,s},_=t.register||function(){},u=function(t,e,i,s){var r=h("easing."+t,{easeOut:new e,easeIn:new i,easeInOut:new s},!0);return _(r,t),r},c=function(t,e,i){this.t=t,this.v=e,i&&(this.next=i,i.prev=this,this.c=i.v-e,this.gap=i.t-t)},p=function(e,i){var s=h("easing."+e,function(t){this._p1=t||0===t?t:1.70158,this._p2=1.525*this._p1},!0),r=s.prototype=new t;return r.constructor=s,r.getRatio=i,r.config=function(t){return new s(t)},s},f=u("Back",p("BackOut",function(t){return(t-=1)*t*((this._p1+1)*t+this._p1)+1}),p("BackIn",function(t){return t*t*((this._p1+1)*t-this._p1)}),p("BackInOut",function(t){return 1>(t*=2)?.5*t*t*((this._p2+1)*t-this._p2):.5*((t-=2)*t*((this._p2+1)*t+this._p2)+2)})),m=h("easing.SlowMo",function(t,e,i){e=e||0===e?e:.7,null==t?t=.7:t>1&&(t=1),this._p=1!==t?e:0,this._p1=(1-t)/2,this._p2=t,this._p3=this._p1+this._p2,this._calcEnd=i===!0},!0),d=m.prototype=new t;return d.constructor=m,d.getRatio=function(t){var e=t+(.5-t)*this._p;return this._p1>t?this._calcEnd?1-(t=1-t/this._p1)*t:e-(t=1-t/this._p1)*t*t*t*e:t>this._p3?this._calcEnd?1-(t=(t-this._p3)/this._p1)*t:e+(t-e)*(t=(t-this._p3)/this._p1)*t*t*t:this._calcEnd?1:e},m.ease=new m(.7,.7),d.config=m.config=function(t,e,i){return new m(t,e,i)},e=h("easing.SteppedEase",function(t){t=t||1,this._p1=1/t,this._p2=t+1},!0),d=e.prototype=new t,d.constructor=e,d.getRatio=function(t){return 0>t?t=0:t>=1&&(t=.999999999),(this._p2*t>>0)*this._p1},d.config=e.config=function(t){return new e(t)},i=h("easing.RoughEase",function(e){e=e||{};for(var i,s,r,n,a,o,h=e.taper||"none",l=[],_=0,u=0|(e.points||20),p=u,f=e.randomize!==!1,m=e.clamp===!0,d=e.template instanceof t?e.template:null,g="number"==typeof e.strength?.4*e.strength:.4;--p>-1;)i=f?Math.random():1/u*p,s=d?d.getRatio(i):i,"none"===h?r=g:"out"===h?(n=1-i,r=n*n*g):"in"===h?r=i*i*g:.5>i?(n=2*i,r=.5*n*n*g):(n=2*(1-i),r=.5*n*n*g),f?s+=Math.random()*r-.5*r:p%2?s+=.5*r:s-=.5*r,m&&(s>1?s=1:0>s&&(s=0)),l[_++]={x:i,y:s};for(l.sort(function(t,e){return t.x-e.x}),o=new c(1,1,null),p=u;--p>-1;)a=l[p],o=new c(a.x,a.y,o);this._prev=new c(0,0,0!==o.t?o:o.next)},!0),d=i.prototype=new t,d.constructor=i,d.getRatio=function(t){var e=this._prev;if(t>e.t){for(;e.next&&t>=e.t;)e=e.next;e=e.prev}else for(;e.prev&&e.t>=t;)e=e.prev;return this._prev=e,e.v+(t-e.t)/e.gap*e.c},d.config=function(t){return new i(t)},i.ease=new i,u("Bounce",l("BounceOut",function(t){return 1/2.75>t?7.5625*t*t:2/2.75>t?7.5625*(t-=1.5/2.75)*t+.75:2.5/2.75>t?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}),l("BounceIn",function(t){return 1/2.75>(t=1-t)?1-7.5625*t*t:2/2.75>t?1-(7.5625*(t-=1.5/2.75)*t+.75):2.5/2.75>t?1-(7.5625*(t-=2.25/2.75)*t+.9375):1-(7.5625*(t-=2.625/2.75)*t+.984375)}),l("BounceInOut",function(t){var e=.5>t;return t=e?1-2*t:2*t-1,t=1/2.75>t?7.5625*t*t:2/2.75>t?7.5625*(t-=1.5/2.75)*t+.75:2.5/2.75>t?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,e?.5*(1-t):.5*t+.5})),u("Circ",l("CircOut",function(t){return Math.sqrt(1-(t-=1)*t)}),l("CircIn",function(t){return-(Math.sqrt(1-t*t)-1)}),l("CircInOut",function(t){return 1>(t*=2)?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)})),s=function(e,i,s){var r=h("easing."+e,function(t,e){this._p1=t||1,this._p2=e||s,this._p3=this._p2/a*(Math.asin(1/this._p1)||0)},!0),n=r.prototype=new t;return n.constructor=r,n.getRatio=i,n.config=function(t,e){return new r(t,e)},r},u("Elastic",s("ElasticOut",function(t){return this._p1*Math.pow(2,-10*t)*Math.sin((t-this._p3)*a/this._p2)+1},.3),s("ElasticIn",function(t){return-(this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*a/this._p2))},.3),s("ElasticInOut",function(t){return 1>(t*=2)?-.5*this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*a/this._p2):.5*this._p1*Math.pow(2,-10*(t-=1))*Math.sin((t-this._p3)*a/this._p2)+1},.45)),u("Expo",l("ExpoOut",function(t){return 1-Math.pow(2,-10*t)}),l("ExpoIn",function(t){return Math.pow(2,10*(t-1))-.001}),l("ExpoInOut",function(t){return 1>(t*=2)?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*(t-1)))})),u("Sine",l("SineOut",function(t){return Math.sin(t*o)}),l("SineIn",function(t){return-Math.cos(t*o)+1}),l("SineInOut",function(t){return-.5*(Math.cos(Math.PI*t)-1)})),h("easing.EaseLookup",{find:function(e){return t.map[e]}},!0),_(r.SlowMo,"SlowMo","ease,"),_(i,"RoughEase","ease,"),_(e,"SteppedEase","ease,"),f},!0)}),_gsScope._gsDefine&&_gsScope._gsQueue.pop()();
/*!
 * VERSION: beta 1.10.3
 * DATE: 2013-09-02
 * UPDATES AND DOCS AT: http://www.greensock.com
 *
 * @license Copyright (c) 2008-2013, GreenSock. All rights reserved.
 * This work is subject to the terms at http://www.greensock.com/terms_of_use.html or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */
(window._gsQueue||(window._gsQueue=[])).push(function(){"use strict";window._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(t,e){var i,s,r,n,a=function(){t.call(this,"css"),this._overwriteProps.length=0,this.setRatio=a.prototype.setRatio},o={},l=a.prototype=new t("css");l.constructor=a,a.version="1.10.3",a.API=2,a.defaultTransformPerspective=0,l="px",a.suffixMap={top:l,right:l,bottom:l,left:l,width:l,height:l,fontSize:l,padding:l,margin:l,perspective:l};var h,u,_,p,f,c,d=/(?:\d|\-\d|\.\d|\-\.\d)+/g,m=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,g=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,v=/[^\d\-\.]/g,y=/(?:\d|\-|\+|=|#|\.)*/g,T=/opacity *= *([^)]*)/,w=/opacity:([^;]*)/,x=/alpha\(opacity *=.+?\)/i,b=/^(rgb|hsl)/,P=/([A-Z])/g,S=/-([a-z])/gi,k=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,R=function(t,e){return e.toUpperCase()},C=/(?:Left|Right|Width)/i,O=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,A=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,D=/,(?=[^\)]*(?:\(|$))/gi,M=Math.PI/180,L=180/Math.PI,I={},X=document,N=X.createElement("div"),F=X.createElement("img"),E=a._internals={_specialProps:o},Y=navigator.userAgent,z=function(){var t,e=Y.indexOf("Android"),i=X.createElement("div");return _=-1!==Y.indexOf("Safari")&&-1===Y.indexOf("Chrome")&&(-1===e||Number(Y.substr(e+8,1))>3),f=_&&6>Number(Y.substr(Y.indexOf("Version/")+8,1)),p=-1!==Y.indexOf("Firefox"),/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(Y),c=parseFloat(RegExp.$1),i.innerHTML="<a style='top:1px;opacity:.55;'>a</a>",t=i.getElementsByTagName("a")[0],t?/^0.55/.test(t.style.opacity):!1}(),U=function(t){return T.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1},B=function(t){window.console&&console.log(t)},j="",V="",q=function(t,e){e=e||N;var i,s,r=e.style;if(void 0!==r[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),i=["O","Moz","ms","Ms","Webkit"],s=5;--s>-1&&void 0===r[i[s]+t];);return s>=0?(V=3===s?"ms":i[s],j="-"+V.toLowerCase()+"-",V+t):null},W=X.defaultView?X.defaultView.getComputedStyle:function(){},Q=a.getStyle=function(t,e,i,s,r){var n;return z||"opacity"!==e?(!s&&t.style[e]?n=t.style[e]:(i=i||W(t,null))?(t=i.getPropertyValue(e.replace(P,"-$1").toLowerCase()),n=t||i.length?t:i[e]):t.currentStyle&&(n=t.currentStyle[e]),null==r||n&&"none"!==n&&"auto"!==n&&"auto auto"!==n?n:r):U(t)},Z=function(t,e,i,s,r){if("px"===s||!s)return i;if("auto"===s||!i)return 0;var n,a=C.test(e),o=t,l=N.style,h=0>i;return h&&(i=-i),"%"===s&&-1!==e.indexOf("border")?n=i/100*(a?t.clientWidth:t.clientHeight):(l.cssText="border-style:solid;border-width:0;position:absolute;line-height:0;","%"!==s&&o.appendChild?l[a?"borderLeftWidth":"borderTopWidth"]=i+s:(o=t.parentNode||X.body,l[a?"width":"height"]=i+s),o.appendChild(N),n=parseFloat(N[a?"offsetWidth":"offsetHeight"]),o.removeChild(N),0!==n||r||(n=Z(t,e,i,s,!0))),h?-n:n},H=function(t,e,i){if("absolute"!==Q(t,"position",i))return 0;var s="left"===e?"Left":"Top",r=Q(t,"margin"+s,i);return t["offset"+s]-(Z(t,e,parseFloat(r),r.replace(y,""))||0)},$=function(t,e){var i,s,r={};if(e=e||W(t,null))if(i=e.length)for(;--i>-1;)r[e[i].replace(S,R)]=e.getPropertyValue(e[i]);else for(i in e)r[i]=e[i];else if(e=t.currentStyle||t.style)for(i in e)r[i.replace(S,R)]=e[i];return z||(r.opacity=U(t)),s=be(t,e,!1),r.rotation=s.rotation*L,r.skewX=s.skewX*L,r.scaleX=s.scaleX,r.scaleY=s.scaleY,r.x=s.x,r.y=s.y,xe&&(r.z=s.z,r.rotationX=s.rotationX*L,r.rotationY=s.rotationY*L,r.scaleZ=s.scaleZ),r.filters&&delete r.filters,r},G=function(t,e,i,s,r){var n,a,o,l={},h=t.style;for(a in i)"cssText"!==a&&"length"!==a&&isNaN(a)&&(e[a]!==(n=i[a])||r&&r[a])&&-1===a.indexOf("Origin")&&("number"==typeof n||"string"==typeof n)&&(l[a]="auto"!==n||"left"!==a&&"top"!==a?""!==n&&"auto"!==n&&"none"!==n||"string"!=typeof e[a]||""===e[a].replace(v,"")?n:0:H(t,a),void 0!==h[a]&&(o=new _e(h,a,h[a],o)));if(s)for(a in s)"className"!==a&&(l[a]=s[a]);return{difs:l,firstMPT:o}},K={width:["Left","Right"],height:["Top","Bottom"]},J=["marginLeft","marginRight","marginTop","marginBottom"],te=function(t,e,i){var s=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),r=K[e],n=r.length;for(i=i||W(t,null);--n>-1;)s-=parseFloat(Q(t,"padding"+r[n],i,!0))||0,s-=parseFloat(Q(t,"border"+r[n]+"Width",i,!0))||0;return s},ee=function(t,e){(null==t||""===t||"auto"===t||"auto auto"===t)&&(t="0 0");var i=t.split(" "),s=-1!==t.indexOf("left")?"0%":-1!==t.indexOf("right")?"100%":i[0],r=-1!==t.indexOf("top")?"0%":-1!==t.indexOf("bottom")?"100%":i[1];return null==r?r="0":"center"===r&&(r="50%"),("center"===s||isNaN(parseFloat(s))&&-1===(s+"").indexOf("="))&&(s="50%"),e&&(e.oxp=-1!==s.indexOf("%"),e.oyp=-1!==r.indexOf("%"),e.oxr="="===s.charAt(1),e.oyr="="===r.charAt(1),e.ox=parseFloat(s.replace(v,"")),e.oy=parseFloat(r.replace(v,""))),s+" "+r+(i.length>2?" "+i[2]:"")},ie=function(t,e){return"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)},se=function(t,e){return null==t?e:"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*Number(t.substr(2))+e:parseFloat(t)},re=function(t,e,i,s){var r,n,a,o,l=1e-6;return null==t?o=e:"number"==typeof t?o=t*M:(r=2*Math.PI,n=t.split("_"),a=Number(n[0].replace(v,""))*(-1===t.indexOf("rad")?M:1)-("="===t.charAt(1)?0:e),n.length&&(s&&(s[i]=e+a),-1!==t.indexOf("short")&&(a%=r,a!==a%(r/2)&&(a=0>a?a+r:a-r)),-1!==t.indexOf("_cw")&&0>a?a=(a+9999999999*r)%r-(0|a/r)*r:-1!==t.indexOf("ccw")&&a>0&&(a=(a-9999999999*r)%r-(0|a/r)*r)),o=e+a),l>o&&o>-l&&(o=0),o},ne={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},ae=function(t,e,i){return t=0>t?t+1:t>1?t-1:t,0|255*(1>6*t?e+6*(i-e)*t:.5>t?i:2>3*t?e+6*(i-e)*(2/3-t):e)+.5},oe=function(t){var e,i,s,r,n,a;return t&&""!==t?"number"==typeof t?[t>>16,255&t>>8,255&t]:(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),ne[t]?ne[t]:"#"===t.charAt(0)?(4===t.length&&(e=t.charAt(1),i=t.charAt(2),s=t.charAt(3),t="#"+e+e+i+i+s+s),t=parseInt(t.substr(1),16),[t>>16,255&t>>8,255&t]):"hsl"===t.substr(0,3)?(t=t.match(d),r=Number(t[0])%360/360,n=Number(t[1])/100,a=Number(t[2])/100,i=.5>=a?a*(n+1):a+n-a*n,e=2*a-i,t.length>3&&(t[3]=Number(t[3])),t[0]=ae(r+1/3,e,i),t[1]=ae(r,e,i),t[2]=ae(r-1/3,e,i),t):(t=t.match(d)||ne.transparent,t[0]=Number(t[0]),t[1]=Number(t[1]),t[2]=Number(t[2]),t.length>3&&(t[3]=Number(t[3])),t)):ne.black},le="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#.+?\\b";for(l in ne)le+="|"+l+"\\b";le=RegExp(le+")","gi");var he=function(t,e,i,s){if(null==t)return function(t){return t};var r,n=e?(t.match(le)||[""])[0]:"",a=t.split(n).join("").match(g)||[],o=t.substr(0,t.indexOf(a[0])),l=")"===t.charAt(t.length-1)?")":"",h=-1!==t.indexOf(" ")?" ":",",u=a.length,_=u>0?a[0].replace(d,""):"";return u?r=e?function(t){var e,p,f,c;if("number"==typeof t)t+=_;else if(s&&D.test(t)){for(c=t.replace(D,"|").split("|"),f=0;c.length>f;f++)c[f]=r(c[f]);return c.join(",")}if(e=(t.match(le)||[n])[0],p=t.split(e).join("").match(g)||[],f=p.length,u>f--)for(;u>++f;)p[f]=i?p[0|(f-1)/2]:a[f];return o+p.join(h)+h+e+l+(-1!==t.indexOf("inset")?" inset":"")}:function(t){var e,n,p;if("number"==typeof t)t+=_;else if(s&&D.test(t)){for(n=t.replace(D,"|").split("|"),p=0;n.length>p;p++)n[p]=r(n[p]);return n.join(",")}if(e=t.match(g)||[],p=e.length,u>p--)for(;u>++p;)e[p]=i?e[0|(p-1)/2]:a[p];return o+e.join(h)+l}:function(t){return t}},ue=function(t){return t=t.split(","),function(e,i,s,r,n,a,o){var l,h=(i+"").split(" ");for(o={},l=0;4>l;l++)o[t[l]]=h[l]=h[l]||h[(l-1)/2>>0];return r.parse(e,o,n,a)}},_e=(E._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,i,s,r,n=this.data,a=n.proxy,o=n.firstMPT,l=1e-6;o;)e=a[o.v],o.r?e=e>0?0|e+.5:0|e-.5:l>e&&e>-l&&(e=0),o.t[o.p]=e,o=o._next;if(n.autoRotate&&(n.autoRotate.rotation=a.rotation),1===t)for(o=n.firstMPT;o;){if(i=o.t,i.type){if(1===i.type){for(r=i.xs0+i.s+i.xs1,s=1;i.l>s;s++)r+=i["xn"+s]+i["xs"+(s+1)];i.e=r}}else i.e=i.s+i.xs0;o=o._next}},function(t,e,i,s,r){this.t=t,this.p=e,this.v=i,this.r=r,s&&(s._prev=this,this._next=s)}),pe=(E._parseToProxy=function(t,e,i,s,r,n){var a,o,l,h,u,_=s,p={},f={},c=i._transform,d=I;for(i._transform=null,I=e,s=u=i.parse(t,e,s,r),I=d,n&&(i._transform=c,_&&(_._prev=null,_._prev&&(_._prev._next=null)));s&&s!==_;){if(1>=s.type&&(o=s.p,f[o]=s.s+s.c,p[o]=s.s,n||(h=new _e(s,"s",o,h,s.r),s.c=0),1===s.type))for(a=s.l;--a>0;)l="xn"+a,o=s.p+"_"+l,f[o]=s.data[l],p[o]=s[l],n||(h=new _e(s,l,o,h,s.rxp[l]));s=s._next}return{proxy:p,end:f,firstMPT:h,pt:u}},E.CSSPropTween=function(t,e,s,r,a,o,l,h,u,_,p){this.t=t,this.p=e,this.s=s,this.c=r,this.n=l||e,t instanceof pe||n.push(this.n),this.r=h,this.type=o||0,u&&(this.pr=u,i=!0),this.b=void 0===_?s:_,this.e=void 0===p?s+r:p,a&&(this._next=a,a._prev=this)}),fe=a.parseComplex=function(t,e,i,s,r,n,a,o,l,u){i=i||n||"",a=new pe(t,e,0,0,a,u?2:1,null,!1,o,i,s),s+="";var _,p,f,c,g,v,y,T,w,x,P,S,k=i.split(", ").join(",").split(" "),R=s.split(", ").join(",").split(" "),C=k.length,O=h!==!1;for((-1!==s.indexOf(",")||-1!==i.indexOf(","))&&(k=k.join(" ").replace(D,", ").split(" "),R=R.join(" ").replace(D,", ").split(" "),C=k.length),C!==R.length&&(k=(n||"").split(" "),C=k.length),a.plugin=l,a.setRatio=u,_=0;C>_;_++)if(c=k[_],g=R[_],T=parseFloat(c),T||0===T)a.appendXtra("",T,ie(g,T),g.replace(m,""),O&&-1!==g.indexOf("px"),!0);else if(r&&("#"===c.charAt(0)||ne[c]||b.test(c)))S=","===g.charAt(g.length-1)?"),":")",c=oe(c),g=oe(g),w=c.length+g.length>6,w&&!z&&0===g[3]?(a["xs"+a.l]+=a.l?" transparent":"transparent",a.e=a.e.split(R[_]).join("transparent")):(z||(w=!1),a.appendXtra(w?"rgba(":"rgb(",c[0],g[0]-c[0],",",!0,!0).appendXtra("",c[1],g[1]-c[1],",",!0).appendXtra("",c[2],g[2]-c[2],w?",":S,!0),w&&(c=4>c.length?1:c[3],a.appendXtra("",c,(4>g.length?1:g[3])-c,S,!1)));else if(v=c.match(d)){if(y=g.match(m),!y||y.length!==v.length)return a;for(f=0,p=0;v.length>p;p++)P=v[p],x=c.indexOf(P,f),a.appendXtra(c.substr(f,x-f),Number(P),ie(y[p],P),"",O&&"px"===c.substr(x+P.length,2),0===p),f=x+P.length;a["xs"+a.l]+=c.substr(f)}else a["xs"+a.l]+=a.l?" "+c:c;if(-1!==s.indexOf("=")&&a.data){for(S=a.xs0+a.data.s,_=1;a.l>_;_++)S+=a["xs"+_]+a.data["xn"+_];a.e=S+a["xs"+_]}return a.l||(a.type=-1,a.xs0=a.e),a.xfirst||a},ce=9;for(l=pe.prototype,l.l=l.pr=0;--ce>0;)l["xn"+ce]=0,l["xs"+ce]="";l.xs0="",l._next=l._prev=l.xfirst=l.data=l.plugin=l.setRatio=l.rxp=null,l.appendXtra=function(t,e,i,s,r,n){var a=this,o=a.l;return a["xs"+o]+=n&&o?" "+t:t||"",i||0===o||a.plugin?(a.l++,a.type=a.setRatio?2:1,a["xs"+a.l]=s||"",o>0?(a.data["xn"+o]=e+i,a.rxp["xn"+o]=r,a["xn"+o]=e,a.plugin||(a.xfirst=new pe(a,"xn"+o,e,i,a.xfirst||a,0,a.n,r,a.pr),a.xfirst.xs0=0),a):(a.data={s:e+i},a.rxp={},a.s=e,a.c=i,a.r=r,a)):(a["xs"+o]+=e+(s||""),a)};var de=function(t,e){e=e||{},this.p=e.prefix?q(t)||t:t,o[t]=o[this.p]=this,this.format=e.formatter||he(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.pr=e.priority||0},me=E._registerComplexSpecialProp=function(t,e,i){"object"!=typeof e&&(e={parser:i});var s,r,n=t.split(","),a=e.defaultValue;for(i=i||[a],s=0;n.length>s;s++)e.prefix=0===s&&e.prefix,e.defaultValue=i[s]||a,r=new de(n[s],e)},ge=function(t){if(!o[t]){var e=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";me(t,{parser:function(t,i,s,r,n,a,l){var h=(window.GreenSockGlobals||window).com.greensock.plugins[e];return h?(h._cssRegister(),o[s].parse(t,i,s,r,n,a,l)):(B("Error: "+e+" js file not loaded."),n)}})}};l=de.prototype,l.parseComplex=function(t,e,i,s,r,n){var a,o,l,h,u,_,p=this.keyword;if(this.multi&&(D.test(i)||D.test(e)?(o=e.replace(D,"|").split("|"),l=i.replace(D,"|").split("|")):p&&(o=[e],l=[i])),l){for(h=l.length>o.length?l.length:o.length,a=0;h>a;a++)e=o[a]=o[a]||this.dflt,i=l[a]=l[a]||this.dflt,p&&(u=e.indexOf(p),_=i.indexOf(p),u!==_&&(i=-1===_?l:o,i[a]+=" "+p));e=o.join(", "),i=l.join(", ")}return fe(t,this.p,e,i,this.clrs,this.dflt,s,this.pr,r,n)},l.parse=function(t,e,i,s,n,a){return this.parseComplex(t.style,this.format(Q(t,this.p,r,!1,this.dflt)),this.format(e),n,a)},a.registerSpecialProp=function(t,e,i){me(t,{parser:function(t,s,r,n,a,o){var l=new pe(t,r,0,0,a,2,r,!1,i);return l.plugin=o,l.setRatio=e(t,s,n._tween,r),l},priority:i})};var ve="scaleX,scaleY,scaleZ,x,y,z,skewX,rotation,rotationX,rotationY,perspective".split(","),ye=q("transform"),Te=j+"transform",we=q("transformOrigin"),xe=null!==q("perspective"),be=function(t,e,i,s){if(t._gsTransform&&i&&!s)return t._gsTransform;var r,n,o,l,h,u,_,p,f,c,d,m,g,v=i?t._gsTransform||{skewY:0}:{skewY:0},y=0>v.scaleX,T=2e-5,w=1e5,x=-Math.PI+1e-4,b=Math.PI-1e-4,P=xe?parseFloat(Q(t,we,e,!1,"0 0 0").split(" ")[2])||v.zOrigin||0:0;for(ye?r=Q(t,Te,e,!0):t.currentStyle&&(r=t.currentStyle.filter.match(O),r=r&&4===r.length?[r[0].substr(4),Number(r[2].substr(4)),Number(r[1].substr(4)),r[3].substr(4),v.x||0,v.y||0].join(","):""),n=(r||"").match(/(?:\-|\b)[\d\-\.e]+\b/gi)||[],o=n.length;--o>-1;)l=Number(n[o]),n[o]=(h=l-(l|=0))?(0|h*w+(0>h?-.5:.5))/w+l:l;if(16===n.length){var S=n[8],k=n[9],R=n[10],C=n[12],A=n[13],D=n[14];if(v.zOrigin&&(D=-v.zOrigin,C=S*D-n[12],A=k*D-n[13],D=R*D+v.zOrigin-n[14]),!i||s||null==v.rotationX){var M,L,I,X,N,F,E,Y=n[0],z=n[1],U=n[2],B=n[3],j=n[4],V=n[5],q=n[6],W=n[7],Z=n[11],H=v.rotationX=Math.atan2(q,R),$=x>H||H>b;H&&(X=Math.cos(-H),N=Math.sin(-H),M=j*X+S*N,L=V*X+k*N,I=q*X+R*N,S=j*-N+S*X,k=V*-N+k*X,R=q*-N+R*X,Z=W*-N+Z*X,j=M,V=L,q=I),H=v.rotationY=Math.atan2(S,Y),H&&(F=x>H||H>b,X=Math.cos(-H),N=Math.sin(-H),M=Y*X-S*N,L=z*X-k*N,I=U*X-R*N,k=z*N+k*X,R=U*N+R*X,Z=B*N+Z*X,Y=M,z=L,U=I),H=v.rotation=Math.atan2(z,V),H&&(E=x>H||H>b,X=Math.cos(-H),N=Math.sin(-H),Y=Y*X+j*N,L=z*X+V*N,V=z*-N+V*X,q=U*-N+q*X,z=L),E&&$?v.rotation=v.rotationX=0:E&&F?v.rotation=v.rotationY=0:F&&$&&(v.rotationY=v.rotationX=0),v.scaleX=(0|Math.sqrt(Y*Y+z*z)*w+.5)/w,v.scaleY=(0|Math.sqrt(V*V+k*k)*w+.5)/w,v.scaleZ=(0|Math.sqrt(q*q+R*R)*w+.5)/w,v.skewX=0,v.perspective=Z?1/(0>Z?-Z:Z):0,v.x=C,v.y=A,v.z=D}}else if(!(xe&&!s&&n.length&&v.x===n[4]&&v.y===n[5]&&(v.rotationX||v.rotationY)||void 0!==v.x&&"none"===Q(t,"display",e))){var G=n.length>=6,K=G?n[0]:1,J=n[1]||0,te=n[2]||0,ee=G?n[3]:1;v.x=n[4]||0,v.y=n[5]||0,u=Math.sqrt(K*K+J*J),_=Math.sqrt(ee*ee+te*te),p=K||J?Math.atan2(J,K):v.rotation||0,f=te||ee?Math.atan2(te,ee)+p:v.skewX||0,c=u-Math.abs(v.scaleX||0),d=_-Math.abs(v.scaleY||0),Math.abs(f)>Math.PI/2&&Math.abs(f)<1.5*Math.PI&&(y?(u*=-1,f+=0>=p?Math.PI:-Math.PI,p+=0>=p?Math.PI:-Math.PI):(_*=-1,f+=0>=f?Math.PI:-Math.PI)),m=(p-v.rotation)%Math.PI,g=(f-v.skewX)%Math.PI,(void 0===v.skewX||c>T||-T>c||d>T||-T>d||m>x&&b>m&&false|m*w||g>x&&b>g&&false|g*w)&&(v.scaleX=u,v.scaleY=_,v.rotation=p,v.skewX=f),xe&&(v.rotationX=v.rotationY=v.z=0,v.perspective=parseFloat(a.defaultTransformPerspective)||0,v.scaleZ=1)}v.zOrigin=P;for(o in v)T>v[o]&&v[o]>-T&&(v[o]=0);return i&&(t._gsTransform=v),v},Pe=function(t){var e,i,s=this.data,r=-s.rotation,n=r+s.skewX,a=1e5,o=(0|Math.cos(r)*s.scaleX*a)/a,l=(0|Math.sin(r)*s.scaleX*a)/a,h=(0|Math.sin(n)*-s.scaleY*a)/a,u=(0|Math.cos(n)*s.scaleY*a)/a,_=this.t.style,p=this.t.currentStyle;if(p){i=l,l=-h,h=-i,e=p.filter,_.filter="";var f,d,m=this.t.offsetWidth,g=this.t.offsetHeight,v="absolute"!==p.position,w="progid:DXImageTransform.Microsoft.Matrix(M11="+o+", M12="+l+", M21="+h+", M22="+u,x=s.x,b=s.y;if(null!=s.ox&&(f=(s.oxp?.01*m*s.ox:s.ox)-m/2,d=(s.oyp?.01*g*s.oy:s.oy)-g/2,x+=f-(f*o+d*l),b+=d-(f*h+d*u)),v?(f=m/2,d=g/2,w+=", Dx="+(f-(f*o+d*l)+x)+", Dy="+(d-(f*h+d*u)+b)+")"):w+=", sizingMethod='auto expand')",_.filter=-1!==e.indexOf("DXImageTransform.Microsoft.Matrix(")?e.replace(A,w):w+" "+e,(0===t||1===t)&&1===o&&0===l&&0===h&&1===u&&(v&&-1===w.indexOf("Dx=0, Dy=0")||T.test(e)&&100!==parseFloat(RegExp.$1)||-1===e.indexOf("gradient("&&e.indexOf("Alpha"))&&_.removeAttribute("filter")),!v){var P,S,k,R=8>c?1:-1;for(f=s.ieOffsetX||0,d=s.ieOffsetY||0,s.ieOffsetX=Math.round((m-((0>o?-o:o)*m+(0>l?-l:l)*g))/2+x),s.ieOffsetY=Math.round((g-((0>u?-u:u)*g+(0>h?-h:h)*m))/2+b),ce=0;4>ce;ce++)S=J[ce],P=p[S],i=-1!==P.indexOf("px")?parseFloat(P):Z(this.t,S,parseFloat(P),P.replace(y,""))||0,k=i!==s[S]?2>ce?-s.ieOffsetX:-s.ieOffsetY:2>ce?f-s.ieOffsetX:d-s.ieOffsetY,_[S]=(s[S]=Math.round(i-k*(0===ce||2===ce?1:R)))+"px"}}},Se=function(){var t,e,i,s,r,n,a,o,l,h,u,_,f,c,d,m,g,v,y,T,w,x,b,P,S,k,R=this.data,C=this.t.style,O=R.rotation,A=R.scaleX,D=R.scaleY,M=R.scaleZ,L=R.perspective;if(p&&(P=C.top?"top":C.bottom?"bottom":parseFloat(Q(this.t,"top",null,!1))?"bottom":"top",T=Q(this.t,P,null,!1),S=parseFloat(T)||0,k=T.substr((S+"").length)||"px",R._ffFix=!R._ffFix,C[P]=(R._ffFix?S+.05:S-.05)+k),O||R.skewX)v=Math.cos(O),y=Math.sin(O),t=v,r=y,R.skewX&&(O-=R.skewX,v=Math.cos(O),y=Math.sin(O)),e=-y,n=v;else{if(!(R.rotationY||R.rotationX||1!==M||L))return C[ye]="translate3d("+R.x+"px,"+R.y+"px,"+R.z+"px)"+(1!==A||1!==D?" scale("+A+","+D+")":""),void 0;t=n=1,e=r=0}u=1,i=s=a=o=l=h=_=f=c=0,d=L?-1/L:0,m=R.zOrigin,g=1e5,O=R.rotationY,O&&(v=Math.cos(O),y=Math.sin(O),l=u*-y,f=d*-y,i=t*y,a=r*y,u*=v,d*=v,t*=v,r*=v),O=R.rotationX,O&&(v=Math.cos(O),y=Math.sin(O),T=e*v+i*y,w=n*v+a*y,x=h*v+u*y,b=c*v+d*y,i=e*-y+i*v,a=n*-y+a*v,u=h*-y+u*v,d=c*-y+d*v,e=T,n=w,h=x,c=b),1!==M&&(i*=M,a*=M,u*=M,d*=M),1!==D&&(e*=D,n*=D,h*=D,c*=D),1!==A&&(t*=A,r*=A,l*=A,f*=A),m&&(_-=m,s=i*_,o=a*_,_=u*_+m),s=(T=(s+=R.x)-(s|=0))?(0|T*g+(0>T?-.5:.5))/g+s:s,o=(T=(o+=R.y)-(o|=0))?(0|T*g+(0>T?-.5:.5))/g+o:o,_=(T=(_+=R.z)-(_|=0))?(0|T*g+(0>T?-.5:.5))/g+_:_,C[ye]="matrix3d("+[(0|t*g)/g,(0|r*g)/g,(0|l*g)/g,(0|f*g)/g,(0|e*g)/g,(0|n*g)/g,(0|h*g)/g,(0|c*g)/g,(0|i*g)/g,(0|a*g)/g,(0|u*g)/g,(0|d*g)/g,s,o,_,L?1+-_/L:1].join(",")+")"},ke=function(){var t,e,i,s,r,n,a,o,l,h=this.data,u=this.t,_=u.style;p&&(t=_.top?"top":_.bottom?"bottom":parseFloat(Q(u,"top",null,!1))?"bottom":"top",e=Q(u,t,null,!1),i=parseFloat(e)||0,s=e.substr((i+"").length)||"px",h._ffFix=!h._ffFix,_[t]=(h._ffFix?i+.05:i-.05)+s),h.rotation||h.skewX?(r=h.rotation,n=r-h.skewX,a=1e5,o=h.scaleX*a,l=h.scaleY*a,_[ye]="matrix("+(0|Math.cos(r)*o)/a+","+(0|Math.sin(r)*o)/a+","+(0|Math.sin(n)*-l)/a+","+(0|Math.cos(n)*l)/a+","+h.x+","+h.y+")"):_[ye]="matrix("+h.scaleX+",0,0,"+h.scaleY+","+h.x+","+h.y+")"};me("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,transformPerspective,directionalRotation,parseTransform,force3D",{parser:function(t,e,i,s,n,a,o){if(s._transform)return n;var l,h,u,_,p,f,c,d=s._transform=be(t,r,!0,o.parseTransform),m=t.style,g=1e-6,v=ve.length,y=o,T={};if("string"==typeof y.transform&&ye)u=m.cssText,m[ye]=y.transform,m.display="block",l=be(t,null,!1),m.cssText=u;else if("object"==typeof y){if(l={scaleX:se(null!=y.scaleX?y.scaleX:y.scale,d.scaleX),scaleY:se(null!=y.scaleY?y.scaleY:y.scale,d.scaleY),scaleZ:se(null!=y.scaleZ?y.scaleZ:y.scale,d.scaleZ),x:se(y.x,d.x),y:se(y.y,d.y),z:se(y.z,d.z),perspective:se(y.transformPerspective,d.perspective)},c=y.directionalRotation,null!=c)if("object"==typeof c)for(u in c)y[u]=c[u];else y.rotation=c;l.rotation=re("rotation"in y?y.rotation:"shortRotation"in y?y.shortRotation+"_short":"rotationZ"in y?y.rotationZ:d.rotation*L,d.rotation,"rotation",T),xe&&(l.rotationX=re("rotationX"in y?y.rotationX:"shortRotationX"in y?y.shortRotationX+"_short":d.rotationX*L||0,d.rotationX,"rotationX",T),l.rotationY=re("rotationY"in y?y.rotationY:"shortRotationY"in y?y.shortRotationY+"_short":d.rotationY*L||0,d.rotationY,"rotationY",T)),l.skewX=null==y.skewX?d.skewX:re(y.skewX,d.skewX),l.skewY=null==y.skewY?d.skewY:re(y.skewY,d.skewY),(h=l.skewY-d.skewY)&&(l.skewX+=h,l.rotation+=h)}for(null!=y.force3D&&(d.force3D=y.force3D,f=!0),p=d.force3D||d.z||d.rotationX||d.rotationY||l.z||l.rotationX||l.rotationY||l.perspective,p||null==y.scale||(l.scaleZ=1);--v>-1;)i=ve[v],_=l[i]-d[i],(_>g||-g>_||null!=I[i])&&(f=!0,n=new pe(d,i,d[i],_,n),i in T&&(n.e=T[i]),n.xs0=0,n.plugin=a,s._overwriteProps.push(n.n));return _=y.transformOrigin,(_||xe&&p&&d.zOrigin)&&(ye?(f=!0,i=we,_=(_||Q(t,i,r,!1,"50% 50%"))+"",n=new pe(m,i,0,0,n,-1,"transformOrigin"),n.b=m[i],n.plugin=a,xe?(u=d.zOrigin,_=_.split(" "),d.zOrigin=(_.length>2&&(0===u||"0px"!==_[2])?parseFloat(_[2]):u)||0,n.xs0=n.e=m[i]=_[0]+" "+(_[1]||"50%")+" 0px",n=new pe(d,"zOrigin",0,0,n,-1,n.n),n.b=u,n.xs0=n.e=d.zOrigin):n.xs0=n.e=m[i]=_):ee(_+"",d)),f&&(s._transformType=p||3===this._transformType?3:2),n},prefix:!0}),me("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),me("borderRadius",{defaultValue:"0px",parser:function(t,e,i,n,a){e=this.format(e);var o,l,h,u,_,p,f,c,d,m,g,v,y,T,w,x,b=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],P=t.style;for(d=parseFloat(t.offsetWidth),m=parseFloat(t.offsetHeight),o=e.split(" "),l=0;b.length>l;l++)this.p.indexOf("border")&&(b[l]=q(b[l])),_=u=Q(t,b[l],r,!1,"0px"),-1!==_.indexOf(" ")&&(u=_.split(" "),_=u[0],u=u[1]),p=h=o[l],f=parseFloat(_),v=_.substr((f+"").length),y="="===p.charAt(1),y?(c=parseInt(p.charAt(0)+"1",10),p=p.substr(2),c*=parseFloat(p),g=p.substr((c+"").length-(0>c?1:0))||""):(c=parseFloat(p),g=p.substr((c+"").length)),""===g&&(g=s[i]||v),g!==v&&(T=Z(t,"borderLeft",f,v),w=Z(t,"borderTop",f,v),"%"===g?(_=100*(T/d)+"%",u=100*(w/m)+"%"):"em"===g?(x=Z(t,"borderLeft",1,"em"),_=T/x+"em",u=w/x+"em"):(_=T+"px",u=w+"px"),y&&(p=parseFloat(_)+c+g,h=parseFloat(u)+c+g)),a=fe(P,b[l],_+" "+u,p+" "+h,!1,"0px",a);return a},prefix:!0,formatter:he("0px 0px 0px 0px",!1,!0)}),me("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,i,s,n,a){var o,l,h,u,_,p,f="background-position",d=r||W(t,null),m=this.format((d?c?d.getPropertyValue(f+"-x")+" "+d.getPropertyValue(f+"-y"):d.getPropertyValue(f):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),g=this.format(e);if(-1!==m.indexOf("%")!=(-1!==g.indexOf("%"))&&(p=Q(t,"backgroundImage").replace(k,""),p&&"none"!==p)){for(o=m.split(" "),l=g.split(" "),F.setAttribute("src",p),h=2;--h>-1;)m=o[h],u=-1!==m.indexOf("%"),u!==(-1!==l[h].indexOf("%"))&&(_=0===h?t.offsetWidth-F.width:t.offsetHeight-F.height,o[h]=u?parseFloat(m)/100*_+"px":100*(parseFloat(m)/_)+"%");m=o.join(" ")}return this.parseComplex(t.style,m,g,n,a)},formatter:ee}),me("backgroundSize",{defaultValue:"0 0",formatter:ee}),me("perspective",{defaultValue:"0px",prefix:!0}),me("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),me("transformStyle",{prefix:!0}),me("backfaceVisibility",{prefix:!0}),me("margin",{parser:ue("marginTop,marginRight,marginBottom,marginLeft")}),me("padding",{parser:ue("paddingTop,paddingRight,paddingBottom,paddingLeft")}),me("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,i,s,n,a){var o,l,h;return 9>c?(l=t.currentStyle,h=8>c?" ":",",o="rect("+l.clipTop+h+l.clipRight+h+l.clipBottom+h+l.clipLeft+")",e=this.format(e).split(",").join(h)):(o=this.format(Q(t,this.p,r,!1,this.dflt)),e=this.format(e)),this.parseComplex(t.style,o,e,n,a)}}),me("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),me("autoRound,strictUnits",{parser:function(t,e,i,s,r){return r}}),me("border",{defaultValue:"0px solid #000",parser:function(t,e,i,s,n,a){return this.parseComplex(t.style,this.format(Q(t,"borderTopWidth",r,!1,"0px")+" "+Q(t,"borderTopStyle",r,!1,"solid")+" "+Q(t,"borderTopColor",r,!1,"#000")),this.format(e),n,a)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(le)||["#000"])[0]}}),me("float,cssFloat,styleFloat",{parser:function(t,e,i,s,r){var n=t.style,a="cssFloat"in n?"cssFloat":"styleFloat";return new pe(n,a,0,0,r,-1,i,!1,0,n[a],e)}});var Re=function(t){var e,i=this.t,s=i.filter||Q(this.data,"filter"),r=0|this.s+this.c*t;100===r&&(-1===s.indexOf("atrix(")&&-1===s.indexOf("radient(")&&-1===s.indexOf("oader(")?(i.removeAttribute("filter"),e=!Q(this.data,"filter")):(i.filter=s.replace(x,""),e=!0)),e||(this.xn1&&(i.filter=s=s||"alpha(opacity="+r+")"),-1===s.indexOf("opacity")?0===r&&this.xn1||(i.filter=s+" alpha(opacity="+r+")"):i.filter=s.replace(T,"opacity="+r))};me("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,i,s,n,a){var o=parseFloat(Q(t,"opacity",r,!1,"1")),l=t.style,h="autoAlpha"===i;return e=parseFloat(e),h&&1===o&&"hidden"===Q(t,"visibility",r)&&0!==e&&(o=0),z?n=new pe(l,"opacity",o,e-o,n):(n=new pe(l,"opacity",100*o,100*(e-o),n),n.xn1=h?1:0,l.zoom=1,n.type=2,n.b="alpha(opacity="+n.s+")",n.e="alpha(opacity="+(n.s+n.c)+")",n.data=t,n.plugin=a,n.setRatio=Re),h&&(n=new pe(l,"visibility",0,0,n,-1,null,!1,0,0!==o?"inherit":"hidden",0===e?"hidden":"inherit"),n.xs0="inherit",s._overwriteProps.push(n.n),s._overwriteProps.push(i)),n}});var Ce=function(t,e){e&&(t.removeProperty?t.removeProperty(e.replace(P,"-$1").toLowerCase()):t.removeAttribute(e))},Oe=function(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.className=0===t?this.b:this.e;for(var e=this.data,i=this.t.style;e;)e.v?i[e.p]=e.v:Ce(i,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.className!==this.e&&(this.t.className=this.e)};me("className",{parser:function(t,e,s,n,a,o,l){var h,u,_,p,f,c=t.className,d=t.style.cssText;if(a=n._classNamePT=new pe(t,s,0,0,a,2),a.setRatio=Oe,a.pr=-11,i=!0,a.b=c,u=$(t,r),_=t._gsClassPT){for(p={},f=_.data;f;)p[f.p]=1,f=f._next;_.setRatio(1)}return t._gsClassPT=a,a.e="="!==e.charAt(1)?e:c.replace(RegExp("\\s*\\b"+e.substr(2)+"\\b"),"")+("+"===e.charAt(0)?" "+e.substr(2):""),n._tween._duration&&(t.className=a.e,h=G(t,u,$(t),l,p),t.className=c,a.data=h.firstMPT,t.style.cssText=d,a=a.xfirst=n.parse(t,h.difs,a,o)),a}});var Ae=function(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration){var e,i,s,r,n=this.t.style,a=o.transform.parse;if("all"===this.e)n.cssText="",r=!0;else for(e=this.e.split(","),s=e.length;--s>-1;)i=e[s],o[i]&&(o[i].parse===a?r=!0:i="transformOrigin"===i?we:o[i].p),Ce(n,i);r&&(Ce(n,ye),this.t._gsTransform&&delete this.t._gsTransform)}};for(me("clearProps",{parser:function(t,e,s,r,n){return n=new pe(t,s,0,0,n,2),n.setRatio=Ae,n.e=e,n.pr=-10,n.data=r._tween,i=!0,n}}),l="bezier,throwProps,physicsProps,physics2D".split(","),ce=l.length;ce--;)ge(l[ce]);l=a.prototype,l._firstPT=null,l._onInitTween=function(t,e,o){if(!t.nodeType)return!1;this._target=t,this._tween=o,this._vars=e,h=e.autoRound,i=!1,s=e.suffixMap||a.suffixMap,r=W(t,""),n=this._overwriteProps;var l,p,c,d,m,g,v,y,T,x=t.style;if(u&&""===x.zIndex&&(l=Q(t,"zIndex",r),("auto"===l||""===l)&&(x.zIndex=0)),"string"==typeof e&&(d=x.cssText,l=$(t,r),x.cssText=d+";"+e,l=G(t,l,$(t)).difs,!z&&w.test(e)&&(l.opacity=parseFloat(RegExp.$1)),e=l,x.cssText=d),this._firstPT=p=this.parse(t,e,null),this._transformType){for(T=3===this._transformType,ye?_&&(u=!0,""===x.zIndex&&(v=Q(t,"zIndex",r),("auto"===v||""===v)&&(x.zIndex=0)),f&&(x.WebkitBackfaceVisibility=this._vars.WebkitBackfaceVisibility||(T?"visible":"hidden"))):x.zoom=1,c=p;c&&c._next;)c=c._next;y=new pe(t,"transform",0,0,null,2),this._linkCSSP(y,null,c),y.setRatio=T&&xe?Se:ye?ke:Pe,y.data=this._transform||be(t,r,!0),n.pop()}if(i){for(;p;){for(g=p._next,c=d;c&&c.pr>p.pr;)c=c._next;(p._prev=c?c._prev:m)?p._prev._next=p:d=p,(p._next=c)?c._prev=p:m=p,p=g}this._firstPT=d}return!0},l.parse=function(t,e,i,n){var a,l,u,_,p,f,c,d,m,g,v=t.style;for(a in e)f=e[a],l=o[a],l?i=l.parse(t,f,a,this,i,n,e):(p=Q(t,a,r)+"",m="string"==typeof f,"color"===a||"fill"===a||"stroke"===a||-1!==a.indexOf("Color")||m&&b.test(f)?(m||(f=oe(f),f=(f.length>3?"rgba(":"rgb(")+f.join(",")+")"),i=fe(v,a,p,f,!0,"transparent",i,0,n)):!m||-1===f.indexOf(" ")&&-1===f.indexOf(",")?(u=parseFloat(p),c=u||0===u?p.substr((u+"").length):"",(""===p||"auto"===p)&&("width"===a||"height"===a?(u=te(t,a,r),c="px"):"left"===a||"top"===a?(u=H(t,a,r),c="px"):(u="opacity"!==a?0:1,c="")),g=m&&"="===f.charAt(1),g?(_=parseInt(f.charAt(0)+"1",10),f=f.substr(2),_*=parseFloat(f),d=f.replace(y,"")):(_=parseFloat(f),d=m?f.substr((_+"").length)||"":""),""===d&&(d=s[a]||c),f=_||0===_?(g?_+u:_)+d:e[a],c!==d&&""!==d&&(_||0===_)&&(u||0===u)&&(u=Z(t,a,u,c),"%"===d?(u/=Z(t,a,100,"%")/100,u>100&&(u=100),e.strictUnits!==!0&&(p=u+"%")):"em"===d?u/=Z(t,a,1,"em"):(_=Z(t,a,_,d),d="px"),g&&(_||0===_)&&(f=_+u+d)),g&&(_+=u),!u&&0!==u||!_&&0!==_?void 0!==v[a]&&(f||"NaN"!=f+""&&null!=f)?(i=new pe(v,a,_||u||0,0,i,-1,a,!1,0,p,f),i.xs0="none"!==f||"display"!==a&&-1===a.indexOf("Style")?f:p):B("invalid "+a+" tween value: "+e[a]):(i=new pe(v,a,u,_-u,i,0,a,h!==!1&&("px"===d||"zIndex"===a),0,p,f),i.xs0=d)):i=fe(v,a,p,f,!0,null,i,0,n)),n&&i&&!i.plugin&&(i.plugin=n);return i},l.setRatio=function(t){var e,i,s,r=this._firstPT,n=1e-6;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||this._tween._rawPrevTime===-1e-6)for(;r;){if(e=r.c*t+r.s,r.r?e=e>0?0|e+.5:0|e-.5:n>e&&e>-n&&(e=0),r.type)if(1===r.type)if(s=r.l,2===s)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2;else if(3===s)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3;else if(4===s)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4;else if(5===s)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4+r.xn4+r.xs5;else{for(i=r.xs0+e+r.xs1,s=1;r.l>s;s++)i+=r["xn"+s]+r["xs"+(s+1)];r.t[r.p]=i}else-1===r.type?r.t[r.p]=r.xs0:r.setRatio&&r.setRatio(t);else r.t[r.p]=e+r.xs0;r=r._next}else for(;r;)2!==r.type?r.t[r.p]=r.b:r.setRatio(t),r=r._next;else for(;r;)2!==r.type?r.t[r.p]=r.e:r.setRatio(t),r=r._next},l._enableTransforms=function(t){this._transformType=t||3===this._transformType?3:2,this._transform=this._transform||be(this._target,r,!0)},l._linkCSSP=function(t,e,i,s){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next,s=!0),i?i._next=t:s||null!==this._firstPT||(this._firstPT=t),t._next=e,t._prev=i),t},l._kill=function(e){var i,s,r,n=e;if(e.autoAlpha||e.alpha){n={};for(s in e)n[s]=e[s];n.opacity=1,n.autoAlpha&&(n.visibility=1)}return e.className&&(i=this._classNamePT)&&(r=i.xfirst,r&&r._prev?this._linkCSSP(r._prev,i._next,r._prev._prev):r===this._firstPT&&(this._firstPT=i._next),i._next&&this._linkCSSP(i._next,i._next._next,r._prev),this._classNamePT=null),t.prototype._kill.call(this,n)};var De=function(t,e,i){var s,r,n,a;if(t.slice)for(r=t.length;--r>-1;)De(t[r],e,i);else for(s=t.childNodes,r=s.length;--r>-1;)n=s[r],a=n.type,n.style&&(e.push($(n)),i&&i.push(n)),1!==a&&9!==a&&11!==a||!n.childNodes.length||De(n,e,i)};return a.cascadeTo=function(t,i,s){var r,n,a,o=e.to(t,i,s),l=[o],h=[],u=[],_=[],p=e._internals.reservedProps;for(t=o._targets||o.target,De(t,h,_),o.render(i,!0),De(t,u),o.render(0,!0),o._enabled(!0),r=_.length;--r>-1;)if(n=G(_[r],h[r],u[r]),n.firstMPT){n=n.difs;for(a in s)p[a]&&(n[a]=s[a]);l.push(e.to(_[r],i,n))}return l},t.activate([a]),a},!0)}),window._gsDefine&&window._gsQueue.pop()();
/*!
 * VERSION: 1.13.1
 * DATE: 2014-07-22
 * UPDATES AND DOCS AT: http://www.greensock.com
 *
 * @license Copyright (c) 2008-2014, GreenSock. All rights reserved.
 * This work is subject to the terms at http://www.greensock.com/terms_of_use.html or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */
(function(t,e){"use strict";var i=t.GreenSockGlobals=t.GreenSockGlobals||t;if(!i.TweenLite){var s,n,r,a,o,l=function(t){var e,s=t.split("."),n=i;for(e=0;s.length>e;e++)n[s[e]]=n=n[s[e]]||{};return n},h=l("com.greensock"),_=1e-10,u=function(t){var e,i=[],s=t.length;for(e=0;e!==s;i.push(t[e++]));return i},f=function(){},m=function(){var t=Object.prototype.toString,e=t.call([]);return function(i){return null!=i&&(i instanceof Array||"object"==typeof i&&!!i.push&&t.call(i)===e)}}(),p={},c=function(s,n,r,a){this.sc=p[s]?p[s].sc:[],p[s]=this,this.gsClass=null,this.func=r;var o=[];this.check=function(h){for(var _,u,f,m,d=n.length,v=d;--d>-1;)(_=p[n[d]]||new c(n[d],[])).gsClass?(o[d]=_.gsClass,v--):h&&_.sc.push(this);if(0===v&&r)for(u=("com.greensock."+s).split("."),f=u.pop(),m=l(u.join("."))[f]=this.gsClass=r.apply(r,o),a&&(i[f]=m,"function"==typeof define&&define.amd?define((t.GreenSockAMDPath?t.GreenSockAMDPath+"/":"")+s.split(".").pop(),[],function(){return m}):s===e&&"undefined"!=typeof module&&module.exports&&(module.exports=m)),d=0;this.sc.length>d;d++)this.sc[d].check()},this.check(!0)},d=t._gsDefine=function(t,e,i,s){return new c(t,e,i,s)},v=h._class=function(t,e,i){return e=e||function(){},d(t,[],function(){return e},i),e};d.globals=i;var g=[0,0,1,1],T=[],y=v("easing.Ease",function(t,e,i,s){this._func=t,this._type=i||0,this._power=s||0,this._params=e?g.concat(e):g},!0),w=y.map={},P=y.register=function(t,e,i,s){for(var n,r,a,o,l=e.split(","),_=l.length,u=(i||"easeIn,easeOut,easeInOut").split(",");--_>-1;)for(r=l[_],n=s?v("easing."+r,null,!0):h.easing[r]||{},a=u.length;--a>-1;)o=u[a],w[r+"."+o]=w[o+r]=n[o]=t.getRatio?t:t[o]||new t};for(r=y.prototype,r._calcEnd=!1,r.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,s=1===e?1-t:2===e?t:.5>t?2*t:2*(1-t);return 1===i?s*=s:2===i?s*=s*s:3===i?s*=s*s*s:4===i&&(s*=s*s*s*s),1===e?1-s:2===e?s:.5>t?s/2:1-s/2},s=["Linear","Quad","Cubic","Quart","Quint,Strong"],n=s.length;--n>-1;)r=s[n]+",Power"+n,P(new y(null,null,1,n),r,"easeOut",!0),P(new y(null,null,2,n),r,"easeIn"+(0===n?",easeNone":"")),P(new y(null,null,3,n),r,"easeInOut");w.linear=h.easing.Linear.easeIn,w.swing=h.easing.Quad.easeInOut;var b=v("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});r=b.prototype,r.addEventListener=function(t,e,i,s,n){n=n||0;var r,l,h=this._listeners[t],_=0;for(null==h&&(this._listeners[t]=h=[]),l=h.length;--l>-1;)r=h[l],r.c===e&&r.s===i?h.splice(l,1):0===_&&n>r.pr&&(_=l+1);h.splice(_,0,{c:e,s:i,up:s,pr:n}),this!==a||o||a.wake()},r.removeEventListener=function(t,e){var i,s=this._listeners[t];if(s)for(i=s.length;--i>-1;)if(s[i].c===e)return s.splice(i,1),void 0},r.dispatchEvent=function(t){var e,i,s,n=this._listeners[t];if(n)for(e=n.length,i=this._eventTarget;--e>-1;)s=n[e],s.up?s.c.call(s.s||i,{type:t,target:i}):s.c.call(s.s||i)};var k=t.requestAnimationFrame,A=t.cancelAnimationFrame,S=Date.now||function(){return(new Date).getTime()},x=S();for(s=["ms","moz","webkit","o"],n=s.length;--n>-1&&!k;)k=t[s[n]+"RequestAnimationFrame"],A=t[s[n]+"CancelAnimationFrame"]||t[s[n]+"CancelRequestAnimationFrame"];v("Ticker",function(t,e){var i,s,n,r,l,h=this,u=S(),m=e!==!1&&k,p=500,c=33,d=function(t){var e,a,o=S()-x;o>p&&(u+=o-c),x+=o,h.time=(x-u)/1e3,e=h.time-l,(!i||e>0||t===!0)&&(h.frame++,l+=e+(e>=r?.004:r-e),a=!0),t!==!0&&(n=s(d)),a&&h.dispatchEvent("tick")};b.call(h),h.time=h.frame=0,h.tick=function(){d(!0)},h.lagSmoothing=function(t,e){p=t||1/_,c=Math.min(e,p,0)},h.sleep=function(){null!=n&&(m&&A?A(n):clearTimeout(n),s=f,n=null,h===a&&(o=!1))},h.wake=function(){null!==n?h.sleep():h.frame>10&&(x=S()-p+5),s=0===i?f:m&&k?k:function(t){return setTimeout(t,0|1e3*(l-h.time)+1)},h===a&&(o=!0),d(2)},h.fps=function(t){return arguments.length?(i=t,r=1/(i||60),l=this.time+r,h.wake(),void 0):i},h.useRAF=function(t){return arguments.length?(h.sleep(),m=t,h.fps(i),void 0):m},h.fps(t),setTimeout(function(){m&&(!n||5>h.frame)&&h.useRAF(!1)},1500)}),r=h.Ticker.prototype=new h.events.EventDispatcher,r.constructor=h.Ticker;var C=v("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=e.immediateRender===!0,this.data=e.data,this._reversed=e.reversed===!0,B){o||a.wake();var i=this.vars.useFrames?q:B;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});a=C.ticker=new h.Ticker,r=C.prototype,r._dirty=r._gc=r._initted=r._paused=!1,r._totalTime=r._time=0,r._rawPrevTime=-1,r._next=r._last=r._onUpdate=r._timeline=r.timeline=null,r._paused=!1;var R=function(){o&&S()-x>2e3&&a.wake(),setTimeout(R,2e3)};R(),r.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},r.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},r.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},r.seek=function(t,e){return this.totalTime(Number(t),e!==!1)},r.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,e!==!1,!0)},r.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},r.render=function(){},r.invalidate=function(){return this},r.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime())>=i&&i+this.totalDuration()/this._timeScale>t},r._enabled=function(t,e){return o||a.wake(),this._gc=!t,this._active=this.isActive(),e!==!0&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},r._kill=function(){return this._enabled(!1,!1)},r.kill=function(t,e){return this._kill(t,e),this},r._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},r._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();--e>-1;)"{self}"===t[e]&&(i[e]=this);return i},r.eventCallback=function(t,e,i,s){if("on"===(t||"").substr(0,2)){var n=this.vars;if(1===arguments.length)return n[t];null==e?delete n[t]:(n[t]=e,n[t+"Params"]=m(i)&&-1!==i.join("").indexOf("{self}")?this._swapSelfInParams(i):i,n[t+"Scope"]=s),"onUpdate"===t&&(this._onUpdate=e)}return this},r.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},r.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},r.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},r.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},r.totalTime=function(t,e,i){if(o||a.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(0>t&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var s=this._totalDuration,n=this._timeline;if(t>s&&!i&&(t=s),this._startTime=(this._paused?this._pauseTime:n._time)-(this._reversed?s-t:t)/this._timeScale,n._dirty||this._uncache(!1),n._timeline)for(;n._timeline;)n._timeline._time!==(n._startTime+n._totalTime)/n._timeScale&&n.totalTime(n._totalTime,!0),n=n._timeline}this._gc&&this._enabled(!0,!1),(this._totalTime!==t||0===this._duration)&&(this.render(t,e,!1),O.length&&M())}return this},r.progress=r.totalProgress=function(t,e){return arguments.length?this.totalTime(this.duration()*t,e):this._time/this.duration()},r.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},r.timeScale=function(t){if(!arguments.length)return this._timeScale;if(t=t||_,this._timeline&&this._timeline.smoothChildTiming){var e=this._pauseTime,i=e||0===e?e:this._timeline.totalTime();this._startTime=i-(i-this._startTime)*this._timeScale/t}return this._timeScale=t,this._uncache(!1)},r.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},r.paused=function(t){if(!arguments.length)return this._paused;if(t!=this._paused&&this._timeline){o||t||a.wake();var e=this._timeline,i=e.rawTime(),s=i-this._pauseTime;!t&&e.smoothChildTiming&&(this._startTime+=s,this._uncache(!1)),this._pauseTime=t?i:null,this._paused=t,this._active=this.isActive(),!t&&0!==s&&this._initted&&this.duration()&&this.render(e.smoothChildTiming?this._totalTime:(i-this._startTime)/this._timeScale,!0,!0)}return this._gc&&!t&&this._enabled(!0,!1),this};var D=v("core.SimpleTimeline",function(t){C.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});r=D.prototype=new C,r.constructor=D,r.kill()._gc=!1,r._first=r._last=null,r._sortChildren=!1,r.add=r.insert=function(t,e){var i,s;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=t._startTime+(this.rawTime()-t._startTime)/t._timeScale),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),i=this._last,this._sortChildren)for(s=t._startTime;i&&i._startTime>s;)i=i._prev;return i?(t._next=i._next,i._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=i,this._timeline&&this._uncache(!0),this},r._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,this._timeline&&this._uncache(!0)),this},r.render=function(t,e,i){var s,n=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;n;)s=n._next,(n._active||t>=n._startTime&&!n._paused)&&(n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=s},r.rawTime=function(){return o||a.wake(),this._totalTime};var I=v("TweenLite",function(e,i,s){if(C.call(this,i,s),this.render=I.prototype.render,null==e)throw"Cannot tween a null target.";this.target=e="string"!=typeof e?e:I.selector(e)||e;var n,r,a,o=e.jquery||e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType),l=this.vars.overwrite;if(this._overwrite=l=null==l?Q[I.defaultOverwrite]:"number"==typeof l?l>>0:Q[l],(o||e instanceof Array||e.push&&m(e))&&"number"!=typeof e[0])for(this._targets=a=u(e),this._propLookup=[],this._siblings=[],n=0;a.length>n;n++)r=a[n],r?"string"!=typeof r?r.length&&r!==t&&r[0]&&(r[0]===t||r[0].nodeType&&r[0].style&&!r.nodeType)?(a.splice(n--,1),this._targets=a=a.concat(u(r))):(this._siblings[n]=$(r,this,!1),1===l&&this._siblings[n].length>1&&K(r,this,null,1,this._siblings[n])):(r=a[n--]=I.selector(r),"string"==typeof r&&a.splice(n+1,1)):a.splice(n--,1);else this._propLookup={},this._siblings=$(e,this,!1),1===l&&this._siblings.length>1&&K(e,this,null,1,this._siblings);(this.vars.immediateRender||0===i&&0===this._delay&&this.vars.immediateRender!==!1)&&(this._time=-_,this.render(-this._delay))},!0),E=function(e){return e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType)},z=function(t,e){var i,s={};for(i in t)G[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!U[i]||U[i]&&U[i]._autoCSS)||(s[i]=t[i],delete t[i]);t.css=s};r=I.prototype=new C,r.constructor=I,r.kill()._gc=!1,r.ratio=0,r._firstPT=r._targets=r._overwrittenProps=r._startAt=null,r._notifyPluginsOfEnabled=r._lazy=!1,I.version="1.13.1",I.defaultEase=r._ease=new y(null,null,1,1),I.defaultOverwrite="auto",I.ticker=a,I.autoSleep=!0,I.lagSmoothing=function(t,e){a.lagSmoothing(t,e)},I.selector=t.$||t.jQuery||function(e){var i=t.$||t.jQuery;return i?(I.selector=i,i(e)):"undefined"==typeof document?e:document.querySelectorAll?document.querySelectorAll(e):document.getElementById("#"===e.charAt(0)?e.substr(1):e)};var O=[],L={},N=I._internals={isArray:m,isSelector:E,lazyTweens:O},U=I._plugins={},F=N.tweenLookup={},j=0,G=N.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1},Q={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,"true":1,"false":0},q=C._rootFramesTimeline=new D,B=C._rootTimeline=new D,M=N.lazyRender=function(){var t=O.length;for(L={};--t>-1;)s=O[t],s&&s._lazy!==!1&&(s.render(s._lazy,!1,!0),s._lazy=!1);O.length=0};B._startTime=a.time,q._startTime=a.frame,B._active=q._active=!0,setTimeout(M,1),C._updateRoot=I.render=function(){var t,e,i;if(O.length&&M(),B.render((a.time-B._startTime)*B._timeScale,!1,!1),q.render((a.frame-q._startTime)*q._timeScale,!1,!1),O.length&&M(),!(a.frame%120)){for(i in F){for(e=F[i].tweens,t=e.length;--t>-1;)e[t]._gc&&e.splice(t,1);0===e.length&&delete F[i]}if(i=B._first,(!i||i._paused)&&I.autoSleep&&!q._first&&1===a._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||a.sleep()}}},a.addEventListener("tick",C._updateRoot);var $=function(t,e,i){var s,n,r=t._gsTweenID;if(F[r||(t._gsTweenID=r="t"+j++)]||(F[r]={target:t,tweens:[]}),e&&(s=F[r].tweens,s[n=s.length]=e,i))for(;--n>-1;)s[n]===e&&s.splice(n,1);return F[r].tweens},K=function(t,e,i,s,n){var r,a,o,l;if(1===s||s>=4){for(l=n.length,r=0;l>r;r++)if((o=n[r])!==e)o._gc||o._enabled(!1,!1)&&(a=!0);else if(5===s)break;return a}var h,u=e._startTime+_,f=[],m=0,p=0===e._duration;for(r=n.length;--r>-1;)(o=n[r])===e||o._gc||o._paused||(o._timeline!==e._timeline?(h=h||H(e,0,p),0===H(o,h,p)&&(f[m++]=o)):u>=o._startTime&&o._startTime+o.totalDuration()/o._timeScale>u&&((p||!o._initted)&&2e-10>=u-o._startTime||(f[m++]=o)));for(r=m;--r>-1;)o=f[r],2===s&&o._kill(i,t)&&(a=!0),(2!==s||!o._firstPT&&o._initted)&&o._enabled(!1,!1)&&(a=!0);return a},H=function(t,e,i){for(var s=t._timeline,n=s._timeScale,r=t._startTime;s._timeline;){if(r+=s._startTime,n*=s._timeScale,s._paused)return-100;s=s._timeline}return r/=n,r>e?r-e:i&&r===e||!t._initted&&2*_>r-e?_:(r+=t.totalDuration()/t._timeScale/n)>e+_?0:r-e-_};r._init=function(){var t,e,i,s,n,r=this.vars,a=this._overwrittenProps,o=this._duration,l=!!r.immediateRender,h=r.ease;if(r.startAt){this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),n={};for(s in r.startAt)n[s]=r.startAt[s];if(n.overwrite=!1,n.immediateRender=!0,n.lazy=l&&r.lazy!==!1,n.startAt=n.delay=null,this._startAt=I.to(this.target,0,n),l)if(this._time>0)this._startAt=null;else if(0!==o)return}else if(r.runBackwards&&0!==o)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{i={};for(s in r)G[s]&&"autoCSS"!==s||(i[s]=r[s]);if(i.overwrite=0,i.data="isFromStart",i.lazy=l&&r.lazy!==!1,i.immediateRender=l,this._startAt=I.to(this.target,0,i),l){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1)}if(this._ease=h=h?h instanceof y?h:"function"==typeof h?new y(h,r.easeParams):w[h]||I.defaultEase:I.defaultEase,r.easeParams instanceof Array&&h.config&&(this._ease=h.config.apply(h,r.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(t=this._targets.length;--t>-1;)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],a?a[t]:null)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,a);if(e&&I._onPluginEvent("_onInitAllProps",this),a&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),r.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=r.onUpdate,this._initted=!0},r._initProps=function(e,i,s,n){var r,a,o,l,h,_;if(null==e)return!1;L[e._gsTweenID]&&M(),this.vars.css||e.style&&e!==t&&e.nodeType&&U.css&&this.vars.autoCSS!==!1&&z(this.vars,e);for(r in this.vars){if(_=this.vars[r],G[r])_&&(_ instanceof Array||_.push&&m(_))&&-1!==_.join("").indexOf("{self}")&&(this.vars[r]=_=this._swapSelfInParams(_,this));else if(U[r]&&(l=new U[r])._onInitTween(e,this.vars[r],this)){for(this._firstPT=h={_next:this._firstPT,t:l,p:"setRatio",s:0,c:1,f:!0,n:r,pg:!0,pr:l._priority},a=l._overwriteProps.length;--a>-1;)i[l._overwriteProps[a]]=this._firstPT;(l._priority||l._onInitAllProps)&&(o=!0),(l._onDisable||l._onEnable)&&(this._notifyPluginsOfEnabled=!0)}else this._firstPT=i[r]=h={_next:this._firstPT,t:e,p:r,f:"function"==typeof e[r],n:r,pg:!1,pr:0},h.s=h.f?e[r.indexOf("set")||"function"!=typeof e["get"+r.substr(3)]?r:"get"+r.substr(3)]():parseFloat(e[r]),h.c="string"==typeof _&&"="===_.charAt(1)?parseInt(_.charAt(0)+"1",10)*Number(_.substr(2)):Number(_)-h.s||0;h&&h._next&&(h._next._prev=h)}return n&&this._kill(n,e)?this._initProps(e,i,s,n):this._overwrite>1&&this._firstPT&&s.length>1&&K(e,this,i,this._overwrite,s)?(this._kill(i,e),this._initProps(e,i,s,n)):(this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration)&&(L[e._gsTweenID]=!0),o)},r.render=function(t,e,i){var s,n,r,a,o=this._time,l=this._duration,h=this._rawPrevTime;if(t>=l)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(s=!0,n="onComplete"),0===l&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(0===t||0>h||h===_)&&h!==t&&(i=!0,h>_&&(n="onReverseComplete")),this._rawPrevTime=a=!e||t||h===t?t:_);else if(1e-7>t)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==o||0===l&&h>0&&h!==_)&&(n="onReverseComplete",s=this._reversed),0>t?(this._active=!1,0===l&&(this._initted||!this.vars.lazy||i)&&(h>=0&&(i=!0),this._rawPrevTime=a=!e||t||h===t?t:_)):this._initted||(i=!0);else if(this._totalTime=this._time=t,this._easeType){var u=t/l,f=this._easeType,m=this._easePower;(1===f||3===f&&u>=.5)&&(u=1-u),3===f&&(u*=2),1===m?u*=u:2===m?u*=u*u:3===m?u*=u*u*u:4===m&&(u*=u*u*u*u),this.ratio=1===f?1-u:2===f?u:.5>t/l?u/2:1-u/2}else this.ratio=this._ease.getRatio(t/l);if(this._time!==o||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=o,this._rawPrevTime=h,O.push(this),this._lazy=t,void 0;this._time&&!s?this.ratio=this._ease.getRatio(this._time/l):s&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==o&&t>=0&&(this._active=!0),0===o&&(this._startAt&&(t>=0?this._startAt.render(t,e,i):n||(n="_dummyGS")),this.vars.onStart&&(0!==this._time||0===l)&&(e||this.vars.onStart.apply(this.vars.onStartScope||this,this.vars.onStartParams||T))),r=this._firstPT;r;)r.f?r.t[r.p](r.c*this.ratio+r.s):r.t[r.p]=r.c*this.ratio+r.s,r=r._next;this._onUpdate&&(0>t&&this._startAt&&this._startTime&&this._startAt.render(t,e,i),e||(this._time!==o||s)&&this._onUpdate.apply(this.vars.onUpdateScope||this,this.vars.onUpdateParams||T)),n&&(!this._gc||i)&&(0>t&&this._startAt&&!this._onUpdate&&this._startTime&&this._startAt.render(t,e,i),s&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[n]&&this.vars[n].apply(this.vars[n+"Scope"]||this,this.vars[n+"Params"]||T),0===l&&this._rawPrevTime===_&&a!==_&&(this._rawPrevTime=0))}},r._kill=function(t,e){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:I.selector(e)||e;var i,s,n,r,a,o,l,h;if((m(e)||E(e))&&"number"!=typeof e[0])for(i=e.length;--i>-1;)this._kill(t,e[i])&&(o=!0);else{if(this._targets){for(i=this._targets.length;--i>-1;)if(e===this._targets[i]){a=this._propLookup[i]||{},this._overwrittenProps=this._overwrittenProps||[],s=this._overwrittenProps[i]=t?this._overwrittenProps[i]||{}:"all";break}}else{if(e!==this.target)return!1;a=this._propLookup,s=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(a){l=t||a,h=t!==s&&"all"!==s&&t!==a&&("object"!=typeof t||!t._tempKill);for(n in l)(r=a[n])&&(r.pg&&r.t._kill(l)&&(o=!0),r.pg&&0!==r.t._overwriteProps.length||(r._prev?r._prev._next=r._next:r===this._firstPT&&(this._firstPT=r._next),r._next&&(r._next._prev=r._prev),r._next=r._prev=null),delete a[n]),h&&(s[n]=1);!this._firstPT&&this._initted&&this._enabled(!1,!1)}}return o},r.invalidate=function(){return this._notifyPluginsOfEnabled&&I._onPluginEvent("_onDisable",this),this._firstPT=null,this._overwrittenProps=null,this._onUpdate=null,this._startAt=null,this._initted=this._active=this._notifyPluginsOfEnabled=this._lazy=!1,this._propLookup=this._targets?{}:[],this},r._enabled=function(t,e){if(o||a.wake(),t&&this._gc){var i,s=this._targets;if(s)for(i=s.length;--i>-1;)this._siblings[i]=$(s[i],this,!0);else this._siblings=$(this.target,this,!0)}return C.prototype._enabled.call(this,t,e),this._notifyPluginsOfEnabled&&this._firstPT?I._onPluginEvent(t?"_onEnable":"_onDisable",this):!1},I.to=function(t,e,i){return new I(t,e,i)},I.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new I(t,e,i)},I.fromTo=function(t,e,i,s){return s.startAt=i,s.immediateRender=0!=s.immediateRender&&0!=i.immediateRender,new I(t,e,s)},I.delayedCall=function(t,e,i,s,n){return new I(e,0,{delay:t,onComplete:e,onCompleteParams:i,onCompleteScope:s,onReverseComplete:e,onReverseCompleteParams:i,onReverseCompleteScope:s,immediateRender:!1,useFrames:n,overwrite:0})},I.set=function(t,e){return new I(t,0,e)},I.getTweensOf=function(t,e){if(null==t)return[];t="string"!=typeof t?t:I.selector(t)||t;var i,s,n,r;if((m(t)||E(t))&&"number"!=typeof t[0]){for(i=t.length,s=[];--i>-1;)s=s.concat(I.getTweensOf(t[i],e));for(i=s.length;--i>-1;)for(r=s[i],n=i;--n>-1;)r===s[n]&&s.splice(i,1)}else for(s=$(t).concat(),i=s.length;--i>-1;)(s[i]._gc||e&&!s[i].isActive())&&s.splice(i,1);return s},I.killTweensOf=I.killDelayedCallsTo=function(t,e,i){"object"==typeof e&&(i=e,e=!1);for(var s=I.getTweensOf(t,e),n=s.length;--n>-1;)s[n]._kill(i,t)};var J=v("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=J.prototype},!0);if(r=J.prototype,J.version="1.10.1",J.API=2,r._firstPT=null,r._addTween=function(t,e,i,s,n,r){var a,o;return null!=s&&(a="number"==typeof s||"="!==s.charAt(1)?Number(s)-i:parseInt(s.charAt(0)+"1",10)*Number(s.substr(2)))?(this._firstPT=o={_next:this._firstPT,t:t,p:e,s:i,c:a,f:"function"==typeof t[e],n:n||e,r:r},o._next&&(o._next._prev=o),o):void 0},r.setRatio=function(t){for(var e,i=this._firstPT,s=1e-6;i;)e=i.c*t+i.s,i.r?e=Math.round(e):s>e&&e>-s&&(e=0),i.f?i.t[i.p](e):i.t[i.p]=e,i=i._next},r._kill=function(t){var e,i=this._overwriteProps,s=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;--e>-1;)null!=t[i[e]]&&i.splice(e,1);for(;s;)null!=t[s.n]&&(s._next&&(s._next._prev=s._prev),s._prev?(s._prev._next=s._next,s._prev=null):this._firstPT===s&&(this._firstPT=s._next)),s=s._next;return!1},r._roundProps=function(t,e){for(var i=this._firstPT;i;)(t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")])&&(i.r=e),i=i._next},I._onPluginEvent=function(t,e){var i,s,n,r,a,o=e._firstPT;if("_onInitAllProps"===t){for(;o;){for(a=o._next,s=n;s&&s.pr>o.pr;)s=s._next;(o._prev=s?s._prev:r)?o._prev._next=o:n=o,(o._next=s)?s._prev=o:r=o,o=a}o=e._firstPT=n}for(;o;)o.pg&&"function"==typeof o.t[t]&&o.t[t]()&&(i=!0),o=o._next;return i},J.activate=function(t){for(var e=t.length;--e>-1;)t[e].API===J.API&&(U[(new t[e])._propName]=t[e]);return!0},d.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,s=t.priority||0,n=t.overwriteProps,r={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_roundProps",initAll:"_onInitAllProps"},a=v("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){J.call(this,i,s),this._overwriteProps=n||[]},t.global===!0),o=a.prototype=new J(i);o.constructor=a,a.API=t.API;for(e in r)"function"==typeof t[e]&&(o[r[e]]=t[e]);return a.version=t.version,J.activate([a]),a},s=t._gsQueue){for(n=0;s.length>n;n++)s[n]();for(r in p)p[r].func||t.console.log("GSAP encountered missing dependency: com.greensock."+r)}o=!1}})("undefined"!=typeof module&&module.exports&&"undefined"!=typeof global?global:this||window,"TweenLite");
// threejs.org/license
'use strict';var THREE={REVISION:"68"};"object"===typeof module&&(module.exports=THREE);THREE.CullFaceNone=0;THREE.CullFaceBack=1;THREE.CullFaceFront=2;THREE.CullFaceFrontBack=3;THREE.FrontFaceDirectionCW=0;THREE.FrontFaceDirectionCCW=1;THREE.BasicShadowMap=0;THREE.PCFShadowMap=1;THREE.PCFSoftShadowMap=2;THREE.FrontSide=0;THREE.BackSide=1;THREE.DoubleSide=2;THREE.NoShading=0;THREE.FlatShading=1;THREE.SmoothShading=2;THREE.NoColors=0;THREE.FaceColors=1;THREE.VertexColors=2;THREE.NoBlending=0;
THREE.NormalBlending=1;THREE.AdditiveBlending=2;THREE.SubtractiveBlending=3;THREE.MultiplyBlending=4;THREE.CustomBlending=5;THREE.AddEquation=100;THREE.SubtractEquation=101;THREE.ReverseSubtractEquation=102;THREE.ZeroFactor=200;THREE.OneFactor=201;THREE.SrcColorFactor=202;THREE.OneMinusSrcColorFactor=203;THREE.SrcAlphaFactor=204;THREE.OneMinusSrcAlphaFactor=205;THREE.DstAlphaFactor=206;THREE.OneMinusDstAlphaFactor=207;THREE.DstColorFactor=208;THREE.OneMinusDstColorFactor=209;
THREE.SrcAlphaSaturateFactor=210;THREE.MultiplyOperation=0;THREE.MixOperation=1;THREE.AddOperation=2;THREE.UVMapping=function(){};THREE.CubeReflectionMapping=function(){};THREE.CubeRefractionMapping=function(){};THREE.SphericalReflectionMapping=function(){};THREE.SphericalRefractionMapping=function(){};THREE.RepeatWrapping=1E3;THREE.ClampToEdgeWrapping=1001;THREE.MirroredRepeatWrapping=1002;THREE.NearestFilter=1003;THREE.NearestMipMapNearestFilter=1004;THREE.NearestMipMapLinearFilter=1005;
THREE.LinearFilter=1006;THREE.LinearMipMapNearestFilter=1007;THREE.LinearMipMapLinearFilter=1008;THREE.UnsignedByteType=1009;THREE.ByteType=1010;THREE.ShortType=1011;THREE.UnsignedShortType=1012;THREE.IntType=1013;THREE.UnsignedIntType=1014;THREE.FloatType=1015;THREE.UnsignedShort4444Type=1016;THREE.UnsignedShort5551Type=1017;THREE.UnsignedShort565Type=1018;THREE.AlphaFormat=1019;THREE.RGBFormat=1020;THREE.RGBAFormat=1021;THREE.LuminanceFormat=1022;THREE.LuminanceAlphaFormat=1023;
THREE.RGB_S3TC_DXT1_Format=2001;THREE.RGBA_S3TC_DXT1_Format=2002;THREE.RGBA_S3TC_DXT3_Format=2003;THREE.RGBA_S3TC_DXT5_Format=2004;THREE.Color=function(a){return 3===arguments.length?this.setRGB(arguments[0],arguments[1],arguments[2]):this.set(a)};
THREE.Color.prototype={constructor:THREE.Color,r:1,g:1,b:1,set:function(a){a instanceof THREE.Color?this.copy(a):"number"===typeof a?this.setHex(a):"string"===typeof a&&this.setStyle(a);return this},setHex:function(a){a=Math.floor(a);this.r=(a>>16&255)/255;this.g=(a>>8&255)/255;this.b=(a&255)/255;return this},setRGB:function(a,b,c){this.r=a;this.g=b;this.b=c;return this},setHSL:function(a,b,c){if(0===b)this.r=this.g=this.b=c;else{var d=function(a,b,c){0>c&&(c+=1);1<c&&(c-=1);return c<1/6?a+6*(b-a)*
c:0.5>c?b:c<2/3?a+6*(b-a)*(2/3-c):a};b=0.5>=c?c*(1+b):c+b-c*b;c=2*c-b;this.r=d(c,b,a+1/3);this.g=d(c,b,a);this.b=d(c,b,a-1/3)}return this},setStyle:function(a){if(/^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.test(a))return a=/^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.exec(a),this.r=Math.min(255,parseInt(a[1],10))/255,this.g=Math.min(255,parseInt(a[2],10))/255,this.b=Math.min(255,parseInt(a[3],10))/255,this;if(/^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.test(a))return a=/^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.exec(a),this.r=
Math.min(100,parseInt(a[1],10))/100,this.g=Math.min(100,parseInt(a[2],10))/100,this.b=Math.min(100,parseInt(a[3],10))/100,this;if(/^\#([0-9a-f]{6})$/i.test(a))return a=/^\#([0-9a-f]{6})$/i.exec(a),this.setHex(parseInt(a[1],16)),this;if(/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test(a))return a=/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(a),this.setHex(parseInt(a[1]+a[1]+a[2]+a[2]+a[3]+a[3],16)),this;if(/^(\w+)$/i.test(a))return this.setHex(THREE.ColorKeywords[a]),this},copy:function(a){this.r=a.r;this.g=
a.g;this.b=a.b;return this},copyGammaToLinear:function(a){this.r=a.r*a.r;this.g=a.g*a.g;this.b=a.b*a.b;return this},copyLinearToGamma:function(a){this.r=Math.sqrt(a.r);this.g=Math.sqrt(a.g);this.b=Math.sqrt(a.b);return this},convertGammaToLinear:function(){var a=this.r,b=this.g,c=this.b;this.r=a*a;this.g=b*b;this.b=c*c;return this},convertLinearToGamma:function(){this.r=Math.sqrt(this.r);this.g=Math.sqrt(this.g);this.b=Math.sqrt(this.b);return this},getHex:function(){return 255*this.r<<16^255*this.g<<
8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(a){a=a||{h:0,s:0,l:0};var b=this.r,c=this.g,d=this.b,e=Math.max(b,c,d),f=Math.min(b,c,d),g,h=(f+e)/2;if(f===e)f=g=0;else{var k=e-f,f=0.5>=h?k/(e+f):k/(2-e-f);switch(e){case b:g=(c-d)/k+(c<d?6:0);break;case c:g=(d-b)/k+2;break;case d:g=(b-c)/k+4}g/=6}a.h=g;a.s=f;a.l=h;return a},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(a,
b,c){var d=this.getHSL();d.h+=a;d.s+=b;d.l+=c;this.setHSL(d.h,d.s,d.l);return this},add:function(a){this.r+=a.r;this.g+=a.g;this.b+=a.b;return this},addColors:function(a,b){this.r=a.r+b.r;this.g=a.g+b.g;this.b=a.b+b.b;return this},addScalar:function(a){this.r+=a;this.g+=a;this.b+=a;return this},multiply:function(a){this.r*=a.r;this.g*=a.g;this.b*=a.b;return this},multiplyScalar:function(a){this.r*=a;this.g*=a;this.b*=a;return this},lerp:function(a,b){this.r+=(a.r-this.r)*b;this.g+=(a.g-this.g)*b;
this.b+=(a.b-this.b)*b;return this},equals:function(a){return a.r===this.r&&a.g===this.g&&a.b===this.b},fromArray:function(a){this.r=a[0];this.g=a[1];this.b=a[2];return this},toArray:function(){return[this.r,this.g,this.b]},clone:function(){return(new THREE.Color).setRGB(this.r,this.g,this.b)}};
THREE.ColorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,
darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,
grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,
lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,
palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,
tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};THREE.Quaternion=function(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._w=void 0!==d?d:1};
THREE.Quaternion.prototype={constructor:THREE.Quaternion,_x:0,_y:0,_z:0,_w:0,get x(){return this._x},set x(a){this._x=a;this.onChangeCallback()},get y(){return this._y},set y(a){this._y=a;this.onChangeCallback()},get z(){return this._z},set z(a){this._z=a;this.onChangeCallback()},get w(){return this._w},set w(a){this._w=a;this.onChangeCallback()},set:function(a,b,c,d){this._x=a;this._y=b;this._z=c;this._w=d;this.onChangeCallback();return this},copy:function(a){this._x=a.x;this._y=a.y;this._z=a.z;
this._w=a.w;this.onChangeCallback();return this},setFromEuler:function(a,b){if(!1===a instanceof THREE.Euler)throw Error("THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var c=Math.cos(a._x/2),d=Math.cos(a._y/2),e=Math.cos(a._z/2),f=Math.sin(a._x/2),g=Math.sin(a._y/2),h=Math.sin(a._z/2);"XYZ"===a.order?(this._x=f*d*e+c*g*h,this._y=c*g*e-f*d*h,this._z=c*d*h+f*g*e,this._w=c*d*e-f*g*h):"YXZ"===a.order?(this._x=f*d*e+c*g*h,this._y=c*g*e-f*d*h,this._z=
c*d*h-f*g*e,this._w=c*d*e+f*g*h):"ZXY"===a.order?(this._x=f*d*e-c*g*h,this._y=c*g*e+f*d*h,this._z=c*d*h+f*g*e,this._w=c*d*e-f*g*h):"ZYX"===a.order?(this._x=f*d*e-c*g*h,this._y=c*g*e+f*d*h,this._z=c*d*h-f*g*e,this._w=c*d*e+f*g*h):"YZX"===a.order?(this._x=f*d*e+c*g*h,this._y=c*g*e+f*d*h,this._z=c*d*h-f*g*e,this._w=c*d*e-f*g*h):"XZY"===a.order&&(this._x=f*d*e-c*g*h,this._y=c*g*e-f*d*h,this._z=c*d*h+f*g*e,this._w=c*d*e+f*g*h);if(!1!==b)this.onChangeCallback();return this},setFromAxisAngle:function(a,
b){var c=b/2,d=Math.sin(c);this._x=a.x*d;this._y=a.y*d;this._z=a.z*d;this._w=Math.cos(c);this.onChangeCallback();return this},setFromRotationMatrix:function(a){var b=a.elements,c=b[0];a=b[4];var d=b[8],e=b[1],f=b[5],g=b[9],h=b[2],k=b[6],b=b[10],l=c+f+b;0<l?(c=0.5/Math.sqrt(l+1),this._w=0.25/c,this._x=(k-g)*c,this._y=(d-h)*c,this._z=(e-a)*c):c>f&&c>b?(c=2*Math.sqrt(1+c-f-b),this._w=(k-g)/c,this._x=0.25*c,this._y=(a+e)/c,this._z=(d+h)/c):f>b?(c=2*Math.sqrt(1+f-c-b),this._w=(d-h)/c,this._x=(a+e)/c,this._y=
0.25*c,this._z=(g+k)/c):(c=2*Math.sqrt(1+b-c-f),this._w=(e-a)/c,this._x=(d+h)/c,this._y=(g+k)/c,this._z=0.25*c);this.onChangeCallback();return this},setFromUnitVectors:function(){var a,b;return function(c,d){void 0===a&&(a=new THREE.Vector3);b=c.dot(d)+1;1E-6>b?(b=0,Math.abs(c.x)>Math.abs(c.z)?a.set(-c.y,c.x,0):a.set(0,-c.z,c.y)):a.crossVectors(c,d);this._x=a.x;this._y=a.y;this._z=a.z;this._w=b;this.normalize();return this}}(),inverse:function(){this.conjugate().normalize();return this},conjugate:function(){this._x*=
-1;this._y*=-1;this._z*=-1;this.onChangeCallback();return this},dot:function(a){return this._x*a._x+this._y*a._y+this._z*a._z+this._w*a._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var a=this.length();0===a?(this._z=this._y=this._x=0,this._w=1):(a=1/a,this._x*=a,this._y*=a,this._z*=a,this._w*=a);this.onChangeCallback();return this},
multiply:function(a,b){return void 0!==b?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(a,b)):this.multiplyQuaternions(this,a)},multiplyQuaternions:function(a,b){var c=a._x,d=a._y,e=a._z,f=a._w,g=b._x,h=b._y,k=b._z,l=b._w;this._x=c*l+f*g+d*k-e*h;this._y=d*l+f*h+e*g-c*k;this._z=e*l+f*k+c*h-d*g;this._w=f*l-c*g-d*h-e*k;this.onChangeCallback();return this},multiplyVector3:function(a){console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");
return a.applyQuaternion(this)},slerp:function(a,b){var c=this._x,d=this._y,e=this._z,f=this._w,g=f*a._w+c*a._x+d*a._y+e*a._z;0>g?(this._w=-a._w,this._x=-a._x,this._y=-a._y,this._z=-a._z,g=-g):this.copy(a);if(1<=g)return this._w=f,this._x=c,this._y=d,this._z=e,this;var h=Math.acos(g),k=Math.sqrt(1-g*g);if(0.001>Math.abs(k))return this._w=0.5*(f+this._w),this._x=0.5*(c+this._x),this._y=0.5*(d+this._y),this._z=0.5*(e+this._z),this;g=Math.sin((1-b)*h)/k;h=Math.sin(b*h)/k;this._w=f*g+this._w*h;this._x=
c*g+this._x*h;this._y=d*g+this._y*h;this._z=e*g+this._z*h;this.onChangeCallback();return this},equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._w===this._w},fromArray:function(a){this._x=a[0];this._y=a[1];this._z=a[2];this._w=a[3];this.onChangeCallback();return this},toArray:function(){return[this._x,this._y,this._z,this._w]},onChange:function(a){this.onChangeCallback=a;return this},onChangeCallback:function(){},clone:function(){return new THREE.Quaternion(this._x,this._y,
this._z,this._w)}};THREE.Quaternion.slerp=function(a,b,c,d){return c.copy(a).slerp(b,d)};THREE.Vector2=function(a,b){this.x=a||0;this.y=b||0};
THREE.Vector2.prototype={constructor:THREE.Vector2,set:function(a,b){this.x=a;this.y=b;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;default:throw Error("index is out of range: "+a);}},copy:function(a){this.x=a.x;this.y=a.y;return this},add:function(a,
b){if(void 0!==b)return console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this},addScalar:function(a){this.x+=a;this.y+=a;return this},sub:function(a,b){if(void 0!==b)return console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b);this.x-=a.x;this.y-=a.y;return this},
subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this},multiply:function(a){this.x*=a.x;this.y*=a.y;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;return this},divide:function(a){this.x/=a.x;this.y/=a.y;return this},divideScalar:function(a){0!==a?(a=1/a,this.x*=a,this.y*=a):this.y=this.x=0;return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);return this},max:function(a){this.x<a.x&&(this.x=a.x);this.y<a.y&&(this.y=a.y);return this},clamp:function(a,
b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);return this},clampScalar:function(){var a,b;return function(c,d){void 0===a&&(a=new THREE.Vector2,b=new THREE.Vector2);a.set(c,c);b.set(d,d);return this.clamp(a,b)}}(),floor:function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this},round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this},
roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);return this},negate:function(){this.x=-this.x;this.y=-this.y;return this},dot:function(a){return this.x*a.x+this.y*a.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},normalize:function(){return this.divideScalar(this.length())},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=
this.x-a.x;a=this.y-a.y;return b*b+a*a},setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;return this},equals:function(a){return a.x===this.x&&a.y===this.y},fromArray:function(a){this.x=a[0];this.y=a[1];return this},toArray:function(){return[this.x,this.y]},clone:function(){return new THREE.Vector2(this.x,this.y)}};THREE.Vector3=function(a,b,c){this.x=a||0;this.y=b||0;this.z=c||0};
THREE.Vector3.prototype={constructor:THREE.Vector3,set:function(a,b,c){this.x=a;this.y=b;this.z=c;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw Error("index is out of range: "+
a);}},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;return this},add:function(a,b){if(void 0!==b)return console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this},sub:function(a,b){if(void 0!==b)return console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
this.subVectors(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this},multiply:function(a,b){if(void 0!==b)return console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(a,b);this.x*=a.x;this.y*=a.y;this.z*=a.z;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;return this},multiplyVectors:function(a,b){this.x=a.x*b.x;this.y=
a.y*b.y;this.z=a.z*b.z;return this},applyEuler:function(){var a;return function(b){!1===b instanceof THREE.Euler&&console.error("THREE.Vector3: .applyEuler() now expects a Euler rotation rather than a Vector3 and order.");void 0===a&&(a=new THREE.Quaternion);this.applyQuaternion(a.setFromEuler(b));return this}}(),applyAxisAngle:function(){var a;return function(b,c){void 0===a&&(a=new THREE.Quaternion);this.applyQuaternion(a.setFromAxisAngle(b,c));return this}}(),applyMatrix3:function(a){var b=this.x,
c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[3]*c+a[6]*d;this.y=a[1]*b+a[4]*c+a[7]*d;this.z=a[2]*b+a[5]*c+a[8]*d;return this},applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12];this.y=a[1]*b+a[5]*c+a[9]*d+a[13];this.z=a[2]*b+a[6]*c+a[10]*d+a[14];return this},applyProjection:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;var e=1/(a[3]*b+a[7]*c+a[11]*d+a[15]);this.x=(a[0]*b+a[4]*c+a[8]*d+a[12])*e;this.y=(a[1]*b+a[5]*c+a[9]*d+a[13])*e;this.z=
(a[2]*b+a[6]*c+a[10]*d+a[14])*e;return this},applyQuaternion:function(a){var b=this.x,c=this.y,d=this.z,e=a.x,f=a.y,g=a.z;a=a.w;var h=a*b+f*d-g*c,k=a*c+g*b-e*d,l=a*d+e*c-f*b,b=-e*b-f*c-g*d;this.x=h*a+b*-e+k*-g-l*-f;this.y=k*a+b*-f+l*-e-h*-g;this.z=l*a+b*-g+h*-f-k*-e;return this},transformDirection:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d;this.y=a[1]*b+a[5]*c+a[9]*d;this.z=a[2]*b+a[6]*c+a[10]*d;this.normalize();return this},divide:function(a){this.x/=a.x;
this.y/=a.y;this.z/=a.z;return this},divideScalar:function(a){0!==a?(a=1/a,this.x*=a,this.y*=a,this.z*=a):this.z=this.y=this.x=0;return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);this.z>a.z&&(this.z=a.z);return this},max:function(a){this.x<a.x&&(this.x=a.x);this.y<a.y&&(this.y=a.y);this.z<a.z&&(this.z=a.z);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);this.z<a.z?this.z=a.z:this.z>b.z&&(this.z=
b.z);return this},clampScalar:function(){var a,b;return function(c,d){void 0===a&&(a=new THREE.Vector3,b=new THREE.Vector3);a.set(c,c,c);b.set(d,d,d);return this.clamp(a,b)}}(),floor:function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this},round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this},roundToZero:function(){this.x=
0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);this.z=0>this.z?Math.ceil(this.z):Math.floor(this.z);return this},negate:function(){this.x=-this.x;this.y=-this.y;this.z=-this.z;return this},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+
Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length())},setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;return this},cross:function(a,b){if(void 0!==b)return console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(a,b);var c=this.x,d=this.y,e=this.z;this.x=d*a.z-e*a.y;this.y=
e*a.x-c*a.z;this.z=c*a.y-d*a.x;return this},crossVectors:function(a,b){var c=a.x,d=a.y,e=a.z,f=b.x,g=b.y,h=b.z;this.x=d*h-e*g;this.y=e*f-c*h;this.z=c*g-d*f;return this},projectOnVector:function(){var a,b;return function(c){void 0===a&&(a=new THREE.Vector3);a.copy(c).normalize();b=this.dot(a);return this.copy(a).multiplyScalar(b)}}(),projectOnPlane:function(){var a;return function(b){void 0===a&&(a=new THREE.Vector3);a.copy(this).projectOnVector(b);return this.sub(a)}}(),reflect:function(){var a;return function(b){void 0===
a&&(a=new THREE.Vector3);return this.sub(a.copy(b).multiplyScalar(2*this.dot(b)))}}(),angleTo:function(a){a=this.dot(a)/(this.length()*a.length());return Math.acos(THREE.Math.clamp(a,-1,1))},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x,c=this.y-a.y;a=this.z-a.z;return b*b+c*c+a*a},setEulerFromRotationMatrix:function(a,b){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},
setEulerFromQuaternion:function(a,b){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(a){console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");return this.setFromMatrixPosition(a)},getScaleFromMatrix:function(a){console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");return this.setFromMatrixScale(a)},getColumnFromMatrix:function(a,
b){console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");return this.setFromMatrixColumn(a,b)},setFromMatrixPosition:function(a){this.x=a.elements[12];this.y=a.elements[13];this.z=a.elements[14];return this},setFromMatrixScale:function(a){var b=this.set(a.elements[0],a.elements[1],a.elements[2]).length(),c=this.set(a.elements[4],a.elements[5],a.elements[6]).length();a=this.set(a.elements[8],a.elements[9],a.elements[10]).length();this.x=b;this.y=c;this.z=
a;return this},setFromMatrixColumn:function(a,b){var c=4*a,d=b.elements;this.x=d[c];this.y=d[c+1];this.z=d[c+2];return this},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z},fromArray:function(a){this.x=a[0];this.y=a[1];this.z=a[2];return this},toArray:function(){return[this.x,this.y,this.z]},clone:function(){return new THREE.Vector3(this.x,this.y,this.z)}};THREE.Vector4=function(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1};
THREE.Vector4.prototype={constructor:THREE.Vector4,set:function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setW:function(a){this.w=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;case 3:this.w=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;
case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw Error("index is out of range: "+a);}},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=void 0!==a.w?a.w:1;return this},add:function(a,b){if(void 0!==b)return console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;this.w+=a.w;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;this.w+=a;return this},
addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this},sub:function(a,b){if(void 0!==b)return console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;this.w-=a.w;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;this.w*=a;return this},applyMatrix4:function(a){var b=
this.x,c=this.y,d=this.z,e=this.w;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12]*e;this.y=a[1]*b+a[5]*c+a[9]*d+a[13]*e;this.z=a[2]*b+a[6]*c+a[10]*d+a[14]*e;this.w=a[3]*b+a[7]*c+a[11]*d+a[15]*e;return this},divideScalar:function(a){0!==a?(a=1/a,this.x*=a,this.y*=a,this.z*=a,this.w*=a):(this.z=this.y=this.x=0,this.w=1);return this},setAxisAngleFromQuaternion:function(a){this.w=2*Math.acos(a.w);var b=Math.sqrt(1-a.w*a.w);1E-4>b?(this.x=1,this.z=this.y=0):(this.x=a.x/b,this.y=a.y/b,this.z=a.z/b);return this},
setAxisAngleFromRotationMatrix:function(a){var b,c,d;a=a.elements;var e=a[0];d=a[4];var f=a[8],g=a[1],h=a[5],k=a[9];c=a[2];b=a[6];var l=a[10];if(0.01>Math.abs(d-g)&&0.01>Math.abs(f-c)&&0.01>Math.abs(k-b)){if(0.1>Math.abs(d+g)&&0.1>Math.abs(f+c)&&0.1>Math.abs(k+b)&&0.1>Math.abs(e+h+l-3))return this.set(1,0,0,0),this;a=Math.PI;e=(e+1)/2;h=(h+1)/2;l=(l+1)/2;d=(d+g)/4;f=(f+c)/4;k=(k+b)/4;e>h&&e>l?0.01>e?(b=0,d=c=0.707106781):(b=Math.sqrt(e),c=d/b,d=f/b):h>l?0.01>h?(b=0.707106781,c=0,d=0.707106781):(c=
Math.sqrt(h),b=d/c,d=k/c):0.01>l?(c=b=0.707106781,d=0):(d=Math.sqrt(l),b=f/d,c=k/d);this.set(b,c,d,a);return this}a=Math.sqrt((b-k)*(b-k)+(f-c)*(f-c)+(g-d)*(g-d));0.001>Math.abs(a)&&(a=1);this.x=(b-k)/a;this.y=(f-c)/a;this.z=(g-d)/a;this.w=Math.acos((e+h+l-1)/2);return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);this.z>a.z&&(this.z=a.z);this.w>a.w&&(this.w=a.w);return this},max:function(a){this.x<a.x&&(this.x=a.x);this.y<a.y&&(this.y=a.y);this.z<a.z&&(this.z=a.z);this.w<
a.w&&(this.w=a.w);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);this.z<a.z?this.z=a.z:this.z>b.z&&(this.z=b.z);this.w<a.w?this.w=a.w:this.w>b.w&&(this.w=b.w);return this},clampScalar:function(){var a,b;return function(c,d){void 0===a&&(a=new THREE.Vector4,b=new THREE.Vector4);a.set(c,c,c,c);b.set(d,d,d,d);return this.clamp(a,b)}}(),floor:function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);
this.w=Math.floor(this.w);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this},round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);this.z=0>this.z?Math.ceil(this.z):Math.floor(this.z);this.w=0>this.w?Math.ceil(this.w):
Math.floor(this.w);return this},negate:function(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w;return this},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z+this.w*a.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length())},
setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;this.w+=(a.w-this.w)*b;return this},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z&&a.w===this.w},fromArray:function(a){this.x=a[0];this.y=a[1];this.z=a[2];this.w=a[3];return this},toArray:function(){return[this.x,this.y,this.z,this.w]},clone:function(){return new THREE.Vector4(this.x,this.y,this.z,
this.w)}};THREE.Euler=function(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._order=d||THREE.Euler.DefaultOrder};THREE.Euler.RotationOrders="XYZ YZX ZXY XZY YXZ ZYX".split(" ");THREE.Euler.DefaultOrder="XYZ";
THREE.Euler.prototype={constructor:THREE.Euler,_x:0,_y:0,_z:0,_order:THREE.Euler.DefaultOrder,get x(){return this._x},set x(a){this._x=a;this.onChangeCallback()},get y(){return this._y},set y(a){this._y=a;this.onChangeCallback()},get z(){return this._z},set z(a){this._z=a;this.onChangeCallback()},get order(){return this._order},set order(a){this._order=a;this.onChangeCallback()},set:function(a,b,c,d){this._x=a;this._y=b;this._z=c;this._order=d||this._order;this.onChangeCallback();return this},copy:function(a){this._x=
a._x;this._y=a._y;this._z=a._z;this._order=a._order;this.onChangeCallback();return this},setFromRotationMatrix:function(a,b){var c=THREE.Math.clamp,d=a.elements,e=d[0],f=d[4],g=d[8],h=d[1],k=d[5],l=d[9],n=d[2],q=d[6],d=d[10];b=b||this._order;"XYZ"===b?(this._y=Math.asin(c(g,-1,1)),0.99999>Math.abs(g)?(this._x=Math.atan2(-l,d),this._z=Math.atan2(-f,e)):(this._x=Math.atan2(q,k),this._z=0)):"YXZ"===b?(this._x=Math.asin(-c(l,-1,1)),0.99999>Math.abs(l)?(this._y=Math.atan2(g,d),this._z=Math.atan2(h,k)):
(this._y=Math.atan2(-n,e),this._z=0)):"ZXY"===b?(this._x=Math.asin(c(q,-1,1)),0.99999>Math.abs(q)?(this._y=Math.atan2(-n,d),this._z=Math.atan2(-f,k)):(this._y=0,this._z=Math.atan2(h,e))):"ZYX"===b?(this._y=Math.asin(-c(n,-1,1)),0.99999>Math.abs(n)?(this._x=Math.atan2(q,d),this._z=Math.atan2(h,e)):(this._x=0,this._z=Math.atan2(-f,k))):"YZX"===b?(this._z=Math.asin(c(h,-1,1)),0.99999>Math.abs(h)?(this._x=Math.atan2(-l,k),this._y=Math.atan2(-n,e)):(this._x=0,this._y=Math.atan2(g,d))):"XZY"===b?(this._z=
Math.asin(-c(f,-1,1)),0.99999>Math.abs(f)?(this._x=Math.atan2(q,k),this._y=Math.atan2(g,e)):(this._x=Math.atan2(-l,d),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+b);this._order=b;this.onChangeCallback();return this},setFromQuaternion:function(a,b,c){var d=THREE.Math.clamp,e=a.x*a.x,f=a.y*a.y,g=a.z*a.z,h=a.w*a.w;b=b||this._order;"XYZ"===b?(this._x=Math.atan2(2*(a.x*a.w-a.y*a.z),h-e-f+g),this._y=Math.asin(d(2*(a.x*a.z+a.y*a.w),-1,1)),this._z=Math.atan2(2*
(a.z*a.w-a.x*a.y),h+e-f-g)):"YXZ"===b?(this._x=Math.asin(d(2*(a.x*a.w-a.y*a.z),-1,1)),this._y=Math.atan2(2*(a.x*a.z+a.y*a.w),h-e-f+g),this._z=Math.atan2(2*(a.x*a.y+a.z*a.w),h-e+f-g)):"ZXY"===b?(this._x=Math.asin(d(2*(a.x*a.w+a.y*a.z),-1,1)),this._y=Math.atan2(2*(a.y*a.w-a.z*a.x),h-e-f+g),this._z=Math.atan2(2*(a.z*a.w-a.x*a.y),h-e+f-g)):"ZYX"===b?(this._x=Math.atan2(2*(a.x*a.w+a.z*a.y),h-e-f+g),this._y=Math.asin(d(2*(a.y*a.w-a.x*a.z),-1,1)),this._z=Math.atan2(2*(a.x*a.y+a.z*a.w),h+e-f-g)):"YZX"===
b?(this._x=Math.atan2(2*(a.x*a.w-a.z*a.y),h-e+f-g),this._y=Math.atan2(2*(a.y*a.w-a.x*a.z),h+e-f-g),this._z=Math.asin(d(2*(a.x*a.y+a.z*a.w),-1,1))):"XZY"===b?(this._x=Math.atan2(2*(a.x*a.w+a.y*a.z),h-e+f-g),this._y=Math.atan2(2*(a.x*a.z+a.y*a.w),h+e-f-g),this._z=Math.asin(d(2*(a.z*a.w-a.x*a.y),-1,1))):console.warn("THREE.Euler: .setFromQuaternion() given unsupported order: "+b);this._order=b;if(!1!==c)this.onChangeCallback();return this},reorder:function(){var a=new THREE.Quaternion;return function(b){a.setFromEuler(this);
this.setFromQuaternion(a,b)}}(),equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._order===this._order},fromArray:function(a){this._x=a[0];this._y=a[1];this._z=a[2];void 0!==a[3]&&(this._order=a[3]);this.onChangeCallback();return this},toArray:function(){return[this._x,this._y,this._z,this._order]},onChange:function(a){this.onChangeCallback=a;return this},onChangeCallback:function(){},clone:function(){return new THREE.Euler(this._x,this._y,this._z,this._order)}};
THREE.Line3=function(a,b){this.start=void 0!==a?a:new THREE.Vector3;this.end=void 0!==b?b:new THREE.Vector3};
THREE.Line3.prototype={constructor:THREE.Line3,set:function(a,b){this.start.copy(a);this.end.copy(b);return this},copy:function(a){this.start.copy(a.start);this.end.copy(a.end);return this},center:function(a){return(a||new THREE.Vector3).addVectors(this.start,this.end).multiplyScalar(0.5)},delta:function(a){return(a||new THREE.Vector3).subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(a,
b){var c=b||new THREE.Vector3;return this.delta(c).multiplyScalar(a).add(this.start)},closestPointToPointParameter:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d){a.subVectors(c,this.start);b.subVectors(this.end,this.start);var e=b.dot(b),e=b.dot(a)/e;d&&(e=THREE.Math.clamp(e,0,1));return e}}(),closestPointToPoint:function(a,b,c){a=this.closestPointToPointParameter(a,b);c=c||new THREE.Vector3;return this.delta(c).multiplyScalar(a).add(this.start)},applyMatrix4:function(a){this.start.applyMatrix4(a);
this.end.applyMatrix4(a);return this},equals:function(a){return a.start.equals(this.start)&&a.end.equals(this.end)},clone:function(){return(new THREE.Line3).copy(this)}};THREE.Box2=function(a,b){this.min=void 0!==a?a:new THREE.Vector2(Infinity,Infinity);this.max=void 0!==b?b:new THREE.Vector2(-Infinity,-Infinity)};
THREE.Box2.prototype={constructor:THREE.Box2,set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromPoints:function(a){this.makeEmpty();for(var b=0,c=a.length;b<c;b++)this.expandByPoint(a[b]);return this},setFromCenterAndSize:function(){var a=new THREE.Vector2;return function(b,c){var d=a.copy(c).multiplyScalar(0.5);this.min.copy(b).sub(d);this.max.copy(b).add(d);return this}}(),copy:function(a){this.min.copy(a.min);this.max.copy(a.max);return this},makeEmpty:function(){this.min.x=
this.min.y=Infinity;this.max.x=this.max.y=-Infinity;return this},empty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},center:function(a){return(a||new THREE.Vector2).addVectors(this.min,this.max).multiplyScalar(0.5)},size:function(a){return(a||new THREE.Vector2).subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);
this.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y?!0:!1},getParameter:function(a,b){return(b||new THREE.Vector2).set((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y))},isIntersectionBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>
this.max.y?!1:!0},clampPoint:function(a,b){return(b||new THREE.Vector2).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new THREE.Vector2;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),intersect:function(a){this.min.max(a.min);this.max.min(a.max);return this},union:function(a){this.min.min(a.min);this.max.max(a.max);return this},translate:function(a){this.min.add(a);this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&
a.max.equals(this.max)},clone:function(){return(new THREE.Box2).copy(this)}};THREE.Box3=function(a,b){this.min=void 0!==a?a:new THREE.Vector3(Infinity,Infinity,Infinity);this.max=void 0!==b?b:new THREE.Vector3(-Infinity,-Infinity,-Infinity)};
THREE.Box3.prototype={constructor:THREE.Box3,set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromPoints:function(a){this.makeEmpty();for(var b=0,c=a.length;b<c;b++)this.expandByPoint(a[b]);return this},setFromCenterAndSize:function(){var a=new THREE.Vector3;return function(b,c){var d=a.copy(c).multiplyScalar(0.5);this.min.copy(b).sub(d);this.max.copy(b).add(d);return this}}(),setFromObject:function(){var a=new THREE.Vector3;return function(b){var c=this;b.updateMatrixWorld(!0);
this.makeEmpty();b.traverse(function(b){if(void 0!==b.geometry&&void 0!==b.geometry.vertices)for(var e=b.geometry.vertices,f=0,g=e.length;f<g;f++)a.copy(e[f]),a.applyMatrix4(b.matrixWorld),c.expandByPoint(a)});return this}}(),copy:function(a){this.min.copy(a.min);this.max.copy(a.max);return this},makeEmpty:function(){this.min.x=this.min.y=this.min.z=Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this},empty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},
center:function(a){return(a||new THREE.Vector3).addVectors(this.min,this.max).multiplyScalar(0.5)},size:function(a){return(a||new THREE.Vector3).subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);this.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y||
a.z<this.min.z||a.z>this.max.z?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y&&this.min.z<=a.min.z&&a.max.z<=this.max.z?!0:!1},getParameter:function(a,b){return(b||new THREE.Vector3).set((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y),(a.z-this.min.z)/(this.max.z-this.min.z))},isIntersectionBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y||
a.max.z<this.min.z||a.min.z>this.max.z?!1:!0},clampPoint:function(a,b){return(b||new THREE.Vector3).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new THREE.Vector3;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),getBoundingSphere:function(){var a=new THREE.Vector3;return function(b){b=b||new THREE.Sphere;b.center=this.center();b.radius=0.5*this.size(a).length();return b}}(),intersect:function(a){this.min.max(a.min);this.max.min(a.max);return this},
union:function(a){this.min.min(a.min);this.max.max(a.max);return this},applyMatrix4:function(){var a=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];return function(b){a[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(b);a[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(b);a[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(b);a[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(b);
a[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(b);a[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(b);a[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(b);a[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(b);this.makeEmpty();this.setFromPoints(a);return this}}(),translate:function(a){this.min.add(a);this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)},clone:function(){return(new THREE.Box3).copy(this)}};
THREE.Matrix3=function(a,b,c,d,e,f,g,h,k){var l=this.elements=new Float32Array(9);l[0]=void 0!==a?a:1;l[3]=b||0;l[6]=c||0;l[1]=d||0;l[4]=void 0!==e?e:1;l[7]=f||0;l[2]=g||0;l[5]=h||0;l[8]=void 0!==k?k:1};
THREE.Matrix3.prototype={constructor:THREE.Matrix3,set:function(a,b,c,d,e,f,g,h,k){var l=this.elements;l[0]=a;l[3]=b;l[6]=c;l[1]=d;l[4]=e;l[7]=f;l[2]=g;l[5]=h;l[8]=k;return this},identity:function(){this.set(1,0,0,0,1,0,0,0,1);return this},copy:function(a){a=a.elements;this.set(a[0],a[3],a[6],a[1],a[4],a[7],a[2],a[5],a[8]);return this},multiplyVector3:function(a){console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");return a.applyMatrix3(this)},
multiplyVector3Array:function(a){console.warn("THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.");return this.applyToVector3Array(a)},applyToVector3Array:function(){var a=new THREE.Vector3;return function(b,c,d){void 0===c&&(c=0);void 0===d&&(d=b.length);for(var e=0;e<d;e+=3,c+=3)a.x=b[c],a.y=b[c+1],a.z=b[c+2],a.applyMatrix3(this),b[c]=a.x,b[c+1]=a.y,b[c+2]=a.z;return b}}(),multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[3]*=a;b[6]*=
a;b[1]*=a;b[4]*=a;b[7]*=a;b[2]*=a;b[5]*=a;b[8]*=a;return this},determinant:function(){var a=this.elements,b=a[0],c=a[1],d=a[2],e=a[3],f=a[4],g=a[5],h=a[6],k=a[7],a=a[8];return b*f*a-b*g*k-c*e*a+c*g*h+d*e*k-d*f*h},getInverse:function(a,b){var c=a.elements,d=this.elements;d[0]=c[10]*c[5]-c[6]*c[9];d[1]=-c[10]*c[1]+c[2]*c[9];d[2]=c[6]*c[1]-c[2]*c[5];d[3]=-c[10]*c[4]+c[6]*c[8];d[4]=c[10]*c[0]-c[2]*c[8];d[5]=-c[6]*c[0]+c[2]*c[4];d[6]=c[9]*c[4]-c[5]*c[8];d[7]=-c[9]*c[0]+c[1]*c[8];d[8]=c[5]*c[0]-c[1]*c[4];
c=c[0]*d[0]+c[1]*d[3]+c[2]*d[6];if(0===c){if(b)throw Error("Matrix3.getInverse(): can't invert matrix, determinant is 0");console.warn("Matrix3.getInverse(): can't invert matrix, determinant is 0");this.identity();return this}this.multiplyScalar(1/c);return this},transpose:function(){var a,b=this.elements;a=b[1];b[1]=b[3];b[3]=a;a=b[2];b[2]=b[6];b[6]=a;a=b[5];b[5]=b[7];b[7]=a;return this},flattenToArrayOffset:function(a,b){var c=this.elements;a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];
a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];return a},getNormalMatrix:function(a){this.getInverse(a).transpose();return this},transposeIntoArray:function(a){var b=this.elements;a[0]=b[0];a[1]=b[3];a[2]=b[6];a[3]=b[1];a[4]=b[4];a[5]=b[7];a[6]=b[2];a[7]=b[5];a[8]=b[8];return this},fromArray:function(a){this.elements.set(a);return this},toArray:function(){var a=this.elements;return[a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8]]},clone:function(){var a=this.elements;return new THREE.Matrix3(a[0],a[3],
a[6],a[1],a[4],a[7],a[2],a[5],a[8])}};THREE.Matrix4=function(a,b,c,d,e,f,g,h,k,l,n,q,r,t,s,p){var v=this.elements=new Float32Array(16);v[0]=void 0!==a?a:1;v[4]=b||0;v[8]=c||0;v[12]=d||0;v[1]=e||0;v[5]=void 0!==f?f:1;v[9]=g||0;v[13]=h||0;v[2]=k||0;v[6]=l||0;v[10]=void 0!==n?n:1;v[14]=q||0;v[3]=r||0;v[7]=t||0;v[11]=s||0;v[15]=void 0!==p?p:1};
THREE.Matrix4.prototype={constructor:THREE.Matrix4,set:function(a,b,c,d,e,f,g,h,k,l,n,q,r,t,s,p){var v=this.elements;v[0]=a;v[4]=b;v[8]=c;v[12]=d;v[1]=e;v[5]=f;v[9]=g;v[13]=h;v[2]=k;v[6]=l;v[10]=n;v[14]=q;v[3]=r;v[7]=t;v[11]=s;v[15]=p;return this},identity:function(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this},copy:function(a){this.elements.set(a.elements);return this},extractPosition:function(a){console.warn("THREEMatrix4: .extractPosition() has been renamed to .copyPosition().");return this.copyPosition(a)},
copyPosition:function(a){var b=this.elements;a=a.elements;b[12]=a[12];b[13]=a[13];b[14]=a[14];return this},extractRotation:function(){var a=new THREE.Vector3;return function(b){var c=this.elements;b=b.elements;var d=1/a.set(b[0],b[1],b[2]).length(),e=1/a.set(b[4],b[5],b[6]).length(),f=1/a.set(b[8],b[9],b[10]).length();c[0]=b[0]*d;c[1]=b[1]*d;c[2]=b[2]*d;c[4]=b[4]*e;c[5]=b[5]*e;c[6]=b[6]*e;c[8]=b[8]*f;c[9]=b[9]*f;c[10]=b[10]*f;return this}}(),makeRotationFromEuler:function(a){!1===a instanceof THREE.Euler&&
console.error("THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var b=this.elements,c=a.x,d=a.y,e=a.z,f=Math.cos(c),c=Math.sin(c),g=Math.cos(d),d=Math.sin(d),h=Math.cos(e),e=Math.sin(e);if("XYZ"===a.order){a=f*h;var k=f*e,l=c*h,n=c*e;b[0]=g*h;b[4]=-g*e;b[8]=d;b[1]=k+l*d;b[5]=a-n*d;b[9]=-c*g;b[2]=n-a*d;b[6]=l+k*d;b[10]=f*g}else"YXZ"===a.order?(a=g*h,k=g*e,l=d*h,n=d*e,b[0]=a+n*c,b[4]=l*c-k,b[8]=f*d,b[1]=f*e,b[5]=f*h,b[9]=-c,b[2]=k*c-l,b[6]=n+a*c,
b[10]=f*g):"ZXY"===a.order?(a=g*h,k=g*e,l=d*h,n=d*e,b[0]=a-n*c,b[4]=-f*e,b[8]=l+k*c,b[1]=k+l*c,b[5]=f*h,b[9]=n-a*c,b[2]=-f*d,b[6]=c,b[10]=f*g):"ZYX"===a.order?(a=f*h,k=f*e,l=c*h,n=c*e,b[0]=g*h,b[4]=l*d-k,b[8]=a*d+n,b[1]=g*e,b[5]=n*d+a,b[9]=k*d-l,b[2]=-d,b[6]=c*g,b[10]=f*g):"YZX"===a.order?(a=f*g,k=f*d,l=c*g,n=c*d,b[0]=g*h,b[4]=n-a*e,b[8]=l*e+k,b[1]=e,b[5]=f*h,b[9]=-c*h,b[2]=-d*h,b[6]=k*e+l,b[10]=a-n*e):"XZY"===a.order&&(a=f*g,k=f*d,l=c*g,n=c*d,b[0]=g*h,b[4]=-e,b[8]=d*h,b[1]=a*e+n,b[5]=f*h,b[9]=k*
e-l,b[2]=l*e-k,b[6]=c*h,b[10]=n*e+a);b[3]=0;b[7]=0;b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return this},setRotationFromQuaternion:function(a){console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");return this.makeRotationFromQuaternion(a)},makeRotationFromQuaternion:function(a){var b=this.elements,c=a.x,d=a.y,e=a.z,f=a.w,g=c+c,h=d+d,k=e+e;a=c*g;var l=c*h,c=c*k,n=d*h,d=d*k,e=e*k,g=f*g,h=f*h,f=f*k;b[0]=1-(n+e);b[4]=l-f;b[8]=c+h;b[1]=l+f;b[5]=1-
(a+e);b[9]=d-g;b[2]=c-h;b[6]=d+g;b[10]=1-(a+n);b[3]=0;b[7]=0;b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return this},lookAt:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,f){var g=this.elements;c.subVectors(d,e).normalize();0===c.length()&&(c.z=1);a.crossVectors(f,c).normalize();0===a.length()&&(c.x+=1E-4,a.crossVectors(f,c).normalize());b.crossVectors(c,a);g[0]=a.x;g[4]=b.x;g[8]=c.x;g[1]=a.y;g[5]=b.y;g[9]=c.y;g[2]=a.z;g[6]=b.z;g[10]=c.z;return this}}(),
multiply:function(a,b){return void 0!==b?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(a,b)):this.multiplyMatrices(this,a)},multiplyMatrices:function(a,b){var c=a.elements,d=b.elements,e=this.elements,f=c[0],g=c[4],h=c[8],k=c[12],l=c[1],n=c[5],q=c[9],r=c[13],t=c[2],s=c[6],p=c[10],v=c[14],w=c[3],u=c[7],D=c[11],c=c[15],A=d[0],x=d[4],C=d[8],I=d[12],z=d[1],y=d[5],K=d[9],N=d[13],ba=d[2],P=d[6],O=d[10],J=d[14],E=d[3],
Q=d[7],L=d[11],d=d[15];e[0]=f*A+g*z+h*ba+k*E;e[4]=f*x+g*y+h*P+k*Q;e[8]=f*C+g*K+h*O+k*L;e[12]=f*I+g*N+h*J+k*d;e[1]=l*A+n*z+q*ba+r*E;e[5]=l*x+n*y+q*P+r*Q;e[9]=l*C+n*K+q*O+r*L;e[13]=l*I+n*N+q*J+r*d;e[2]=t*A+s*z+p*ba+v*E;e[6]=t*x+s*y+p*P+v*Q;e[10]=t*C+s*K+p*O+v*L;e[14]=t*I+s*N+p*J+v*d;e[3]=w*A+u*z+D*ba+c*E;e[7]=w*x+u*y+D*P+c*Q;e[11]=w*C+u*K+D*O+c*L;e[15]=w*I+u*N+D*J+c*d;return this},multiplyToArray:function(a,b,c){var d=this.elements;this.multiplyMatrices(a,b);c[0]=d[0];c[1]=d[1];c[2]=d[2];c[3]=d[3];
c[4]=d[4];c[5]=d[5];c[6]=d[6];c[7]=d[7];c[8]=d[8];c[9]=d[9];c[10]=d[10];c[11]=d[11];c[12]=d[12];c[13]=d[13];c[14]=d[14];c[15]=d[15];return this},multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[4]*=a;b[8]*=a;b[12]*=a;b[1]*=a;b[5]*=a;b[9]*=a;b[13]*=a;b[2]*=a;b[6]*=a;b[10]*=a;b[14]*=a;b[3]*=a;b[7]*=a;b[11]*=a;b[15]*=a;return this},multiplyVector3:function(a){console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.");
return a.applyProjection(this)},multiplyVector4:function(a){console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this)},multiplyVector3Array:function(a){console.warn("THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.");return this.applyToVector3Array(a)},applyToVector3Array:function(){var a=new THREE.Vector3;return function(b,c,d){void 0===c&&(c=0);void 0===d&&(d=
b.length);for(var e=0;e<d;e+=3,c+=3)a.x=b[c],a.y=b[c+1],a.z=b[c+2],a.applyMatrix4(this),b[c]=a.x,b[c+1]=a.y,b[c+2]=a.z;return b}}(),rotateAxis:function(a){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");a.transformDirection(this)},crossVector:function(a){console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this)},determinant:function(){var a=this.elements,b=
a[0],c=a[4],d=a[8],e=a[12],f=a[1],g=a[5],h=a[9],k=a[13],l=a[2],n=a[6],q=a[10],r=a[14];return a[3]*(+e*h*n-d*k*n-e*g*q+c*k*q+d*g*r-c*h*r)+a[7]*(+b*h*r-b*k*q+e*f*q-d*f*r+d*k*l-e*h*l)+a[11]*(+b*k*n-b*g*r-e*f*n+c*f*r+e*g*l-c*k*l)+a[15]*(-d*g*l-b*h*n+b*g*q+d*f*n-c*f*q+c*h*l)},transpose:function(){var a=this.elements,b;b=a[1];a[1]=a[4];a[4]=b;b=a[2];a[2]=a[8];a[8]=b;b=a[6];a[6]=a[9];a[9]=b;b=a[3];a[3]=a[12];a[12]=b;b=a[7];a[7]=a[13];a[13]=b;b=a[11];a[11]=a[14];a[14]=b;return this},flattenToArrayOffset:function(a,
b){var c=this.elements;a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];a[b+9]=c[9];a[b+10]=c[10];a[b+11]=c[11];a[b+12]=c[12];a[b+13]=c[13];a[b+14]=c[14];a[b+15]=c[15];return a},getPosition:function(){var a=new THREE.Vector3;return function(){console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");var b=this.elements;return a.set(b[12],b[13],b[14])}}(),setPosition:function(a){var b=
this.elements;b[12]=a.x;b[13]=a.y;b[14]=a.z;return this},getInverse:function(a,b){var c=this.elements,d=a.elements,e=d[0],f=d[4],g=d[8],h=d[12],k=d[1],l=d[5],n=d[9],q=d[13],r=d[2],t=d[6],s=d[10],p=d[14],v=d[3],w=d[7],u=d[11],d=d[15];c[0]=n*p*w-q*s*w+q*t*u-l*p*u-n*t*d+l*s*d;c[4]=h*s*w-g*p*w-h*t*u+f*p*u+g*t*d-f*s*d;c[8]=g*q*w-h*n*w+h*l*u-f*q*u-g*l*d+f*n*d;c[12]=h*n*t-g*q*t-h*l*s+f*q*s+g*l*p-f*n*p;c[1]=q*s*v-n*p*v-q*r*u+k*p*u+n*r*d-k*s*d;c[5]=g*p*v-h*s*v+h*r*u-e*p*u-g*r*d+e*s*d;c[9]=h*n*v-g*q*v-h*k*
u+e*q*u+g*k*d-e*n*d;c[13]=g*q*r-h*n*r+h*k*s-e*q*s-g*k*p+e*n*p;c[2]=l*p*v-q*t*v+q*r*w-k*p*w-l*r*d+k*t*d;c[6]=h*t*v-f*p*v-h*r*w+e*p*w+f*r*d-e*t*d;c[10]=f*q*v-h*l*v+h*k*w-e*q*w-f*k*d+e*l*d;c[14]=h*l*r-f*q*r-h*k*t+e*q*t+f*k*p-e*l*p;c[3]=n*t*v-l*s*v-n*r*w+k*s*w+l*r*u-k*t*u;c[7]=f*s*v-g*t*v+g*r*w-e*s*w-f*r*u+e*t*u;c[11]=g*l*v-f*n*v-g*k*w+e*n*w+f*k*u-e*l*u;c[15]=f*n*r-g*l*r+g*k*t-e*n*t-f*k*s+e*l*s;c=e*c[0]+k*c[4]+r*c[8]+v*c[12];if(0==c){if(b)throw Error("Matrix4.getInverse(): can't invert matrix, determinant is 0");
console.warn("Matrix4.getInverse(): can't invert matrix, determinant is 0");this.identity();return this}this.multiplyScalar(1/c);return this},translate:function(a){console.warn("THREE.Matrix4: .translate() has been removed.")},rotateX:function(a){console.warn("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(a){console.warn("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(a){console.warn("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(a,b){console.warn("THREE.Matrix4: .rotateByAxis() has been removed.")},
scale:function(a){var b=this.elements,c=a.x,d=a.y;a=a.z;b[0]*=c;b[4]*=d;b[8]*=a;b[1]*=c;b[5]*=d;b[9]*=a;b[2]*=c;b[6]*=d;b[10]*=a;b[3]*=c;b[7]*=d;b[11]*=a;return this},getMaxScaleOnAxis:function(){var a=this.elements;return Math.sqrt(Math.max(a[0]*a[0]+a[1]*a[1]+a[2]*a[2],Math.max(a[4]*a[4]+a[5]*a[5]+a[6]*a[6],a[8]*a[8]+a[9]*a[9]+a[10]*a[10])))},makeTranslation:function(a,b,c){this.set(1,0,0,a,0,1,0,b,0,0,1,c,0,0,0,1);return this},makeRotationX:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(1,
0,0,0,0,b,-a,0,0,a,b,0,0,0,0,1);return this},makeRotationY:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(b,0,a,0,0,1,0,0,-a,0,b,0,0,0,0,1);return this},makeRotationZ:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(b,-a,0,0,a,b,0,0,0,0,1,0,0,0,0,1);return this},makeRotationAxis:function(a,b){var c=Math.cos(b),d=Math.sin(b),e=1-c,f=a.x,g=a.y,h=a.z,k=e*f,l=e*g;this.set(k*f+c,k*g-d*h,k*h+d*g,0,k*g+d*h,l*g+c,l*h-d*f,0,k*h-d*g,l*h+d*f,e*h*h+c,0,0,0,0,1);return this},makeScale:function(a,b,c){this.set(a,
0,0,0,0,b,0,0,0,0,c,0,0,0,0,1);return this},compose:function(a,b,c){this.makeRotationFromQuaternion(b);this.scale(c);this.setPosition(a);return this},decompose:function(){var a=new THREE.Vector3,b=new THREE.Matrix4;return function(c,d,e){var f=this.elements,g=a.set(f[0],f[1],f[2]).length(),h=a.set(f[4],f[5],f[6]).length(),k=a.set(f[8],f[9],f[10]).length();0>this.determinant()&&(g=-g);c.x=f[12];c.y=f[13];c.z=f[14];b.elements.set(this.elements);c=1/g;var f=1/h,l=1/k;b.elements[0]*=c;b.elements[1]*=
c;b.elements[2]*=c;b.elements[4]*=f;b.elements[5]*=f;b.elements[6]*=f;b.elements[8]*=l;b.elements[9]*=l;b.elements[10]*=l;d.setFromRotationMatrix(b);e.x=g;e.y=h;e.z=k;return this}}(),makeFrustum:function(a,b,c,d,e,f){var g=this.elements;g[0]=2*e/(b-a);g[4]=0;g[8]=(b+a)/(b-a);g[12]=0;g[1]=0;g[5]=2*e/(d-c);g[9]=(d+c)/(d-c);g[13]=0;g[2]=0;g[6]=0;g[10]=-(f+e)/(f-e);g[14]=-2*f*e/(f-e);g[3]=0;g[7]=0;g[11]=-1;g[15]=0;return this},makePerspective:function(a,b,c,d){a=c*Math.tan(THREE.Math.degToRad(0.5*a));
var e=-a;return this.makeFrustum(e*b,a*b,e,a,c,d)},makeOrthographic:function(a,b,c,d,e,f){var g=this.elements,h=b-a,k=c-d,l=f-e;g[0]=2/h;g[4]=0;g[8]=0;g[12]=-((b+a)/h);g[1]=0;g[5]=2/k;g[9]=0;g[13]=-((c+d)/k);g[2]=0;g[6]=0;g[10]=-2/l;g[14]=-((f+e)/l);g[3]=0;g[7]=0;g[11]=0;g[15]=1;return this},fromArray:function(a){this.elements.set(a);return this},toArray:function(){var a=this.elements;return[a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]]},clone:function(){var a=
this.elements;return new THREE.Matrix4(a[0],a[4],a[8],a[12],a[1],a[5],a[9],a[13],a[2],a[6],a[10],a[14],a[3],a[7],a[11],a[15])}};THREE.Ray=function(a,b){this.origin=void 0!==a?a:new THREE.Vector3;this.direction=void 0!==b?b:new THREE.Vector3};
THREE.Ray.prototype={constructor:THREE.Ray,set:function(a,b){this.origin.copy(a);this.direction.copy(b);return this},copy:function(a){this.origin.copy(a.origin);this.direction.copy(a.direction);return this},at:function(a,b){return(b||new THREE.Vector3).copy(this.direction).multiplyScalar(a).add(this.origin)},recast:function(){var a=new THREE.Vector3;return function(b){this.origin.copy(this.at(b,a));return this}}(),closestPointToPoint:function(a,b){var c=b||new THREE.Vector3;c.subVectors(a,this.origin);
var d=c.dot(this.direction);return 0>d?c.copy(this.origin):c.copy(this.direction).multiplyScalar(d).add(this.origin)},distanceToPoint:function(){var a=new THREE.Vector3;return function(b){var c=a.subVectors(b,this.origin).dot(this.direction);if(0>c)return this.origin.distanceTo(b);a.copy(this.direction).multiplyScalar(c).add(this.origin);return a.distanceTo(b)}}(),distanceSqToSegment:function(a,b,c,d){var e=a.clone().add(b).multiplyScalar(0.5),f=b.clone().sub(a).normalize(),g=0.5*a.distanceTo(b),
h=this.origin.clone().sub(e);a=-this.direction.dot(f);b=h.dot(this.direction);var k=-h.dot(f),l=h.lengthSq(),n=Math.abs(1-a*a),q,r;0<=n?(h=a*k-b,q=a*b-k,r=g*n,0<=h?q>=-r?q<=r?(g=1/n,h*=g,q*=g,a=h*(h+a*q+2*b)+q*(a*h+q+2*k)+l):(q=g,h=Math.max(0,-(a*q+b)),a=-h*h+q*(q+2*k)+l):(q=-g,h=Math.max(0,-(a*q+b)),a=-h*h+q*(q+2*k)+l):q<=-r?(h=Math.max(0,-(-a*g+b)),q=0<h?-g:Math.min(Math.max(-g,-k),g),a=-h*h+q*(q+2*k)+l):q<=r?(h=0,q=Math.min(Math.max(-g,-k),g),a=q*(q+2*k)+l):(h=Math.max(0,-(a*g+b)),q=0<h?g:Math.min(Math.max(-g,
-k),g),a=-h*h+q*(q+2*k)+l)):(q=0<a?-g:g,h=Math.max(0,-(a*q+b)),a=-h*h+q*(q+2*k)+l);c&&c.copy(this.direction.clone().multiplyScalar(h).add(this.origin));d&&d.copy(f.clone().multiplyScalar(q).add(e));return a},isIntersectionSphere:function(a){return this.distanceToPoint(a.center)<=a.radius},intersectSphere:function(){var a=new THREE.Vector3;return function(b,c){a.subVectors(b.center,this.origin);var d=a.dot(this.direction),e=a.dot(a)-d*d,f=b.radius*b.radius;if(e>f)return null;f=Math.sqrt(f-e);e=d-f;
d+=f;return 0>e&&0>d?null:0>e?this.at(d,c):this.at(e,c)}}(),isIntersectionPlane:function(a){var b=a.distanceToPoint(this.origin);return 0===b||0>a.normal.dot(this.direction)*b?!0:!1},distanceToPlane:function(a){var b=a.normal.dot(this.direction);if(0==b)return 0==a.distanceToPoint(this.origin)?0:null;a=-(this.origin.dot(a.normal)+a.constant)/b;return 0<=a?a:null},intersectPlane:function(a,b){var c=this.distanceToPlane(a);return null===c?null:this.at(c,b)},isIntersectionBox:function(){var a=new THREE.Vector3;
return function(b){return null!==this.intersectBox(b,a)}}(),intersectBox:function(a,b){var c,d,e,f,g;d=1/this.direction.x;f=1/this.direction.y;g=1/this.direction.z;var h=this.origin;0<=d?(c=(a.min.x-h.x)*d,d*=a.max.x-h.x):(c=(a.max.x-h.x)*d,d*=a.min.x-h.x);0<=f?(e=(a.min.y-h.y)*f,f*=a.max.y-h.y):(e=(a.max.y-h.y)*f,f*=a.min.y-h.y);if(c>f||e>d)return null;if(e>c||c!==c)c=e;if(f<d||d!==d)d=f;0<=g?(e=(a.min.z-h.z)*g,g*=a.max.z-h.z):(e=(a.max.z-h.z)*g,g*=a.min.z-h.z);if(c>g||e>d)return null;if(e>c||c!==
c)c=e;if(g<d||d!==d)d=g;return 0>d?null:this.at(0<=c?c:d,b)},intersectTriangle:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3,d=new THREE.Vector3;return function(e,f,g,h,k){b.subVectors(f,e);c.subVectors(g,e);d.crossVectors(b,c);f=this.direction.dot(d);if(0<f){if(h)return null;h=1}else if(0>f)h=-1,f=-f;else return null;a.subVectors(this.origin,e);e=h*this.direction.dot(c.crossVectors(a,c));if(0>e)return null;g=h*this.direction.dot(b.cross(a));if(0>g||e+g>f)return null;
e=-h*a.dot(d);return 0>e?null:this.at(e/f,k)}}(),applyMatrix4:function(a){this.direction.add(this.origin).applyMatrix4(a);this.origin.applyMatrix4(a);this.direction.sub(this.origin);this.direction.normalize();return this},equals:function(a){return a.origin.equals(this.origin)&&a.direction.equals(this.direction)},clone:function(){return(new THREE.Ray).copy(this)}};THREE.Sphere=function(a,b){this.center=void 0!==a?a:new THREE.Vector3;this.radius=void 0!==b?b:0};
THREE.Sphere.prototype={constructor:THREE.Sphere,set:function(a,b){this.center.copy(a);this.radius=b;return this},setFromPoints:function(){var a=new THREE.Box3;return function(b,c){var d=this.center;void 0!==c?d.copy(c):a.setFromPoints(b).center(d);for(var e=0,f=0,g=b.length;f<g;f++)e=Math.max(e,d.distanceToSquared(b[f]));this.radius=Math.sqrt(e);return this}}(),copy:function(a){this.center.copy(a.center);this.radius=a.radius;return this},empty:function(){return 0>=this.radius},containsPoint:function(a){return a.distanceToSquared(this.center)<=
this.radius*this.radius},distanceToPoint:function(a){return a.distanceTo(this.center)-this.radius},intersectsSphere:function(a){var b=this.radius+a.radius;return a.center.distanceToSquared(this.center)<=b*b},clampPoint:function(a,b){var c=this.center.distanceToSquared(a),d=b||new THREE.Vector3;d.copy(a);c>this.radius*this.radius&&(d.sub(this.center).normalize(),d.multiplyScalar(this.radius).add(this.center));return d},getBoundingBox:function(a){a=a||new THREE.Box3;a.set(this.center,this.center);a.expandByScalar(this.radius);
return a},applyMatrix4:function(a){this.center.applyMatrix4(a);this.radius*=a.getMaxScaleOnAxis();return this},translate:function(a){this.center.add(a);return this},equals:function(a){return a.center.equals(this.center)&&a.radius===this.radius},clone:function(){return(new THREE.Sphere).copy(this)}};
THREE.Frustum=function(a,b,c,d,e,f){this.planes=[void 0!==a?a:new THREE.Plane,void 0!==b?b:new THREE.Plane,void 0!==c?c:new THREE.Plane,void 0!==d?d:new THREE.Plane,void 0!==e?e:new THREE.Plane,void 0!==f?f:new THREE.Plane]};
THREE.Frustum.prototype={constructor:THREE.Frustum,set:function(a,b,c,d,e,f){var g=this.planes;g[0].copy(a);g[1].copy(b);g[2].copy(c);g[3].copy(d);g[4].copy(e);g[5].copy(f);return this},copy:function(a){for(var b=this.planes,c=0;6>c;c++)b[c].copy(a.planes[c]);return this},setFromMatrix:function(a){var b=this.planes,c=a.elements;a=c[0];var d=c[1],e=c[2],f=c[3],g=c[4],h=c[5],k=c[6],l=c[7],n=c[8],q=c[9],r=c[10],t=c[11],s=c[12],p=c[13],v=c[14],c=c[15];b[0].setComponents(f-a,l-g,t-n,c-s).normalize();b[1].setComponents(f+
a,l+g,t+n,c+s).normalize();b[2].setComponents(f+d,l+h,t+q,c+p).normalize();b[3].setComponents(f-d,l-h,t-q,c-p).normalize();b[4].setComponents(f-e,l-k,t-r,c-v).normalize();b[5].setComponents(f+e,l+k,t+r,c+v).normalize();return this},intersectsObject:function(){var a=new THREE.Sphere;return function(b){var c=b.geometry;null===c.boundingSphere&&c.computeBoundingSphere();a.copy(c.boundingSphere);a.applyMatrix4(b.matrixWorld);return this.intersectsSphere(a)}}(),intersectsSphere:function(a){var b=this.planes,
c=a.center;a=-a.radius;for(var d=0;6>d;d++)if(b[d].distanceToPoint(c)<a)return!1;return!0},intersectsBox:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c){for(var d=this.planes,e=0;6>e;e++){var f=d[e];a.x=0<f.normal.x?c.min.x:c.max.x;b.x=0<f.normal.x?c.max.x:c.min.x;a.y=0<f.normal.y?c.min.y:c.max.y;b.y=0<f.normal.y?c.max.y:c.min.y;a.z=0<f.normal.z?c.min.z:c.max.z;b.z=0<f.normal.z?c.max.z:c.min.z;var g=f.distanceToPoint(a),f=f.distanceToPoint(b);if(0>g&&0>f)return!1}return!0}}(),
containsPoint:function(a){for(var b=this.planes,c=0;6>c;c++)if(0>b[c].distanceToPoint(a))return!1;return!0},clone:function(){return(new THREE.Frustum).copy(this)}};THREE.Plane=function(a,b){this.normal=void 0!==a?a:new THREE.Vector3(1,0,0);this.constant=void 0!==b?b:0};
THREE.Plane.prototype={constructor:THREE.Plane,set:function(a,b){this.normal.copy(a);this.constant=b;return this},setComponents:function(a,b,c,d){this.normal.set(a,b,c);this.constant=d;return this},setFromNormalAndCoplanarPoint:function(a,b){this.normal.copy(a);this.constant=-b.dot(this.normal);return this},setFromCoplanarPoints:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d,e){d=a.subVectors(e,d).cross(b.subVectors(c,d)).normalize();this.setFromNormalAndCoplanarPoint(d,
c);return this}}(),copy:function(a){this.normal.copy(a.normal);this.constant=a.constant;return this},normalize:function(){var a=1/this.normal.length();this.normal.multiplyScalar(a);this.constant*=a;return this},negate:function(){this.constant*=-1;this.normal.negate();return this},distanceToPoint:function(a){return this.normal.dot(a)+this.constant},distanceToSphere:function(a){return this.distanceToPoint(a.center)-a.radius},projectPoint:function(a,b){return this.orthoPoint(a,b).sub(a).negate()},orthoPoint:function(a,
b){var c=this.distanceToPoint(a);return(b||new THREE.Vector3).copy(this.normal).multiplyScalar(c)},isIntersectionLine:function(a){var b=this.distanceToPoint(a.start);a=this.distanceToPoint(a.end);return 0>b&&0<a||0>a&&0<b},intersectLine:function(){var a=new THREE.Vector3;return function(b,c){var d=c||new THREE.Vector3,e=b.delta(a),f=this.normal.dot(e);if(0==f){if(0==this.distanceToPoint(b.start))return d.copy(b.start)}else return f=-(b.start.dot(this.normal)+this.constant)/f,0>f||1<f?void 0:d.copy(e).multiplyScalar(f).add(b.start)}}(),
coplanarPoint:function(a){return(a||new THREE.Vector3).copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Matrix3;return function(d,e){var f=e||c.getNormalMatrix(d),f=a.copy(this.normal).applyMatrix3(f),g=this.coplanarPoint(b);g.applyMatrix4(d);this.setFromNormalAndCoplanarPoint(f,g);return this}}(),translate:function(a){this.constant-=a.dot(this.normal);return this},equals:function(a){return a.normal.equals(this.normal)&&
a.constant==this.constant},clone:function(){return(new THREE.Plane).copy(this)}};
THREE.Math={generateUUID:function(){var a="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),b=Array(36),c=0,d;return function(){for(var e=0;36>e;e++)8==e||13==e||18==e||23==e?b[e]="-":14==e?b[e]="4":(2>=c&&(c=33554432+16777216*Math.random()|0),d=c&15,c>>=4,b[e]=a[19==e?d&3|8:d]);return b.join("")}}(),clamp:function(a,b,c){return a<b?b:a>c?c:a},clampBottom:function(a,b){return a<b?b:a},mapLinear:function(a,b,c,d,e){return d+(a-b)*(e-d)/(c-b)},smoothstep:function(a,b,c){if(a<=
b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*(3-2*a)},smootherstep:function(a,b,c){if(a<=b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*a*(a*(6*a-15)+10)},random16:function(){return(65280*Math.random()+255*Math.random())/65535},randInt:function(a,b){return a+Math.floor(Math.random()*(b-a+1))},randFloat:function(a,b){return a+Math.random()*(b-a)},randFloatSpread:function(a){return a*(0.5-Math.random())},sign:function(a){return 0>a?-1:0<a?1:0},degToRad:function(){var a=Math.PI/180;return function(b){return b*
a}}(),radToDeg:function(){var a=180/Math.PI;return function(b){return b*a}}(),isPowerOfTwo:function(a){return 0===(a&a-1)&&0!==a}};
THREE.Spline=function(a){function b(a,b,c,d,e,f,g){a=0.5*(c-a);d=0.5*(d-b);return(2*(b-c)+a+d)*g+(-3*(b-c)-2*a-d)*f+a*e+b}this.points=a;var c=[],d={x:0,y:0,z:0},e,f,g,h,k,l,n,q,r;this.initFromArray=function(a){this.points=[];for(var b=0;b<a.length;b++)this.points[b]={x:a[b][0],y:a[b][1],z:a[b][2]}};this.getPoint=function(a){e=(this.points.length-1)*a;f=Math.floor(e);g=e-f;c[0]=0===f?f:f-1;c[1]=f;c[2]=f>this.points.length-2?this.points.length-1:f+1;c[3]=f>this.points.length-3?this.points.length-1:
f+2;l=this.points[c[0]];n=this.points[c[1]];q=this.points[c[2]];r=this.points[c[3]];h=g*g;k=g*h;d.x=b(l.x,n.x,q.x,r.x,g,h,k);d.y=b(l.y,n.y,q.y,r.y,g,h,k);d.z=b(l.z,n.z,q.z,r.z,g,h,k);return d};this.getControlPointsArray=function(){var a,b,c=this.points.length,d=[];for(a=0;a<c;a++)b=this.points[a],d[a]=[b.x,b.y,b.z];return d};this.getLength=function(a){var b,c,d,e=b=b=0,f=new THREE.Vector3,g=new THREE.Vector3,h=[],k=0;h[0]=0;a||(a=100);c=this.points.length*a;f.copy(this.points[0]);for(a=1;a<c;a++)b=
a/c,d=this.getPoint(b),g.copy(d),k+=g.distanceTo(f),f.copy(d),b*=this.points.length-1,b=Math.floor(b),b!=e&&(h[b]=k,e=b);h[h.length]=k;return{chunks:h,total:k}};this.reparametrizeByArcLength=function(a){var b,c,d,e,f,g,h=[],k=new THREE.Vector3,l=this.getLength();h.push(k.copy(this.points[0]).clone());for(b=1;b<this.points.length;b++){c=l.chunks[b]-l.chunks[b-1];g=Math.ceil(a*c/l.total);e=(b-1)/(this.points.length-1);f=b/(this.points.length-1);for(c=1;c<g-1;c++)d=e+1/g*c*(f-e),d=this.getPoint(d),h.push(k.copy(d).clone());
h.push(k.copy(this.points[b]).clone())}this.points=h}};THREE.Triangle=function(a,b,c){this.a=void 0!==a?a:new THREE.Vector3;this.b=void 0!==b?b:new THREE.Vector3;this.c=void 0!==c?c:new THREE.Vector3};THREE.Triangle.normal=function(){var a=new THREE.Vector3;return function(b,c,d,e){e=e||new THREE.Vector3;e.subVectors(d,c);a.subVectors(b,c);e.cross(a);b=e.lengthSq();return 0<b?e.multiplyScalar(1/Math.sqrt(b)):e.set(0,0,0)}}();
THREE.Triangle.barycoordFromPoint=function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,f,g,h){a.subVectors(g,e);b.subVectors(f,e);c.subVectors(d,e);d=a.dot(a);e=a.dot(b);f=a.dot(c);var k=b.dot(b);g=b.dot(c);var l=d*k-e*e;h=h||new THREE.Vector3;if(0==l)return h.set(-2,-1,-1);l=1/l;k=(k*f-e*g)*l;d=(d*g-e*f)*l;return h.set(1-k-d,d,k)}}();
THREE.Triangle.containsPoint=function(){var a=new THREE.Vector3;return function(b,c,d,e){b=THREE.Triangle.barycoordFromPoint(b,c,d,e,a);return 0<=b.x&&0<=b.y&&1>=b.x+b.y}}();
THREE.Triangle.prototype={constructor:THREE.Triangle,set:function(a,b,c){this.a.copy(a);this.b.copy(b);this.c.copy(c);return this},setFromPointsAndIndices:function(a,b,c,d){this.a.copy(a[b]);this.b.copy(a[c]);this.c.copy(a[d]);return this},copy:function(a){this.a.copy(a.a);this.b.copy(a.b);this.c.copy(a.c);return this},area:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(){a.subVectors(this.c,this.b);b.subVectors(this.a,this.b);return 0.5*a.cross(b).length()}}(),midpoint:function(a){return(a||
new THREE.Vector3).addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},normal:function(a){return THREE.Triangle.normal(this.a,this.b,this.c,a)},plane:function(a){return(a||new THREE.Plane).setFromCoplanarPoints(this.a,this.b,this.c)},barycoordFromPoint:function(a,b){return THREE.Triangle.barycoordFromPoint(a,this.a,this.b,this.c,b)},containsPoint:function(a){return THREE.Triangle.containsPoint(a,this.a,this.b,this.c)},equals:function(a){return a.a.equals(this.a)&&a.b.equals(this.b)&&a.c.equals(this.c)},
clone:function(){return(new THREE.Triangle).copy(this)}};THREE.Clock=function(a){this.autoStart=void 0!==a?a:!0;this.elapsedTime=this.oldTime=this.startTime=0;this.running=!1};
THREE.Clock.prototype={constructor:THREE.Clock,start:function(){this.oldTime=this.startTime=void 0!==self.performance&&void 0!==self.performance.now?self.performance.now():Date.now();this.running=!0},stop:function(){this.getElapsedTime();this.running=!1},getElapsedTime:function(){this.getDelta();return this.elapsedTime},getDelta:function(){var a=0;this.autoStart&&!this.running&&this.start();if(this.running){var b=void 0!==self.performance&&void 0!==self.performance.now?self.performance.now():Date.now(),
a=0.001*(b-this.oldTime);this.oldTime=b;this.elapsedTime+=a}return a}};THREE.EventDispatcher=function(){};
THREE.EventDispatcher.prototype={constructor:THREE.EventDispatcher,apply:function(a){a.addEventListener=THREE.EventDispatcher.prototype.addEventListener;a.hasEventListener=THREE.EventDispatcher.prototype.hasEventListener;a.removeEventListener=THREE.EventDispatcher.prototype.removeEventListener;a.dispatchEvent=THREE.EventDispatcher.prototype.dispatchEvent},addEventListener:function(a,b){void 0===this._listeners&&(this._listeners={});var c=this._listeners;void 0===c[a]&&(c[a]=[]);-1===c[a].indexOf(b)&&
c[a].push(b)},hasEventListener:function(a,b){if(void 0===this._listeners)return!1;var c=this._listeners;return void 0!==c[a]&&-1!==c[a].indexOf(b)?!0:!1},removeEventListener:function(a,b){if(void 0!==this._listeners){var c=this._listeners[a];if(void 0!==c){var d=c.indexOf(b);-1!==d&&c.splice(d,1)}}},dispatchEvent:function(a){if(void 0!==this._listeners){var b=this._listeners[a.type];if(void 0!==b){a.target=this;for(var c=[],d=b.length,e=0;e<d;e++)c[e]=b[e];for(e=0;e<d;e++)c[e].call(this,a)}}}};
(function(a){a.Raycaster=function(b,c,f,g){this.ray=new a.Ray(b,c);this.near=f||0;this.far=g||Infinity;this.params={Sprite:{},Mesh:{},PointCloud:{threshold:1},LOD:{},Line:{}}};var b=function(a,b){return a.distance-b.distance},c=function(a,b,f,g){a.raycast(b,f);if(!0===g){a=a.children;g=0;for(var h=a.length;g<h;g++)c(a[g],b,f,!0)}};a.Raycaster.prototype={constructor:a.Raycaster,precision:1E-4,linePrecision:1,set:function(a,b){this.ray.set(a,b)},intersectObject:function(a,e){var f=[];c(a,this,f,e);
f.sort(b);return f},intersectObjects:function(a,e){for(var f=[],g=0,h=a.length;g<h;g++)c(a[g],this,f,e);f.sort(b);return f}}})(THREE);
THREE.Object3D=function(){this.id=THREE.Object3DIdCount++;this.uuid=THREE.Math.generateUUID();this.name="";this.parent=void 0;this.children=[];this.up=THREE.Object3D.DefaultUp.clone();var a=new THREE.Vector3,b=new THREE.Euler,c=new THREE.Quaternion,d=new THREE.Vector3(1,1,1);b.onChange(function(){c.setFromEuler(b,!1)});c.onChange(function(){b.setFromQuaternion(c,void 0,!1)});Object.defineProperties(this,{position:{enumerable:!0,value:a},rotation:{enumerable:!0,value:b},quaternion:{enumerable:!0,value:c},
scale:{enumerable:!0,value:d}});this.renderDepth=null;this.rotationAutoUpdate=!0;this.matrix=new THREE.Matrix4;this.matrixWorld=new THREE.Matrix4;this.matrixAutoUpdate=!0;this.matrixWorldNeedsUpdate=!1;this.visible=!0;this.receiveShadow=this.castShadow=!1;this.frustumCulled=!0;this.userData={}};THREE.Object3D.DefaultUp=new THREE.Vector3(0,1,0);
THREE.Object3D.prototype={constructor:THREE.Object3D,get eulerOrder(){console.warn("THREE.Object3D: .eulerOrder has been moved to .rotation.order.");return this.rotation.order},set eulerOrder(a){console.warn("THREE.Object3D: .eulerOrder has been moved to .rotation.order.");this.rotation.order=a},get useQuaternion(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set useQuaternion(a){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},
applyMatrix:function(a){this.matrix.multiplyMatrices(a,this.matrix);this.matrix.decompose(this.position,this.quaternion,this.scale)},setRotationFromAxisAngle:function(a,b){this.quaternion.setFromAxisAngle(a,b)},setRotationFromEuler:function(a){this.quaternion.setFromEuler(a,!0)},setRotationFromMatrix:function(a){this.quaternion.setFromRotationMatrix(a)},setRotationFromQuaternion:function(a){this.quaternion.copy(a)},rotateOnAxis:function(){var a=new THREE.Quaternion;return function(b,c){a.setFromAxisAngle(b,
c);this.quaternion.multiply(a);return this}}(),rotateX:function(){var a=new THREE.Vector3(1,0,0);return function(b){return this.rotateOnAxis(a,b)}}(),rotateY:function(){var a=new THREE.Vector3(0,1,0);return function(b){return this.rotateOnAxis(a,b)}}(),rotateZ:function(){var a=new THREE.Vector3(0,0,1);return function(b){return this.rotateOnAxis(a,b)}}(),translateOnAxis:function(){var a=new THREE.Vector3;return function(b,c){a.copy(b).applyQuaternion(this.quaternion);this.position.add(a.multiplyScalar(c));
return this}}(),translate:function(a,b){console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");return this.translateOnAxis(b,a)},translateX:function(){var a=new THREE.Vector3(1,0,0);return function(b){return this.translateOnAxis(a,b)}}(),translateY:function(){var a=new THREE.Vector3(0,1,0);return function(b){return this.translateOnAxis(a,b)}}(),translateZ:function(){var a=new THREE.Vector3(0,0,1);return function(b){return this.translateOnAxis(a,
b)}}(),localToWorld:function(a){return a.applyMatrix4(this.matrixWorld)},worldToLocal:function(){var a=new THREE.Matrix4;return function(b){return b.applyMatrix4(a.getInverse(this.matrixWorld))}}(),lookAt:function(){var a=new THREE.Matrix4;return function(b){a.lookAt(b,this.position,this.up);this.quaternion.setFromRotationMatrix(a)}}(),add:function(a){if(1<arguments.length){for(var b=0;b<arguments.length;b++)this.add(arguments[b]);return this}if(a===this)return console.error("THREE.Object3D.add:",
a,"can't be added as a child of itself."),this;if(a instanceof THREE.Object3D){void 0!==a.parent&&a.parent.remove(a);a.parent=this;a.dispatchEvent({type:"added"});this.children.push(a);for(b=this;void 0!==b.parent;)b=b.parent;void 0!==b&&b instanceof THREE.Scene&&b.__addObject(a)}else console.error("THREE.Object3D.add:",a,"is not an instance of THREE.Object3D.");return this},remove:function(a){if(1<arguments.length)for(var b=0;b<arguments.length;b++)this.remove(arguments[b]);b=this.children.indexOf(a);
if(-1!==b){a.parent=void 0;a.dispatchEvent({type:"removed"});this.children.splice(b,1);for(b=this;void 0!==b.parent;)b=b.parent;void 0!==b&&b instanceof THREE.Scene&&b.__removeObject(a)}},raycast:function(){},traverse:function(a){a(this);for(var b=0,c=this.children.length;b<c;b++)this.children[b].traverse(a)},traverseVisible:function(a){if(!1!==this.visible){a(this);for(var b=0,c=this.children.length;b<c;b++)this.children[b].traverseVisible(a)}},getObjectById:function(a,b){for(var c=0,d=this.children.length;c<
d;c++){var e=this.children[c];if(e.id===a||!0===b&&(e=e.getObjectById(a,b),void 0!==e))return e}},getObjectByName:function(a,b){for(var c=0,d=this.children.length;c<d;c++){var e=this.children[c];if(e.name===a||!0===b&&(e=e.getObjectByName(a,b),void 0!==e))return e}},getChildByName:function(a,b){console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");return this.getObjectByName(a,b)},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale);
this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(a){!0===this.matrixAutoUpdate&&this.updateMatrix();if(!0===this.matrixWorldNeedsUpdate||!0===a)void 0===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=0,c=this.children.length;b<c;b++)this.children[b].updateMatrixWorld(a)},clone:function(a,b){void 0===a&&(a=new THREE.Object3D);void 0===b&&(b=!0);a.name=this.name;a.up.copy(this.up);
a.position.copy(this.position);a.quaternion.copy(this.quaternion);a.scale.copy(this.scale);a.renderDepth=this.renderDepth;a.rotationAutoUpdate=this.rotationAutoUpdate;a.matrix.copy(this.matrix);a.matrixWorld.copy(this.matrixWorld);a.matrixAutoUpdate=this.matrixAutoUpdate;a.matrixWorldNeedsUpdate=this.matrixWorldNeedsUpdate;a.visible=this.visible;a.castShadow=this.castShadow;a.receiveShadow=this.receiveShadow;a.frustumCulled=this.frustumCulled;a.userData=JSON.parse(JSON.stringify(this.userData));if(!0===
b)for(var c=0;c<this.children.length;c++)a.add(this.children[c].clone());return a}};THREE.EventDispatcher.prototype.apply(THREE.Object3D.prototype);THREE.Object3DIdCount=0;
THREE.Projector=function(){function a(){if(q===t){var a=new THREE.RenderableVertex;r.push(a);t++;q++;return a}return r[q++]}function b(){if(p===w){var a=new THREE.RenderableFace;v.push(a);w++;p++;return a}return v[p++]}function c(){if(D===x){var a=new THREE.RenderableLine;A.push(a);x++;D++;return a}return A[D++]}function d(){if(I===y){var a=new THREE.RenderableSprite;z.push(a);y++;I++;return a}return z[I++]}function e(a,b){return a.z!==b.z?b.z-a.z:a.id!==b.id?a.id-b.id:0}function f(a,b){var c=0,d=
1,e=a.z+a.w,f=b.z+b.w,g=-a.z+a.w,h=-b.z+b.w;if(0<=e&&0<=f&&0<=g&&0<=h)return!0;if(0>e&&0>f||0>g&&0>h)return!1;0>e?c=Math.max(c,e/(e-f)):0>f&&(d=Math.min(d,e/(e-f)));0>g?c=Math.max(c,g/(g-h)):0>h&&(d=Math.min(d,g/(g-h)));if(d<c)return!1;a.lerp(b,c);b.lerp(a,1-d);return!0}var g,h,k=[],l=0,n,q,r=[],t=0,s,p,v=[],w=0,u,D,A=[],x=0,C,I,z=[],y=0,K={objects:[],lights:[],elements:[]},N=new THREE.Vector3,ba=new THREE.Vector3,P=new THREE.Vector3,O=new THREE.Vector3,J=new THREE.Vector4,E=new THREE.Box3(new THREE.Vector3(-1,
-1,-1),new THREE.Vector3(1,1,1)),Q=new THREE.Box3,L=Array(3),R=new THREE.Matrix4,B=new THREE.Matrix4,S,V=new THREE.Matrix4,W=new THREE.Matrix3,H=new THREE.Frustum,oa=new THREE.Vector4,$=new THREE.Vector4;this.projectVector=function(a,b){b.matrixWorldInverse.getInverse(b.matrixWorld);B.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse);return a.applyProjection(B)};this.unprojectVector=function(){var a=new THREE.Matrix4;return function(b,c){a.getInverse(c.projectionMatrix);B.multiplyMatrices(c.matrixWorld,
a);return b.applyProjection(B)}}();this.pickingRay=function(a,b){a.z=-1;var c=new THREE.Vector3(a.x,a.y,1);this.unprojectVector(a,b);this.unprojectVector(c,b);c.sub(a).normalize();return new THREE.Raycaster(a,c)};var X=new function(){var d=[],e=[],f=null,g=null,h=new THREE.Matrix3,k=function(a){var b=a.positionWorld,c=a.positionScreen;b.copy(a.position).applyMatrix4(S);c.copy(b).applyMatrix4(B);b=1/c.w;c.x*=b;c.y*=b;c.z*=b;a.visible=-1<=c.x&&1>=c.x&&-1<=c.y&&1>=c.y&&-1<=c.z&&1>=c.z},l=function(a,
b,c){if(!0===a.visible||!0===b.visible||!0===c.visible)return!0;L[0]=a.positionScreen;L[1]=b.positionScreen;L[2]=c.positionScreen;return E.isIntersectionBox(Q.setFromPoints(L))},q=function(a,b,c){return 0>(c.positionScreen.x-a.positionScreen.x)*(b.positionScreen.y-a.positionScreen.y)-(c.positionScreen.y-a.positionScreen.y)*(b.positionScreen.x-a.positionScreen.x)};return{setObject:function(a){f=a;g=f.material;h.getNormalMatrix(f.matrixWorld);d.length=0;e.length=0},projectVertex:k,checkTriangleVisibility:l,
checkBackfaceCulling:q,pushVertex:function(b,c,d){n=a();n.position.set(b,c,d);k(n)},pushNormal:function(a,b,c){d.push(a,b,c)},pushUv:function(a,b){e.push(a,b)},pushLine:function(a,b){var d=r[a],e=r[b];u=c();u.id=f.id;u.v1.copy(d);u.v2.copy(e);u.z=(d.positionScreen.z+e.positionScreen.z)/2;u.material=f.material;K.elements.push(u)},pushTriangle:function(a,c,k){var n=r[a],p=r[c],t=r[k];if(!1!==l(n,p,t)&&(g.side===THREE.DoubleSide||!0===q(n,p,t))){s=b();s.id=f.id;s.v1.copy(n);s.v2.copy(p);s.v3.copy(t);
s.z=(n.positionScreen.z+p.positionScreen.z+t.positionScreen.z)/3;for(n=0;3>n;n++)p=3*arguments[n],t=s.vertexNormalsModel[n],t.set(d[p],d[p+1],d[p+2]),t.applyMatrix3(h).normalize(),p=2*arguments[n],s.uvs[n].set(e[p],e[p+1]);s.vertexNormalsLength=3;s.material=f.material;K.elements.push(s)}}}};this.projectScene=function(n,t,w,v){I=D=p=0;K.elements.length=0;!0===n.autoUpdate&&n.updateMatrixWorld();void 0===t.parent&&t.updateMatrixWorld();R.copy(t.matrixWorldInverse.getInverse(t.matrixWorld));B.multiplyMatrices(t.projectionMatrix,
R);H.setFromMatrix(B);h=0;K.objects.length=0;K.lights.length=0;n.traverseVisible(function(a){if(a instanceof THREE.Light)K.lights.push(a);else if(a instanceof THREE.Mesh||a instanceof THREE.Line||a instanceof THREE.Sprite)if(!1===a.frustumCulled||!0===H.intersectsObject(a)){if(h===l){var b=new THREE.RenderableObject;k.push(b);l++;h++;g=b}else g=k[h++];g.id=a.id;g.object=a;null!==a.renderDepth?g.z=a.renderDepth:(O.setFromMatrixPosition(a.matrixWorld),O.applyProjection(B),g.z=O.z);K.objects.push(g)}});
!0===w&&K.objects.sort(e);n=0;for(w=K.objects.length;n<w;n++){var A=K.objects[n].object,x=A.geometry;X.setObject(A);S=A.matrixWorld;q=0;if(A instanceof THREE.Mesh)if(x instanceof THREE.BufferGeometry){var z=x.attributes,A=x.offsets;if(void 0!==z.position){for(var G=z.position.array,x=0,y=G.length;x<y;x+=3)X.pushVertex(G[x],G[x+1],G[x+2]);if(void 0!==z.normal)for(var L=z.normal.array,x=0,y=L.length;x<y;x+=3)X.pushNormal(L[x],L[x+1],L[x+2]);if(void 0!==z.uv)for(L=z.uv.array,x=0,y=L.length;x<y;x+=2)X.pushUv(L[x],
L[x+1]);if(void 0!==z.index)if(z=z.index.array,0<A.length)for(n=0;n<A.length;n++)for(y=A[n],G=y.index,x=y.start,y=y.start+y.count;x<y;x+=3)X.pushTriangle(z[x]+G,z[x+1]+G,z[x+2]+G);else for(x=0,y=z.length;x<y;x+=3)X.pushTriangle(z[x],z[x+1],z[x+2]);else for(x=0,y=G.length/3;x<y;x+=3)X.pushTriangle(x,x+1,x+2)}}else{if(x instanceof THREE.Geometry){var Q=x.vertices,y=x.faces,z=x.faceVertexUvs[0];W.getNormalMatrix(S);for(var G=A.material instanceof THREE.MeshFaceMaterial,L=!0===G?A.material:null,E=0,ca=
Q.length;E<ca;E++){var la=Q[E];X.pushVertex(la.x,la.y,la.z)}Q=0;for(E=y.length;Q<E;Q++){var ca=y[Q],qa=!0===G?L.materials[ca.materialIndex]:A.material;if(void 0!==qa){var ua=qa.side,la=r[ca.a],ja=r[ca.b],Fa=r[ca.c];if(!0===qa.morphTargets){var va=x.morphTargets,Ka=A.morphTargetInfluences,aa=la.position,ra=ja.position,Da=Fa.position;N.set(0,0,0);ba.set(0,0,0);P.set(0,0,0);for(var Qa=0,cb=va.length;Qa<cb;Qa++){var Ga=Ka[Qa];if(0!==Ga){var xa=va[Qa].vertices;N.x+=(xa[ca.a].x-aa.x)*Ga;N.y+=(xa[ca.a].y-
aa.y)*Ga;N.z+=(xa[ca.a].z-aa.z)*Ga;ba.x+=(xa[ca.b].x-ra.x)*Ga;ba.y+=(xa[ca.b].y-ra.y)*Ga;ba.z+=(xa[ca.b].z-ra.z)*Ga;P.x+=(xa[ca.c].x-Da.x)*Ga;P.y+=(xa[ca.c].y-Da.y)*Ga;P.z+=(xa[ca.c].z-Da.z)*Ga}}la.position.add(N);ja.position.add(ba);Fa.position.add(P);X.projectVertex(la);X.projectVertex(ja);X.projectVertex(Fa)}if(!1!==X.checkTriangleVisibility(la,ja,Fa)){va=X.checkBackfaceCulling(la,ja,Fa);if(ua!==THREE.DoubleSide){if(ua===THREE.FrontSide&&!1===va)continue;if(ua===THREE.BackSide&&!0===va)continue}s=
b();s.id=A.id;s.v1.copy(la);s.v2.copy(ja);s.v3.copy(Fa);s.normalModel.copy(ca.normal);!1!==va||ua!==THREE.BackSide&&ua!==THREE.DoubleSide||s.normalModel.negate();s.normalModel.applyMatrix3(W).normalize();Ka=ca.vertexNormals;aa=0;for(ra=Math.min(Ka.length,3);aa<ra;aa++)Da=s.vertexNormalsModel[aa],Da.copy(Ka[aa]),!1!==va||ua!==THREE.BackSide&&ua!==THREE.DoubleSide||Da.negate(),Da.applyMatrix3(W).normalize();s.vertexNormalsLength=Ka.length;ua=z[Q];if(void 0!==ua)for(va=0;3>va;va++)s.uvs[va].copy(ua[va]);
s.color=ca.color;s.material=qa;s.z=(la.positionScreen.z+ja.positionScreen.z+Fa.positionScreen.z)/3;K.elements.push(s)}}}}}else if(A instanceof THREE.Line)if(x instanceof THREE.BufferGeometry){if(z=x.attributes,void 0!==z.position){G=z.position.array;x=0;for(y=G.length;x<y;x+=3)X.pushVertex(G[x],G[x+1],G[x+2]);if(void 0!==z.index)for(z=z.index.array,x=0,y=z.length;x<y;x+=2)X.pushLine(z[x],z[x+1]);else for(z=A.type===THREE.LinePieces?2:1,x=0,y=G.length/3-1;x<y;x+=z)X.pushLine(x,x+1)}}else{if(x instanceof
THREE.Geometry&&(V.multiplyMatrices(B,S),Q=A.geometry.vertices,0!==Q.length))for(la=a(),la.positionScreen.copy(Q[0]).applyMatrix4(V),z=A.type===THREE.LinePieces?2:1,E=1,ca=Q.length;E<ca;E++)la=a(),la.positionScreen.copy(Q[E]).applyMatrix4(V),0<(E+1)%z||(ja=r[q-2],oa.copy(la.positionScreen),$.copy(ja.positionScreen),!0===f(oa,$)&&(oa.multiplyScalar(1/oa.w),$.multiplyScalar(1/$.w),u=c(),u.id=A.id,u.v1.positionScreen.copy(oa),u.v2.positionScreen.copy($),u.z=Math.max(oa.z,$.z),u.material=A.material,A.material.vertexColors===
THREE.VertexColors&&(u.vertexColors[0].copy(A.geometry.colors[E]),u.vertexColors[1].copy(A.geometry.colors[E-1])),K.elements.push(u)))}else A instanceof THREE.Sprite&&(J.set(S.elements[12],S.elements[13],S.elements[14],1),J.applyMatrix4(B),x=1/J.w,J.z*=x,-1<=J.z&&1>=J.z&&(C=d(),C.id=A.id,C.x=J.x*x,C.y=J.y*x,C.z=J.z,C.object=A,C.rotation=A.rotation,C.scale.x=A.scale.x*Math.abs(C.x-(J.x+t.projectionMatrix.elements[0])/(J.w+t.projectionMatrix.elements[12])),C.scale.y=A.scale.y*Math.abs(C.y-(J.y+t.projectionMatrix.elements[5])/
(J.w+t.projectionMatrix.elements[13])),C.material=A.material,K.elements.push(C)))}!0===v&&K.elements.sort(e);return K}};THREE.Face3=function(a,b,c,d,e,f){this.a=a;this.b=b;this.c=c;this.normal=d instanceof THREE.Vector3?d:new THREE.Vector3;this.vertexNormals=d instanceof Array?d:[];this.color=e instanceof THREE.Color?e:new THREE.Color;this.vertexColors=e instanceof Array?e:[];this.vertexTangents=[];this.materialIndex=void 0!==f?f:0};
THREE.Face3.prototype={constructor:THREE.Face3,clone:function(){var a=new THREE.Face3(this.a,this.b,this.c);a.normal.copy(this.normal);a.color.copy(this.color);a.materialIndex=this.materialIndex;for(var b=0,c=this.vertexNormals.length;b<c;b++)a.vertexNormals[b]=this.vertexNormals[b].clone();b=0;for(c=this.vertexColors.length;b<c;b++)a.vertexColors[b]=this.vertexColors[b].clone();b=0;for(c=this.vertexTangents.length;b<c;b++)a.vertexTangents[b]=this.vertexTangents[b].clone();return a}};
THREE.Face4=function(a,b,c,d,e,f,g){console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");return new THREE.Face3(a,b,c,e,f,g)};THREE.BufferAttribute=function(a,b){this.array=a;this.itemSize=b};
THREE.BufferAttribute.prototype={constructor:THREE.BufferAttribute,get length(){return this.array.length},set:function(a){this.array.set(a);return this},setX:function(a,b){this.array[a*this.itemSize]=b;return this},setY:function(a,b){this.array[a*this.itemSize+1]=b;return this},setZ:function(a,b){this.array[a*this.itemSize+2]=b;return this},setXY:function(a,b,c){a*=this.itemSize;this.array[a]=b;this.array[a+1]=c;return this},setXYZ:function(a,b,c,d){a*=this.itemSize;this.array[a]=b;this.array[a+1]=
c;this.array[a+2]=d;return this},setXYZW:function(a,b,c,d,e){a*=this.itemSize;this.array[a]=b;this.array[a+1]=c;this.array[a+2]=d;this.array[a+3]=e;return this}};THREE.Int8Attribute=function(a,b){console.warn("THREE.Int8Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};
THREE.Uint8Attribute=function(a,b){console.warn("THREE.Uint8Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};THREE.Uint8ClampedAttribute=function(a,b){console.warn("THREE.Uint8ClampedAttribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};
THREE.Int16Attribute=function(a,b){console.warn("THREE.Int16Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};THREE.Uint16Attribute=function(a,b){console.warn("THREE.Uint16Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};
THREE.Int32Attribute=function(a,b){console.warn("THREE.Int32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};THREE.Uint32Attribute=function(a,b){console.warn("THREE.Uint32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};
THREE.Float32Attribute=function(a,b){console.warn("THREE.Float32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};THREE.Float64Attribute=function(a,b){console.warn("THREE.Float64Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};
THREE.BufferGeometry=function(){this.id=THREE.GeometryIdCount++;this.uuid=THREE.Math.generateUUID();this.name="";this.attributes={};this.offsets=this.drawcalls=[];this.boundingSphere=this.boundingBox=null};
THREE.BufferGeometry.prototype={constructor:THREE.BufferGeometry,addAttribute:function(a,b,c){!1===b instanceof THREE.BufferAttribute?(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.attributes[a]={array:b,itemSize:c}):this.attributes[a]=b},getAttribute:function(a){return this.attributes[a]},addDrawCall:function(a,b,c){this.drawcalls.push({start:a,count:b,index:void 0!==c?c:0})},applyMatrix:function(a){var b=this.attributes.position;void 0!==b&&(a.applyToVector3Array(b.array),
b.needsUpdate=!0);b=this.attributes.normal;void 0!==b&&((new THREE.Matrix3).getNormalMatrix(a).applyToVector3Array(b.array),b.needsUpdate=!0)},fromGeometry:function(a,b){b=b||{vertexColors:THREE.NoColors};var c=a.vertices,d=a.faces,e=a.faceVertexUvs,f=b.vertexColors,g=0<e[0].length,h=3==d[0].vertexNormals.length,k=new Float32Array(9*d.length);this.addAttribute("position",new THREE.BufferAttribute(k,3));var l=new Float32Array(9*d.length);this.addAttribute("normal",new THREE.BufferAttribute(l,3));if(f!==
THREE.NoColors){var n=new Float32Array(9*d.length);this.addAttribute("color",new THREE.BufferAttribute(n,3))}if(!0===g){var q=new Float32Array(6*d.length);this.addAttribute("uvs",new THREE.BufferAttribute(q,2))}for(var r=0,t=0,s=0;r<d.length;r++,t+=6,s+=9){var p=d[r],v=c[p.a],w=c[p.b],u=c[p.c];k[s]=v.x;k[s+1]=v.y;k[s+2]=v.z;k[s+3]=w.x;k[s+4]=w.y;k[s+5]=w.z;k[s+6]=u.x;k[s+7]=u.y;k[s+8]=u.z;!0===h?(v=p.vertexNormals[0],w=p.vertexNormals[1],u=p.vertexNormals[2],l[s]=v.x,l[s+1]=v.y,l[s+2]=v.z,l[s+3]=
w.x,l[s+4]=w.y,l[s+5]=w.z,l[s+6]=u.x,l[s+7]=u.y,l[s+8]=u.z):(v=p.normal,l[s]=v.x,l[s+1]=v.y,l[s+2]=v.z,l[s+3]=v.x,l[s+4]=v.y,l[s+5]=v.z,l[s+6]=v.x,l[s+7]=v.y,l[s+8]=v.z);f===THREE.FaceColors?(p=p.color,n[s]=p.r,n[s+1]=p.g,n[s+2]=p.b,n[s+3]=p.r,n[s+4]=p.g,n[s+5]=p.b,n[s+6]=p.r,n[s+7]=p.g,n[s+8]=p.b):f===THREE.VertexColors&&(v=p.vertexColors[0],w=p.vertexColors[1],p=p.vertexColors[2],n[s]=v.r,n[s+1]=v.g,n[s+2]=v.b,n[s+3]=w.r,n[s+4]=w.g,n[s+5]=w.b,n[s+6]=p.r,n[s+7]=p.g,n[s+8]=p.b);!0===g&&(p=e[0][r][0],
v=e[0][r][1],w=e[0][r][2],q[t]=p.x,q[t+1]=p.y,q[t+2]=v.x,q[t+3]=v.y,q[t+4]=w.x,q[t+5]=w.y)}this.computeBoundingSphere();return this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);var a=this.attributes.position.array;if(a){var b=this.boundingBox;3<=a.length&&(b.min.x=b.max.x=a[0],b.min.y=b.max.y=a[1],b.min.z=b.max.z=a[2]);for(var c=3,d=a.length;c<d;c+=3){var e=a[c],f=a[c+1],g=a[c+2];e<b.min.x?b.min.x=e:e>b.max.x&&(b.max.x=e);f<b.min.y?b.min.y=f:f>b.max.y&&
(b.max.y=f);g<b.min.z?b.min.z=g:g>b.max.z&&(b.max.z=g)}}if(void 0===a||0===a.length)this.boundingBox.min.set(0,0,0),this.boundingBox.max.set(0,0,0);(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.')},computeBoundingSphere:function(){var a=new THREE.Box3,b=new THREE.Vector3;return function(){null===this.boundingSphere&&
(this.boundingSphere=new THREE.Sphere);var c=this.attributes.position.array;if(c){a.makeEmpty();for(var d=this.boundingSphere.center,e=0,f=c.length;e<f;e+=3)b.set(c[e],c[e+1],c[e+2]),a.expandByPoint(b);a.center(d);for(var g=0,e=0,f=c.length;e<f;e+=3)b.set(c[e],c[e+1],c[e+2]),g=Math.max(g,d.distanceToSquared(b));this.boundingSphere.radius=Math.sqrt(g);isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.')}}}(),
computeFaceNormals:function(){},computeVertexNormals:function(){if(this.attributes.position){var a,b,c,d;a=this.attributes.position.array.length;if(void 0===this.attributes.normal)this.attributes.normal={itemSize:3,array:new Float32Array(a)};else for(a=0,b=this.attributes.normal.array.length;a<b;a++)this.attributes.normal.array[a]=0;var e=this.attributes.position.array,f=this.attributes.normal.array,g,h,k,l,n,q,r=new THREE.Vector3,t=new THREE.Vector3,s=new THREE.Vector3,p=new THREE.Vector3,v=new THREE.Vector3;
if(this.attributes.index){var w=this.attributes.index.array,u=0<this.offsets.length?this.offsets:[{start:0,count:w.length,index:0}];c=0;for(d=u.length;c<d;++c){b=u[c].start;g=u[c].count;var D=u[c].index;a=b;for(b+=g;a<b;a+=3)g=D+w[a],h=D+w[a+1],k=D+w[a+2],l=e[3*g],n=e[3*g+1],q=e[3*g+2],r.set(l,n,q),l=e[3*h],n=e[3*h+1],q=e[3*h+2],t.set(l,n,q),l=e[3*k],n=e[3*k+1],q=e[3*k+2],s.set(l,n,q),p.subVectors(s,t),v.subVectors(r,t),p.cross(v),f[3*g]+=p.x,f[3*g+1]+=p.y,f[3*g+2]+=p.z,f[3*h]+=p.x,f[3*h+1]+=p.y,
f[3*h+2]+=p.z,f[3*k]+=p.x,f[3*k+1]+=p.y,f[3*k+2]+=p.z}}else for(a=0,b=e.length;a<b;a+=9)l=e[a],n=e[a+1],q=e[a+2],r.set(l,n,q),l=e[a+3],n=e[a+4],q=e[a+5],t.set(l,n,q),l=e[a+6],n=e[a+7],q=e[a+8],s.set(l,n,q),p.subVectors(s,t),v.subVectors(r,t),p.cross(v),f[a]=p.x,f[a+1]=p.y,f[a+2]=p.z,f[a+3]=p.x,f[a+4]=p.y,f[a+5]=p.z,f[a+6]=p.x,f[a+7]=p.y,f[a+8]=p.z;this.normalizeNormals();this.normalsNeedUpdate=!0}},computeTangents:function(){function a(a,b,c){q=d[3*a];r=d[3*a+1];t=d[3*a+2];s=d[3*b];p=d[3*b+1];v=d[3*
b+2];w=d[3*c];u=d[3*c+1];D=d[3*c+2];A=f[2*a];x=f[2*a+1];C=f[2*b];I=f[2*b+1];z=f[2*c];y=f[2*c+1];K=s-q;N=w-q;ba=p-r;P=u-r;O=v-t;J=D-t;E=C-A;Q=z-A;L=I-x;R=y-x;B=1/(E*R-Q*L);S.set((R*K-L*N)*B,(R*ba-L*P)*B,(R*O-L*J)*B);V.set((E*N-Q*K)*B,(E*P-Q*ba)*B,(E*J-Q*O)*B);k[a].add(S);k[b].add(S);k[c].add(S);l[a].add(V);l[b].add(V);l[c].add(V)}function b(a){za.x=e[3*a];za.y=e[3*a+1];za.z=e[3*a+2];Oa.copy(za);G=k[a];Ea.copy(G);Ea.sub(za.multiplyScalar(za.dot(G))).normalize();Aa.crossVectors(Oa,G);Ba=Aa.dot(l[a]);
Pa=0>Ba?-1:1;h[4*a]=Ea.x;h[4*a+1]=Ea.y;h[4*a+2]=Ea.z;h[4*a+3]=Pa}if(void 0===this.attributes.index||void 0===this.attributes.position||void 0===this.attributes.normal||void 0===this.attributes.uv)console.warn("Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()");else{var c=this.attributes.index.array,d=this.attributes.position.array,e=this.attributes.normal.array,f=this.attributes.uv.array,g=d.length/3;void 0===this.attributes.tangent&&(this.attributes.tangent=
{itemSize:4,array:new Float32Array(4*g)});for(var h=this.attributes.tangent.array,k=[],l=[],n=0;n<g;n++)k[n]=new THREE.Vector3,l[n]=new THREE.Vector3;var q,r,t,s,p,v,w,u,D,A,x,C,I,z,y,K,N,ba,P,O,J,E,Q,L,R,B,S=new THREE.Vector3,V=new THREE.Vector3,W,H,oa,$,X,T=this.offsets,n=0;for(H=T.length;n<H;++n){W=T[n].start;oa=T[n].count;var ya=T[n].index,g=W;for(W+=oa;g<W;g+=3)oa=ya+c[g],$=ya+c[g+1],X=ya+c[g+2],a(oa,$,X)}var Ea=new THREE.Vector3,Aa=new THREE.Vector3,za=new THREE.Vector3,Oa=new THREE.Vector3,
Pa,G,Ba,n=0;for(H=T.length;n<H;++n)for(W=T[n].start,oa=T[n].count,ya=T[n].index,g=W,W+=oa;g<W;g+=3)oa=ya+c[g],$=ya+c[g+1],X=ya+c[g+2],b(oa),b($),b(X)}},computeOffsets:function(a){var b=a;void 0===a&&(b=65535);Date.now();a=this.attributes.index.array;for(var c=this.attributes.position.array,d=a.length/3,e=new Uint16Array(a.length),f=0,g=0,h=[{start:0,count:0,index:0}],k=h[0],l=0,n=0,q=new Int32Array(6),r=new Int32Array(c.length),t=new Int32Array(c.length),s=0;s<c.length;s++)r[s]=-1,t[s]=-1;for(c=0;c<
d;c++){for(var p=n=0;3>p;p++)s=a[3*c+p],-1==r[s]?(q[2*p]=s,q[2*p+1]=-1,n++):r[s]<k.index?(q[2*p]=s,q[2*p+1]=-1,l++):(q[2*p]=s,q[2*p+1]=r[s]);if(g+n>k.index+b)for(k={start:f,count:0,index:g},h.push(k),n=0;6>n;n+=2)p=q[n+1],-1<p&&p<k.index&&(q[n+1]=-1);for(n=0;6>n;n+=2)s=q[n],p=q[n+1],-1===p&&(p=g++),r[s]=p,t[p]=s,e[f++]=p-k.index,k.count++}this.reorderBuffers(e,t,g);return this.offsets=h},merge:function(){console.log("BufferGeometry.merge(): TODO")},normalizeNormals:function(){for(var a=this.attributes.normal.array,
b,c,d,e=0,f=a.length;e<f;e+=3)b=a[e],c=a[e+1],d=a[e+2],b=1/Math.sqrt(b*b+c*c+d*d),a[e]*=b,a[e+1]*=b,a[e+2]*=b},reorderBuffers:function(a,b,c){var d={},e=[Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array],f;for(f in this.attributes)if("index"!=f)for(var g=this.attributes[f].array,h=0,k=e.length;h<k;h++){var l=e[h];if(g instanceof l){d[f]=new l(this.attributes[f].itemSize*c);break}}for(e=0;e<c;e++)for(f in g=b[e],this.attributes)if("index"!=
f)for(var h=this.attributes[f].array,k=this.attributes[f].itemSize,l=d[f],n=0;n<k;n++)l[e*k+n]=h[g*k+n];this.attributes.index.array=a;for(f in this.attributes)"index"!=f&&(this.attributes[f].array=d[f],this.attributes[f].numItems=this.attributes[f].itemSize*c)},clone:function(){var a=new THREE.BufferGeometry,b=[Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array],c;for(c in this.attributes){for(var d=this.attributes[c],e=d.array,f={itemSize:d.itemSize,
array:null},d=0,g=b.length;d<g;d++){var h=b[d];if(e instanceof h){f.array=new h(e);break}}a.attributes[c]=f}d=0;for(g=this.offsets.length;d<g;d++)b=this.offsets[d],a.offsets.push({start:b.start,index:b.index,count:b.count});return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.BufferGeometry.prototype);
THREE.Geometry=function(){this.id=THREE.GeometryIdCount++;this.uuid=THREE.Math.generateUUID();this.name="";this.vertices=[];this.colors=[];this.faces=[];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphColors=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingSphere=this.boundingBox=null;this.hasTangents=!1;this.dynamic=!0;this.groupsNeedUpdate=this.buffersNeedUpdate=this.lineDistancesNeedUpdate=this.colorsNeedUpdate=this.tangentsNeedUpdate=this.normalsNeedUpdate=
this.uvsNeedUpdate=this.elementsNeedUpdate=this.verticesNeedUpdate=!1};
THREE.Geometry.prototype={constructor:THREE.Geometry,applyMatrix:function(a){for(var b=(new THREE.Matrix3).getNormalMatrix(a),c=0,d=this.vertices.length;c<d;c++)this.vertices[c].applyMatrix4(a);c=0;for(d=this.faces.length;c<d;c++){a=this.faces[c];a.normal.applyMatrix3(b).normalize();for(var e=0,f=a.vertexNormals.length;e<f;e++)a.vertexNormals[e].applyMatrix3(b).normalize()}this.boundingBox instanceof THREE.Box3&&this.computeBoundingBox();this.boundingSphere instanceof THREE.Sphere&&this.computeBoundingSphere()},
center:function(){this.computeBoundingBox();var a=new THREE.Vector3;a.addVectors(this.boundingBox.min,this.boundingBox.max);a.multiplyScalar(-0.5);this.applyMatrix((new THREE.Matrix4).makeTranslation(a.x,a.y,a.z));this.computeBoundingBox();return a},computeFaceNormals:function(){for(var a=new THREE.Vector3,b=new THREE.Vector3,c=0,d=this.faces.length;c<d;c++){var e=this.faces[c],f=this.vertices[e.a],g=this.vertices[e.b];a.subVectors(this.vertices[e.c],g);b.subVectors(f,g);a.cross(b);a.normalize();
e.normal.copy(a)}},computeVertexNormals:function(a){var b,c,d;d=Array(this.vertices.length);b=0;for(c=this.vertices.length;b<c;b++)d[b]=new THREE.Vector3;if(a){var e,f,g,h=new THREE.Vector3,k=new THREE.Vector3;new THREE.Vector3;new THREE.Vector3;new THREE.Vector3;a=0;for(b=this.faces.length;a<b;a++)c=this.faces[a],e=this.vertices[c.a],f=this.vertices[c.b],g=this.vertices[c.c],h.subVectors(g,f),k.subVectors(e,f),h.cross(k),d[c.a].add(h),d[c.b].add(h),d[c.c].add(h)}else for(a=0,b=this.faces.length;a<
b;a++)c=this.faces[a],d[c.a].add(c.normal),d[c.b].add(c.normal),d[c.c].add(c.normal);b=0;for(c=this.vertices.length;b<c;b++)d[b].normalize();a=0;for(b=this.faces.length;a<b;a++)c=this.faces[a],c.vertexNormals[0]=d[c.a].clone(),c.vertexNormals[1]=d[c.b].clone(),c.vertexNormals[2]=d[c.c].clone()},computeMorphNormals:function(){var a,b,c,d,e;c=0;for(d=this.faces.length;c<d;c++)for(e=this.faces[c],e.__originalFaceNormal?e.__originalFaceNormal.copy(e.normal):e.__originalFaceNormal=e.normal.clone(),e.__originalVertexNormals||
(e.__originalVertexNormals=[]),a=0,b=e.vertexNormals.length;a<b;a++)e.__originalVertexNormals[a]?e.__originalVertexNormals[a].copy(e.vertexNormals[a]):e.__originalVertexNormals[a]=e.vertexNormals[a].clone();var f=new THREE.Geometry;f.faces=this.faces;a=0;for(b=this.morphTargets.length;a<b;a++){if(!this.morphNormals[a]){this.morphNormals[a]={};this.morphNormals[a].faceNormals=[];this.morphNormals[a].vertexNormals=[];e=this.morphNormals[a].faceNormals;var g=this.morphNormals[a].vertexNormals,h,k;c=
0;for(d=this.faces.length;c<d;c++)h=new THREE.Vector3,k={a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3},e.push(h),g.push(k)}g=this.morphNormals[a];f.vertices=this.morphTargets[a].vertices;f.computeFaceNormals();f.computeVertexNormals();c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],h=g.faceNormals[c],k=g.vertexNormals[c],h.copy(e.normal),k.a.copy(e.vertexNormals[0]),k.b.copy(e.vertexNormals[1]),k.c.copy(e.vertexNormals[2])}c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],e.normal=
e.__originalFaceNormal,e.vertexNormals=e.__originalVertexNormals},computeTangents:function(){var a,b,c,d,e,f,g,h,k,l,n,q,r,t,s,p,v,w=[],u=[];c=new THREE.Vector3;var D=new THREE.Vector3,A=new THREE.Vector3,x=new THREE.Vector3,C=new THREE.Vector3;a=0;for(b=this.vertices.length;a<b;a++)w[a]=new THREE.Vector3,u[a]=new THREE.Vector3;a=0;for(b=this.faces.length;a<b;a++)e=this.faces[a],f=this.faceVertexUvs[0][a],d=e.a,v=e.b,e=e.c,g=this.vertices[d],h=this.vertices[v],k=this.vertices[e],l=f[0],n=f[1],q=f[2],
f=h.x-g.x,r=k.x-g.x,t=h.y-g.y,s=k.y-g.y,h=h.z-g.z,g=k.z-g.z,k=n.x-l.x,p=q.x-l.x,n=n.y-l.y,l=q.y-l.y,q=1/(k*l-p*n),c.set((l*f-n*r)*q,(l*t-n*s)*q,(l*h-n*g)*q),D.set((k*r-p*f)*q,(k*s-p*t)*q,(k*g-p*h)*q),w[d].add(c),w[v].add(c),w[e].add(c),u[d].add(D),u[v].add(D),u[e].add(D);D=["a","b","c","d"];a=0;for(b=this.faces.length;a<b;a++)for(e=this.faces[a],c=0;c<Math.min(e.vertexNormals.length,3);c++)C.copy(e.vertexNormals[c]),d=e[D[c]],v=w[d],A.copy(v),A.sub(C.multiplyScalar(C.dot(v))).normalize(),x.crossVectors(e.vertexNormals[c],
v),d=x.dot(u[d]),d=0>d?-1:1,e.vertexTangents[c]=new THREE.Vector4(A.x,A.y,A.z,d);this.hasTangents=!0},computeLineDistances:function(){for(var a=0,b=this.vertices,c=0,d=b.length;c<d;c++)0<c&&(a+=b[c].distanceTo(b[c-1])),this.lineDistances[c]=a},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere);this.boundingSphere.setFromPoints(this.vertices)},
merge:function(a,b,c){if(!1===a instanceof THREE.Geometry)console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",a);else{var d,e=this.vertices.length,f=this.vertices,g=a.vertices,h=this.faces,k=a.faces,l=this.faceVertexUvs[0];a=a.faceVertexUvs[0];void 0===c&&(c=0);void 0!==b&&(d=(new THREE.Matrix3).getNormalMatrix(b));for(var n=0,q=g.length;n<q;n++){var r=g[n].clone();void 0!==b&&r.applyMatrix4(b);f.push(r)}n=0;for(q=k.length;n<q;n++){var g=k[n],t,s=g.vertexNormals,p=
g.vertexColors,r=new THREE.Face3(g.a+e,g.b+e,g.c+e);r.normal.copy(g.normal);void 0!==d&&r.normal.applyMatrix3(d).normalize();b=0;for(f=s.length;b<f;b++)t=s[b].clone(),void 0!==d&&t.applyMatrix3(d).normalize(),r.vertexNormals.push(t);r.color.copy(g.color);b=0;for(f=p.length;b<f;b++)t=p[b],r.vertexColors.push(t.clone());r.materialIndex=g.materialIndex+c;h.push(r)}n=0;for(q=a.length;n<q;n++)if(c=a[n],d=[],void 0!==c){b=0;for(f=c.length;b<f;b++)d.push(new THREE.Vector2(c[b].x,c[b].y));l.push(d)}}},mergeVertices:function(){var a=
{},b=[],c=[],d,e=Math.pow(10,4),f,g;f=0;for(g=this.vertices.length;f<g;f++)d=this.vertices[f],d=Math.round(d.x*e)+"_"+Math.round(d.y*e)+"_"+Math.round(d.z*e),void 0===a[d]?(a[d]=f,b.push(this.vertices[f]),c[f]=b.length-1):c[f]=c[a[d]];a=[];f=0;for(g=this.faces.length;f<g;f++)for(e=this.faces[f],e.a=c[e.a],e.b=c[e.b],e.c=c[e.c],e=[e.a,e.b,e.c],d=0;3>d;d++)if(e[d]==e[(d+1)%3]){a.push(f);break}for(f=a.length-1;0<=f;f--)for(e=a[f],this.faces.splice(e,1),c=0,g=this.faceVertexUvs.length;c<g;c++)this.faceVertexUvs[c].splice(e,
1);f=this.vertices.length-b.length;this.vertices=b;return f},makeGroups:function(){var a=0;return function(b,c){var d,e,f,g,h={},k,l=this.morphTargets.length,n=this.morphNormals.length;this.geometryGroups={};this.geometryGroupsList=[];d=0;for(e=this.faces.length;d<e;d++)f=this.faces[d],f=b?f.materialIndex:0,f in h||(h[f]={hash:f,counter:0}),g=h[f].hash+"_"+h[f].counter,g in this.geometryGroups||(k={id:a++,faces3:[],materialIndex:f,vertices:0,numMorphTargets:l,numMorphNormals:n},this.geometryGroups[g]=
k,this.geometryGroupsList.push(k)),this.geometryGroups[g].vertices+3>c&&(h[f].counter+=1,g=h[f].hash+"_"+h[f].counter,g in this.geometryGroups||(k={id:a++,faces3:[],materialIndex:f,vertices:0,numMorphTargets:l,numMorphNormals:n},this.geometryGroups[g]=k,this.geometryGroupsList.push(k))),this.geometryGroups[g].faces3.push(d),this.geometryGroups[g].vertices+=3}}(),clone:function(){for(var a=new THREE.Geometry,b=this.vertices,c=0,d=b.length;c<d;c++)a.vertices.push(b[c].clone());b=this.faces;c=0;for(d=
b.length;c<d;c++)a.faces.push(b[c].clone());b=this.faceVertexUvs[0];c=0;for(d=b.length;c<d;c++){for(var e=b[c],f=[],g=0,h=e.length;g<h;g++)f.push(new THREE.Vector2(e[g].x,e[g].y));a.faceVertexUvs[0].push(f)}return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.Geometry.prototype);THREE.GeometryIdCount=0;THREE.Camera=function(){THREE.Object3D.call(this);this.matrixWorldInverse=new THREE.Matrix4;this.projectionMatrix=new THREE.Matrix4};
THREE.Camera.prototype=Object.create(THREE.Object3D.prototype);THREE.Camera.prototype.lookAt=function(){var a=new THREE.Matrix4;return function(b){a.lookAt(this.position,b,this.up);this.quaternion.setFromRotationMatrix(a)}}();THREE.Camera.prototype.clone=function(a){void 0===a&&(a=new THREE.Camera);THREE.Object3D.prototype.clone.call(this,a);a.matrixWorldInverse.copy(this.matrixWorldInverse);a.projectionMatrix.copy(this.projectionMatrix);return a};
THREE.CubeCamera=function(a,b,c){THREE.Object3D.call(this);var d=new THREE.PerspectiveCamera(90,1,a,b);d.up.set(0,-1,0);d.lookAt(new THREE.Vector3(1,0,0));this.add(d);var e=new THREE.PerspectiveCamera(90,1,a,b);e.up.set(0,-1,0);e.lookAt(new THREE.Vector3(-1,0,0));this.add(e);var f=new THREE.PerspectiveCamera(90,1,a,b);f.up.set(0,0,1);f.lookAt(new THREE.Vector3(0,1,0));this.add(f);var g=new THREE.PerspectiveCamera(90,1,a,b);g.up.set(0,0,-1);g.lookAt(new THREE.Vector3(0,-1,0));this.add(g);var h=new THREE.PerspectiveCamera(90,
1,a,b);h.up.set(0,-1,0);h.lookAt(new THREE.Vector3(0,0,1));this.add(h);var k=new THREE.PerspectiveCamera(90,1,a,b);k.up.set(0,-1,0);k.lookAt(new THREE.Vector3(0,0,-1));this.add(k);this.renderTarget=new THREE.WebGLRenderTargetCube(c,c,{format:THREE.RGBFormat,magFilter:THREE.LinearFilter,minFilter:THREE.LinearFilter});this.updateCubeMap=function(a,b){var c=this.renderTarget,r=c.generateMipmaps;c.generateMipmaps=!1;c.activeCubeFace=0;a.render(b,d,c);c.activeCubeFace=1;a.render(b,e,c);c.activeCubeFace=
2;a.render(b,f,c);c.activeCubeFace=3;a.render(b,g,c);c.activeCubeFace=4;a.render(b,h,c);c.generateMipmaps=r;c.activeCubeFace=5;a.render(b,k,c)}};THREE.CubeCamera.prototype=Object.create(THREE.Object3D.prototype);THREE.OrthographicCamera=function(a,b,c,d,e,f){THREE.Camera.call(this);this.left=a;this.right=b;this.top=c;this.bottom=d;this.near=void 0!==e?e:0.1;this.far=void 0!==f?f:2E3;this.updateProjectionMatrix()};THREE.OrthographicCamera.prototype=Object.create(THREE.Camera.prototype);
THREE.OrthographicCamera.prototype.updateProjectionMatrix=function(){this.projectionMatrix.makeOrthographic(this.left,this.right,this.top,this.bottom,this.near,this.far)};THREE.OrthographicCamera.prototype.clone=function(){var a=new THREE.OrthographicCamera;THREE.Camera.prototype.clone.call(this,a);a.left=this.left;a.right=this.right;a.top=this.top;a.bottom=this.bottom;a.near=this.near;a.far=this.far;return a};
THREE.PerspectiveCamera=function(a,b,c,d){THREE.Camera.call(this);this.fov=void 0!==a?a:50;this.aspect=void 0!==b?b:1;this.near=void 0!==c?c:0.1;this.far=void 0!==d?d:2E3;this.updateProjectionMatrix()};THREE.PerspectiveCamera.prototype=Object.create(THREE.Camera.prototype);THREE.PerspectiveCamera.prototype.setLens=function(a,b){void 0===b&&(b=24);this.fov=2*THREE.Math.radToDeg(Math.atan(b/(2*a)));this.updateProjectionMatrix()};
THREE.PerspectiveCamera.prototype.setViewOffset=function(a,b,c,d,e,f){this.fullWidth=a;this.fullHeight=b;this.x=c;this.y=d;this.width=e;this.height=f;this.updateProjectionMatrix()};
THREE.PerspectiveCamera.prototype.updateProjectionMatrix=function(){if(this.fullWidth){var a=this.fullWidth/this.fullHeight,b=Math.tan(THREE.Math.degToRad(0.5*this.fov))*this.near,c=-b,d=a*c,a=Math.abs(a*b-d),c=Math.abs(b-c);this.projectionMatrix.makeFrustum(d+this.x*a/this.fullWidth,d+(this.x+this.width)*a/this.fullWidth,b-(this.y+this.height)*c/this.fullHeight,b-this.y*c/this.fullHeight,this.near,this.far)}else this.projectionMatrix.makePerspective(this.fov,this.aspect,this.near,this.far)};
THREE.PerspectiveCamera.prototype.clone=function(){var a=new THREE.PerspectiveCamera;THREE.Camera.prototype.clone.call(this,a);a.fov=this.fov;a.aspect=this.aspect;a.near=this.near;a.far=this.far;return a};THREE.Light=function(a){THREE.Object3D.call(this);this.color=new THREE.Color(a)};THREE.Light.prototype=Object.create(THREE.Object3D.prototype);THREE.Light.prototype.clone=function(a){void 0===a&&(a=new THREE.Light);THREE.Object3D.prototype.clone.call(this,a);a.color.copy(this.color);return a};
THREE.AmbientLight=function(a){THREE.Light.call(this,a)};THREE.AmbientLight.prototype=Object.create(THREE.Light.prototype);THREE.AmbientLight.prototype.clone=function(){var a=new THREE.AmbientLight;THREE.Light.prototype.clone.call(this,a);return a};
THREE.AreaLight=function(a,b){THREE.Light.call(this,a);this.normal=new THREE.Vector3(0,-1,0);this.right=new THREE.Vector3(1,0,0);this.intensity=void 0!==b?b:1;this.height=this.width=1;this.constantAttenuation=1.5;this.linearAttenuation=0.5;this.quadraticAttenuation=0.1};THREE.AreaLight.prototype=Object.create(THREE.Light.prototype);
THREE.DirectionalLight=function(a,b){THREE.Light.call(this,a);this.position.set(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.onlyShadow=this.castShadow=!1;this.shadowCameraNear=50;this.shadowCameraFar=5E3;this.shadowCameraLeft=-500;this.shadowCameraTop=this.shadowCameraRight=500;this.shadowCameraBottom=-500;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=0.5;this.shadowMapHeight=this.shadowMapWidth=512;this.shadowCascade=!1;this.shadowCascadeOffset=new THREE.Vector3(0,
0,-1E3);this.shadowCascadeCount=2;this.shadowCascadeBias=[0,0,0];this.shadowCascadeWidth=[512,512,512];this.shadowCascadeHeight=[512,512,512];this.shadowCascadeNearZ=[-1,0.99,0.998];this.shadowCascadeFarZ=[0.99,0.998,1];this.shadowCascadeArray=[];this.shadowMatrix=this.shadowCamera=this.shadowMapSize=this.shadowMap=null};THREE.DirectionalLight.prototype=Object.create(THREE.Light.prototype);
THREE.DirectionalLight.prototype.clone=function(){var a=new THREE.DirectionalLight;THREE.Light.prototype.clone.call(this,a);a.target=this.target.clone();a.intensity=this.intensity;a.castShadow=this.castShadow;a.onlyShadow=this.onlyShadow;a.shadowCameraNear=this.shadowCameraNear;a.shadowCameraFar=this.shadowCameraFar;a.shadowCameraLeft=this.shadowCameraLeft;a.shadowCameraRight=this.shadowCameraRight;a.shadowCameraTop=this.shadowCameraTop;a.shadowCameraBottom=this.shadowCameraBottom;a.shadowCameraVisible=
this.shadowCameraVisible;a.shadowBias=this.shadowBias;a.shadowDarkness=this.shadowDarkness;a.shadowMapWidth=this.shadowMapWidth;a.shadowMapHeight=this.shadowMapHeight;a.shadowCascade=this.shadowCascade;a.shadowCascadeOffset.copy(this.shadowCascadeOffset);a.shadowCascadeCount=this.shadowCascadeCount;a.shadowCascadeBias=this.shadowCascadeBias.slice(0);a.shadowCascadeWidth=this.shadowCascadeWidth.slice(0);a.shadowCascadeHeight=this.shadowCascadeHeight.slice(0);a.shadowCascadeNearZ=this.shadowCascadeNearZ.slice(0);
a.shadowCascadeFarZ=this.shadowCascadeFarZ.slice(0);return a};THREE.HemisphereLight=function(a,b,c){THREE.Light.call(this,a);this.position.set(0,100,0);this.groundColor=new THREE.Color(b);this.intensity=void 0!==c?c:1};THREE.HemisphereLight.prototype=Object.create(THREE.Light.prototype);THREE.HemisphereLight.prototype.clone=function(){var a=new THREE.HemisphereLight;THREE.Light.prototype.clone.call(this,a);a.groundColor.copy(this.groundColor);a.intensity=this.intensity;return a};
THREE.PointLight=function(a,b,c){THREE.Light.call(this,a);this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0};THREE.PointLight.prototype=Object.create(THREE.Light.prototype);THREE.PointLight.prototype.clone=function(){var a=new THREE.PointLight;THREE.Light.prototype.clone.call(this,a);a.intensity=this.intensity;a.distance=this.distance;return a};
THREE.SpotLight=function(a,b,c,d,e){THREE.Light.call(this,a);this.position.set(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0;this.angle=void 0!==d?d:Math.PI/3;this.exponent=void 0!==e?e:10;this.onlyShadow=this.castShadow=!1;this.shadowCameraNear=50;this.shadowCameraFar=5E3;this.shadowCameraFov=50;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=0.5;this.shadowMapHeight=this.shadowMapWidth=512;this.shadowMatrix=this.shadowCamera=this.shadowMapSize=
this.shadowMap=null};THREE.SpotLight.prototype=Object.create(THREE.Light.prototype);
THREE.SpotLight.prototype.clone=function(){var a=new THREE.SpotLight;THREE.Light.prototype.clone.call(this,a);a.target=this.target.clone();a.intensity=this.intensity;a.distance=this.distance;a.angle=this.angle;a.exponent=this.exponent;a.castShadow=this.castShadow;a.onlyShadow=this.onlyShadow;a.shadowCameraNear=this.shadowCameraNear;a.shadowCameraFar=this.shadowCameraFar;a.shadowCameraFov=this.shadowCameraFov;a.shadowCameraVisible=this.shadowCameraVisible;a.shadowBias=this.shadowBias;a.shadowDarkness=
this.shadowDarkness;a.shadowMapWidth=this.shadowMapWidth;a.shadowMapHeight=this.shadowMapHeight;return a};THREE.Cache=function(){this.files={}};THREE.Cache.prototype={constructor:THREE.Cache,add:function(a,b){this.files[a]=b},get:function(a){return this.files[a]},remove:function(a){delete this.files[a]},clear:function(){this.files={}}};
THREE.Loader=function(a){this.statusDomElement=(this.showStatus=a)?THREE.Loader.prototype.addStatusElement():null;this.imageLoader=new THREE.ImageLoader;this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){}};
THREE.Loader.prototype={constructor:THREE.Loader,crossOrigin:void 0,addStatusElement:function(){var a=document.createElement("div");a.style.position="absolute";a.style.right="0px";a.style.top="0px";a.style.fontSize="0.8em";a.style.textAlign="left";a.style.background="rgba(0,0,0,0.25)";a.style.color="#fff";a.style.width="120px";a.style.padding="0.5em 0.5em 0.5em 0.5em";a.style.zIndex=1E3;a.innerHTML="Loading ...";return a},updateProgress:function(a){var b="Loaded ",b=a.total?b+((100*a.loaded/a.total).toFixed(0)+
"%"):b+((a.loaded/1024).toFixed(2)+" KB");this.statusDomElement.innerHTML=b},extractUrlBase:function(a){a=a.split("/");if(1===a.length)return"./";a.pop();return a.join("/")+"/"},initMaterials:function(a,b){for(var c=[],d=0;d<a.length;++d)c[d]=this.createMaterial(a[d],b);return c},needsTangents:function(a){for(var b=0,c=a.length;b<c;b++)if(a[b]instanceof THREE.ShaderMaterial)return!0;return!1},createMaterial:function(a,b){function c(a){a=Math.log(a)/Math.LN2;return Math.pow(2,Math.round(a))}function d(a,
d,e,g,h,k,p){var v=b+e,w,u=THREE.Loader.Handlers.get(v);null!==u?w=u.load(v):(w=new THREE.Texture,u=f.imageLoader,u.crossOrigin=f.crossOrigin,u.load(v,function(a){if(!1===THREE.Math.isPowerOfTwo(a.width)||!1===THREE.Math.isPowerOfTwo(a.height)){var b=c(a.width),d=c(a.height),e=document.createElement("canvas");e.width=b;e.height=d;e.getContext("2d").drawImage(a,0,0,b,d);w.image=e}else w.image=a;w.needsUpdate=!0}));w.sourceFile=e;g&&(w.repeat.set(g[0],g[1]),1!==g[0]&&(w.wrapS=THREE.RepeatWrapping),
1!==g[1]&&(w.wrapT=THREE.RepeatWrapping));h&&w.offset.set(h[0],h[1]);k&&(e={repeat:THREE.RepeatWrapping,mirror:THREE.MirroredRepeatWrapping},void 0!==e[k[0]]&&(w.wrapS=e[k[0]]),void 0!==e[k[1]]&&(w.wrapT=e[k[1]]));p&&(w.anisotropy=p);a[d]=w}function e(a){return(255*a[0]<<16)+(255*a[1]<<8)+255*a[2]}var f=this,g="MeshLambertMaterial",h={color:15658734,opacity:1,map:null,lightMap:null,normalMap:null,bumpMap:null,wireframe:!1};if(a.shading){var k=a.shading.toLowerCase();"phong"===k?g="MeshPhongMaterial":
"basic"===k&&(g="MeshBasicMaterial")}void 0!==a.blending&&void 0!==THREE[a.blending]&&(h.blending=THREE[a.blending]);if(void 0!==a.transparent||1>a.opacity)h.transparent=a.transparent;void 0!==a.depthTest&&(h.depthTest=a.depthTest);void 0!==a.depthWrite&&(h.depthWrite=a.depthWrite);void 0!==a.visible&&(h.visible=a.visible);void 0!==a.flipSided&&(h.side=THREE.BackSide);void 0!==a.doubleSided&&(h.side=THREE.DoubleSide);void 0!==a.wireframe&&(h.wireframe=a.wireframe);void 0!==a.vertexColors&&("face"===
a.vertexColors?h.vertexColors=THREE.FaceColors:a.vertexColors&&(h.vertexColors=THREE.VertexColors));a.colorDiffuse?h.color=e(a.colorDiffuse):a.DbgColor&&(h.color=a.DbgColor);a.colorSpecular&&(h.specular=e(a.colorSpecular));a.colorAmbient&&(h.ambient=e(a.colorAmbient));a.colorEmissive&&(h.emissive=e(a.colorEmissive));a.transparency&&(h.opacity=a.transparency);a.specularCoef&&(h.shininess=a.specularCoef);a.mapDiffuse&&b&&d(h,"map",a.mapDiffuse,a.mapDiffuseRepeat,a.mapDiffuseOffset,a.mapDiffuseWrap,
a.mapDiffuseAnisotropy);a.mapLight&&b&&d(h,"lightMap",a.mapLight,a.mapLightRepeat,a.mapLightOffset,a.mapLightWrap,a.mapLightAnisotropy);a.mapBump&&b&&d(h,"bumpMap",a.mapBump,a.mapBumpRepeat,a.mapBumpOffset,a.mapBumpWrap,a.mapBumpAnisotropy);a.mapNormal&&b&&d(h,"normalMap",a.mapNormal,a.mapNormalRepeat,a.mapNormalOffset,a.mapNormalWrap,a.mapNormalAnisotropy);a.mapSpecular&&b&&d(h,"specularMap",a.mapSpecular,a.mapSpecularRepeat,a.mapSpecularOffset,a.mapSpecularWrap,a.mapSpecularAnisotropy);a.mapAlpha&&
b&&d(h,"alphaMap",a.mapAlpha,a.mapAlphaRepeat,a.mapAlphaOffset,a.mapAlphaWrap,a.mapAlphaAnisotropy);a.mapBumpScale&&(h.bumpScale=a.mapBumpScale);a.mapNormal?(g=THREE.ShaderLib.normalmap,k=THREE.UniformsUtils.clone(g.uniforms),k.tNormal.value=h.normalMap,a.mapNormalFactor&&k.uNormalScale.value.set(a.mapNormalFactor,a.mapNormalFactor),h.map&&(k.tDiffuse.value=h.map,k.enableDiffuse.value=!0),h.specularMap&&(k.tSpecular.value=h.specularMap,k.enableSpecular.value=!0),h.lightMap&&(k.tAO.value=h.lightMap,
k.enableAO.value=!0),k.diffuse.value.setHex(h.color),k.specular.value.setHex(h.specular),k.ambient.value.setHex(h.ambient),k.shininess.value=h.shininess,void 0!==h.opacity&&(k.opacity.value=h.opacity),g=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,vertexShader:g.vertexShader,uniforms:k,lights:!0,fog:!0}),h.transparent&&(g.transparent=!0)):g=new THREE[g](h);void 0!==a.DbgName&&(g.name=a.DbgName);return g}};
THREE.Loader.Handlers={handlers:[],add:function(a,b){this.handlers.push(a,b)},get:function(a){for(var b=0,c=this.handlers.length;b<c;b+=2){var d=this.handlers[b+1];if(this.handlers[b].test(a))return d}return null}};THREE.XHRLoader=function(a){this.cache=new THREE.Cache;this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.XHRLoader.prototype={constructor:THREE.XHRLoader,load:function(a,b,c,d){var e=this,f=e.cache.get(a);void 0!==f?b&&b(f):(f=new XMLHttpRequest,f.open("GET",a,!0),f.addEventListener("load",function(c){e.cache.add(a,this.response);b&&b(this.response);e.manager.itemEnd(a)},!1),void 0!==c&&f.addEventListener("progress",function(a){c(a)},!1),void 0!==d&&f.addEventListener("error",function(a){d(a)},!1),void 0!==this.crossOrigin&&(f.crossOrigin=this.crossOrigin),void 0!==this.responseType&&(f.responseType=
this.responseType),f.send(null),e.manager.itemStart(a))},setResponseType:function(a){this.responseType=a},setCrossOrigin:function(a){this.crossOrigin=a}};THREE.ImageLoader=function(a){this.cache=new THREE.Cache;this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.ImageLoader.prototype={constructor:THREE.ImageLoader,load:function(a,b,c,d){var e=this,f=e.cache.get(a);if(void 0!==f)b(f);else return f=document.createElement("img"),void 0!==b&&f.addEventListener("load",function(c){e.cache.add(a,this);b(this);e.manager.itemEnd(a)},!1),void 0!==c&&f.addEventListener("progress",function(a){c(a)},!1),void 0!==d&&f.addEventListener("error",function(a){d(a)},!1),void 0!==this.crossOrigin&&(f.crossOrigin=this.crossOrigin),f.src=a,e.manager.itemStart(a),f},setCrossOrigin:function(a){this.crossOrigin=
a}};THREE.JSONLoader=function(a){THREE.Loader.call(this,a);this.withCredentials=!1};THREE.JSONLoader.prototype=Object.create(THREE.Loader.prototype);THREE.JSONLoader.prototype.load=function(a,b,c){c=c&&"string"===typeof c?c:this.extractUrlBase(a);this.onLoadStart();this.loadAjaxJSON(this,a,b,c)};
THREE.JSONLoader.prototype.loadAjaxJSON=function(a,b,c,d,e){var f=new XMLHttpRequest,g=0;f.onreadystatechange=function(){if(f.readyState===f.DONE)if(200===f.status||0===f.status){if(f.responseText){var h=JSON.parse(f.responseText);if(void 0!==h.metadata&&"scene"===h.metadata.type){console.error('THREE.JSONLoader: "'+b+'" seems to be a Scene. Use THREE.SceneLoader instead.');return}h=a.parse(h,d);c(h.geometry,h.materials)}else console.error('THREE.JSONLoader: "'+b+'" seems to be unreachable or the file is empty.');
a.onLoadComplete()}else console.error("THREE.JSONLoader: Couldn't load \""+b+'" ('+f.status+")");else f.readyState===f.LOADING?e&&(0===g&&(g=f.getResponseHeader("Content-Length")),e({total:g,loaded:f.responseText.length})):f.readyState===f.HEADERS_RECEIVED&&void 0!==e&&(g=f.getResponseHeader("Content-Length"))};f.open("GET",b,!0);f.withCredentials=this.withCredentials;f.send(null)};
THREE.JSONLoader.prototype.parse=function(a,b){var c=new THREE.Geometry,d=void 0!==a.scale?1/a.scale:1;(function(b){var d,g,h,k,l,n,q,r,t,s,p,v,w,u=a.faces;n=a.vertices;var D=a.normals,A=a.colors,x=0;if(void 0!==a.uvs){for(d=0;d<a.uvs.length;d++)a.uvs[d].length&&x++;for(d=0;d<x;d++)c.faceVertexUvs[d]=[]}k=0;for(l=n.length;k<l;)d=new THREE.Vector3,d.x=n[k++]*b,d.y=n[k++]*b,d.z=n[k++]*b,c.vertices.push(d);k=0;for(l=u.length;k<l;)if(b=u[k++],t=b&1,h=b&2,d=b&8,q=b&16,s=b&32,n=b&64,b&=128,t){t=new THREE.Face3;
t.a=u[k];t.b=u[k+1];t.c=u[k+3];p=new THREE.Face3;p.a=u[k+1];p.b=u[k+2];p.c=u[k+3];k+=4;h&&(h=u[k++],t.materialIndex=h,p.materialIndex=h);h=c.faces.length;if(d)for(d=0;d<x;d++)for(v=a.uvs[d],c.faceVertexUvs[d][h]=[],c.faceVertexUvs[d][h+1]=[],g=0;4>g;g++)r=u[k++],w=v[2*r],r=v[2*r+1],w=new THREE.Vector2(w,r),2!==g&&c.faceVertexUvs[d][h].push(w),0!==g&&c.faceVertexUvs[d][h+1].push(w);q&&(q=3*u[k++],t.normal.set(D[q++],D[q++],D[q]),p.normal.copy(t.normal));if(s)for(d=0;4>d;d++)q=3*u[k++],s=new THREE.Vector3(D[q++],
D[q++],D[q]),2!==d&&t.vertexNormals.push(s),0!==d&&p.vertexNormals.push(s);n&&(n=u[k++],n=A[n],t.color.setHex(n),p.color.setHex(n));if(b)for(d=0;4>d;d++)n=u[k++],n=A[n],2!==d&&t.vertexColors.push(new THREE.Color(n)),0!==d&&p.vertexColors.push(new THREE.Color(n));c.faces.push(t);c.faces.push(p)}else{t=new THREE.Face3;t.a=u[k++];t.b=u[k++];t.c=u[k++];h&&(h=u[k++],t.materialIndex=h);h=c.faces.length;if(d)for(d=0;d<x;d++)for(v=a.uvs[d],c.faceVertexUvs[d][h]=[],g=0;3>g;g++)r=u[k++],w=v[2*r],r=v[2*r+1],
w=new THREE.Vector2(w,r),c.faceVertexUvs[d][h].push(w);q&&(q=3*u[k++],t.normal.set(D[q++],D[q++],D[q]));if(s)for(d=0;3>d;d++)q=3*u[k++],s=new THREE.Vector3(D[q++],D[q++],D[q]),t.vertexNormals.push(s);n&&(n=u[k++],t.color.setHex(A[n]));if(b)for(d=0;3>d;d++)n=u[k++],t.vertexColors.push(new THREE.Color(A[n]));c.faces.push(t)}})(d);(function(){var b=void 0!==a.influencesPerVertex?a.influencesPerVertex:2;if(a.skinWeights)for(var d=0,g=a.skinWeights.length;d<g;d+=b)c.skinWeights.push(new THREE.Vector4(a.skinWeights[d],
1<b?a.skinWeights[d+1]:0,2<b?a.skinWeights[d+2]:0,3<b?a.skinWeights[d+3]:0));if(a.skinIndices)for(d=0,g=a.skinIndices.length;d<g;d+=b)c.skinIndices.push(new THREE.Vector4(a.skinIndices[d],1<b?a.skinIndices[d+1]:0,2<b?a.skinIndices[d+2]:0,3<b?a.skinIndices[d+3]:0));c.bones=a.bones;c.bones&&0<c.bones.length&&(c.skinWeights.length!==c.skinIndices.length||c.skinIndices.length!==c.vertices.length)&&console.warn("When skinning, number of vertices ("+c.vertices.length+"), skinIndices ("+c.skinIndices.length+
"), and skinWeights ("+c.skinWeights.length+") should match.");c.animation=a.animation;c.animations=a.animations})();(function(b){if(void 0!==a.morphTargets){var d,g,h,k,l,n;d=0;for(g=a.morphTargets.length;d<g;d++)for(c.morphTargets[d]={},c.morphTargets[d].name=a.morphTargets[d].name,c.morphTargets[d].vertices=[],l=c.morphTargets[d].vertices,n=a.morphTargets[d].vertices,h=0,k=n.length;h<k;h+=3){var q=new THREE.Vector3;q.x=n[h]*b;q.y=n[h+1]*b;q.z=n[h+2]*b;l.push(q)}}if(void 0!==a.morphColors)for(d=
0,g=a.morphColors.length;d<g;d++)for(c.morphColors[d]={},c.morphColors[d].name=a.morphColors[d].name,c.morphColors[d].colors=[],k=c.morphColors[d].colors,l=a.morphColors[d].colors,b=0,h=l.length;b<h;b+=3)n=new THREE.Color(16755200),n.setRGB(l[b],l[b+1],l[b+2]),k.push(n)})(d);c.computeFaceNormals();c.computeBoundingSphere();if(void 0===a.materials||0===a.materials.length)return{geometry:c};d=this.initMaterials(a.materials,b);this.needsTangents(d)&&c.computeTangents();return{geometry:c,materials:d}};
THREE.LoadingManager=function(a,b,c){var d=this,e=0,f=0;this.onLoad=a;this.onProgress=b;this.onError=c;this.itemStart=function(a){f++};this.itemEnd=function(a){e++;if(void 0!==d.onProgress)d.onProgress(a,e,f);if(e===f&&void 0!==d.onLoad)d.onLoad()}};THREE.DefaultLoadingManager=new THREE.LoadingManager;THREE.BufferGeometryLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.BufferGeometryLoader.prototype={constructor:THREE.BufferGeometryLoader,load:function(a,b,c,d){var e=this,f=new THREE.XHRLoader;f.setCrossOrigin(this.crossOrigin);f.load(a,function(a){b(e.parse(JSON.parse(a)))},c,d)},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a){var b=new THREE.BufferGeometry,c=a.attributes,d;for(d in c){var e=c[d];b.attributes[d]={itemSize:e.itemSize,array:new self[e.type](e.array)}}c=a.offsets;void 0!==c&&(b.offsets=JSON.parse(JSON.stringify(c)));a=a.boundingSphere;
void 0!==a&&(b.boundingSphere=new THREE.Sphere((new THREE.Vector3).fromArray(void 0!==a.center?a.center:[0,0,0]),a.radius));return b}};THREE.MaterialLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.MaterialLoader.prototype={constructor:THREE.MaterialLoader,load:function(a,b,c,d){var e=this,f=new THREE.XHRLoader;f.setCrossOrigin(this.crossOrigin);f.load(a,function(a){b(e.parse(JSON.parse(a)))},c,d)},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a){var b=new THREE[a.type];void 0!==a.color&&b.color.setHex(a.color);void 0!==a.ambient&&b.ambient.setHex(a.ambient);void 0!==a.emissive&&b.emissive.setHex(a.emissive);void 0!==a.specular&&b.specular.setHex(a.specular);void 0!==a.shininess&&
(b.shininess=a.shininess);void 0!==a.uniforms&&(b.uniforms=a.uniforms);void 0!==a.vertexShader&&(b.vertexShader=a.vertexShader);void 0!==a.fragmentShader&&(b.fragmentShader=a.fragmentShader);void 0!==a.vertexColors&&(b.vertexColors=a.vertexColors);void 0!==a.blending&&(b.blending=a.blending);void 0!==a.side&&(b.side=a.side);void 0!==a.opacity&&(b.opacity=a.opacity);void 0!==a.transparent&&(b.transparent=a.transparent);void 0!==a.wireframe&&(b.wireframe=a.wireframe);if(void 0!==a.materials)for(var c=
0,d=a.materials.length;c<d;c++)b.materials.push(this.parse(a.materials[c]));return b}};THREE.ObjectLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.ObjectLoader.prototype={constructor:THREE.ObjectLoader,load:function(a,b,c,d){var e=this,f=new THREE.XHRLoader(e.manager);f.setCrossOrigin(this.crossOrigin);f.load(a,function(a){b(e.parse(JSON.parse(a)))},c,d)},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a){var b=this.parseGeometries(a.geometries),c=this.parseMaterials(a.materials);return this.parseObject(a.object,b,c)},parseGeometries:function(a){var b={};if(void 0!==a)for(var c=new THREE.JSONLoader,d=new THREE.BufferGeometryLoader,
e=0,f=a.length;e<f;e++){var g,h=a[e];switch(h.type){case "PlaneGeometry":g=new THREE.PlaneGeometry(h.width,h.height,h.widthSegments,h.heightSegments);break;case "BoxGeometry":case "CubeGeometry":g=new THREE.BoxGeometry(h.width,h.height,h.depth,h.widthSegments,h.heightSegments,h.depthSegments);break;case "CircleGeometry":g=new THREE.CircleGeometry(h.radius,h.segments);break;case "CylinderGeometry":g=new THREE.CylinderGeometry(h.radiusTop,h.radiusBottom,h.height,h.radialSegments,h.heightSegments,h.openEnded);
break;case "SphereGeometry":g=new THREE.SphereGeometry(h.radius,h.widthSegments,h.heightSegments,h.phiStart,h.phiLength,h.thetaStart,h.thetaLength);break;case "IcosahedronGeometry":g=new THREE.IcosahedronGeometry(h.radius,h.detail);break;case "TorusGeometry":g=new THREE.TorusGeometry(h.radius,h.tube,h.radialSegments,h.tubularSegments,h.arc);break;case "TorusKnotGeometry":g=new THREE.TorusKnotGeometry(h.radius,h.tube,h.radialSegments,h.tubularSegments,h.p,h.q,h.heightScale);break;case "BufferGeometry":g=
d.parse(h.data);break;case "Geometry":g=c.parse(h.data).geometry}g.uuid=h.uuid;void 0!==h.name&&(g.name=h.name);b[h.uuid]=g}return b},parseMaterials:function(a){var b={};if(void 0!==a)for(var c=new THREE.MaterialLoader,d=0,e=a.length;d<e;d++){var f=a[d],g=c.parse(f);g.uuid=f.uuid;void 0!==f.name&&(g.name=f.name);b[f.uuid]=g}return b},parseObject:function(){var a=new THREE.Matrix4;return function(b,c,d){var e;switch(b.type){case "Scene":e=new THREE.Scene;break;case "PerspectiveCamera":e=new THREE.PerspectiveCamera(b.fov,
b.aspect,b.near,b.far);break;case "OrthographicCamera":e=new THREE.OrthographicCamera(b.left,b.right,b.top,b.bottom,b.near,b.far);break;case "AmbientLight":e=new THREE.AmbientLight(b.color);break;case "DirectionalLight":e=new THREE.DirectionalLight(b.color,b.intensity);break;case "PointLight":e=new THREE.PointLight(b.color,b.intensity,b.distance);break;case "SpotLight":e=new THREE.SpotLight(b.color,b.intensity,b.distance,b.angle,b.exponent);break;case "HemisphereLight":e=new THREE.HemisphereLight(b.color,
b.groundColor,b.intensity);break;case "Mesh":e=c[b.geometry];var f=d[b.material];void 0===e&&console.error("THREE.ObjectLoader: Undefined geometry "+b.geometry);void 0===f&&console.error("THREE.ObjectLoader: Undefined material "+b.material);e=new THREE.Mesh(e,f);break;case "Sprite":f=d[b.material];void 0===f&&console.error("THREE.ObjectLoader: Undefined material "+b.material);e=new THREE.Sprite(f);break;default:e=new THREE.Object3D}e.uuid=b.uuid;void 0!==b.name&&(e.name=b.name);void 0!==b.matrix?
(a.fromArray(b.matrix),a.decompose(e.position,e.quaternion,e.scale)):(void 0!==b.position&&e.position.fromArray(b.position),void 0!==b.rotation&&e.rotation.fromArray(b.rotation),void 0!==b.scale&&e.scale.fromArray(b.scale));void 0!==b.visible&&(e.visible=b.visible);void 0!==b.userData&&(e.userData=b.userData);if(void 0!==b.children)for(var g in b.children)e.add(this.parseObject(b.children[g],c,d));return e}}()};THREE.TextureLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.TextureLoader.prototype={constructor:THREE.TextureLoader,load:function(a,b,c,d){var e=new THREE.ImageLoader(this.manager);e.setCrossOrigin(this.crossOrigin);e.load(a,function(a){a=new THREE.Texture(a);a.needsUpdate=!0;void 0!==b&&b(a)},c,d)},setCrossOrigin:function(a){this.crossOrigin=a}};
THREE.Material=function(){this.id=THREE.MaterialIdCount++;this.uuid=THREE.Math.generateUUID();this.name="";this.side=THREE.FrontSide;this.opacity=1;this.transparent=!1;this.blending=THREE.NormalBlending;this.blendSrc=THREE.SrcAlphaFactor;this.blendDst=THREE.OneMinusSrcAlphaFactor;this.blendEquation=THREE.AddEquation;this.depthWrite=this.depthTest=!0;this.polygonOffset=!1;this.overdraw=this.alphaTest=this.polygonOffsetUnits=this.polygonOffsetFactor=0;this.needsUpdate=this.visible=!0};
THREE.Material.prototype={constructor:THREE.Material,setValues:function(a){if(void 0!==a)for(var b in a){var c=a[b];if(void 0===c)console.warn("THREE.Material: '"+b+"' parameter is undefined.");else if(b in this){var d=this[b];d instanceof THREE.Color?d.set(c):d instanceof THREE.Vector3&&c instanceof THREE.Vector3?d.copy(c):this[b]="overdraw"==b?Number(c):c}}},clone:function(a){void 0===a&&(a=new THREE.Material);a.name=this.name;a.side=this.side;a.opacity=this.opacity;a.transparent=this.transparent;
a.blending=this.blending;a.blendSrc=this.blendSrc;a.blendDst=this.blendDst;a.blendEquation=this.blendEquation;a.depthTest=this.depthTest;a.depthWrite=this.depthWrite;a.polygonOffset=this.polygonOffset;a.polygonOffsetFactor=this.polygonOffsetFactor;a.polygonOffsetUnits=this.polygonOffsetUnits;a.alphaTest=this.alphaTest;a.overdraw=this.overdraw;a.visible=this.visible;return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.Material.prototype);
THREE.MaterialIdCount=0;THREE.LineBasicMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.linewidth=1;this.linejoin=this.linecap="round";this.vertexColors=THREE.NoColors;this.fog=!0;this.setValues(a)};THREE.LineBasicMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.LineBasicMaterial.prototype.clone=function(){var a=new THREE.LineBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.linewidth=this.linewidth;a.linecap=this.linecap;a.linejoin=this.linejoin;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};THREE.LineDashedMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.scale=this.linewidth=1;this.dashSize=3;this.gapSize=1;this.vertexColors=!1;this.fog=!0;this.setValues(a)};
THREE.LineDashedMaterial.prototype=Object.create(THREE.Material.prototype);THREE.LineDashedMaterial.prototype.clone=function(){var a=new THREE.LineDashedMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.linewidth=this.linewidth;a.scale=this.scale;a.dashSize=this.dashSize;a.gapSize=this.gapSize;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};
THREE.MeshBasicMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.envMap=this.alphaMap=this.specularMap=this.lightMap=this.map=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.vertexColors=THREE.NoColors;this.morphTargets=this.skinning=!1;this.setValues(a)};
THREE.MeshBasicMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshBasicMaterial.prototype.clone=function(){var a=new THREE.MeshBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.lightMap=this.lightMap;a.specularMap=this.specularMap;a.alphaMap=this.alphaMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;
a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;return a};
THREE.MeshLambertMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.ambient=new THREE.Color(16777215);this.emissive=new THREE.Color(0);this.wrapAround=!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.envMap=this.alphaMap=this.specularMap=this.lightMap=this.map=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap=
"round";this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshLambertMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshLambertMaterial.prototype.clone=function(){var a=new THREE.MeshLambertMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.ambient.copy(this.ambient);a.emissive.copy(this.emissive);a.wrapAround=this.wrapAround;a.wrapRGB.copy(this.wrapRGB);a.map=this.map;a.lightMap=this.lightMap;a.specularMap=this.specularMap;a.alphaMap=this.alphaMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;
a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;a.morphNormals=this.morphNormals;return a};
THREE.MeshPhongMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.ambient=new THREE.Color(16777215);this.emissive=new THREE.Color(0);this.specular=new THREE.Color(1118481);this.shininess=30;this.wrapAround=this.metal=!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.bumpMap=this.lightMap=this.map=null;this.bumpScale=1;this.normalMap=null;this.normalScale=new THREE.Vector2(1,1);this.envMap=this.alphaMap=this.specularMap=null;this.combine=THREE.MultiplyOperation;this.reflectivity=
1;this.refractionRatio=0.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshPhongMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshPhongMaterial.prototype.clone=function(){var a=new THREE.MeshPhongMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.ambient.copy(this.ambient);a.emissive.copy(this.emissive);a.specular.copy(this.specular);a.shininess=this.shininess;a.metal=this.metal;a.wrapAround=this.wrapAround;a.wrapRGB.copy(this.wrapRGB);a.map=this.map;a.lightMap=this.lightMap;a.bumpMap=this.bumpMap;a.bumpScale=this.bumpScale;a.normalMap=this.normalMap;a.normalScale.copy(this.normalScale);
a.specularMap=this.specularMap;a.alphaMap=this.alphaMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;a.morphNormals=this.morphNormals;return a};
THREE.MeshDepthMaterial=function(a){THREE.Material.call(this);this.wireframe=this.morphTargets=!1;this.wireframeLinewidth=1;this.setValues(a)};THREE.MeshDepthMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshDepthMaterial.prototype.clone=function(){var a=new THREE.MeshDepthMaterial;THREE.Material.prototype.clone.call(this,a);a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;return a};
THREE.MeshNormalMaterial=function(a){THREE.Material.call(this,a);this.shading=THREE.FlatShading;this.wireframe=!1;this.wireframeLinewidth=1;this.morphTargets=!1;this.setValues(a)};THREE.MeshNormalMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshNormalMaterial.prototype.clone=function(){var a=new THREE.MeshNormalMaterial;THREE.Material.prototype.clone.call(this,a);a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;return a};
THREE.MeshFaceMaterial=function(a){this.materials=a instanceof Array?a:[]};THREE.MeshFaceMaterial.prototype.clone=function(){for(var a=new THREE.MeshFaceMaterial,b=0;b<this.materials.length;b++)a.materials.push(this.materials[b].clone());return a};THREE.PointCloudMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.map=null;this.size=1;this.sizeAttenuation=!0;this.vertexColors=THREE.NoColors;this.fog=!0;this.setValues(a)};THREE.PointCloudMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.PointCloudMaterial.prototype.clone=function(){var a=new THREE.PointCloudMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.size=this.size;a.sizeAttenuation=this.sizeAttenuation;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};THREE.ParticleBasicMaterial=function(a){console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointCloudMaterial.");return new THREE.PointCloudMaterial(a)};
THREE.ParticleSystemMaterial=function(a){console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointCloudMaterial.");return new THREE.PointCloudMaterial(a)};
THREE.ShaderMaterial=function(a){THREE.Material.call(this);this.defines={};this.uniforms={};this.attributes=null;this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";this.shading=THREE.SmoothShading;this.linewidth=1;this.wireframe=!1;this.wireframeLinewidth=1;this.lights=this.fog=!1;this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=
!1;this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]};this.index0AttributeName=void 0;this.setValues(a)};THREE.ShaderMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.ShaderMaterial.prototype.clone=function(){var a=new THREE.ShaderMaterial;THREE.Material.prototype.clone.call(this,a);a.fragmentShader=this.fragmentShader;a.vertexShader=this.vertexShader;a.uniforms=THREE.UniformsUtils.clone(this.uniforms);a.attributes=this.attributes;a.defines=this.defines;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.fog=this.fog;a.lights=this.lights;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=
this.morphTargets;a.morphNormals=this.morphNormals;return a};THREE.RawShaderMaterial=function(a){THREE.ShaderMaterial.call(this,a)};THREE.RawShaderMaterial.prototype=Object.create(THREE.ShaderMaterial.prototype);THREE.RawShaderMaterial.prototype.clone=function(){var a=new THREE.RawShaderMaterial;THREE.ShaderMaterial.prototype.clone.call(this,a);return a};THREE.SpriteMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.map=null;this.rotation=0;this.fog=!1;this.setValues(a)};
THREE.SpriteMaterial.prototype=Object.create(THREE.Material.prototype);THREE.SpriteMaterial.prototype.clone=function(){var a=new THREE.SpriteMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.rotation=this.rotation;a.fog=this.fog;return a};THREE.SpriteCanvasMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.program=function(a,c){};this.setValues(a)};THREE.SpriteCanvasMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.SpriteCanvasMaterial.prototype.clone=function(){var a=new THREE.SpriteCanvasMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.program=this.program;return a};THREE.ParticleCanvasMaterial=THREE.SpriteCanvasMaterial;
THREE.Texture=function(a,b,c,d,e,f,g,h,k){this.id=THREE.TextureIdCount++;this.uuid=THREE.Math.generateUUID();this.name="";this.image=void 0!==a?a:THREE.Texture.DEFAULT_IMAGE;this.mipmaps=[];this.mapping=void 0!==b?b:THREE.Texture.DEFAULT_MAPPING;this.wrapS=void 0!==c?c:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==d?d:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==e?e:THREE.LinearFilter;this.minFilter=void 0!==f?f:THREE.LinearMipMapLinearFilter;this.anisotropy=void 0!==k?k:1;this.format=void 0!==
g?g:THREE.RGBAFormat;this.type=void 0!==h?h:THREE.UnsignedByteType;this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.generateMipmaps=!0;this.premultiplyAlpha=!1;this.flipY=!0;this.unpackAlignment=4;this._needsUpdate=!1;this.onUpdate=null};THREE.Texture.DEFAULT_IMAGE=void 0;THREE.Texture.DEFAULT_MAPPING=new THREE.UVMapping;
THREE.Texture.prototype={constructor:THREE.Texture,get needsUpdate(){return this._needsUpdate},set needsUpdate(a){!0===a&&this.update();this._needsUpdate=a},clone:function(a){void 0===a&&(a=new THREE.Texture);a.image=this.image;a.mipmaps=this.mipmaps.slice(0);a.mapping=this.mapping;a.wrapS=this.wrapS;a.wrapT=this.wrapT;a.magFilter=this.magFilter;a.minFilter=this.minFilter;a.anisotropy=this.anisotropy;a.format=this.format;a.type=this.type;a.offset.copy(this.offset);a.repeat.copy(this.repeat);a.generateMipmaps=
this.generateMipmaps;a.premultiplyAlpha=this.premultiplyAlpha;a.flipY=this.flipY;a.unpackAlignment=this.unpackAlignment;return a},update:function(){this.dispatchEvent({type:"update"})},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.Texture.prototype);THREE.TextureIdCount=0;THREE.CubeTexture=function(a,b,c,d,e,f,g,h,k){THREE.Texture.call(this,a,b,c,d,e,f,g,h,k);this.images=a};THREE.CubeTexture.prototype=Object.create(THREE.Texture.prototype);
THREE.CubeTexture.clone=function(a){void 0===a&&(a=new THREE.CubeTexture);THREE.Texture.prototype.clone.call(this,a);a.images=this.images;return a};THREE.CompressedTexture=function(a,b,c,d,e,f,g,h,k,l,n){THREE.Texture.call(this,null,f,g,h,k,l,d,e,n);this.image={width:b,height:c};this.mipmaps=a;this.generateMipmaps=!1};THREE.CompressedTexture.prototype=Object.create(THREE.Texture.prototype);
THREE.CompressedTexture.prototype.clone=function(){var a=new THREE.CompressedTexture;THREE.Texture.prototype.clone.call(this,a);return a};THREE.DataTexture=function(a,b,c,d,e,f,g,h,k,l,n){THREE.Texture.call(this,null,f,g,h,k,l,d,e,n);this.image={data:a,width:b,height:c}};THREE.DataTexture.prototype=Object.create(THREE.Texture.prototype);THREE.DataTexture.prototype.clone=function(){var a=new THREE.DataTexture;THREE.Texture.prototype.clone.call(this,a);return a};
THREE.PointCloud=function(a,b){THREE.Object3D.call(this);this.geometry=void 0!==a?a:new THREE.Geometry;this.material=void 0!==b?b:new THREE.PointCloudMaterial({color:16777215*Math.random()});this.sortParticles=!1};THREE.PointCloud.prototype=Object.create(THREE.Object3D.prototype);
THREE.PointCloud.prototype.raycast=function(){var a=new THREE.Matrix4,b=new THREE.Ray;return function(c,d){var e=this,f=e.geometry,g=c.params.PointCloud.threshold;a.getInverse(this.matrixWorld);b.copy(c.ray).applyMatrix4(a);if(null===f.boundingBox||!1!==b.isIntersectionBox(f.boundingBox)){var h=g/((this.scale.x+this.scale.y+this.scale.z)/3),k=new THREE.Vector3,g=function(a,f){var g=b.distanceToPoint(a);if(g<h){var k=b.closestPointToPoint(a);k.applyMatrix4(e.matrixWorld);var l=c.ray.origin.distanceTo(k);
d.push({distance:l,distanceToRay:g,point:k.clone(),index:f,face:null,object:e})}};if(f instanceof THREE.BufferGeometry){var l=f.attributes,n=l.position.array;if(void 0!==l.index){var l=l.index.array,q=f.offsets;0===q.length&&(q=[{start:0,count:l.length,index:0}]);for(var r=0,t=q.length;r<t;++r)for(var s=q[r].start,p=q[r].index,f=s,s=s+q[r].count;f<s;f++){var v=p+l[f];k.set(n[3*v],n[3*v+1],n[3*v+2]);g(k,v)}}else for(l=n.length/3,f=0;f<l;f++)k.set(n[3*f],n[3*f+1],n[3*f+2]),g(k,f)}else for(k=this.geometry.vertices,
f=0;f<k.length;f++)g(k[f],f)}}}();THREE.PointCloud.prototype.clone=function(a){void 0===a&&(a=new THREE.PointCloud(this.geometry,this.material));a.sortParticles=this.sortParticles;THREE.Object3D.prototype.clone.call(this,a);return a};THREE.ParticleSystem=function(a,b){console.warn("THREE.ParticleSystem has been renamed to THREE.PointCloud.");return new THREE.PointCloud(a,b)};
THREE.Line=function(a,b,c){THREE.Object3D.call(this);this.geometry=void 0!==a?a:new THREE.Geometry;this.material=void 0!==b?b:new THREE.LineBasicMaterial({color:16777215*Math.random()});this.type=void 0!==c?c:THREE.LineStrip};THREE.LineStrip=0;THREE.LinePieces=1;THREE.Line.prototype=Object.create(THREE.Object3D.prototype);
THREE.Line.prototype.raycast=function(){var a=new THREE.Matrix4,b=new THREE.Ray,c=new THREE.Sphere;return function(d,e){var f=d.linePrecision,f=f*f,g=this.geometry;null===g.boundingSphere&&g.computeBoundingSphere();c.copy(g.boundingSphere);c.applyMatrix4(this.matrixWorld);if(!1!==d.ray.isIntersectionSphere(c)&&(a.getInverse(this.matrixWorld),b.copy(d.ray).applyMatrix4(a),g instanceof THREE.Geometry))for(var g=g.vertices,h=g.length,k=new THREE.Vector3,l=new THREE.Vector3,n=this.type===THREE.LineStrip?
1:2,q=0;q<h-1;q+=n)if(!(b.distanceSqToSegment(g[q],g[q+1],l,k)>f)){var r=b.origin.distanceTo(l);r<d.near||r>d.far||e.push({distance:r,point:k.clone().applyMatrix4(this.matrixWorld),face:null,faceIndex:null,object:this})}}}();THREE.Line.prototype.clone=function(a){void 0===a&&(a=new THREE.Line(this.geometry,this.material,this.type));THREE.Object3D.prototype.clone.call(this,a);return a};
THREE.Mesh=function(a,b){THREE.Object3D.call(this);this.geometry=void 0!==a?a:new THREE.Geometry;this.material=void 0!==b?b:new THREE.MeshBasicMaterial({color:16777215*Math.random()});this.updateMorphTargets()};THREE.Mesh.prototype=Object.create(THREE.Object3D.prototype);
THREE.Mesh.prototype.updateMorphTargets=function(){if(void 0!==this.geometry.morphTargets&&0<this.geometry.morphTargets.length){this.morphTargetBase=-1;this.morphTargetForcedOrder=[];this.morphTargetInfluences=[];this.morphTargetDictionary={};for(var a=0,b=this.geometry.morphTargets.length;a<b;a++)this.morphTargetInfluences.push(0),this.morphTargetDictionary[this.geometry.morphTargets[a].name]=a}};
THREE.Mesh.prototype.getMorphTargetIndexByName=function(a){if(void 0!==this.morphTargetDictionary[a])return this.morphTargetDictionary[a];console.log("THREE.Mesh.getMorphTargetIndexByName: morph target "+a+" does not exist. Returning 0.");return 0};
THREE.Mesh.prototype.raycast=function(){var a=new THREE.Matrix4,b=new THREE.Ray,c=new THREE.Sphere,d=new THREE.Vector3,e=new THREE.Vector3,f=new THREE.Vector3;return function(g,h){var k=this.geometry;null===k.boundingSphere&&k.computeBoundingSphere();c.copy(k.boundingSphere);c.applyMatrix4(this.matrixWorld);if(!1!==g.ray.isIntersectionSphere(c)&&(a.getInverse(this.matrixWorld),b.copy(g.ray).applyMatrix4(a),null===k.boundingBox||!1!==b.isIntersectionBox(k.boundingBox)))if(k instanceof THREE.BufferGeometry){var l=
this.material;if(void 0!==l){var n=k.attributes,q,r,t=g.precision;if(void 0!==n.index){var s=n.index.array,p=n.position.array,v=k.offsets;0===v.length&&(v=[{start:0,count:s.length,index:0}]);for(var w=0,u=v.length;w<u;++w)for(var n=v[w].start,D=v[w].index,k=n,A=n+v[w].count;k<A;k+=3){n=D+s[k];q=D+s[k+1];r=D+s[k+2];d.set(p[3*n],p[3*n+1],p[3*n+2]);e.set(p[3*q],p[3*q+1],p[3*q+2]);f.set(p[3*r],p[3*r+1],p[3*r+2]);var x=l.side===THREE.BackSide?b.intersectTriangle(f,e,d,!0):b.intersectTriangle(d,e,f,l.side!==
THREE.DoubleSide);if(null!==x){x.applyMatrix4(this.matrixWorld);var C=g.ray.origin.distanceTo(x);C<t||C<g.near||C>g.far||h.push({distance:C,point:x,indices:[n,q,r],face:null,faceIndex:null,object:this})}}}else for(p=n.position.array,s=k=0,A=p.length;k<A;k+=3,s+=9)n=k,q=k+1,r=k+2,d.set(p[s],p[s+1],p[s+2]),e.set(p[s+3],p[s+4],p[s+5]),f.set(p[s+6],p[s+7],p[s+8]),x=l.side===THREE.BackSide?b.intersectTriangle(f,e,d,!0):b.intersectTriangle(d,e,f,l.side!==THREE.DoubleSide),null!==x&&(x.applyMatrix4(this.matrixWorld),
C=g.ray.origin.distanceTo(x),C<t||C<g.near||C>g.far||h.push({distance:C,point:x,indices:[n,q,r],face:null,faceIndex:null,object:this}))}}else if(k instanceof THREE.Geometry)for(s=this.material instanceof THREE.MeshFaceMaterial,p=!0===s?this.material.materials:null,t=g.precision,v=k.vertices,w=0,u=k.faces.length;w<u;w++)if(D=k.faces[w],l=!0===s?p[D.materialIndex]:this.material,void 0!==l){n=v[D.a];q=v[D.b];r=v[D.c];if(!0===l.morphTargets){x=k.morphTargets;C=this.morphTargetInfluences;d.set(0,0,0);
e.set(0,0,0);f.set(0,0,0);for(var A=0,I=x.length;A<I;A++){var z=C[A];if(0!==z){var y=x[A].vertices;d.x+=(y[D.a].x-n.x)*z;d.y+=(y[D.a].y-n.y)*z;d.z+=(y[D.a].z-n.z)*z;e.x+=(y[D.b].x-q.x)*z;e.y+=(y[D.b].y-q.y)*z;e.z+=(y[D.b].z-q.z)*z;f.x+=(y[D.c].x-r.x)*z;f.y+=(y[D.c].y-r.y)*z;f.z+=(y[D.c].z-r.z)*z}}d.add(n);e.add(q);f.add(r);n=d;q=e;r=f}x=l.side===THREE.BackSide?b.intersectTriangle(r,q,n,!0):b.intersectTriangle(n,q,r,l.side!==THREE.DoubleSide);null!==x&&(x.applyMatrix4(this.matrixWorld),C=g.ray.origin.distanceTo(x),
C<t||C<g.near||C>g.far||h.push({distance:C,point:x,face:D,faceIndex:w,object:this}))}}}();THREE.Mesh.prototype.clone=function(a,b){void 0===a&&(a=new THREE.Mesh(this.geometry,this.material));THREE.Object3D.prototype.clone.call(this,a,b);return a};THREE.Bone=function(a){THREE.Object3D.call(this);this.skin=a;this.accumulatedSclWeight=this.accumulatedPosWeight=this.accumulatedRotWeight=0};THREE.Bone.prototype=Object.create(THREE.Object3D.prototype);
THREE.Bone.prototype.updateMatrixWorld=function(a){THREE.Object3D.prototype.updateMatrixWorld.call(this,a);this.accumulatedSclWeight=this.accumulatedPosWeight=this.accumulatedRotWeight=0};
THREE.Skeleton=function(a,b,c){this.useVertexTexture=void 0!==c?c:!0;this.identityMatrix=new THREE.Matrix4;a=a||[];this.bones=a.slice(0);this.useVertexTexture?(this.boneTextureHeight=this.boneTextureWidth=a=256<this.bones.length?64:64<this.bones.length?32:16<this.bones.length?16:8,this.boneMatrices=new Float32Array(this.boneTextureWidth*this.boneTextureHeight*4),this.boneTexture=new THREE.DataTexture(this.boneMatrices,this.boneTextureWidth,this.boneTextureHeight,THREE.RGBAFormat,THREE.FloatType),
this.boneTexture.minFilter=THREE.NearestFilter,this.boneTexture.magFilter=THREE.NearestFilter,this.boneTexture.generateMipmaps=!1,this.boneTexture.flipY=!1):this.boneMatrices=new Float32Array(16*this.bones.length);if(void 0===b)this.calculateInverses();else if(this.bones.length===b.length)this.boneInverses=b.slice(0);else for(console.warn("THREE.Skeleton bonInverses is the wrong length."),this.boneInverses=[],b=0,a=this.bones.length;b<a;b++)this.boneInverses.push(new THREE.Matrix4)};
THREE.Skeleton.prototype.calculateInverses=function(){this.boneInverses=[];for(var a=0,b=this.bones.length;a<b;a++){var c=new THREE.Matrix4;this.bones[a]&&c.getInverse(this.bones[a].matrixWorld);this.boneInverses.push(c)}};
THREE.Skeleton.prototype.pose=function(){for(var a,b=0,c=this.bones.length;b<c;b++)(a=this.bones[b])&&a.matrixWorld.getInverse(this.boneInverses[b]);b=0;for(c=this.bones.length;b<c;b++)if(a=this.bones[b])a.parent?(a.matrix.getInverse(a.parent.matrixWorld),a.matrix.multiply(a.matrixWorld)):a.matrix.copy(a.matrixWorld),a.matrix.decompose(a.position,a.quaternion,a.scale)};
THREE.Skeleton.prototype.update=function(){for(var a=new THREE.Matrix4,b=0,c=this.bones.length;b<c;b++)a.multiplyMatrices(this.bones[b]?this.bones[b].matrixWorld:this.identityMatrix,this.boneInverses[b]),a.flattenToArrayOffset(this.boneMatrices,16*b);this.useVertexTexture&&(this.boneTexture.needsUpdate=!0)};
THREE.SkinnedMesh=function(a,b,c){THREE.Mesh.call(this,a,b);this.bindMode="attached";this.bindMatrix=new THREE.Matrix4;this.bindMatrixInverse=new THREE.Matrix4;a=[];if(this.geometry&&void 0!==this.geometry.bones){for(var d,e,f,g,h=0,k=this.geometry.bones.length;h<k;++h)d=this.geometry.bones[h],e=d.pos,f=d.rotq,g=d.scl,b=new THREE.Bone(this),a.push(b),b.name=d.name,b.position.set(e[0],e[1],e[2]),b.quaternion.set(f[0],f[1],f[2],f[3]),void 0!==g?b.scale.set(g[0],g[1],g[2]):b.scale.set(1,1,1);h=0;for(k=
this.geometry.bones.length;h<k;++h)d=this.geometry.bones[h],-1!==d.parent?a[d.parent].add(a[h]):this.add(a[h])}this.normalizeSkinWeights();this.updateMatrixWorld(!0);this.bind(new THREE.Skeleton(a,void 0,c))};THREE.SkinnedMesh.prototype=Object.create(THREE.Mesh.prototype);THREE.SkinnedMesh.prototype.bind=function(a,b){this.skeleton=a;void 0===b&&(this.updateMatrixWorld(!0),b=this.matrixWorld);this.bindMatrix.copy(b);this.bindMatrixInverse.getInverse(b)};THREE.SkinnedMesh.prototype.pose=function(){this.skeleton.pose()};
THREE.SkinnedMesh.prototype.normalizeSkinWeights=function(){if(this.geometry instanceof THREE.Geometry)for(var a=0;a<this.geometry.skinIndices.length;a++){var b=this.geometry.skinWeights[a],c=1/b.lengthManhattan();Infinity!==c?b.multiplyScalar(c):b.set(1)}};
THREE.SkinnedMesh.prototype.updateMatrixWorld=function(a){THREE.Mesh.prototype.updateMatrixWorld.call(this,!0);"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh unreckognized bindMode: "+this.bindMode)};
THREE.SkinnedMesh.prototype.clone=function(a){void 0===a&&(a=new THREE.SkinnedMesh(this.geometry,this.material,this.useVertexTexture));THREE.Mesh.prototype.clone.call(this,a);return a};THREE.MorphAnimMesh=function(a,b){THREE.Mesh.call(this,a,b);this.duration=1E3;this.mirroredLoop=!1;this.currentKeyframe=this.lastKeyframe=this.time=0;this.direction=1;this.directionBackwards=!1;this.setFrameRange(0,this.geometry.morphTargets.length-1)};THREE.MorphAnimMesh.prototype=Object.create(THREE.Mesh.prototype);
THREE.MorphAnimMesh.prototype.setFrameRange=function(a,b){this.startKeyframe=a;this.endKeyframe=b;this.length=this.endKeyframe-this.startKeyframe+1};THREE.MorphAnimMesh.prototype.setDirectionForward=function(){this.direction=1;this.directionBackwards=!1};THREE.MorphAnimMesh.prototype.setDirectionBackward=function(){this.direction=-1;this.directionBackwards=!0};
THREE.MorphAnimMesh.prototype.parseAnimations=function(){var a=this.geometry;a.animations||(a.animations={});for(var b,c=a.animations,d=/([a-z]+)_?(\d+)/,e=0,f=a.morphTargets.length;e<f;e++){var g=a.morphTargets[e].name.match(d);if(g&&1<g.length){g=g[1];c[g]||(c[g]={start:Infinity,end:-Infinity});var h=c[g];e<h.start&&(h.start=e);e>h.end&&(h.end=e);b||(b=g)}}a.firstAnimation=b};
THREE.MorphAnimMesh.prototype.setAnimationLabel=function(a,b,c){this.geometry.animations||(this.geometry.animations={});this.geometry.animations[a]={start:b,end:c}};THREE.MorphAnimMesh.prototype.playAnimation=function(a,b){var c=this.geometry.animations[a];c?(this.setFrameRange(c.start,c.end),this.duration=(c.end-c.start)/b*1E3,this.time=0):console.warn("animation["+a+"] undefined")};
THREE.MorphAnimMesh.prototype.updateAnimation=function(a){var b=this.duration/this.length;this.time+=this.direction*a;if(this.mirroredLoop){if(this.time>this.duration||0>this.time)this.direction*=-1,this.time>this.duration&&(this.time=this.duration,this.directionBackwards=!0),0>this.time&&(this.time=0,this.directionBackwards=!1)}else this.time%=this.duration,0>this.time&&(this.time+=this.duration);a=this.startKeyframe+THREE.Math.clamp(Math.floor(this.time/b),0,this.length-1);a!==this.currentKeyframe&&
(this.morphTargetInfluences[this.lastKeyframe]=0,this.morphTargetInfluences[this.currentKeyframe]=1,this.morphTargetInfluences[a]=0,this.lastKeyframe=this.currentKeyframe,this.currentKeyframe=a);b=this.time%b/b;this.directionBackwards&&(b=1-b);this.morphTargetInfluences[this.currentKeyframe]=b;this.morphTargetInfluences[this.lastKeyframe]=1-b};
THREE.MorphAnimMesh.prototype.interpolateTargets=function(a,b,c){for(var d=this.morphTargetInfluences,e=0,f=d.length;e<f;e++)d[e]=0;-1<a&&(d[a]=1-c);-1<b&&(d[b]=c)};
THREE.MorphAnimMesh.prototype.clone=function(a){void 0===a&&(a=new THREE.MorphAnimMesh(this.geometry,this.material));a.duration=this.duration;a.mirroredLoop=this.mirroredLoop;a.time=this.time;a.lastKeyframe=this.lastKeyframe;a.currentKeyframe=this.currentKeyframe;a.direction=this.direction;a.directionBackwards=this.directionBackwards;THREE.Mesh.prototype.clone.call(this,a);return a};THREE.LOD=function(){THREE.Object3D.call(this);this.objects=[]};THREE.LOD.prototype=Object.create(THREE.Object3D.prototype);
THREE.LOD.prototype.addLevel=function(a,b){void 0===b&&(b=0);b=Math.abs(b);for(var c=0;c<this.objects.length&&!(b<this.objects[c].distance);c++);this.objects.splice(c,0,{distance:b,object:a});this.add(a)};THREE.LOD.prototype.getObjectForDistance=function(a){for(var b=1,c=this.objects.length;b<c&&!(a<this.objects[b].distance);b++);return this.objects[b-1].object};
THREE.LOD.prototype.raycast=function(){var a=new THREE.Vector3;return function(b,c){a.setFromMatrixPosition(this.matrixWorld);var d=b.ray.origin.distanceTo(a);this.getObjectForDistance(d).raycast(b,c)}}();
THREE.LOD.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c){if(1<this.objects.length){a.setFromMatrixPosition(c.matrixWorld);b.setFromMatrixPosition(this.matrixWorld);c=a.distanceTo(b);this.objects[0].object.visible=!0;for(var d=1,e=this.objects.length;d<e;d++)if(c>=this.objects[d].distance)this.objects[d-1].object.visible=!1,this.objects[d].object.visible=!0;else break;for(;d<e;d++)this.objects[d].object.visible=!1}}}();
THREE.LOD.prototype.clone=function(a){void 0===a&&(a=new THREE.LOD);THREE.Object3D.prototype.clone.call(this,a);for(var b=0,c=this.objects.length;b<c;b++){var d=this.objects[b].object.clone();d.visible=0===b;a.addLevel(d,this.objects[b].distance)}return a};
THREE.Sprite=function(){var a=new Float32Array([-0.5,-0.5,0,0.5,-0.5,0,0.5,0.5,0]),b=new THREE.BufferGeometry;b.addAttribute("position",new THREE.BufferAttribute(a,3));return function(a){THREE.Object3D.call(this);this.geometry=b;this.material=void 0!==a?a:new THREE.SpriteMaterial}}();THREE.Sprite.prototype=Object.create(THREE.Object3D.prototype);
THREE.Sprite.prototype.raycast=function(){var a=new THREE.Vector3;return function(b,c){a.setFromMatrixPosition(this.matrixWorld);var d=b.ray.distanceToPoint(a);d>this.scale.x||c.push({distance:d,point:this.position,face:null,object:this})}}();THREE.Sprite.prototype.updateMatrix=function(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=!0};
THREE.Sprite.prototype.clone=function(a){void 0===a&&(a=new THREE.Sprite(this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Particle=THREE.Sprite;THREE.Scene=function(){THREE.Object3D.call(this);this.overrideMaterial=this.fog=null;this.autoUpdate=!0;this.matrixAutoUpdate=!1;this.__lights=[];this.__objectsAdded=[];this.__objectsRemoved=[]};THREE.Scene.prototype=Object.create(THREE.Object3D.prototype);
THREE.Scene.prototype.__addObject=function(a){if(a instanceof THREE.Light)-1===this.__lights.indexOf(a)&&this.__lights.push(a),a.target&&void 0===a.target.parent&&this.add(a.target);else if(!(a instanceof THREE.Camera||a instanceof THREE.Bone)){this.__objectsAdded.push(a);var b=this.__objectsRemoved.indexOf(a);-1!==b&&this.__objectsRemoved.splice(b,1)}this.dispatchEvent({type:"objectAdded",object:a});a.dispatchEvent({type:"addedToScene",scene:this});for(b=0;b<a.children.length;b++)this.__addObject(a.children[b])};
THREE.Scene.prototype.__removeObject=function(a){if(a instanceof THREE.Light){var b=this.__lights.indexOf(a);-1!==b&&this.__lights.splice(b,1);if(a.shadowCascadeArray)for(b=0;b<a.shadowCascadeArray.length;b++)this.__removeObject(a.shadowCascadeArray[b])}else a instanceof THREE.Camera||(this.__objectsRemoved.push(a),b=this.__objectsAdded.indexOf(a),-1!==b&&this.__objectsAdded.splice(b,1));this.dispatchEvent({type:"objectRemoved",object:a});a.dispatchEvent({type:"removedFromScene",scene:this});for(b=
0;b<a.children.length;b++)this.__removeObject(a.children[b])};THREE.Scene.prototype.clone=function(a){void 0===a&&(a=new THREE.Scene);THREE.Object3D.prototype.clone.call(this,a);null!==this.fog&&(a.fog=this.fog.clone());null!==this.overrideMaterial&&(a.overrideMaterial=this.overrideMaterial.clone());a.autoUpdate=this.autoUpdate;a.matrixAutoUpdate=this.matrixAutoUpdate;return a};THREE.Fog=function(a,b,c){this.name="";this.color=new THREE.Color(a);this.near=void 0!==b?b:1;this.far=void 0!==c?c:1E3};
THREE.Fog.prototype.clone=function(){return new THREE.Fog(this.color.getHex(),this.near,this.far)};THREE.FogExp2=function(a,b){this.name="";this.color=new THREE.Color(a);this.density=void 0!==b?b:2.5E-4};THREE.FogExp2.prototype.clone=function(){return new THREE.FogExp2(this.color.getHex(),this.density)};
THREE.CanvasRenderer=function(a){function b(a,b,c,d){l(b);n(c);q(d);r(a.getStyle());O.stroke();ra.expandByScalar(2*b)}function c(a){t(a.getStyle());O.fill()}function d(a){e(a.target)}function e(a){if(!(a instanceof THREE.CompressedTexture)){var b=a.wrapS===THREE.RepeatWrapping,c=a.wrapT===THREE.RepeatWrapping,d=a.image,e=document.createElement("canvas");e.width=d.width;e.height=d.height;var f=e.getContext("2d");f.setTransform(1,0,0,-1,0,d.height);f.drawImage(d,0,0);Ca[a.id]=O.createPattern(e,!0===
b&&!0===c?"repeat":!0===b&&!1===c?"repeat-x":!1===b&&!0===c?"repeat-y":"no-repeat")}}function f(a,b,c,f,g,h,k,l,n,r,q,s,p){if(!(p instanceof THREE.DataTexture)){!1===p.hasEventListener("update",d)&&(void 0!==p.image&&0<p.image.width&&e(p),p.addEventListener("update",d));var m=Ca[p.id];if(void 0!==m){t(m);var m=p.offset.x/p.repeat.x,w=p.offset.y/p.repeat.y,u=p.image.width*p.repeat.x;p=p.image.height*p.repeat.y;k=(k+m)*u;l=(l+w)*p;c-=a;f-=b;g-=a;h-=b;n=(n+m)*u-k;r=(r+w)*p-l;q=(q+m)*u-k;s=(s+w)*p-l;
p=n*s-q*r;0!==p&&(m=1/p,p=(s*c-r*g)*m,r=(s*f-r*h)*m,c=(n*g-q*c)*m,f=(n*h-q*f)*m,a=a-p*k-c*l,b=b-r*k-f*l,O.save(),O.transform(p,r,c,f,a,b),O.fill(),O.restore())}else t("rgba(0,0,0,1)"),O.fill()}}function g(a,b,c){var d=b.x-a.x,e=b.y-a.y,f=d*d+e*e;0!==f&&(c/=Math.sqrt(f),d*=c,e*=c,b.x+=d,b.y+=e,a.x-=d,a.y-=e)}function h(a){Q!==a&&(Q=O.globalAlpha=a)}function k(a){L!==a&&(a===THREE.NormalBlending?O.globalCompositeOperation="source-over":a===THREE.AdditiveBlending?O.globalCompositeOperation="lighter":
a===THREE.SubtractiveBlending&&(O.globalCompositeOperation="darker"),L=a)}function l(a){S!==a&&(S=O.lineWidth=a)}function n(a){V!==a&&(V=O.lineCap=a)}function q(a){W!==a&&(W=O.lineJoin=a)}function r(a){R!==a&&(R=O.strokeStyle=a)}function t(a){B!==a&&(B=O.fillStyle=a)}function s(a){H.length!==a.length&&(O.setLineDash(a),H=a)}console.log("THREE.CanvasRenderer",THREE.REVISION);var p=THREE.Math.smoothstep;a=a||{};var v=this,w,u,D,A=new THREE.Projector,x=void 0!==a.canvas?a.canvas:document.createElement("canvas"),
C=x.width,I=x.height,z=Math.floor(C/2),y=Math.floor(I/2),K=0,N=0,ba=C,P=I,O=x.getContext("2d",{alpha:!0===a.alpha}),J=new THREE.Color(0),E=0,Q=1,L=0,R=null,B=null,S=null,V=null,W=null,H=[],oa,$,X,T;new THREE.RenderableVertex;new THREE.RenderableVertex;var ya,Ea,Aa,za,Oa,Pa,G=new THREE.Color;new THREE.Color;new THREE.Color;new THREE.Color;new THREE.Color;var Ba=new THREE.Color,Ya=new THREE.Color,Za=new THREE.Color,Ca={},ca,la,qa,ua,ja,Fa,va,Ka=new THREE.Box2,aa=new THREE.Box2,ra=new THREE.Box2,Da=
new THREE.Color,Qa=new THREE.Color,cb=new THREE.Color,Ga=new THREE.Vector3,xa=new THREE.Vector3,ma=new THREE.Vector3,Ja=new THREE.Matrix3;void 0===O.setLineDash&&(O.setLineDash=function(){});this.domElement=x;this.devicePixelRatio=void 0!==a.devicePixelRatio?a.devicePixelRatio:void 0!==self.devicePixelRatio?self.devicePixelRatio:1;this.sortElements=this.sortObjects=this.autoClear=!0;this.info={render:{vertices:0,faces:0}};this.supportsVertexTextures=function(){};this.setFaceCulling=function(){};this.setSize=
function(a,b,c){C=a*this.devicePixelRatio;I=b*this.devicePixelRatio;x.width=C;x.height=I;z=Math.floor(C/2);y=Math.floor(I/2);!1!==c&&(x.style.width=a+"px",x.style.height=b+"px");Ka.min.set(-z,-y);Ka.max.set(z,y);aa.min.set(-z,-y);aa.max.set(z,y);Q=1;L=0;W=V=S=B=R=null;this.setViewport(0,0,a,b)};this.setViewport=function(a,b,c,d){K=a*this.devicePixelRatio;N=b*this.devicePixelRatio;ba=c*this.devicePixelRatio;P=d*this.devicePixelRatio};this.setScissor=function(){};this.enableScissorTest=function(){};
this.setClearColor=function(a,b){J.set(a);E=void 0!==b?b:1;aa.min.set(-z,-y);aa.max.set(z,y)};this.setClearColorHex=function(a,b){console.warn("THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.");this.setClearColor(a,b)};this.getClearColor=function(){return J};this.getClearAlpha=function(){return E};this.getMaxAnisotropy=function(){return 0};this.clear=function(){!1===aa.empty()&&(aa.intersect(Ka),aa.expandByScalar(2),aa.min.x+=z,aa.min.y=-aa.min.y+y,aa.max.x+=
z,aa.max.y=-aa.max.y+y,1>E&&O.clearRect(aa.min.x|0,aa.min.y|0,aa.max.x-aa.min.x|0,aa.max.y-aa.min.y|0),0<E&&(k(THREE.NormalBlending),h(1),t("rgba("+Math.floor(255*J.r)+","+Math.floor(255*J.g)+","+Math.floor(255*J.b)+","+E+")"),O.fillRect(aa.min.x|0,aa.min.y|0,aa.max.x-aa.min.x|0,aa.max.y-aa.min.y|0)),aa.makeEmpty())};this.clearColor=function(){};this.clearDepth=function(){};this.clearStencil=function(){};this.render=function(a,x){if(!1===x instanceof THREE.Camera)console.error("THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.");
else{!0===this.autoClear&&this.clear();v.info.render.vertices=0;v.info.render.faces=0;O.setTransform(ba/C,0,0,-P/I,K,I-N);O.translate(z,y);w=A.projectScene(a,x,this.sortObjects,this.sortElements);u=w.elements;D=w.lights;oa=x;Ja.getNormalMatrix(x.matrixWorldInverse);Da.setRGB(0,0,0);Qa.setRGB(0,0,0);cb.setRGB(0,0,0);for(var L=0,Q=D.length;L<Q;L++){var E=D[L],H=E.color;E instanceof THREE.AmbientLight?Da.add(H):E instanceof THREE.DirectionalLight?Qa.add(H):E instanceof THREE.PointLight&&cb.add(H)}L=
0;for(Q=u.length;L<Q;L++){var J=u[L],B=J.material;if(void 0!==B&&0!==B.opacity){ra.makeEmpty();if(J instanceof THREE.RenderableSprite){$=J;$.x*=z;$.y*=y;var E=$,R=J,H=B;h(H.opacity);k(H.blending);var ea=R.scale.x*z,R=R.scale.y*y,J=0.5*Math.sqrt(ea*ea+R*R);ra.min.set(E.x-J,E.y-J);ra.max.set(E.x+J,E.y+J);if(H instanceof THREE.SpriteMaterial){var da=H.map;if(null!==da&&void 0!==da.image){!1===da.hasEventListener("update",d)&&(0<da.image.width&&e(da),da.addEventListener("update",d));J=Ca[da.id];void 0!==
J?t(J):t("rgba( 0, 0, 0, 1 )");var S=da.image,J=S.width*da.offset.x,B=S.height*da.offset.y,V=S.width*da.repeat.x,da=S.height*da.repeat.y,S=ea/V,m=R/da;O.save();O.translate(E.x,E.y);0!==H.rotation&&O.rotate(H.rotation);O.translate(-ea/2,-R/2);O.scale(S,m);O.translate(-J,-B);O.fillRect(J,B,V,da)}else t(H.color.getStyle()),O.save(),O.translate(E.x,E.y),0!==H.rotation&&O.rotate(H.rotation),O.scale(ea,-R),O.fillRect(-0.5,-0.5,1,1);O.restore()}else H instanceof THREE.SpriteCanvasMaterial&&(r(H.color.getStyle()),
t(H.color.getStyle()),O.save(),O.translate(E.x,E.y),0!==H.rotation&&O.rotate(H.rotation),O.scale(ea,R),H.program(O),O.restore())}else if(J instanceof THREE.RenderableLine){if($=J.v1,X=J.v2,$.positionScreen.x*=z,$.positionScreen.y*=y,X.positionScreen.x*=z,X.positionScreen.y*=y,ra.setFromPoints([$.positionScreen,X.positionScreen]),!0===Ka.isIntersectionBox(ra))if(E=$,H=X,ea=J,R=B,h(R.opacity),k(R.blending),O.beginPath(),O.moveTo(E.positionScreen.x,E.positionScreen.y),O.lineTo(H.positionScreen.x,H.positionScreen.y),
R instanceof THREE.LineBasicMaterial){l(R.linewidth);n(R.linecap);q(R.linejoin);if(R.vertexColors!==THREE.VertexColors)r(R.color.getStyle());else if(J=ea.vertexColors[0].getStyle(),ea=ea.vertexColors[1].getStyle(),J===ea)r(J);else{try{var W=O.createLinearGradient(E.positionScreen.x,E.positionScreen.y,H.positionScreen.x,H.positionScreen.y);W.addColorStop(0,J);W.addColorStop(1,ea)}catch(xb){W=J}r(W)}O.stroke();ra.expandByScalar(2*R.linewidth)}else R instanceof THREE.LineDashedMaterial&&(l(R.linewidth),
n(R.linecap),q(R.linejoin),r(R.color.getStyle()),s([R.dashSize,R.gapSize]),O.stroke(),ra.expandByScalar(2*R.linewidth),s([]))}else if(J instanceof THREE.RenderableFace){$=J.v1;X=J.v2;T=J.v3;if(-1>$.positionScreen.z||1<$.positionScreen.z)continue;if(-1>X.positionScreen.z||1<X.positionScreen.z)continue;if(-1>T.positionScreen.z||1<T.positionScreen.z)continue;$.positionScreen.x*=z;$.positionScreen.y*=y;X.positionScreen.x*=z;X.positionScreen.y*=y;T.positionScreen.x*=z;T.positionScreen.y*=y;0<B.overdraw&&
(g($.positionScreen,X.positionScreen,B.overdraw),g(X.positionScreen,T.positionScreen,B.overdraw),g(T.positionScreen,$.positionScreen,B.overdraw));ra.setFromPoints([$.positionScreen,X.positionScreen,T.positionScreen]);if(!0===Ka.isIntersectionBox(ra)){H=$;ea=X;R=T;E=B;v.info.render.vertices+=3;v.info.render.faces++;h(E.opacity);k(E.blending);ya=H.positionScreen.x;Ea=H.positionScreen.y;Aa=ea.positionScreen.x;za=ea.positionScreen.y;Oa=R.positionScreen.x;Pa=R.positionScreen.y;var B=ya,V=Ea,da=Aa,S=za,
m=Oa,Ta=Pa;O.beginPath();O.moveTo(B,V);O.lineTo(da,S);O.lineTo(m,Ta);O.closePath();if((E instanceof THREE.MeshLambertMaterial||E instanceof THREE.MeshPhongMaterial)&&null===E.map){Ba.copy(E.color);Ya.copy(E.emissive);E.vertexColors===THREE.FaceColors&&Ba.multiply(J.color);G.copy(Da);xa.copy(H.positionWorld).add(ea.positionWorld).add(R.positionWorld).divideScalar(3);H=xa;ea=J.normalModel;R=G;J=0;for(B=D.length;J<B;J++)V=D[J],Za.copy(V.color),V instanceof THREE.DirectionalLight?(da=Ga.setFromMatrixPosition(V.matrixWorld).normalize(),
S=ea.dot(da),0>=S||(S*=V.intensity,R.add(Za.multiplyScalar(S)))):V instanceof THREE.PointLight&&(da=Ga.setFromMatrixPosition(V.matrixWorld),S=ea.dot(Ga.subVectors(da,H).normalize()),0>=S||(S*=0==V.distance?1:1-Math.min(H.distanceTo(da)/V.distance,1),0!=S&&(S*=V.intensity,R.add(Za.multiplyScalar(S)))));G.multiply(Ba).add(Ya);!0===E.wireframe?b(G,E.wireframeLinewidth,E.wireframeLinecap,E.wireframeLinejoin):c(G)}else E instanceof THREE.MeshBasicMaterial||E instanceof THREE.MeshLambertMaterial||E instanceof
THREE.MeshPhongMaterial?null!==E.map?E.map.mapping instanceof THREE.UVMapping&&(ca=J.uvs,f(ya,Ea,Aa,za,Oa,Pa,ca[0].x,ca[0].y,ca[1].x,ca[1].y,ca[2].x,ca[2].y,E.map)):null!==E.envMap?E.envMap.mapping instanceof THREE.SphericalReflectionMapping?(ma.copy(J.vertexNormalsModel[0]).applyMatrix3(Ja),la=0.5*ma.x+0.5,qa=0.5*ma.y+0.5,ma.copy(J.vertexNormalsModel[1]).applyMatrix3(Ja),ua=0.5*ma.x+0.5,ja=0.5*ma.y+0.5,ma.copy(J.vertexNormalsModel[2]).applyMatrix3(Ja),Fa=0.5*ma.x+0.5,va=0.5*ma.y+0.5,f(ya,Ea,Aa,za,
Oa,Pa,la,qa,ua,ja,Fa,va,E.envMap)):E.envMap.mapping instanceof THREE.SphericalRefractionMapping&&(ma.copy(J.vertexNormalsModel[0]).applyMatrix3(Ja),la=-0.5*ma.x+0.5,qa=-0.5*ma.y+0.5,ma.copy(J.vertexNormalsModel[1]).applyMatrix3(Ja),ua=-0.5*ma.x+0.5,ja=-0.5*ma.y+0.5,ma.copy(J.vertexNormalsModel[2]).applyMatrix3(Ja),Fa=-0.5*ma.x+0.5,va=-0.5*ma.y+0.5,f(ya,Ea,Aa,za,Oa,Pa,la,qa,ua,ja,Fa,va,E.envMap)):(G.copy(E.color),E.vertexColors===THREE.FaceColors&&G.multiply(J.color),!0===E.wireframe?b(G,E.wireframeLinewidth,
E.wireframeLinecap,E.wireframeLinejoin):c(G)):(E instanceof THREE.MeshDepthMaterial?G.r=G.g=G.b=1-p(H.positionScreen.z*H.positionScreen.w,oa.near,oa.far):E instanceof THREE.MeshNormalMaterial?(ma.copy(J.normalModel).applyMatrix3(Ja),G.setRGB(ma.x,ma.y,ma.z).multiplyScalar(0.5).addScalar(0.5)):G.setRGB(1,1,1),!0===E.wireframe?b(G,E.wireframeLinewidth,E.wireframeLinecap,E.wireframeLinejoin):c(G))}}aa.union(ra)}}O.setTransform(1,0,0,1,0,0)}}};THREE.ShaderChunk={};
THREE.ShaderChunk.alphatest_fragment="#ifdef ALPHATEST\n\n\tif ( gl_FragColor.a < ALPHATEST ) discard;\n\n#endif\n";THREE.ShaderChunk.lights_lambert_vertex="vLightFront = vec3( 0.0 );\n\n#ifdef DOUBLE_SIDED\n\n\tvLightBack = vec3( 0.0 );\n\n#endif\n\ntransformedNormal = normalize( transformedNormal );\n\n#if MAX_DIR_LIGHTS > 0\n\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\n\tvec3 dirVector = normalize( lDirection.xyz );\n\n\tfloat dotProduct = dot( transformedNormal, dirVector );\n\tvec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tvec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tvec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n\t\t#endif\n\n\t#endif\n\n\t#ifdef WRAP_AROUND\n\n\t\tvec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n\t\tdirectionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tdirectionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\n\n\t\t#endif\n\n\t#endif\n\n\tvLightFront += directionalLightColor[ i ] * directionalLightWeighting;\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tvLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\n\n\t#endif\n\n}\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz - mvPosition.xyz;\n\n\t\tfloat lDistance = 1.0;\n\t\tif ( pointLightDistance[ i ] > 0.0 )\n\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\n\n\t\tlVector = normalize( lVector );\n\t\tfloat dotProduct = dot( transformedNormal, lVector );\n\n\t\tvec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\tvec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n\t\t\t#endif\n\n\t\t#endif\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tvec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n\t\t\tpointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n\n\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\tpointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n\n\t\t\t#endif\n\n\t\t#endif\n\n\t\tvLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\n\n\t\t#endif\n\n\t}\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz - mvPosition.xyz;\n\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );\n\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\n\n\t\t\tspotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );\n\n\t\t\tfloat lDistance = 1.0;\n\t\t\tif ( spotLightDistance[ i ] > 0.0 )\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\n\n\t\t\tlVector = normalize( lVector );\n\n\t\t\tfloat dotProduct = dot( transformedNormal, lVector );\n\t\t\tvec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\tvec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n\t\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\t\tvec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n\t\t\t\t#endif\n\n\t\t\t#endif\n\n\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\tvec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n\t\t\t\tspotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\n\n\t\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\t\tspotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\n\n\t\t\t\t#endif\n\n\t\t\t#endif\n\n\t\t\tvLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;\n\n\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\tvLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;\n\n\t\t\t#endif\n\n\t\t}\n\n\t}\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\n\t\tvec3 lVector = normalize( lDirection.xyz );\n\n\t\tfloat dotProduct = dot( transformedNormal, lVector );\n\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\t\tfloat hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\n\n\t\tvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\n\n\t\t#endif\n\n\t}\n\n#endif\n\nvLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;\n\n#ifdef DOUBLE_SIDED\n\n\tvLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;\n\n#endif";
THREE.ShaderChunk.map_particle_pars_fragment="#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif";THREE.ShaderChunk.default_vertex="vec4 mvPosition;\n\n#ifdef USE_SKINNING\n\n\tmvPosition = modelViewMatrix * skinned;\n\n#endif\n\n#if !defined( USE_SKINNING ) && defined( USE_MORPHTARGETS )\n\n\tmvPosition = modelViewMatrix * vec4( morphed, 1.0 );\n\n#endif\n\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHTARGETS )\n\n\tmvPosition = modelViewMatrix * vec4( position, 1.0 );\n\n#endif\n\ngl_Position = projectionMatrix * mvPosition;";
THREE.ShaderChunk.map_pars_fragment="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n\tvarying vec2 vUv;\n\n#endif\n\n#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif";THREE.ShaderChunk.skinnormal_vertex="#ifdef USE_SKINNING\n\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\n\t#ifdef USE_MORPHNORMALS\n\n\tvec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\n\n\t#else\n\n\tvec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\n\n\t#endif\n\n#endif\n";
THREE.ShaderChunk.logdepthbuf_pars_vertex="#ifdef USE_LOGDEPTHBUF\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvarying float vFragDepth;\n\n\t#endif\n\n\tuniform float logDepthBufFC;\n\n#endif";THREE.ShaderChunk.lightmap_pars_vertex="#ifdef USE_LIGHTMAP\n\n\tvarying vec2 vUv2;\n\n#endif";THREE.ShaderChunk.lights_phong_fragment="vec3 normal = normalize( vNormal );\nvec3 viewPosition = normalize( vViewPosition );\n\n#ifdef DOUBLE_SIDED\n\n\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n\n#endif\n\n#ifdef USE_NORMALMAP\n\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\n#elif defined( USE_BUMPMAP )\n\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tvec3 pointDiffuse = vec3( 0.0 );\n\tvec3 pointSpecular = vec3( 0.0 );\n\n\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n\t\tfloat lDistance = 1.0;\n\t\tif ( pointLightDistance[ i ] > 0.0 )\n\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\n\n\t\tlVector = normalize( lVector );\n\n\t\t\t\t// diffuse\n\n\t\tfloat dotProduct = dot( normal, lVector );\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n\t\t\tvec3 pointDiffuseWeight = mix( vec3( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n\n\t\t#else\n\n\t\t\tfloat pointDiffuseWeight = max( dotProduct, 0.0 );\n\n\t\t#endif\n\n\t\tpointDiffuse += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\n\n\t\t\t\t// specular\n\n\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\n\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\n\t\tfloat pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\n\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, pointHalfVector ), 0.0 ), 5.0 );\n\t\tpointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\n\n\t}\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tvec3 spotDiffuse = vec3( 0.0 );\n\tvec3 spotSpecular = vec3( 0.0 );\n\n\tfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n\t\tfloat lDistance = 1.0;\n\t\tif ( spotLightDistance[ i ] > 0.0 )\n\t\t\tlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\n\n\t\tlVector = normalize( lVector );\n\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\n\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\n\n\t\t\tspotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );\n\n\t\t\t\t\t// diffuse\n\n\t\t\tfloat dotProduct = dot( normal, lVector );\n\n\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\tfloat spotDiffuseWeightFull = max( dotProduct, 0.0 );\n\t\t\t\tfloat spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n\t\t\t\tvec3 spotDiffuseWeight = mix( vec3( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n\n\t\t\t#else\n\n\t\t\t\tfloat spotDiffuseWeight = max( dotProduct, 0.0 );\n\n\t\t\t#endif\n\n\t\t\tspotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;\n\n\t\t\t\t\t// specular\n\n\t\t\tvec3 spotHalfVector = normalize( lVector + viewPosition );\n\t\t\tfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\n\t\t\tfloat spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );\n\n\t\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, spotHalfVector ), 0.0 ), 5.0 );\n\t\t\tspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;\n\n\t\t}\n\n\t}\n\n#endif\n\n#if MAX_DIR_LIGHTS > 0\n\n\tvec3 dirDiffuse = vec3( 0.0 );\n\tvec3 dirSpecular = vec3( 0.0 );\n\n\tfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\n\t\tvec3 dirVector = normalize( lDirection.xyz );\n\n\t\t\t\t// diffuse\n\n\t\tfloat dotProduct = dot( normal, dirVector );\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n\t\t\tvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n\n\t\t#else\n\n\t\t\tfloat dirDiffuseWeight = max( dotProduct, 0.0 );\n\n\t\t#endif\n\n\t\tdirDiffuse += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\n\n\t\t// specular\n\n\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\n\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\n\t\tfloat dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\n\n\t\t/*\n\t\t// fresnel term from skin shader\n\t\tconst float F0 = 0.128;\n\n\t\tfloat base = 1.0 - dot( viewPosition, dirHalfVector );\n\t\tfloat exponential = pow( base, 5.0 );\n\n\t\tfloat fresnel = exponential + F0 * ( 1.0 - exponential );\n\t\t*/\n\n\t\t/*\n\t\t// fresnel term from fresnel shader\n\t\tconst float mFresnelBias = 0.08;\n\t\tconst float mFresnelScale = 0.3;\n\t\tconst float mFresnelPower = 5.0;\n\n\t\tfloat fresnel = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( -viewPosition ), normal ), mFresnelPower );\n\t\t*/\n\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\t// \t\tdirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization * fresnel;\n\n\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );\n\t\tdirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n\n\n\t}\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tvec3 hemiDiffuse = vec3( 0.0 );\n\tvec3 hemiSpecular = vec3( 0.0 );\n\n\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\n\t\tvec3 lVector = normalize( lDirection.xyz );\n\n\t\t// diffuse\n\n\t\tfloat dotProduct = dot( normal, lVector );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n\t\tvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\themiDiffuse += diffuse * hemiColor;\n\n\t\t// specular (sky light)\n\n\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\n\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\n\t\tfloat hemiSpecularWeightSky = specularStrength * max( pow( max( hemiDotNormalHalfSky, 0.0 ), shininess ), 0.0 );\n\n\t\t// specular (ground light)\n\n\t\tvec3 lVectorGround = -lVector;\n\n\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\n\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\n\t\tfloat hemiSpecularWeightGround = specularStrength * max( pow( max( hemiDotNormalHalfGround, 0.0 ), shininess ), 0.0 );\n\n\t\tfloat dotProductGround = dot( normal, lVectorGround );\n\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\tvec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, hemiHalfVectorSky ), 0.0 ), 5.0 );\n\t\tvec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 0.0 ), 5.0 );\n\t\themiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n\n\t}\n\n#endif\n\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n\n#if MAX_DIR_LIGHTS > 0\n\n\ttotalDiffuse += dirDiffuse;\n\ttotalSpecular += dirSpecular;\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\ttotalDiffuse += hemiDiffuse;\n\ttotalSpecular += hemiSpecular;\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\ttotalDiffuse += pointDiffuse;\n\ttotalSpecular += pointSpecular;\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\ttotalDiffuse += spotDiffuse;\n\ttotalSpecular += spotSpecular;\n\n#endif\n\n#ifdef METAL\n\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );\n\n#else\n\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\n\n#endif";
THREE.ShaderChunk.fog_pars_fragment="#ifdef USE_FOG\n\n\tuniform vec3 fogColor;\n\n\t#ifdef FOG_EXP2\n\n\t\tuniform float fogDensity;\n\n\t#else\n\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n\n#endif";THREE.ShaderChunk.morphnormal_vertex="#ifdef USE_MORPHNORMALS\n\n\tvec3 morphedNormal = vec3( 0.0 );\n\n\tmorphedNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tmorphedNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tmorphedNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tmorphedNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n\n\tmorphedNormal += normal;\n\n#endif";
THREE.ShaderChunk.envmap_pars_fragment="#ifdef USE_ENVMAP\n\n\tuniform float reflectivity;\n\tuniform samplerCube envMap;\n\tuniform float flipEnvMap;\n\tuniform int combine;\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\n\t\tuniform bool useRefract;\n\t\tuniform float refractionRatio;\n\n\t#else\n\n\t\tvarying vec3 vReflect;\n\n\t#endif\n\n#endif";THREE.ShaderChunk.logdepthbuf_fragment="#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n\n#endif";
THREE.ShaderChunk.normalmap_pars_fragment="#ifdef USE_NORMALMAP\n\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\n\t\t\t// Per-Pixel Tangent Space Normal Mapping\n\t\t\t// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\n\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\n\t}\n\n#endif\n";
THREE.ShaderChunk.lights_phong_pars_vertex="#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n\tvarying vec3 vWorldPosition;\n\n#endif\n";THREE.ShaderChunk.lightmap_pars_fragment="#ifdef USE_LIGHTMAP\n\n\tvarying vec2 vUv2;\n\tuniform sampler2D lightMap;\n\n#endif";THREE.ShaderChunk.shadowmap_vertex="#ifdef USE_SHADOWMAP\n\n\tfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n\t\tvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n\n\t}\n\n#endif";
THREE.ShaderChunk.lights_phong_vertex="#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n\tvWorldPosition = worldPosition.xyz;\n\n#endif";THREE.ShaderChunk.map_fragment="#ifdef USE_MAP\n\n\tvec4 texelColor = texture2D( map, vUv );\n\n\t#ifdef GAMMA_INPUT\n\n\t\ttexelColor.xyz *= texelColor.xyz;\n\n\t#endif\n\n\tgl_FragColor = gl_FragColor * texelColor;\n\n#endif";THREE.ShaderChunk.lightmap_vertex="#ifdef USE_LIGHTMAP\n\n\tvUv2 = uv2;\n\n#endif";
THREE.ShaderChunk.map_particle_fragment="#ifdef USE_MAP\n\n\tgl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\n\n#endif";THREE.ShaderChunk.color_pars_fragment="#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif\n";THREE.ShaderChunk.color_vertex="#ifdef USE_COLOR\n\n\t#ifdef GAMMA_INPUT\n\n\t\tvColor = color * color;\n\n\t#else\n\n\t\tvColor = color;\n\n\t#endif\n\n#endif";THREE.ShaderChunk.skinning_vertex="#ifdef USE_SKINNING\n\n\t#ifdef USE_MORPHTARGETS\n\n\tvec4 skinVertex = bindMatrix * vec4( morphed, 1.0 );\n\n\t#else\n\n\tvec4 skinVertex = bindMatrix * vec4( position, 1.0 );\n\n\t#endif\n\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n\n#endif\n";
THREE.ShaderChunk.envmap_pars_vertex="#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\n\n\tvarying vec3 vReflect;\n\n\tuniform float refractionRatio;\n\tuniform bool useRefract;\n\n#endif\n";THREE.ShaderChunk.linear_to_gamma_fragment="#ifdef GAMMA_OUTPUT\n\n\tgl_FragColor.xyz = sqrt( gl_FragColor.xyz );\n\n#endif";THREE.ShaderChunk.color_pars_vertex="#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif";THREE.ShaderChunk.lights_lambert_pars_vertex="uniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 emissive;\n\nuniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\n#endif\n\n#ifdef WRAP_AROUND\n\n\tuniform vec3 wrapRGB;\n\n#endif\n";
THREE.ShaderChunk.map_pars_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n\n#endif\n";THREE.ShaderChunk.envmap_fragment="#ifdef USE_ENVMAP\n\n\tvec3 reflectVec;\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\n\t\t// http://en.wikibooks.org/wiki/GLSL_Programming/Applying_Matrix_Transformations\n\t\t// Transforming Normal Vectors with the Inverse Transformation\n\n\t\tvec3 worldNormal = normalize( vec3( vec4( normal, 0.0 ) * viewMatrix ) );\n\n\t\tif ( useRefract ) {\n\n\t\t\treflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t\t} else { \n\n\t\t\treflectVec = reflect( cameraToVertex, worldNormal );\n\n\t\t}\n\n\t#else\n\n\t\treflectVec = vReflect;\n\n\t#endif\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tfloat flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n\t\tvec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n\t#else\n\n\t\tvec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n\t#endif\n\n\t#ifdef GAMMA_INPUT\n\n\t\tcubeColor.xyz *= cubeColor.xyz;\n\n\t#endif\n\n\tif ( combine == 1 ) {\n\n\t\tgl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );\n\n\t} else if ( combine == 2 ) {\n\n\t\tgl_FragColor.xyz += cubeColor.xyz * specularStrength * reflectivity;\n\n\t} else {\n\n\t\tgl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );\n\n\t}\n\n#endif";
THREE.ShaderChunk.specularmap_pars_fragment="#ifdef USE_SPECULARMAP\n\n\tuniform sampler2D specularMap;\n\n#endif";THREE.ShaderChunk.logdepthbuf_vertex="#ifdef USE_LOGDEPTHBUF\n\n\tgl_Position.z = log2(max(1e-6, gl_Position.w + 1.0)) * logDepthBufFC;\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\n#else\n\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\n\t#endif\n\n#endif";THREE.ShaderChunk.morphtarget_pars_vertex="#ifdef USE_MORPHTARGETS\n\n\t#ifndef USE_MORPHNORMALS\n\n\tuniform float morphTargetInfluences[ 8 ];\n\n\t#else\n\n\tuniform float morphTargetInfluences[ 4 ];\n\n\t#endif\n\n#endif";
THREE.ShaderChunk.specularmap_fragment="float specularStrength;\n\n#ifdef USE_SPECULARMAP\n\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n\n#else\n\n\tspecularStrength = 1.0;\n\n#endif";THREE.ShaderChunk.fog_fragment="#ifdef USE_FOG\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\n\t#else\n\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\n\t#endif\n\n\t#ifdef FOG_EXP2\n\n\t\tconst float LOG2 = 1.442695;\n\t\tfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\n\t\tfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n\n\t#else\n\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n\n\t#endif\n\t\n\tgl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n\n#endif";
THREE.ShaderChunk.bumpmap_pars_fragment="#ifdef USE_BUMPMAP\n\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\n\t\t\t// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\n\t\t\t//\thttp://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\n\n\t\t\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\n\tvec2 dHdxy_fwd() {\n\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\n\t\treturn vec2( dBx, dBy );\n\n\t}\n\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\n\t\tvec3 vSigmaX = dFdx( surf_pos );\n\t\tvec3 vSigmaY = dFdy( surf_pos );\n\t\tvec3 vN = surf_norm;\t\t// normalized\n\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\n\t}\n\n#endif";
THREE.ShaderChunk.defaultnormal_vertex="vec3 objectNormal;\n\n#ifdef USE_SKINNING\n\n\tobjectNormal = skinnedNormal.xyz;\n\n#endif\n\n#if !defined( USE_SKINNING ) && defined( USE_MORPHNORMALS )\n\n\tobjectNormal = morphedNormal;\n\n#endif\n\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHNORMALS )\n\n\tobjectNormal = normal;\n\n#endif\n\n#ifdef FLIP_SIDED\n\n\tobjectNormal = -objectNormal;\n\n#endif\n\nvec3 transformedNormal = normalMatrix * objectNormal;";
THREE.ShaderChunk.lights_phong_pars_fragment="uniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n\tvarying vec3 vWorldPosition;\n\n#endif\n\n#ifdef WRAP_AROUND\n\n\tuniform vec3 wrapRGB;\n\n#endif\n\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;";
THREE.ShaderChunk.skinbase_vertex="#ifdef USE_SKINNING\n\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n\n#endif";THREE.ShaderChunk.map_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n\n#endif";
THREE.ShaderChunk.lightmap_fragment="#ifdef USE_LIGHTMAP\n\n\tgl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\n\n#endif";THREE.ShaderChunk.shadowmap_pars_vertex="#ifdef USE_SHADOWMAP\n\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\n\tuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n\n#endif";THREE.ShaderChunk.color_fragment="#ifdef USE_COLOR\n\n\tgl_FragColor = gl_FragColor * vec4( vColor, 1.0 );\n\n#endif";THREE.ShaderChunk.morphtarget_vertex="#ifdef USE_MORPHTARGETS\n\n\tvec3 morphed = vec3( 0.0 );\n\tmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\tmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\tmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\tmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\n\t#ifndef USE_MORPHNORMALS\n\n\tmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\tmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\tmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\tmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\n\t#endif\n\n\tmorphed += position;\n\n#endif";
THREE.ShaderChunk.envmap_vertex="#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\n\n\tvec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;\n\tworldNormal = normalize( worldNormal );\n\n\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\n\tif ( useRefract ) {\n\n\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t} else {\n\n\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\n\t}\n\n#endif";
THREE.ShaderChunk.shadowmap_fragment="#ifdef USE_SHADOWMAP\n\n\t#ifdef SHADOWMAP_DEBUG\n\n\t\tvec3 frustumColors[3];\n\t\tfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\n\t\tfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\n\t\tfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n\n\t#endif\n\n\t#ifdef SHADOWMAP_CASCADE\n\n\t\tint inFrustumCount = 0;\n\n\t#endif\n\n\tfloat fDepth;\n\tvec3 shadowColor = vec3( 1.0 );\n\n\tfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n\t\tvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\n\n\t\t\t\t// if ( something && something ) breaks ATI OpenGL shader compiler\n\t\t\t\t// if ( all( something, something ) ) using this instead\n\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\n\t\t\t\t// don't shadow pixels outside of light frustum\n\t\t\t\t// use just first frustum (for cascades)\n\t\t\t\t// don't shadow pixels behind far plane of light frustum\n\n\t\t#ifdef SHADOWMAP_CASCADE\n\n\t\t\tinFrustumCount += int( inFrustum );\n\t\t\tbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\n\n\t\t#else\n\n\t\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\n\t\t#endif\n\n\t\tbool frustumTest = all( frustumTestVec );\n\n\t\tif ( frustumTest ) {\n\n\t\t\tshadowCoord.z += shadowBias[ i ];\n\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\n\t\t\t\t\t\t// Percentage-close filtering\n\t\t\t\t\t\t// (9 pixel kernel)\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\n\n\t\t\t\tfloat shadow = 0.0;\n\n\t\t/*\n\t\t\t\t\t\t// nested loops breaks shader compiler / validator on some ATI cards when using OpenGL\n\t\t\t\t\t\t// must enroll loop manually\n\n\t\t\t\tfor ( float y = -1.25; y <= 1.25; y += 1.25 )\n\t\t\t\t\tfor ( float x = -1.25; x <= 1.25; x += 1.25 ) {\n\n\t\t\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\n\n\t\t\t\t\t\t\t\t// doesn't seem to produce any noticeable visual difference compared to simple texture2D lookup\n\t\t\t\t\t\t\t\t//vec4 rgbaDepth = texture2DProj( shadowMap[ i ], vec4( vShadowCoord[ i ].w * ( vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy ), 0.05, vShadowCoord[ i ].w ) );\n\n\t\t\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\n\n\t\t\t\t\t\tif ( fDepth < shadowCoord.z )\n\t\t\t\t\t\t\tshadow += 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tshadow /= 9.0;\n\n\t\t*/\n\n\t\t\t\tconst float shadowDelta = 1.0 / 9.0;\n\n\t\t\t\tfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\n\t\t\t\tfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\n\n\t\t\t\tfloat dx0 = -1.25 * xPixelOffset;\n\t\t\t\tfloat dy0 = -1.25 * yPixelOffset;\n\t\t\t\tfloat dx1 = 1.25 * xPixelOffset;\n\t\t\t\tfloat dy1 = 1.25 * yPixelOffset;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n\n\t\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\t\t\t\t\t\t// Percentage-close filtering\n\t\t\t\t\t\t// (9 pixel kernel)\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\n\n\t\t\t\tfloat shadow = 0.0;\n\n\t\t\t\tfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\n\t\t\t\tfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\n\n\t\t\t\tfloat dx0 = -1.0 * xPixelOffset;\n\t\t\t\tfloat dy0 = -1.0 * yPixelOffset;\n\t\t\t\tfloat dx1 = 1.0 * xPixelOffset;\n\t\t\t\tfloat dy1 = 1.0 * yPixelOffset;\n\n\t\t\t\tmat3 shadowKernel;\n\t\t\t\tmat3 depthKernel;\n\n\t\t\t\tdepthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n\t\t\t\tdepthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n\t\t\t\tdepthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n\t\t\t\tdepthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n\t\t\t\tdepthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n\t\t\t\tdepthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n\t\t\t\tdepthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n\t\t\t\tdepthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n\t\t\t\tdepthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\n\t\t\t\tvec3 shadowZ = vec3( shadowCoord.z );\n\t\t\t\tshadowKernel[0] = vec3(lessThan(depthKernel[0], shadowZ ));\n\t\t\t\tshadowKernel[0] *= vec3(0.25);\n\n\t\t\t\tshadowKernel[1] = vec3(lessThan(depthKernel[1], shadowZ ));\n\t\t\t\tshadowKernel[1] *= vec3(0.25);\n\n\t\t\t\tshadowKernel[2] = vec3(lessThan(depthKernel[2], shadowZ ));\n\t\t\t\tshadowKernel[2] *= vec3(0.25);\n\n\t\t\t\tvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\n\n\t\t\t\tshadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\n\t\t\t\tshadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\n\n\t\t\t\tvec4 shadowValues;\n\t\t\t\tshadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\n\t\t\t\tshadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\n\t\t\t\tshadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\n\t\t\t\tshadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\n\n\t\t\t\tshadow = dot( shadowValues, vec4( 1.0 ) );\n\n\t\t\t\tshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n\n\t\t\t#else\n\n\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\n\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\n\n\t\t\t\tif ( fDepth < shadowCoord.z )\n\n\t\t// spot with multiple shadows is darker\n\n\t\t\t\t\tshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n\n\t\t// spot with multiple shadows has the same color as single shadow spot\n\n\t\t// \t\t\t\t\tshadowColor = min( shadowColor, vec3( shadowDarkness[ i ] ) );\n\n\t\t\t#endif\n\n\t\t}\n\n\n\t\t#ifdef SHADOWMAP_DEBUG\n\n\t\t\t#ifdef SHADOWMAP_CASCADE\n\n\t\t\t\tif ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\n\n\t\t\t#else\n\n\t\t\t\tif ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\n\n\t\t\t#endif\n\n\t\t#endif\n\n\t}\n\n\t#ifdef GAMMA_OUTPUT\n\n\t\tshadowColor *= shadowColor;\n\n\t#endif\n\n\tgl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\n\n#endif\n";
THREE.ShaderChunk.worldpos_vertex="#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\n\t#ifdef USE_SKINNING\n\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\n\t#endif\n\n\t#if defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\n\n\t\tvec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\n\n\t#endif\n\n\t#if ! defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\n\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\n\t#endif\n\n#endif";
THREE.ShaderChunk.shadowmap_pars_fragment="#ifdef USE_SHADOWMAP\n\n\tuniform sampler2D shadowMap[ MAX_SHADOWS ];\n\tuniform vec2 shadowMapSize[ MAX_SHADOWS ];\n\n\tuniform float shadowDarkness[ MAX_SHADOWS ];\n\tuniform float shadowBias[ MAX_SHADOWS ];\n\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\n\n\tfloat unpackDepth( const in vec4 rgba_depth ) {\n\n\t\tconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n\t\tfloat depth = dot( rgba_depth, bit_shift );\n\t\treturn depth;\n\n\t}\n\n#endif";
THREE.ShaderChunk.skinning_pars_vertex="#ifdef USE_SKINNING\n\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\n\t#ifdef BONE_TEXTURE\n\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\n\t\t\ty = dy * ( y + 0.5 );\n\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\n\t\t\treturn bone;\n\n\t\t}\n\n\t#else\n\n\t\tuniform mat4 boneGlobalMatrices[ MAX_BONES ];\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\n\t\t\treturn bone;\n\n\t\t}\n\n\t#endif\n\n#endif\n";
THREE.ShaderChunk.logdepthbuf_pars_fragment="#ifdef USE_LOGDEPTHBUF\n\n\tuniform float logDepthBufFC;\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\t#extension GL_EXT_frag_depth : enable\n\t\tvarying float vFragDepth;\n\n\t#endif\n\n#endif";THREE.ShaderChunk.alphamap_fragment="#ifdef USE_ALPHAMAP\n\n\tgl_FragColor.a *= texture2D( alphaMap, vUv ).g;\n\n#endif\n";THREE.ShaderChunk.alphamap_pars_fragment="#ifdef USE_ALPHAMAP\n\n\tuniform sampler2D alphaMap;\n\n#endif\n";
THREE.UniformsUtils={merge:function(a){var b,c,d,e={};for(b=0;b<a.length;b++)for(c in d=this.clone(a[b]),d)e[c]=d[c];return e},clone:function(a){var b,c,d,e={};for(b in a)for(c in e[b]={},a[b])d=a[b][c],e[b][c]=d instanceof THREE.Color||d instanceof THREE.Vector2||d instanceof THREE.Vector3||d instanceof THREE.Vector4||d instanceof THREE.Matrix4||d instanceof THREE.Texture?d.clone():d instanceof Array?d.slice():d;return e}};
THREE.UniformsLib={common:{diffuse:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},map:{type:"t",value:null},offsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},lightMap:{type:"t",value:null},specularMap:{type:"t",value:null},alphaMap:{type:"t",value:null},envMap:{type:"t",value:null},flipEnvMap:{type:"f",value:-1},useRefract:{type:"i",value:0},reflectivity:{type:"f",value:1},refractionRatio:{type:"f",value:0.98},combine:{type:"i",value:0},morphTargetInfluences:{type:"f",
value:0}},bump:{bumpMap:{type:"t",value:null},bumpScale:{type:"f",value:1}},normalmap:{normalMap:{type:"t",value:null},normalScale:{type:"v2",value:new THREE.Vector2(1,1)}},fog:{fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},lights:{ambientLightColor:{type:"fv",value:[]},directionalLightDirection:{type:"fv",value:[]},directionalLightColor:{type:"fv",value:[]},hemisphereLightDirection:{type:"fv",value:[]},
hemisphereLightSkyColor:{type:"fv",value:[]},hemisphereLightGroundColor:{type:"fv",value:[]},pointLightColor:{type:"fv",value:[]},pointLightPosition:{type:"fv",value:[]},pointLightDistance:{type:"fv1",value:[]},spotLightColor:{type:"fv",value:[]},spotLightPosition:{type:"fv",value:[]},spotLightDirection:{type:"fv",value:[]},spotLightDistance:{type:"fv1",value:[]},spotLightAngleCos:{type:"fv1",value:[]},spotLightExponent:{type:"fv1",value:[]}},particle:{psColor:{type:"c",value:new THREE.Color(15658734)},
opacity:{type:"f",value:1},size:{type:"f",value:1},scale:{type:"f",value:1},map:{type:"t",value:null},fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},shadowmap:{shadowMap:{type:"tv",value:[]},shadowMapSize:{type:"v2v",value:[]},shadowBias:{type:"fv1",value:[]},shadowDarkness:{type:"fv1",value:[]},shadowMatrix:{type:"m4v",value:[]}}};
THREE.ShaderLib={basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.shadowmap]),vertexShader:[THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,
THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.skinbase_vertex,"\t#ifdef USE_ENVMAP",THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"\t#endif",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),
fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.alphamap_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tgl_FragColor = vec4( diffuse, opacity );",THREE.ShaderChunk.logdepthbuf_fragment,
THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphamap_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},lambert:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,
{ambient:{type:"c",value:new THREE.Color(16777215)},emissive:{type:"c",value:new THREE.Color(0)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif",THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_lambert_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,
THREE.ShaderChunk.shadowmap_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,THREE.ShaderChunk.worldpos_vertex,
THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.lights_lambert_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.alphamap_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,
THREE.ShaderChunk.specularmap_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );",THREE.ShaderChunk.logdepthbuf_fragment,THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphamap_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,"\t#ifdef DOUBLE_SIDED\n\t\tif ( gl_FrontFacing )\n\t\t\tgl_FragColor.xyz *= vLightFront;\n\t\telse\n\t\t\tgl_FragColor.xyz *= vLightBack;\n\t#else\n\t\tgl_FragColor.xyz *= vLightFront;\n\t#endif",
THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},phong:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.bump,THREE.UniformsLib.normalmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(16777215)},emissive:{type:"c",value:new THREE.Color(0)},
specular:{type:"c",value:new THREE.Color(1118481)},shininess:{type:"f",value:30},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define PHONG\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_phong_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,
THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"\tvNormal = normalize( transformedNormal );",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,"\tvViewPosition = -mvPosition.xyz;",
THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.lights_phong_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;\nuniform vec3 ambient;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.alphamap_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,
THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.lights_phong_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.bumpmap_pars_fragment,THREE.ShaderChunk.normalmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );",THREE.ShaderChunk.logdepthbuf_fragment,THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphamap_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,
THREE.ShaderChunk.lights_phong_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},particle_basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.particle,THREE.UniformsLib.shadowmap]),vertexShader:["uniform float size;\nuniform float scale;",THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,
THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / length( mvPosition.xyz ) );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\tgl_Position = projectionMatrix * mvPosition;",THREE.ShaderChunk.logdepthbuf_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 psColor;\nuniform float opacity;",
THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_particle_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tgl_FragColor = vec4( psColor, opacity );",THREE.ShaderChunk.logdepthbuf_fragment,THREE.ShaderChunk.map_particle_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},dashed:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,
THREE.UniformsLib.fog,{scale:{type:"f",value:1},dashSize:{type:"f",value:1},totalSize:{type:"f",value:2}}]),vertexShader:["uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;",THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;",THREE.ShaderChunk.logdepthbuf_vertex,
"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tgl_FragColor = vec4( diffuse, opacity );",THREE.ShaderChunk.logdepthbuf_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.fog_fragment,
"}"].join("\n")},depth:{uniforms:{mNear:{type:"f",value:1},mFar:{type:"f",value:2E3},opacity:{type:"f",value:1}},vertexShader:[THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:["uniform float mNear;\nuniform float mFar;\nuniform float opacity;",THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {",THREE.ShaderChunk.logdepthbuf_fragment,
"\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\t#else\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\t#endif\n\tfloat color = 1.0 - smoothstep( mNear, mFar, depth );\n\tgl_FragColor = vec4( vec3( color ), opacity );\n}"].join("\n")},normal:{uniforms:{opacity:{type:"f",value:1}},vertexShader:["varying vec3 vNormal;",THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {\n\tvNormal = normalize( normalMatrix * normal );",
THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:["uniform float opacity;\nvarying vec3 vNormal;",THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tgl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );",THREE.ShaderChunk.logdepthbuf_fragment,"}"].join("\n")},normalmap:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{enableAO:{type:"i",
value:0},enableDiffuse:{type:"i",value:0},enableSpecular:{type:"i",value:0},enableReflection:{type:"i",value:0},enableDisplacement:{type:"i",value:0},tDisplacement:{type:"t",value:null},tDiffuse:{type:"t",value:null},tCube:{type:"t",value:null},tNormal:{type:"t",value:null},tSpecular:{type:"t",value:null},tAO:{type:"t",value:null},uNormalScale:{type:"v2",value:new THREE.Vector2(1,1)},uDisplacementBias:{type:"f",value:0},uDisplacementScale:{type:"f",value:1},diffuse:{type:"c",value:new THREE.Color(16777215)},
specular:{type:"c",value:new THREE.Color(1118481)},ambient:{type:"c",value:new THREE.Color(16777215)},shininess:{type:"f",value:30},opacity:{type:"f",value:1},useRefract:{type:"i",value:0},refractionRatio:{type:"f",value:0.98},reflectivity:{type:"f",value:0.5},uOffset:{type:"v2",value:new THREE.Vector2(0,0)},uRepeat:{type:"v2",value:new THREE.Vector2(1,1)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),fragmentShader:["uniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\nuniform bool enableDiffuse;\nuniform bool enableSpecular;\nuniform bool enableAO;\nuniform bool enableReflection;\nuniform sampler2D tDiffuse;\nuniform sampler2D tNormal;\nuniform sampler2D tSpecular;\nuniform sampler2D tAO;\nuniform samplerCube tCube;\nuniform vec2 uNormalScale;\nuniform bool useRefract;\nuniform float refractionRatio;\nuniform float reflectivity;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\n\tuniform vec3 wrapRGB;\n#endif\nvarying vec3 vWorldPosition;\nvarying vec3 vViewPosition;",
THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {",THREE.ShaderChunk.logdepthbuf_fragment,"\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\n\tvec3 specularTex = vec3( 1.0 );\n\tvec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;\n\tnormalTex.xy *= uNormalScale;\n\tnormalTex = normalize( normalTex );\n\tif( enableDiffuse ) {\n\t\t#ifdef GAMMA_INPUT\n\t\t\tvec4 texelColor = texture2D( tDiffuse, vUv );\n\t\t\ttexelColor.xyz *= texelColor.xyz;\n\t\t\tgl_FragColor = gl_FragColor * texelColor;\n\t\t#else\n\t\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );\n\t\t#endif\n\t}\n\tif( enableAO ) {\n\t\t#ifdef GAMMA_INPUT\n\t\t\tvec4 aoColor = texture2D( tAO, vUv );\n\t\t\taoColor.xyz *= aoColor.xyz;\n\t\t\tgl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;\n\t\t#else\n\t\t\tgl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;\n\t\t#endif\n\t}",
THREE.ShaderChunk.alphatest_fragment,"\tif( enableSpecular )\n\t\tspecularTex = texture2D( tSpecular, vUv ).xyz;\n\tmat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );\n\tvec3 finalNormal = tsb * normalTex;\n\t#ifdef FLIP_SIDED\n\t\tfinalNormal = -finalNormal;\n\t#endif\n\tvec3 normal = normalize( finalNormal );\n\tvec3 viewPosition = normalize( vViewPosition );\n\t#if MAX_POINT_LIGHTS > 0\n\t\tvec3 pointDiffuse = vec3( 0.0 );\n\t\tvec3 pointSpecular = vec3( 0.0 );\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n\t\t\tvec3 pointVector = lPosition.xyz + vViewPosition.xyz;\n\t\t\tfloat pointDistance = 1.0;\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\n\t\t\t\tpointDistance = 1.0 - min( ( length( pointVector ) / pointLightDistance[ i ] ), 1.0 );\n\t\t\tpointVector = normalize( pointVector );\n\t\t\t#ifdef WRAP_AROUND\n\t\t\t\tfloat pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );\n\t\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );\n\t\t\t\tvec3 pointDiffuseWeight = mix( vec3( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n\t\t\t#else\n\t\t\t\tfloat pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\n\t\t\t#endif\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\n\t\t\tvec3 pointHalfVector = normalize( pointVector + viewPosition );\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\n\t\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\t\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( pointVector, pointHalfVector ), 0.0 ), 5.0 );\n\t\t\tpointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;\n\t\t}\n\t#endif\n\t#if MAX_SPOT_LIGHTS > 0\n\t\tvec3 spotDiffuse = vec3( 0.0 );\n\t\tvec3 spotSpecular = vec3( 0.0 );\n\t\tfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n\t\t\tvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\n\t\t\tvec3 spotVector = lPosition.xyz + vViewPosition.xyz;\n\t\t\tfloat spotDistance = 1.0;\n\t\t\tif ( spotLightDistance[ i ] > 0.0 )\n\t\t\t\tspotDistance = 1.0 - min( ( length( spotVector ) / spotLightDistance[ i ] ), 1.0 );\n\t\t\tspotVector = normalize( spotVector );\n\t\t\tfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\n\t\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\n\t\t\t\tspotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );\n\t\t\t\t#ifdef WRAP_AROUND\n\t\t\t\t\tfloat spotDiffuseWeightFull = max( dot( normal, spotVector ), 0.0 );\n\t\t\t\t\tfloat spotDiffuseWeightHalf = max( 0.5 * dot( normal, spotVector ) + 0.5, 0.0 );\n\t\t\t\t\tvec3 spotDiffuseWeight = mix( vec3( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n\t\t\t\t#else\n\t\t\t\t\tfloat spotDiffuseWeight = max( dot( normal, spotVector ), 0.0 );\n\t\t\t\t#endif\n\t\t\t\tspotDiffuse += spotDistance * spotLightColor[ i ] * diffuse * spotDiffuseWeight * spotEffect;\n\t\t\t\tvec3 spotHalfVector = normalize( spotVector + viewPosition );\n\t\t\t\tfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\n\t\t\t\tfloat spotSpecularWeight = specularTex.r * max( pow( spotDotNormalHalf, shininess ), 0.0 );\n\t\t\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\t\t\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( spotVector, spotHalfVector ), 0.0 ), 5.0 );\n\t\t\t\tspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * spotDistance * specularNormalization * spotEffect;\n\t\t\t}\n\t\t}\n\t#endif\n\t#if MAX_DIR_LIGHTS > 0\n\t\tvec3 dirDiffuse = vec3( 0.0 );\n\t\tvec3 dirSpecular = vec3( 0.0 );\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\n\t\t\t#ifdef WRAP_AROUND\n\t\t\t\tfloat directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );\n\t\t\t\tfloat directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\n\t\t\t\tvec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );\n\t\t\t#else\n\t\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\n\t\t\t#endif\n\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\n\t\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\t\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );\n\t\t\tdirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n\t\t}\n\t#endif\n\t#if MAX_HEMI_LIGHTS > 0\n\t\tvec3 hemiDiffuse = vec3( 0.0 );\n\t\tvec3 hemiSpecular = vec3( 0.0 );\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\n\t\t\tfloat dotProduct = dot( normal, lVector );\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\t\t\tvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\t\t\themiDiffuse += diffuse * hemiColor;\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\n\t\t\tfloat hemiSpecularWeightSky = specularTex.r * max( pow( max( hemiDotNormalHalfSky, 0.0 ), shininess ), 0.0 );\n\t\t\tvec3 lVectorGround = -lVector;\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\n\t\t\tfloat hemiSpecularWeightGround = specularTex.r * max( pow( max( hemiDotNormalHalfGround, 0.0 ), shininess ), 0.0 );\n\t\t\tfloat dotProductGround = dot( normal, lVectorGround );\n\t\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\t\t\tvec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, hemiHalfVectorSky ), 0.0 ), 5.0 );\n\t\t\tvec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 0.0 ), 5.0 );\n\t\t\themiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n\t\t}\n\t#endif\n\tvec3 totalDiffuse = vec3( 0.0 );\n\tvec3 totalSpecular = vec3( 0.0 );\n\t#if MAX_DIR_LIGHTS > 0\n\t\ttotalDiffuse += dirDiffuse;\n\t\ttotalSpecular += dirSpecular;\n\t#endif\n\t#if MAX_HEMI_LIGHTS > 0\n\t\ttotalDiffuse += hemiDiffuse;\n\t\ttotalSpecular += hemiSpecular;\n\t#endif\n\t#if MAX_POINT_LIGHTS > 0\n\t\ttotalDiffuse += pointDiffuse;\n\t\ttotalSpecular += pointSpecular;\n\t#endif\n\t#if MAX_SPOT_LIGHTS > 0\n\t\ttotalDiffuse += spotDiffuse;\n\t\ttotalSpecular += spotSpecular;\n\t#endif\n\t#ifdef METAL\n\t\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\n\t#else\n\t\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\n\t#endif\n\tif ( enableReflection ) {\n\t\tvec3 vReflect;\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tif ( useRefract ) {\n\t\t\tvReflect = refract( cameraToVertex, normal, refractionRatio );\n\t\t} else {\n\t\t\tvReflect = reflect( cameraToVertex, normal );\n\t\t}\n\t\tvec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\n\t\t#ifdef GAMMA_INPUT\n\t\t\tcubeColor.xyz *= cubeColor.xyz;\n\t\t#endif\n\t\tgl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * reflectivity );\n\t}",
THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n"),vertexShader:["attribute vec4 tangent;\nuniform vec2 uOffset;\nuniform vec2 uRepeat;\nuniform bool enableDisplacement;\n#ifdef VERTEX_TEXTURES\n\tuniform sampler2D tDisplacement;\n\tuniform float uDisplacementScale;\n\tuniform float uDisplacementBias;\n#endif\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec3 vWorldPosition;\nvarying vec3 vViewPosition;",
THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,"\t#ifdef USE_SKINNING\n\t\tvNormal = normalize( normalMatrix * skinnedNormal.xyz );\n\t\tvec4 skinnedTangent = skinMatrix * vec4( tangent.xyz, 0.0 );\n\t\tvTangent = normalize( normalMatrix * skinnedTangent.xyz );\n\t#else\n\t\tvNormal = normalize( normalMatrix * normal );\n\t\tvTangent = normalize( normalMatrix * tangent.xyz );\n\t#endif\n\tvBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );\n\tvUv = uv * uRepeat + uOffset;\n\tvec3 displacedPosition;\n\t#ifdef VERTEX_TEXTURES\n\t\tif ( enableDisplacement ) {\n\t\t\tvec3 dv = texture2D( tDisplacement, uv ).xyz;\n\t\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\n\t\t\tdisplacedPosition = position + normalize( normal ) * df;\n\t\t} else {\n\t\t\t#ifdef USE_SKINNING\n\t\t\t\tvec4 skinVertex = bindMatrix * vec4( position, 1.0 );\n\t\t\t\tvec4 skinned = vec4( 0.0 );\n\t\t\t\tskinned += boneMatX * skinVertex * skinWeight.x;\n\t\t\t\tskinned += boneMatY * skinVertex * skinWeight.y;\n\t\t\t\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\t\t\t\tskinned += boneMatW * skinVertex * skinWeight.w;\n\t\t\t\tskinned  = bindMatrixInverse * skinned;\n\t\t\t\tdisplacedPosition = skinned.xyz;\n\t\t\t#else\n\t\t\t\tdisplacedPosition = position;\n\t\t\t#endif\n\t\t}\n\t#else\n\t\t#ifdef USE_SKINNING\n\t\t\tvec4 skinVertex = bindMatrix * vec4( position, 1.0 );\n\t\t\tvec4 skinned = vec4( 0.0 );\n\t\t\tskinned += boneMatX * skinVertex * skinWeight.x;\n\t\t\tskinned += boneMatY * skinVertex * skinWeight.y;\n\t\t\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\t\t\tskinned += boneMatW * skinVertex * skinWeight.w;\n\t\t\tskinned  = bindMatrixInverse * skinned;\n\t\t\tdisplacedPosition = skinned.xyz;\n\t\t#else\n\t\t\tdisplacedPosition = position;\n\t\t#endif\n\t#endif\n\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\n\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;",
THREE.ShaderChunk.logdepthbuf_vertex,"\tvWorldPosition = worldPosition.xyz;\n\tvViewPosition = -mvPosition.xyz;\n\t#ifdef USE_SHADOWMAP\n\t\tfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\t\t\tvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n\t\t}\n\t#endif\n}"].join("\n")},cube:{uniforms:{tCube:{type:"t",value:null},tFlip:{type:"f",value:-1}},vertexShader:["varying vec3 vWorldPosition;",THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {\n\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\tvWorldPosition = worldPosition.xyz;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
THREE.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:["uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vWorldPosition;",THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );",THREE.ShaderChunk.logdepthbuf_fragment,"}"].join("\n")},depthRGBA:{uniforms:{},vertexShader:[THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,
"void main() {",THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:[THREE.ShaderChunk.logdepthbuf_pars_fragment,"vec4 pack_depth( const in float depth ) {\n\tconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\n\tconst vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\n\tvec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );\n\tres -= res.xxyz * bit_mask;\n\treturn res;\n}\nvoid main() {",
THREE.ShaderChunk.logdepthbuf_fragment,"\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tgl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );\n\t#else\n\t\tgl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n\t#endif\n}"].join("\n")}};
THREE.WebGLRenderer=function(a){function b(a,b){var c=a.vertices.length,d=b.material;if(d.attributes){void 0===a.__webglCustomAttributesList&&(a.__webglCustomAttributesList=[]);for(var e in d.attributes){var f=d.attributes[e];if(!f.__webglInitialized||f.createUniqueBuffers){f.__webglInitialized=!0;var g=1;"v2"===f.type?g=2:"v3"===f.type?g=3:"v4"===f.type?g=4:"c"===f.type&&(g=3);f.size=g;f.array=new Float32Array(c*g);f.buffer=m.createBuffer();f.buffer.belongsToAttribute=e;f.needsUpdate=!0}a.__webglCustomAttributesList.push(f)}}}
function c(a,b){var c=b.geometry,g=a.faces3,h=3*g.length,k=1*g.length,l=3*g.length,g=d(b,a),n=f(g),r=e(g),p=g.vertexColors?g.vertexColors:!1;a.__vertexArray=new Float32Array(3*h);r&&(a.__normalArray=new Float32Array(3*h));c.hasTangents&&(a.__tangentArray=new Float32Array(4*h));p&&(a.__colorArray=new Float32Array(3*h));n&&(0<c.faceVertexUvs.length&&(a.__uvArray=new Float32Array(2*h)),1<c.faceVertexUvs.length&&(a.__uv2Array=new Float32Array(2*h)));b.geometry.skinWeights.length&&b.geometry.skinIndices.length&&
(a.__skinIndexArray=new Float32Array(4*h),a.__skinWeightArray=new Float32Array(4*h));c=null!==Eb&&21845<k?Uint32Array:Uint16Array;a.__typeArray=c;a.__faceArray=new c(3*k);a.__lineArray=new c(2*l);if(a.numMorphTargets)for(a.__morphTargetsArrays=[],c=0,n=a.numMorphTargets;c<n;c++)a.__morphTargetsArrays.push(new Float32Array(3*h));if(a.numMorphNormals)for(a.__morphNormalsArrays=[],c=0,n=a.numMorphNormals;c<n;c++)a.__morphNormalsArrays.push(new Float32Array(3*h));a.__webglFaceCount=3*k;a.__webglLineCount=
2*l;if(g.attributes){void 0===a.__webglCustomAttributesList&&(a.__webglCustomAttributesList=[]);for(var q in g.attributes){var k=g.attributes[q],l={},s;for(s in k)l[s]=k[s];if(!l.__webglInitialized||l.createUniqueBuffers)l.__webglInitialized=!0,c=1,"v2"===l.type?c=2:"v3"===l.type?c=3:"v4"===l.type?c=4:"c"===l.type&&(c=3),l.size=c,l.array=new Float32Array(h*c),l.buffer=m.createBuffer(),l.buffer.belongsToAttribute=q,k.needsUpdate=!0,l.__original=k;a.__webglCustomAttributesList.push(l)}}a.__inittedArrays=
!0}function d(a,b){return a.material instanceof THREE.MeshFaceMaterial?a.material.materials[b.materialIndex]:a.material}function e(a){return a instanceof THREE.MeshBasicMaterial&&!a.envMap||a instanceof THREE.MeshDepthMaterial?!1:a&&void 0!==a.shading&&a.shading===THREE.SmoothShading?THREE.SmoothShading:THREE.FlatShading}function f(a){return a.map||a.lightMap||a.bumpMap||a.normalMap||a.specularMap||a.alphaMap||a instanceof THREE.ShaderMaterial?!0:!1}function g(a){for(var b in a.attributes){var c=
"index"===b?m.ELEMENT_ARRAY_BUFFER:m.ARRAY_BUFFER,d=a.attributes[b];d.buffer=m.createBuffer();m.bindBuffer(c,d.buffer);m.bufferData(c,d.array,m.STATIC_DRAW)}}function h(a,b,c,d){for(var e in b){var f=b[e],g=c[e];if(0<=f)if(g){var h=g.itemSize;m.bindBuffer(m.ARRAY_BUFFER,g.buffer);l(f);m.vertexAttribPointer(f,h,m.FLOAT,!1,0,d*h*4)}else a.defaultAttributeValues&&(2===a.defaultAttributeValues[e].length?m.vertexAttrib2fv(f,a.defaultAttributeValues[e]):3===a.defaultAttributeValues[e].length&&m.vertexAttrib3fv(f,
a.defaultAttributeValues[e]))}n()}function k(){for(var a=0,b=pb.length;a<b;a++)pb[a]=0}function l(a){pb[a]=1;0===tb[a]&&(m.enableVertexAttribArray(a),tb[a]=1)}function n(){for(var a=0,b=tb.length;a<b;a++)tb[a]!==pb[a]&&(m.disableVertexAttribArray(a),tb[a]=0)}function q(a,b){return a.z!==b.z?b.z-a.z:a.id-b.id}function r(a,b){return a.z!==b.z?a.z-b.z:a.id-b.id}function t(a,b){return b[0]-a[0]}function s(a,b,h){if(!1!==b.visible){var k=a.__webglObjects[b.id];if(k&&(!1===b.frustumCulled||!0===jc.intersectsObject(b))){var l=
b.geometry,n,r,p;if(l instanceof THREE.BufferGeometry){var q=m.DYNAMIC_DRAW,w=l.attributes,u,v;for(u in w)v=w[u],v.needsUpdate&&("index"===u?(m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,v.buffer),m.bufferData(m.ELEMENT_ARRAY_BUFFER,v.array,q)):(m.bindBuffer(m.ARRAY_BUFFER,v.buffer),m.bufferData(m.ARRAY_BUFFER,v.array,q)),v.needsUpdate=!1)}else if(b instanceof THREE.Mesh){if(l.buffersNeedUpdate||l.groupsNeedUpdate)l instanceof THREE.BufferGeometry?g(l):b instanceof THREE.Mesh&&D(a,b,l);for(var A=0,z=l.geometryGroupsList.length;A<
z;A++)if(n=l.geometryGroupsList[A],p=d(b,n),(l.buffersNeedUpdate||l.groupsNeedUpdate)&&c(n,b),r=p.attributes&&x(p),l.verticesNeedUpdate||l.morphTargetsNeedUpdate||l.elementsNeedUpdate||l.uvsNeedUpdate||l.normalsNeedUpdate||l.colorsNeedUpdate||l.tangentsNeedUpdate||r){var y=n,E=b,I=m.DYNAMIC_DRAW,J=!l.dynamic,L=p;if(y.__inittedArrays){var K=e(L),H=L.vertexColors?L.vertexColors:!1,Q=f(L),O=K===THREE.SmoothShading,B=void 0,N=void 0,P=void 0,T=void 0,R=void 0,ba=void 0,S=void 0,$=void 0,X=void 0,V=void 0,
za=void 0,ga=void 0,ha=void 0,ia=void 0,Ea=void 0,aa=void 0,da=void 0,ya=void 0,U=void 0,ca=void 0,W=void 0,Ba=void 0,Aa=void 0,la=void 0,ma=void 0,oa=void 0,ra=void 0,ua=void 0,va=void 0,ja=void 0,Fa=void 0,Da=void 0,Ga=void 0,Ya=void 0,qa=void 0,Ka=void 0,xa=void 0,Ca=void 0,Ja=void 0,Qa=void 0,db=0,eb=0,Sa=0,Za=0,Ta=0,gb=0,Ua=0,ub=0,$a=0,wa=0,Ha=0,M=0,Ra=void 0,hb=y.__vertexArray,cb=y.__uvArray,fb=y.__uv2Array,yb=y.__normalArray,Va=y.__tangentArray,ib=y.__colorArray,Wa=y.__skinIndexArray,Xa=y.__skinWeightArray,
tb=y.__morphTargetsArrays,wb=y.__morphNormalsArrays,sb=y.__webglCustomAttributesList,F=void 0,pb=y.__faceArray,zb=y.__lineArray,La=E.geometry,Db=La.elementsNeedUpdate,xb=La.uvsNeedUpdate,Eb=La.normalsNeedUpdate,Ob=La.tangentsNeedUpdate,Pb=La.colorsNeedUpdate,Sb=La.morphTargetsNeedUpdate,lc=La.vertices,ka=y.faces3,jb=La.faces,Hb=La.faceVertexUvs[0],Ib=La.faceVertexUvs[1],mc=La.skinIndices,Vb=La.skinWeights,Wb=La.morphTargets,Jb=La.morphNormals;if(La.verticesNeedUpdate){B=0;for(N=ka.length;B<N;B++)T=
jb[ka[B]],ga=lc[T.a],ha=lc[T.b],ia=lc[T.c],hb[eb]=ga.x,hb[eb+1]=ga.y,hb[eb+2]=ga.z,hb[eb+3]=ha.x,hb[eb+4]=ha.y,hb[eb+5]=ha.z,hb[eb+6]=ia.x,hb[eb+7]=ia.y,hb[eb+8]=ia.z,eb+=9;m.bindBuffer(m.ARRAY_BUFFER,y.__webglVertexBuffer);m.bufferData(m.ARRAY_BUFFER,hb,I)}if(Sb)for(qa=0,Ka=Wb.length;qa<Ka;qa++){B=Ha=0;for(N=ka.length;B<N;B++)Ja=ka[B],T=jb[Ja],ga=Wb[qa].vertices[T.a],ha=Wb[qa].vertices[T.b],ia=Wb[qa].vertices[T.c],xa=tb[qa],xa[Ha]=ga.x,xa[Ha+1]=ga.y,xa[Ha+2]=ga.z,xa[Ha+3]=ha.x,xa[Ha+4]=ha.y,xa[Ha+
5]=ha.z,xa[Ha+6]=ia.x,xa[Ha+7]=ia.y,xa[Ha+8]=ia.z,L.morphNormals&&(O?(Qa=Jb[qa].vertexNormals[Ja],ya=Qa.a,U=Qa.b,ca=Qa.c):ca=U=ya=Jb[qa].faceNormals[Ja],Ca=wb[qa],Ca[Ha]=ya.x,Ca[Ha+1]=ya.y,Ca[Ha+2]=ya.z,Ca[Ha+3]=U.x,Ca[Ha+4]=U.y,Ca[Ha+5]=U.z,Ca[Ha+6]=ca.x,Ca[Ha+7]=ca.y,Ca[Ha+8]=ca.z),Ha+=9;m.bindBuffer(m.ARRAY_BUFFER,y.__webglMorphTargetsBuffers[qa]);m.bufferData(m.ARRAY_BUFFER,tb[qa],I);L.morphNormals&&(m.bindBuffer(m.ARRAY_BUFFER,y.__webglMorphNormalsBuffers[qa]),m.bufferData(m.ARRAY_BUFFER,wb[qa],
I))}if(Vb.length){B=0;for(N=ka.length;B<N;B++)T=jb[ka[B]],la=Vb[T.a],ma=Vb[T.b],oa=Vb[T.c],Xa[wa]=la.x,Xa[wa+1]=la.y,Xa[wa+2]=la.z,Xa[wa+3]=la.w,Xa[wa+4]=ma.x,Xa[wa+5]=ma.y,Xa[wa+6]=ma.z,Xa[wa+7]=ma.w,Xa[wa+8]=oa.x,Xa[wa+9]=oa.y,Xa[wa+10]=oa.z,Xa[wa+11]=oa.w,ra=mc[T.a],ua=mc[T.b],va=mc[T.c],Wa[wa]=ra.x,Wa[wa+1]=ra.y,Wa[wa+2]=ra.z,Wa[wa+3]=ra.w,Wa[wa+4]=ua.x,Wa[wa+5]=ua.y,Wa[wa+6]=ua.z,Wa[wa+7]=ua.w,Wa[wa+8]=va.x,Wa[wa+9]=va.y,Wa[wa+10]=va.z,Wa[wa+11]=va.w,wa+=12;0<wa&&(m.bindBuffer(m.ARRAY_BUFFER,
y.__webglSkinIndicesBuffer),m.bufferData(m.ARRAY_BUFFER,Wa,I),m.bindBuffer(m.ARRAY_BUFFER,y.__webglSkinWeightsBuffer),m.bufferData(m.ARRAY_BUFFER,Xa,I))}if(Pb&&H){B=0;for(N=ka.length;B<N;B++)T=jb[ka[B]],S=T.vertexColors,$=T.color,3===S.length&&H===THREE.VertexColors?(W=S[0],Ba=S[1],Aa=S[2]):Aa=Ba=W=$,ib[$a]=W.r,ib[$a+1]=W.g,ib[$a+2]=W.b,ib[$a+3]=Ba.r,ib[$a+4]=Ba.g,ib[$a+5]=Ba.b,ib[$a+6]=Aa.r,ib[$a+7]=Aa.g,ib[$a+8]=Aa.b,$a+=9;0<$a&&(m.bindBuffer(m.ARRAY_BUFFER,y.__webglColorBuffer),m.bufferData(m.ARRAY_BUFFER,
ib,I))}if(Ob&&La.hasTangents){B=0;for(N=ka.length;B<N;B++)T=jb[ka[B]],X=T.vertexTangents,Ea=X[0],aa=X[1],da=X[2],Va[Ua]=Ea.x,Va[Ua+1]=Ea.y,Va[Ua+2]=Ea.z,Va[Ua+3]=Ea.w,Va[Ua+4]=aa.x,Va[Ua+5]=aa.y,Va[Ua+6]=aa.z,Va[Ua+7]=aa.w,Va[Ua+8]=da.x,Va[Ua+9]=da.y,Va[Ua+10]=da.z,Va[Ua+11]=da.w,Ua+=12;m.bindBuffer(m.ARRAY_BUFFER,y.__webglTangentBuffer);m.bufferData(m.ARRAY_BUFFER,Va,I)}if(Eb&&K){B=0;for(N=ka.length;B<N;B++)if(T=jb[ka[B]],R=T.vertexNormals,ba=T.normal,3===R.length&&O)for(ja=0;3>ja;ja++)Da=R[ja],
yb[gb]=Da.x,yb[gb+1]=Da.y,yb[gb+2]=Da.z,gb+=3;else for(ja=0;3>ja;ja++)yb[gb]=ba.x,yb[gb+1]=ba.y,yb[gb+2]=ba.z,gb+=3;m.bindBuffer(m.ARRAY_BUFFER,y.__webglNormalBuffer);m.bufferData(m.ARRAY_BUFFER,yb,I)}if(xb&&Hb&&Q){B=0;for(N=ka.length;B<N;B++)if(P=ka[B],V=Hb[P],void 0!==V)for(ja=0;3>ja;ja++)Ga=V[ja],cb[Sa]=Ga.x,cb[Sa+1]=Ga.y,Sa+=2;0<Sa&&(m.bindBuffer(m.ARRAY_BUFFER,y.__webglUVBuffer),m.bufferData(m.ARRAY_BUFFER,cb,I))}if(xb&&Ib&&Q){B=0;for(N=ka.length;B<N;B++)if(P=ka[B],za=Ib[P],void 0!==za)for(ja=
0;3>ja;ja++)Ya=za[ja],fb[Za]=Ya.x,fb[Za+1]=Ya.y,Za+=2;0<Za&&(m.bindBuffer(m.ARRAY_BUFFER,y.__webglUV2Buffer),m.bufferData(m.ARRAY_BUFFER,fb,I))}if(Db){B=0;for(N=ka.length;B<N;B++)pb[Ta]=db,pb[Ta+1]=db+1,pb[Ta+2]=db+2,Ta+=3,zb[ub]=db,zb[ub+1]=db+1,zb[ub+2]=db,zb[ub+3]=db+2,zb[ub+4]=db+1,zb[ub+5]=db+2,ub+=6,db+=3;m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,y.__webglFaceBuffer);m.bufferData(m.ELEMENT_ARRAY_BUFFER,pb,I);m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,y.__webglLineBuffer);m.bufferData(m.ELEMENT_ARRAY_BUFFER,
zb,I)}if(sb)for(ja=0,Fa=sb.length;ja<Fa;ja++)if(F=sb[ja],F.__original.needsUpdate){M=0;if(1===F.size)if(void 0===F.boundTo||"vertices"===F.boundTo)for(B=0,N=ka.length;B<N;B++)T=jb[ka[B]],F.array[M]=F.value[T.a],F.array[M+1]=F.value[T.b],F.array[M+2]=F.value[T.c],M+=3;else{if("faces"===F.boundTo)for(B=0,N=ka.length;B<N;B++)Ra=F.value[ka[B]],F.array[M]=Ra,F.array[M+1]=Ra,F.array[M+2]=Ra,M+=3}else if(2===F.size)if(void 0===F.boundTo||"vertices"===F.boundTo)for(B=0,N=ka.length;B<N;B++)T=jb[ka[B]],ga=
F.value[T.a],ha=F.value[T.b],ia=F.value[T.c],F.array[M]=ga.x,F.array[M+1]=ga.y,F.array[M+2]=ha.x,F.array[M+3]=ha.y,F.array[M+4]=ia.x,F.array[M+5]=ia.y,M+=6;else{if("faces"===F.boundTo)for(B=0,N=ka.length;B<N;B++)ia=ha=ga=Ra=F.value[ka[B]],F.array[M]=ga.x,F.array[M+1]=ga.y,F.array[M+2]=ha.x,F.array[M+3]=ha.y,F.array[M+4]=ia.x,F.array[M+5]=ia.y,M+=6}else if(3===F.size){var ta;ta="c"===F.type?["r","g","b"]:["x","y","z"];if(void 0===F.boundTo||"vertices"===F.boundTo)for(B=0,N=ka.length;B<N;B++)T=jb[ka[B]],
ga=F.value[T.a],ha=F.value[T.b],ia=F.value[T.c],F.array[M]=ga[ta[0]],F.array[M+1]=ga[ta[1]],F.array[M+2]=ga[ta[2]],F.array[M+3]=ha[ta[0]],F.array[M+4]=ha[ta[1]],F.array[M+5]=ha[ta[2]],F.array[M+6]=ia[ta[0]],F.array[M+7]=ia[ta[1]],F.array[M+8]=ia[ta[2]],M+=9;else if("faces"===F.boundTo)for(B=0,N=ka.length;B<N;B++)ia=ha=ga=Ra=F.value[ka[B]],F.array[M]=ga[ta[0]],F.array[M+1]=ga[ta[1]],F.array[M+2]=ga[ta[2]],F.array[M+3]=ha[ta[0]],F.array[M+4]=ha[ta[1]],F.array[M+5]=ha[ta[2]],F.array[M+6]=ia[ta[0]],F.array[M+
7]=ia[ta[1]],F.array[M+8]=ia[ta[2]],M+=9;else if("faceVertices"===F.boundTo)for(B=0,N=ka.length;B<N;B++)Ra=F.value[ka[B]],ga=Ra[0],ha=Ra[1],ia=Ra[2],F.array[M]=ga[ta[0]],F.array[M+1]=ga[ta[1]],F.array[M+2]=ga[ta[2]],F.array[M+3]=ha[ta[0]],F.array[M+4]=ha[ta[1]],F.array[M+5]=ha[ta[2]],F.array[M+6]=ia[ta[0]],F.array[M+7]=ia[ta[1]],F.array[M+8]=ia[ta[2]],M+=9}else if(4===F.size)if(void 0===F.boundTo||"vertices"===F.boundTo)for(B=0,N=ka.length;B<N;B++)T=jb[ka[B]],ga=F.value[T.a],ha=F.value[T.b],ia=F.value[T.c],
F.array[M]=ga.x,F.array[M+1]=ga.y,F.array[M+2]=ga.z,F.array[M+3]=ga.w,F.array[M+4]=ha.x,F.array[M+5]=ha.y,F.array[M+6]=ha.z,F.array[M+7]=ha.w,F.array[M+8]=ia.x,F.array[M+9]=ia.y,F.array[M+10]=ia.z,F.array[M+11]=ia.w,M+=12;else if("faces"===F.boundTo)for(B=0,N=ka.length;B<N;B++)ia=ha=ga=Ra=F.value[ka[B]],F.array[M]=ga.x,F.array[M+1]=ga.y,F.array[M+2]=ga.z,F.array[M+3]=ga.w,F.array[M+4]=ha.x,F.array[M+5]=ha.y,F.array[M+6]=ha.z,F.array[M+7]=ha.w,F.array[M+8]=ia.x,F.array[M+9]=ia.y,F.array[M+10]=ia.z,
F.array[M+11]=ia.w,M+=12;else if("faceVertices"===F.boundTo)for(B=0,N=ka.length;B<N;B++)Ra=F.value[ka[B]],ga=Ra[0],ha=Ra[1],ia=Ra[2],F.array[M]=ga.x,F.array[M+1]=ga.y,F.array[M+2]=ga.z,F.array[M+3]=ga.w,F.array[M+4]=ha.x,F.array[M+5]=ha.y,F.array[M+6]=ha.z,F.array[M+7]=ha.w,F.array[M+8]=ia.x,F.array[M+9]=ia.y,F.array[M+10]=ia.z,F.array[M+11]=ia.w,M+=12;m.bindBuffer(m.ARRAY_BUFFER,F.buffer);m.bufferData(m.ARRAY_BUFFER,F.array,I)}J&&(delete y.__inittedArrays,delete y.__colorArray,delete y.__normalArray,
delete y.__tangentArray,delete y.__uvArray,delete y.__uv2Array,delete y.__faceArray,delete y.__vertexArray,delete y.__lineArray,delete y.__skinIndexArray,delete y.__skinWeightArray)}}l.verticesNeedUpdate=!1;l.morphTargetsNeedUpdate=!1;l.elementsNeedUpdate=!1;l.uvsNeedUpdate=!1;l.normalsNeedUpdate=!1;l.colorsNeedUpdate=!1;l.tangentsNeedUpdate=!1;l.buffersNeedUpdate=!1;p.attributes&&C(p)}else if(b instanceof THREE.Line){p=d(b,l);r=p.attributes&&x(p);if(l.verticesNeedUpdate||l.colorsNeedUpdate||l.lineDistancesNeedUpdate||
r){var Xb=m.DYNAMIC_DRAW,Kb,Lb,Mb,Yb,sa,Zb,Nb=l.vertices,Qb=l.colors,Rb=l.lineDistances,ec=Nb.length,fc=Qb.length,gc=Rb.length,$b=l.__vertexArray,ac=l.__colorArray,Tb=l.__lineDistanceArray,hc=l.colorsNeedUpdate,ic=l.lineDistancesNeedUpdate,nc=l.__webglCustomAttributesList,bc,uc,Ia,Fb,Ma,pa;if(l.verticesNeedUpdate){for(Kb=0;Kb<ec;Kb++)Yb=Nb[Kb],sa=3*Kb,$b[sa]=Yb.x,$b[sa+1]=Yb.y,$b[sa+2]=Yb.z;m.bindBuffer(m.ARRAY_BUFFER,l.__webglVertexBuffer);m.bufferData(m.ARRAY_BUFFER,$b,Xb)}if(hc){for(Lb=0;Lb<fc;Lb++)Zb=
Qb[Lb],sa=3*Lb,ac[sa]=Zb.r,ac[sa+1]=Zb.g,ac[sa+2]=Zb.b;m.bindBuffer(m.ARRAY_BUFFER,l.__webglColorBuffer);m.bufferData(m.ARRAY_BUFFER,ac,Xb)}if(ic){for(Mb=0;Mb<gc;Mb++)Tb[Mb]=Rb[Mb];m.bindBuffer(m.ARRAY_BUFFER,l.__webglLineDistanceBuffer);m.bufferData(m.ARRAY_BUFFER,Tb,Xb)}if(nc)for(bc=0,uc=nc.length;bc<uc;bc++)if(pa=nc[bc],pa.needsUpdate&&(void 0===pa.boundTo||"vertices"===pa.boundTo)){sa=0;Fb=pa.value.length;if(1===pa.size)for(Ia=0;Ia<Fb;Ia++)pa.array[Ia]=pa.value[Ia];else if(2===pa.size)for(Ia=
0;Ia<Fb;Ia++)Ma=pa.value[Ia],pa.array[sa]=Ma.x,pa.array[sa+1]=Ma.y,sa+=2;else if(3===pa.size)if("c"===pa.type)for(Ia=0;Ia<Fb;Ia++)Ma=pa.value[Ia],pa.array[sa]=Ma.r,pa.array[sa+1]=Ma.g,pa.array[sa+2]=Ma.b,sa+=3;else for(Ia=0;Ia<Fb;Ia++)Ma=pa.value[Ia],pa.array[sa]=Ma.x,pa.array[sa+1]=Ma.y,pa.array[sa+2]=Ma.z,sa+=3;else if(4===pa.size)for(Ia=0;Ia<Fb;Ia++)Ma=pa.value[Ia],pa.array[sa]=Ma.x,pa.array[sa+1]=Ma.y,pa.array[sa+2]=Ma.z,pa.array[sa+3]=Ma.w,sa+=4;m.bindBuffer(m.ARRAY_BUFFER,pa.buffer);m.bufferData(m.ARRAY_BUFFER,
pa.array,Xb)}}l.verticesNeedUpdate=!1;l.colorsNeedUpdate=!1;l.lineDistancesNeedUpdate=!1;p.attributes&&C(p)}else if(b instanceof THREE.PointCloud){p=d(b,l);r=p.attributes&&x(p);if(l.verticesNeedUpdate||l.colorsNeedUpdate||b.sortParticles||r){var oc=m.DYNAMIC_DRAW,Na,kb,lb,Z,mb,vb,cc=l.vertices,pc=cc.length,qc=l.colors,vc=qc.length,Ab=l.__vertexArray,Bb=l.__colorArray,qb=l.__sortArray,wc=l.verticesNeedUpdate,xc=l.colorsNeedUpdate,rb=l.__webglCustomAttributesList,ab,Gb,fa,bb,na,Y;if(b.sortParticles){kc.copy(Ub);
kc.multiply(b.matrixWorld);for(Na=0;Na<pc;Na++)lb=cc[Na],ea.copy(lb),ea.applyProjection(kc),qb[Na]=[ea.z,Na];qb.sort(t);for(Na=0;Na<pc;Na++)lb=cc[qb[Na][1]],Z=3*Na,Ab[Z]=lb.x,Ab[Z+1]=lb.y,Ab[Z+2]=lb.z;for(kb=0;kb<vc;kb++)Z=3*kb,vb=qc[qb[kb][1]],Bb[Z]=vb.r,Bb[Z+1]=vb.g,Bb[Z+2]=vb.b;if(rb)for(ab=0,Gb=rb.length;ab<Gb;ab++)if(Y=rb[ab],void 0===Y.boundTo||"vertices"===Y.boundTo)if(Z=0,bb=Y.value.length,1===Y.size)for(fa=0;fa<bb;fa++)mb=qb[fa][1],Y.array[fa]=Y.value[mb];else if(2===Y.size)for(fa=0;fa<bb;fa++)mb=
qb[fa][1],na=Y.value[mb],Y.array[Z]=na.x,Y.array[Z+1]=na.y,Z+=2;else if(3===Y.size)if("c"===Y.type)for(fa=0;fa<bb;fa++)mb=qb[fa][1],na=Y.value[mb],Y.array[Z]=na.r,Y.array[Z+1]=na.g,Y.array[Z+2]=na.b,Z+=3;else for(fa=0;fa<bb;fa++)mb=qb[fa][1],na=Y.value[mb],Y.array[Z]=na.x,Y.array[Z+1]=na.y,Y.array[Z+2]=na.z,Z+=3;else if(4===Y.size)for(fa=0;fa<bb;fa++)mb=qb[fa][1],na=Y.value[mb],Y.array[Z]=na.x,Y.array[Z+1]=na.y,Y.array[Z+2]=na.z,Y.array[Z+3]=na.w,Z+=4}else{if(wc)for(Na=0;Na<pc;Na++)lb=cc[Na],Z=3*
Na,Ab[Z]=lb.x,Ab[Z+1]=lb.y,Ab[Z+2]=lb.z;if(xc)for(kb=0;kb<vc;kb++)vb=qc[kb],Z=3*kb,Bb[Z]=vb.r,Bb[Z+1]=vb.g,Bb[Z+2]=vb.b;if(rb)for(ab=0,Gb=rb.length;ab<Gb;ab++)if(Y=rb[ab],Y.needsUpdate&&(void 0===Y.boundTo||"vertices"===Y.boundTo))if(bb=Y.value.length,Z=0,1===Y.size)for(fa=0;fa<bb;fa++)Y.array[fa]=Y.value[fa];else if(2===Y.size)for(fa=0;fa<bb;fa++)na=Y.value[fa],Y.array[Z]=na.x,Y.array[Z+1]=na.y,Z+=2;else if(3===Y.size)if("c"===Y.type)for(fa=0;fa<bb;fa++)na=Y.value[fa],Y.array[Z]=na.r,Y.array[Z+1]=
na.g,Y.array[Z+2]=na.b,Z+=3;else for(fa=0;fa<bb;fa++)na=Y.value[fa],Y.array[Z]=na.x,Y.array[Z+1]=na.y,Y.array[Z+2]=na.z,Z+=3;else if(4===Y.size)for(fa=0;fa<bb;fa++)na=Y.value[fa],Y.array[Z]=na.x,Y.array[Z+1]=na.y,Y.array[Z+2]=na.z,Y.array[Z+3]=na.w,Z+=4}if(wc||b.sortParticles)m.bindBuffer(m.ARRAY_BUFFER,l.__webglVertexBuffer),m.bufferData(m.ARRAY_BUFFER,Ab,oc);if(xc||b.sortParticles)m.bindBuffer(m.ARRAY_BUFFER,l.__webglColorBuffer),m.bufferData(m.ARRAY_BUFFER,Bb,oc);if(rb)for(ab=0,Gb=rb.length;ab<
Gb;ab++)if(Y=rb[ab],Y.needsUpdate||b.sortParticles)m.bindBuffer(m.ARRAY_BUFFER,Y.buffer),m.bufferData(m.ARRAY_BUFFER,Y.array,oc)}l.verticesNeedUpdate=!1;l.colorsNeedUpdate=!1;p.attributes&&C(p)}for(var Cb=0,rc=k.length;Cb<rc;Cb++){var dc=k[Cb],nb=dc,yc=nb.object,sc=nb.buffer,tc=yc.geometry,ob=yc.material;ob instanceof THREE.MeshFaceMaterial?(ob=ob.materials[tc instanceof THREE.BufferGeometry?0:sc.materialIndex],ob.transparent?(nb.material=ob,Pa.push(nb)):(nb.material=ob,Oa.push(nb))):ob&&(ob.transparent?
(nb.material=ob,Pa.push(nb)):(nb.material=ob,Oa.push(nb)));dc.render=!0;!0===G.sortObjects&&(null!==b.renderDepth?dc.z=b.renderDepth:(ea.setFromMatrixPosition(b.matrixWorld),ea.applyProjection(Ub),dc.z=ea.z))}}Cb=0;for(rc=b.children.length;Cb<rc;Cb++)s(a,b.children[Cb],h)}}function p(a,b,c){if(0!==a.length)for(var d=0,e=a.length;d<e;d++)la=Ya=null,Ca=ca=ja=ua=Da=ra=Fa=-1,fb=!0,a[d].render(b,c,Hb,Ib),la=Ya=null,Ca=ca=ja=ua=Da=ra=Fa=-1,fb=!0}function v(a,b,c,d,e,f){for(var g,h,k,m=a.length-1;-1!==m;m--){g=
a[m];h=g.object;k=g.buffer;N(h,b);if(f)g=f;else{g=g.material;if(!g)continue;e&&G.setBlending(g.blending,g.blendEquation,g.blendSrc,g.blendDst);G.setDepthTest(g.depthTest);G.setDepthWrite(g.depthWrite);J(g.polygonOffset,g.polygonOffsetFactor,g.polygonOffsetUnits)}G.setMaterialFaces(g);k instanceof THREE.BufferGeometry?G.renderBufferDirect(b,c,d,g,k,h):G.renderBuffer(b,c,d,g,k,h)}}function w(a,b,c,d,e,f,g){for(var h,k,m=0,l=a.length;m<l;m++)if(h=a[m],k=h.object,k.visible){if(g)h=g;else{h=h[b];if(!h)continue;
f&&G.setBlending(h.blending,h.blendEquation,h.blendSrc,h.blendDst);G.setDepthTest(h.depthTest);G.setDepthWrite(h.depthWrite);J(h.polygonOffset,h.polygonOffsetFactor,h.polygonOffsetUnits)}G.renderImmediateObject(c,d,e,h,k)}}function u(a){var b=a.object.material;b.transparent?(a.transparent=b,a.opaque=null):(a.opaque=b,a.transparent=null)}function D(a,b,d){var e,f=!1;e=b.material;if(void 0===d.geometryGroups||d.groupsNeedUpdate)delete a.__webglObjects[b.id],d.makeGroups(e instanceof THREE.MeshFaceMaterial,
Eb?4294967296:65535),d.groupsNeedUpdate=!1;for(var g=0,h=d.geometryGroupsList.length;g<h;g++){e=d.geometryGroupsList[g];if(e.__webglVertexBuffer)f=!1;else{f=e;f.__webglVertexBuffer=m.createBuffer();f.__webglNormalBuffer=m.createBuffer();f.__webglTangentBuffer=m.createBuffer();f.__webglColorBuffer=m.createBuffer();f.__webglUVBuffer=m.createBuffer();f.__webglUV2Buffer=m.createBuffer();f.__webglSkinIndicesBuffer=m.createBuffer();f.__webglSkinWeightsBuffer=m.createBuffer();f.__webglFaceBuffer=m.createBuffer();
f.__webglLineBuffer=m.createBuffer();var k=void 0,l=void 0;if(f.numMorphTargets)for(f.__webglMorphTargetsBuffers=[],k=0,l=f.numMorphTargets;k<l;k++)f.__webglMorphTargetsBuffers.push(m.createBuffer());if(f.numMorphNormals)for(f.__webglMorphNormalsBuffers=[],k=0,l=f.numMorphNormals;k<l;k++)f.__webglMorphNormalsBuffers.push(m.createBuffer());G.info.memory.geometries++;c(e,b);d.verticesNeedUpdate=!0;d.morphTargetsNeedUpdate=!0;d.elementsNeedUpdate=!0;d.uvsNeedUpdate=!0;d.normalsNeedUpdate=!0;d.tangentsNeedUpdate=
!0;f=d.colorsNeedUpdate=!0}(f||void 0===b.__webglActive)&&A(a.__webglObjects,e,b)}b.__webglActive=!0}function A(a,b,c){var d=c.id;a[d]=a[d]||[];a[d].push({id:d,buffer:b,object:c,material:null,z:0})}function x(a){for(var b in a.attributes)if(a.attributes[b].needsUpdate)return!0;return!1}function C(a){for(var b in a.attributes)a.attributes[b].needsUpdate=!1}function I(a,b){if(a instanceof THREE.Mesh||a instanceof THREE.PointCloud||a instanceof THREE.Line)delete b.__webglObjects[a.id];else if(a instanceof
THREE.ImmediateRenderObject||a.immediateRenderCallback)for(var c=b.__webglObjectsImmediate,d=c.length-1;0<=d;d--)c[d].object===a&&c.splice(d,1);delete a.__webglActive}function z(a,b,c,d,e){qa=0;d.needsUpdate&&(d.program&&Nb(d),G.initMaterial(d,b,c,e),d.needsUpdate=!1);d.morphTargets&&!e.__webglMorphTargetInfluences&&(e.__webglMorphTargetInfluences=new Float32Array(G.maxMorphTargets));var f=!1,g=!1,h=!1,k=d.program,l=k.uniforms,n=d.__webglShader.uniforms;k.id!==Ya&&(m.useProgram(k.program),Ya=k.id,
h=g=f=!0);d.id!==Ca&&(-1===Ca&&(h=!0),Ca=d.id,g=!0);if(f||a!==la)m.uniformMatrix4fv(l.projectionMatrix,!1,a.projectionMatrix.elements),Ea&&m.uniform1f(l.logDepthBufFC,2/(Math.log(a.far+1)/Math.LN2)),a!==la&&(la=a),(d instanceof THREE.ShaderMaterial||d instanceof THREE.MeshPhongMaterial||d.envMap)&&null!==l.cameraPosition&&(ea.setFromMatrixPosition(a.matrixWorld),m.uniform3f(l.cameraPosition,ea.x,ea.y,ea.z)),(d instanceof THREE.MeshPhongMaterial||d instanceof THREE.MeshLambertMaterial||d instanceof
THREE.ShaderMaterial||d.skinning)&&null!==l.viewMatrix&&m.uniformMatrix4fv(l.viewMatrix,!1,a.matrixWorldInverse.elements);d.skinning&&(e.bindMatrix&&null!==l.bindMatrix&&m.uniformMatrix4fv(l.bindMatrix,!1,e.bindMatrix.elements),e.bindMatrixInverse&&null!==l.bindMatrixInverse&&m.uniformMatrix4fv(l.bindMatrixInverse,!1,e.bindMatrixInverse.elements),Ob&&e.skeleton&&e.skeleton.useVertexTexture?(null!==l.boneTexture&&(f=K(),m.uniform1i(l.boneTexture,f),G.setTexture(e.skeleton.boneTexture,f)),null!==l.boneTextureWidth&&
m.uniform1i(l.boneTextureWidth,e.skeleton.boneTextureWidth),null!==l.boneTextureHeight&&m.uniform1i(l.boneTextureHeight,e.skeleton.boneTextureHeight)):e.skeleton&&e.skeleton.boneMatrices&&null!==l.boneGlobalMatrices&&m.uniformMatrix4fv(l.boneGlobalMatrices,!1,e.skeleton.boneMatrices));if(g){c&&d.fog&&(n.fogColor.value=c.color,c instanceof THREE.Fog?(n.fogNear.value=c.near,n.fogFar.value=c.far):c instanceof THREE.FogExp2&&(n.fogDensity.value=c.density));if(d instanceof THREE.MeshPhongMaterial||d instanceof
THREE.MeshLambertMaterial||d.lights){if(fb){var h=!0,p,r=f=0,q=0,s,t,w,u=Jb,v=u.directional.colors,x=u.directional.positions,D=u.point.colors,A=u.point.positions,z=u.point.distances,C=u.spot.colors,I=u.spot.positions,L=u.spot.distances,N=u.spot.directions,J=u.spot.anglesCos,T=u.spot.exponents,H=u.hemi.skyColors,Q=u.hemi.groundColors,O=u.hemi.positions,R=0,X=0,V=0,$=0,za=0,aa=0,ya=0,ca=0,W=p=0;c=w=W=0;for(g=b.length;c<g;c++)p=b[c],p.onlyShadow||(s=p.color,t=p.intensity,w=p.distance,p instanceof THREE.AmbientLight?
p.visible&&(G.gammaInput?(f+=s.r*s.r,r+=s.g*s.g,q+=s.b*s.b):(f+=s.r,r+=s.g,q+=s.b)):p instanceof THREE.DirectionalLight?(za+=1,p.visible&&(da.setFromMatrixPosition(p.matrixWorld),ea.setFromMatrixPosition(p.target.matrixWorld),da.sub(ea),da.normalize(),p=3*R,x[p]=da.x,x[p+1]=da.y,x[p+2]=da.z,G.gammaInput?ba(v,p,s,t*t):P(v,p,s,t),R+=1)):p instanceof THREE.PointLight?(aa+=1,p.visible&&(W=3*X,G.gammaInput?ba(D,W,s,t*t):P(D,W,s,t),ea.setFromMatrixPosition(p.matrixWorld),A[W]=ea.x,A[W+1]=ea.y,A[W+2]=ea.z,
z[X]=w,X+=1)):p instanceof THREE.SpotLight?(ya+=1,p.visible&&(W=3*V,G.gammaInput?ba(C,W,s,t*t):P(C,W,s,t),ea.setFromMatrixPosition(p.matrixWorld),I[W]=ea.x,I[W+1]=ea.y,I[W+2]=ea.z,L[V]=w,da.copy(ea),ea.setFromMatrixPosition(p.target.matrixWorld),da.sub(ea),da.normalize(),N[W]=da.x,N[W+1]=da.y,N[W+2]=da.z,J[V]=Math.cos(p.angle),T[V]=p.exponent,V+=1)):p instanceof THREE.HemisphereLight&&(ca+=1,p.visible&&(da.setFromMatrixPosition(p.matrixWorld),da.normalize(),w=3*$,O[w]=da.x,O[w+1]=da.y,O[w+2]=da.z,
s=p.color,p=p.groundColor,G.gammaInput?(t*=t,ba(H,w,s,t),ba(Q,w,p,t)):(P(H,w,s,t),P(Q,w,p,t)),$+=1)));c=3*R;for(g=Math.max(v.length,3*za);c<g;c++)v[c]=0;c=3*X;for(g=Math.max(D.length,3*aa);c<g;c++)D[c]=0;c=3*V;for(g=Math.max(C.length,3*ya);c<g;c++)C[c]=0;c=3*$;for(g=Math.max(H.length,3*ca);c<g;c++)H[c]=0;c=3*$;for(g=Math.max(Q.length,3*ca);c<g;c++)Q[c]=0;u.directional.length=R;u.point.length=X;u.spot.length=V;u.hemi.length=$;u.ambient[0]=f;u.ambient[1]=r;u.ambient[2]=q;fb=!1}h?(h=Jb,n.ambientLightColor.value=
h.ambient,n.directionalLightColor.value=h.directional.colors,n.directionalLightDirection.value=h.directional.positions,n.pointLightColor.value=h.point.colors,n.pointLightPosition.value=h.point.positions,n.pointLightDistance.value=h.point.distances,n.spotLightColor.value=h.spot.colors,n.spotLightPosition.value=h.spot.positions,n.spotLightDistance.value=h.spot.distances,n.spotLightDirection.value=h.spot.directions,n.spotLightAngleCos.value=h.spot.anglesCos,n.spotLightExponent.value=h.spot.exponents,
n.hemisphereLightSkyColor.value=h.hemi.skyColors,n.hemisphereLightGroundColor.value=h.hemi.groundColors,n.hemisphereLightDirection.value=h.hemi.positions,y(n,!0)):y(n,!1)}if(d instanceof THREE.MeshBasicMaterial||d instanceof THREE.MeshLambertMaterial||d instanceof THREE.MeshPhongMaterial){n.opacity.value=d.opacity;G.gammaInput?n.diffuse.value.copyGammaToLinear(d.color):n.diffuse.value=d.color;n.map.value=d.map;n.lightMap.value=d.lightMap;n.specularMap.value=d.specularMap;n.alphaMap.value=d.alphaMap;
d.bumpMap&&(n.bumpMap.value=d.bumpMap,n.bumpScale.value=d.bumpScale);d.normalMap&&(n.normalMap.value=d.normalMap,n.normalScale.value.copy(d.normalScale));var U;d.map?U=d.map:d.specularMap?U=d.specularMap:d.normalMap?U=d.normalMap:d.bumpMap?U=d.bumpMap:d.alphaMap&&(U=d.alphaMap);void 0!==U&&(h=U.offset,U=U.repeat,n.offsetRepeat.value.set(h.x,h.y,U.x,U.y));n.envMap.value=d.envMap;n.flipEnvMap.value=d.envMap instanceof THREE.WebGLRenderTargetCube?1:-1;n.reflectivity.value=d.reflectivity;n.refractionRatio.value=
d.refractionRatio;n.combine.value=d.combine;n.useRefract.value=d.envMap&&d.envMap.mapping instanceof THREE.CubeRefractionMapping}d instanceof THREE.LineBasicMaterial?(n.diffuse.value=d.color,n.opacity.value=d.opacity):d instanceof THREE.LineDashedMaterial?(n.diffuse.value=d.color,n.opacity.value=d.opacity,n.dashSize.value=d.dashSize,n.totalSize.value=d.dashSize+d.gapSize,n.scale.value=d.scale):d instanceof THREE.PointCloudMaterial?(n.psColor.value=d.color,n.opacity.value=d.opacity,n.size.value=d.size,
n.scale.value=S.height/2,n.map.value=d.map):d instanceof THREE.MeshPhongMaterial?(n.shininess.value=d.shininess,G.gammaInput?(n.ambient.value.copyGammaToLinear(d.ambient),n.emissive.value.copyGammaToLinear(d.emissive),n.specular.value.copyGammaToLinear(d.specular)):(n.ambient.value=d.ambient,n.emissive.value=d.emissive,n.specular.value=d.specular),d.wrapAround&&n.wrapRGB.value.copy(d.wrapRGB)):d instanceof THREE.MeshLambertMaterial?(G.gammaInput?(n.ambient.value.copyGammaToLinear(d.ambient),n.emissive.value.copyGammaToLinear(d.emissive)):
(n.ambient.value=d.ambient,n.emissive.value=d.emissive),d.wrapAround&&n.wrapRGB.value.copy(d.wrapRGB)):d instanceof THREE.MeshDepthMaterial?(n.mNear.value=a.near,n.mFar.value=a.far,n.opacity.value=d.opacity):d instanceof THREE.MeshNormalMaterial&&(n.opacity.value=d.opacity);if(e.receiveShadow&&!d._shadowPass&&n.shadowMatrix)for(U=a=0,h=b.length;U<h;U++)c=b[U],c.castShadow&&(c instanceof THREE.SpotLight||c instanceof THREE.DirectionalLight&&!c.shadowCascade)&&(n.shadowMap.value[a]=c.shadowMap,n.shadowMapSize.value[a]=
c.shadowMapSize,n.shadowMatrix.value[a]=c.shadowMatrix,n.shadowDarkness.value[a]=c.shadowDarkness,n.shadowBias.value[a]=c.shadowBias,a++);b=d.uniformsList;d=0;for(n=b.length;d<n;d++)if(a=b[d][0],!1!==a.needsUpdate)switch(c=a.type,h=a.value,U=b[d][1],c){case "1i":m.uniform1i(U,h);break;case "1f":m.uniform1f(U,h);break;case "2f":m.uniform2f(U,h[0],h[1]);break;case "3f":m.uniform3f(U,h[0],h[1],h[2]);break;case "4f":m.uniform4f(U,h[0],h[1],h[2],h[3]);break;case "1iv":m.uniform1iv(U,h);break;case "3iv":m.uniform3iv(U,
h);break;case "1fv":m.uniform1fv(U,h);break;case "2fv":m.uniform2fv(U,h);break;case "3fv":m.uniform3fv(U,h);break;case "4fv":m.uniform4fv(U,h);break;case "Matrix3fv":m.uniformMatrix3fv(U,!1,h);break;case "Matrix4fv":m.uniformMatrix4fv(U,!1,h);break;case "i":m.uniform1i(U,h);break;case "f":m.uniform1f(U,h);break;case "v2":m.uniform2f(U,h.x,h.y);break;case "v3":m.uniform3f(U,h.x,h.y,h.z);break;case "v4":m.uniform4f(U,h.x,h.y,h.z,h.w);break;case "c":m.uniform3f(U,h.r,h.g,h.b);break;case "iv1":m.uniform1iv(U,
h);break;case "iv":m.uniform3iv(U,h);break;case "fv1":m.uniform1fv(U,h);break;case "fv":m.uniform3fv(U,h);break;case "v2v":void 0===a._array&&(a._array=new Float32Array(2*h.length));c=0;for(g=h.length;c<g;c++)f=2*c,a._array[f]=h[c].x,a._array[f+1]=h[c].y;m.uniform2fv(U,a._array);break;case "v3v":void 0===a._array&&(a._array=new Float32Array(3*h.length));c=0;for(g=h.length;c<g;c++)f=3*c,a._array[f]=h[c].x,a._array[f+1]=h[c].y,a._array[f+2]=h[c].z;m.uniform3fv(U,a._array);break;case "v4v":void 0===
a._array&&(a._array=new Float32Array(4*h.length));c=0;for(g=h.length;c<g;c++)f=4*c,a._array[f]=h[c].x,a._array[f+1]=h[c].y,a._array[f+2]=h[c].z,a._array[f+3]=h[c].w;m.uniform4fv(U,a._array);break;case "m3":m.uniformMatrix3fv(U,!1,h.elements);break;case "m3v":void 0===a._array&&(a._array=new Float32Array(9*h.length));c=0;for(g=h.length;c<g;c++)h[c].flattenToArrayOffset(a._array,9*c);m.uniformMatrix3fv(U,!1,a._array);break;case "m4":m.uniformMatrix4fv(U,!1,h.elements);break;case "m4v":void 0===a._array&&
(a._array=new Float32Array(16*h.length));c=0;for(g=h.length;c<g;c++)h[c].flattenToArrayOffset(a._array,16*c);m.uniformMatrix4fv(U,!1,a._array);break;case "t":f=h;h=K();m.uniform1i(U,h);if(!f)continue;if(f instanceof THREE.CubeTexture||f.image instanceof Array&&6===f.image.length){if(a=f,U=h,6===a.image.length)if(a.needsUpdate){a.image.__webglTextureCube||(a.addEventListener("dispose",Pb),a.image.__webglTextureCube=m.createTexture(),G.info.memory.textures++);m.activeTexture(m.TEXTURE0+U);m.bindTexture(m.TEXTURE_CUBE_MAP,
a.image.__webglTextureCube);m.pixelStorei(m.UNPACK_FLIP_Y_WEBGL,a.flipY);U=a instanceof THREE.CompressedTexture;h=[];for(c=0;6>c;c++)G.autoScaleCubemaps&&!U?(g=h,f=c,r=a.image[c],u=sc,r.width<=u&&r.height<=u||(v=Math.max(r.width,r.height),q=Math.floor(r.width*u/v),u=Math.floor(r.height*u/v),v=document.createElement("canvas"),v.width=q,v.height=u,v.getContext("2d").drawImage(r,0,0,r.width,r.height,0,0,q,u),r=v),g[f]=r):h[c]=a.image[c];c=h[0];g=THREE.Math.isPowerOfTwo(c.width)&&THREE.Math.isPowerOfTwo(c.height);
f=B(a.format);r=B(a.type);E(m.TEXTURE_CUBE_MAP,a,g);for(c=0;6>c;c++)if(U)for(u=h[c].mipmaps,v=0,x=u.length;v<x;v++)q=u[v],a.format!==THREE.RGBAFormat?m.compressedTexImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X+c,v,f,q.width,q.height,0,q.data):m.texImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X+c,v,f,q.width,q.height,0,f,r,q.data);else m.texImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X+c,0,f,f,r,h[c]);a.generateMipmaps&&g&&m.generateMipmap(m.TEXTURE_CUBE_MAP);a.needsUpdate=!1;if(a.onUpdate)a.onUpdate()}else m.activeTexture(m.TEXTURE0+
U),m.bindTexture(m.TEXTURE_CUBE_MAP,a.image.__webglTextureCube)}else f instanceof THREE.WebGLRenderTargetCube?(a=f,m.activeTexture(m.TEXTURE0+h),m.bindTexture(m.TEXTURE_CUBE_MAP,a.__webglTexture)):G.setTexture(f,h);break;case "tv":void 0===a._array&&(a._array=[]);c=0;for(g=a.value.length;c<g;c++)a._array[c]=K();m.uniform1iv(U,a._array);c=0;for(g=a.value.length;c<g;c++)f=a.value[c],h=a._array[c],f&&G.setTexture(f,h);break;default:console.warn("THREE.WebGLRenderer: Unknown uniform type: "+c)}}m.uniformMatrix4fv(l.modelViewMatrix,
!1,e._modelViewMatrix.elements);l.normalMatrix&&m.uniformMatrix3fv(l.normalMatrix,!1,e._normalMatrix.elements);null!==l.modelMatrix&&m.uniformMatrix4fv(l.modelMatrix,!1,e.matrixWorld.elements);return k}function y(a,b){a.ambientLightColor.needsUpdate=b;a.directionalLightColor.needsUpdate=b;a.directionalLightDirection.needsUpdate=b;a.pointLightColor.needsUpdate=b;a.pointLightPosition.needsUpdate=b;a.pointLightDistance.needsUpdate=b;a.spotLightColor.needsUpdate=b;a.spotLightPosition.needsUpdate=b;a.spotLightDistance.needsUpdate=
b;a.spotLightDirection.needsUpdate=b;a.spotLightAngleCos.needsUpdate=b;a.spotLightExponent.needsUpdate=b;a.hemisphereLightSkyColor.needsUpdate=b;a.hemisphereLightGroundColor.needsUpdate=b;a.hemisphereLightDirection.needsUpdate=b}function K(){var a=qa;a>=Qb&&console.warn("WebGLRenderer: trying to use "+a+" texture units while this GPU supports only "+Qb);qa+=1;return a}function N(a,b){a._modelViewMatrix.multiplyMatrices(b.matrixWorldInverse,a.matrixWorld);a._normalMatrix.getNormalMatrix(a._modelViewMatrix)}
function ba(a,b,c,d){a[b]=c.r*c.r*d;a[b+1]=c.g*c.g*d;a[b+2]=c.b*c.b*d}function P(a,b,c,d){a[b]=c.r*d;a[b+1]=c.g*d;a[b+2]=c.b*d}function O(a){a!==xa&&(m.lineWidth(a),xa=a)}function J(a,b,c){Qa!==a&&(a?m.enable(m.POLYGON_OFFSET_FILL):m.disable(m.POLYGON_OFFSET_FILL),Qa=a);!a||cb===b&&Ga===c||(m.polygonOffset(b,c),cb=b,Ga=c)}function E(a,b,c){c?(m.texParameteri(a,m.TEXTURE_WRAP_S,B(b.wrapS)),m.texParameteri(a,m.TEXTURE_WRAP_T,B(b.wrapT)),m.texParameteri(a,m.TEXTURE_MAG_FILTER,B(b.magFilter)),m.texParameteri(a,
m.TEXTURE_MIN_FILTER,B(b.minFilter))):(m.texParameteri(a,m.TEXTURE_WRAP_S,m.CLAMP_TO_EDGE),m.texParameteri(a,m.TEXTURE_WRAP_T,m.CLAMP_TO_EDGE),m.texParameteri(a,m.TEXTURE_MAG_FILTER,R(b.magFilter)),m.texParameteri(a,m.TEXTURE_MIN_FILTER,R(b.minFilter)));Ta&&b.type!==THREE.FloatType&&(1<b.anisotropy||b.__oldAnisotropy)&&(m.texParameterf(a,Ta.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(b.anisotropy,Rb)),b.__oldAnisotropy=b.anisotropy)}function Q(a,b){m.bindRenderbuffer(m.RENDERBUFFER,a);b.depthBuffer&&!b.stencilBuffer?
(m.renderbufferStorage(m.RENDERBUFFER,m.DEPTH_COMPONENT16,b.width,b.height),m.framebufferRenderbuffer(m.FRAMEBUFFER,m.DEPTH_ATTACHMENT,m.RENDERBUFFER,a)):b.depthBuffer&&b.stencilBuffer?(m.renderbufferStorage(m.RENDERBUFFER,m.DEPTH_STENCIL,b.width,b.height),m.framebufferRenderbuffer(m.FRAMEBUFFER,m.DEPTH_STENCIL_ATTACHMENT,m.RENDERBUFFER,a)):m.renderbufferStorage(m.RENDERBUFFER,m.RGBA4,b.width,b.height)}function L(a){a instanceof THREE.WebGLRenderTargetCube?(m.bindTexture(m.TEXTURE_CUBE_MAP,a.__webglTexture),
m.generateMipmap(m.TEXTURE_CUBE_MAP),m.bindTexture(m.TEXTURE_CUBE_MAP,null)):(m.bindTexture(m.TEXTURE_2D,a.__webglTexture),m.generateMipmap(m.TEXTURE_2D),m.bindTexture(m.TEXTURE_2D,null))}function R(a){return a===THREE.NearestFilter||a===THREE.NearestMipMapNearestFilter||a===THREE.NearestMipMapLinearFilter?m.NEAREST:m.LINEAR}function B(a){if(a===THREE.RepeatWrapping)return m.REPEAT;if(a===THREE.ClampToEdgeWrapping)return m.CLAMP_TO_EDGE;if(a===THREE.MirroredRepeatWrapping)return m.MIRRORED_REPEAT;
if(a===THREE.NearestFilter)return m.NEAREST;if(a===THREE.NearestMipMapNearestFilter)return m.NEAREST_MIPMAP_NEAREST;if(a===THREE.NearestMipMapLinearFilter)return m.NEAREST_MIPMAP_LINEAR;if(a===THREE.LinearFilter)return m.LINEAR;if(a===THREE.LinearMipMapNearestFilter)return m.LINEAR_MIPMAP_NEAREST;if(a===THREE.LinearMipMapLinearFilter)return m.LINEAR_MIPMAP_LINEAR;if(a===THREE.UnsignedByteType)return m.UNSIGNED_BYTE;if(a===THREE.UnsignedShort4444Type)return m.UNSIGNED_SHORT_4_4_4_4;if(a===THREE.UnsignedShort5551Type)return m.UNSIGNED_SHORT_5_5_5_1;
if(a===THREE.UnsignedShort565Type)return m.UNSIGNED_SHORT_5_6_5;if(a===THREE.ByteType)return m.BYTE;if(a===THREE.ShortType)return m.SHORT;if(a===THREE.UnsignedShortType)return m.UNSIGNED_SHORT;if(a===THREE.IntType)return m.INT;if(a===THREE.UnsignedIntType)return m.UNSIGNED_INT;if(a===THREE.FloatType)return m.FLOAT;if(a===THREE.AlphaFormat)return m.ALPHA;if(a===THREE.RGBFormat)return m.RGB;if(a===THREE.RGBAFormat)return m.RGBA;if(a===THREE.LuminanceFormat)return m.LUMINANCE;if(a===THREE.LuminanceAlphaFormat)return m.LUMINANCE_ALPHA;
if(a===THREE.AddEquation)return m.FUNC_ADD;if(a===THREE.SubtractEquation)return m.FUNC_SUBTRACT;if(a===THREE.ReverseSubtractEquation)return m.FUNC_REVERSE_SUBTRACT;if(a===THREE.ZeroFactor)return m.ZERO;if(a===THREE.OneFactor)return m.ONE;if(a===THREE.SrcColorFactor)return m.SRC_COLOR;if(a===THREE.OneMinusSrcColorFactor)return m.ONE_MINUS_SRC_COLOR;if(a===THREE.SrcAlphaFactor)return m.SRC_ALPHA;if(a===THREE.OneMinusSrcAlphaFactor)return m.ONE_MINUS_SRC_ALPHA;if(a===THREE.DstAlphaFactor)return m.DST_ALPHA;
if(a===THREE.OneMinusDstAlphaFactor)return m.ONE_MINUS_DST_ALPHA;if(a===THREE.DstColorFactor)return m.DST_COLOR;if(a===THREE.OneMinusDstColorFactor)return m.ONE_MINUS_DST_COLOR;if(a===THREE.SrcAlphaSaturateFactor)return m.SRC_ALPHA_SATURATE;if(void 0!==Sa){if(a===THREE.RGB_S3TC_DXT1_Format)return Sa.COMPRESSED_RGB_S3TC_DXT1_EXT;if(a===THREE.RGBA_S3TC_DXT1_Format)return Sa.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(a===THREE.RGBA_S3TC_DXT3_Format)return Sa.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(a===THREE.RGBA_S3TC_DXT5_Format)return Sa.COMPRESSED_RGBA_S3TC_DXT5_EXT}return 0}
console.log("THREE.WebGLRenderer",THREE.REVISION);a=a||{};var S=void 0!==a.canvas?a.canvas:document.createElement("canvas"),V=void 0!==a.context?a.context:null,W=void 0!==a.precision?a.precision:"highp",H=void 0!==a.alpha?a.alpha:!1,oa=void 0!==a.depth?a.depth:!0,$=void 0!==a.stencil?a.stencil:!0,X=void 0!==a.antialias?a.antialias:!1,T=void 0!==a.premultipliedAlpha?a.premultipliedAlpha:!0,ya=void 0!==a.preserveDrawingBuffer?a.preserveDrawingBuffer:!1,Ea=void 0!==a.logarithmicDepthBuffer?a.logarithmicDepthBuffer:
!1,Aa=new THREE.Color(0),za=0,Oa=[],Pa=[];this.domElement=S;this.context=null;this.devicePixelRatio=void 0!==a.devicePixelRatio?a.devicePixelRatio:void 0!==self.devicePixelRatio?self.devicePixelRatio:1;this.sortObjects=this.autoClearStencil=this.autoClearDepth=this.autoClearColor=this.autoClear=!0;this.shadowMapEnabled=this.gammaOutput=this.gammaInput=!1;this.shadowMapAutoUpdate=!0;this.shadowMapType=THREE.PCFShadowMap;this.shadowMapCullFace=THREE.CullFaceFront;this.shadowMapCascade=this.shadowMapDebug=
!1;this.maxMorphTargets=8;this.maxMorphNormals=4;this.autoScaleCubemaps=!0;this.renderPluginsPre=[];this.renderPluginsPost=[];this.info={memory:{programs:0,geometries:0,textures:0},render:{calls:0,vertices:0,faces:0,points:0}};var G=this,Ba=[],Ya=null,Za=null,Ca=-1,ca=null,la=null,qa=0,ua=-1,ja=-1,Fa=-1,va=-1,Ka=-1,aa=-1,ra=-1,Da=-1,Qa=null,cb=null,Ga=null,xa=null,ma=0,Ja=0,wb=S.width,sb=S.height,Hb=0,Ib=0,pb=new Uint8Array(16),tb=new Uint8Array(16),jc=new THREE.Frustum,Ub=new THREE.Matrix4,kc=new THREE.Matrix4,
ea=new THREE.Vector3,da=new THREE.Vector3,fb=!0,Jb={ambient:[0,0,0],directional:{length:0,colors:[],positions:[]},point:{length:0,colors:[],positions:[],distances:[]},spot:{length:0,colors:[],positions:[],distances:[],directions:[],anglesCos:[],exponents:[]},hemi:{length:0,skyColors:[],groundColors:[],positions:[]}},m,Db,xb,Ta,Sa,Eb;(function(){try{var a={alpha:H,depth:oa,stencil:$,antialias:X,premultipliedAlpha:T,preserveDrawingBuffer:ya};m=V||S.getContext("webgl",a)||S.getContext("experimental-webgl",
a);if(null===m)throw"Error creating WebGL context.";}catch(b){console.error(b)}Db=m.getExtension("OES_texture_float");m.getExtension("OES_texture_float_linear");xb=m.getExtension("OES_standard_derivatives");Ta=m.getExtension("EXT_texture_filter_anisotropic")||m.getExtension("MOZ_EXT_texture_filter_anisotropic")||m.getExtension("WEBKIT_EXT_texture_filter_anisotropic");Sa=m.getExtension("WEBGL_compressed_texture_s3tc")||m.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||m.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
Eb=m.getExtension("OES_element_index_uint");null===Db&&console.log("THREE.WebGLRenderer: Float textures not supported.");null===xb&&console.log("THREE.WebGLRenderer: Standard derivatives not supported.");null===Ta&&console.log("THREE.WebGLRenderer: Anisotropic texture filtering not supported.");null===Sa&&console.log("THREE.WebGLRenderer: S3TC compressed textures not supported.");null===Eb&&console.log("THREE.WebGLRenderer: elementindex as unsigned integer not supported.");void 0===m.getShaderPrecisionFormat&&
(m.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}});Ea&&m.getExtension("EXT_frag_depth")})();m.clearColor(0,0,0,1);m.clearDepth(1);m.clearStencil(0);m.enable(m.DEPTH_TEST);m.depthFunc(m.LEQUAL);m.frontFace(m.CCW);m.cullFace(m.BACK);m.enable(m.CULL_FACE);m.enable(m.BLEND);m.blendEquation(m.FUNC_ADD);m.blendFunc(m.SRC_ALPHA,m.ONE_MINUS_SRC_ALPHA);m.viewport(ma,Ja,wb,sb);m.clearColor(Aa.r,Aa.g,Aa.b,za);this.context=m;var Qb=m.getParameter(m.MAX_TEXTURE_IMAGE_UNITS),tc=
m.getParameter(m.MAX_VERTEX_TEXTURE_IMAGE_UNITS);m.getParameter(m.MAX_TEXTURE_SIZE);var sc=m.getParameter(m.MAX_CUBE_MAP_TEXTURE_SIZE),Rb=Ta?m.getParameter(Ta.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0,Sb=0<tc,Ob=Sb&&Db;Sa&&m.getParameter(m.COMPRESSED_TEXTURE_FORMATS);var zc=m.getShaderPrecisionFormat(m.VERTEX_SHADER,m.HIGH_FLOAT),Ac=m.getShaderPrecisionFormat(m.VERTEX_SHADER,m.MEDIUM_FLOAT);m.getShaderPrecisionFormat(m.VERTEX_SHADER,m.LOW_FLOAT);var Bc=m.getShaderPrecisionFormat(m.FRAGMENT_SHADER,m.HIGH_FLOAT),
Cc=m.getShaderPrecisionFormat(m.FRAGMENT_SHADER,m.MEDIUM_FLOAT);m.getShaderPrecisionFormat(m.FRAGMENT_SHADER,m.LOW_FLOAT);var Dc=0<zc.precision&&0<Bc.precision,ec=0<Ac.precision&&0<Cc.precision;"highp"!==W||Dc||(ec?(W="mediump",console.warn("THREE.WebGLRenderer: highp not supported, using mediump.")):(W="lowp",console.warn("THREE.WebGLRenderer: highp and mediump not supported, using lowp.")));"mediump"!==W||ec||(W="lowp",console.warn("THREE.WebGLRenderer: mediump not supported, using lowp."));this.getContext=
function(){return m};this.supportsVertexTextures=function(){return Sb};this.supportsFloatTextures=function(){return Db};this.supportsStandardDerivatives=function(){return xb};this.supportsCompressedTextureS3TC=function(){return Sa};this.getMaxAnisotropy=function(){return Rb};this.getPrecision=function(){return W};this.setSize=function(a,b,c){S.width=a*this.devicePixelRatio;S.height=b*this.devicePixelRatio;!1!==c&&(S.style.width=a+"px",S.style.height=b+"px");this.setViewport(0,0,a,b)};this.setViewport=
function(a,b,c,d){ma=a*this.devicePixelRatio;Ja=b*this.devicePixelRatio;wb=c*this.devicePixelRatio;sb=d*this.devicePixelRatio;m.viewport(ma,Ja,wb,sb)};this.setScissor=function(a,b,c,d){m.scissor(a*this.devicePixelRatio,b*this.devicePixelRatio,c*this.devicePixelRatio,d*this.devicePixelRatio)};this.enableScissorTest=function(a){a?m.enable(m.SCISSOR_TEST):m.disable(m.SCISSOR_TEST)};this.setClearColor=function(a,b){Aa.set(a);za=void 0!==b?b:1;m.clearColor(Aa.r,Aa.g,Aa.b,za)};this.setClearColorHex=function(a,
b){console.warn("THREE.WebGLRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.");this.setClearColor(a,b)};this.getClearColor=function(){return Aa};this.getClearAlpha=function(){return za};this.clear=function(a,b,c){var d=0;if(void 0===a||a)d|=m.COLOR_BUFFER_BIT;if(void 0===b||b)d|=m.DEPTH_BUFFER_BIT;if(void 0===c||c)d|=m.STENCIL_BUFFER_BIT;m.clear(d)};this.clearColor=function(){m.clear(m.COLOR_BUFFER_BIT)};this.clearDepth=function(){m.clear(m.DEPTH_BUFFER_BIT)};this.clearStencil=
function(){m.clear(m.STENCIL_BUFFER_BIT)};this.clearTarget=function(a,b,c,d){this.setRenderTarget(a);this.clear(b,c,d)};this.addPostPlugin=function(a){a.init(this);this.renderPluginsPost.push(a)};this.addPrePlugin=function(a){a.init(this);this.renderPluginsPre.push(a)};this.updateShadowMap=function(a,b){Ya=null;Ca=ca=Da=ra=Fa=-1;fb=!0;ja=ua=-1;fc(a);this.shadowMapPlugin.update(a,b)};var gc=function(a){a=a.target;a.removeEventListener("dispose",gc);a.__webglInit=void 0;if(a instanceof THREE.BufferGeometry){a=
a.attributes;for(var b in a)void 0!==a[b].buffer&&m.deleteBuffer(a[b].buffer);G.info.memory.geometries--}else if(void 0!==a.geometryGroups){b=0;for(var c=a.geometryGroupsList.length;b<c;b++){var d=a.geometryGroupsList[b];if(void 0!==d.numMorphTargets)for(var e=0,f=d.numMorphTargets;e<f;e++)m.deleteBuffer(d.__webglMorphTargetsBuffers[e]);if(void 0!==d.numMorphNormals)for(e=0,f=d.numMorphNormals;e<f;e++)m.deleteBuffer(d.__webglMorphNormalsBuffers[e]);Tb(d)}}else Tb(a)},Pb=function(a){a=a.target;a.removeEventListener("dispose",
Pb);a.image&&a.image.__webglTextureCube?m.deleteTexture(a.image.__webglTextureCube):a.__webglInit&&(a.__webglInit=!1,m.deleteTexture(a.__webglTexture));G.info.memory.textures--},hc=function(a){a=a.target;a.removeEventListener("dispose",hc);if(a&&a.__webglTexture)if(m.deleteTexture(a.__webglTexture),a instanceof THREE.WebGLRenderTargetCube)for(var b=0;6>b;b++)m.deleteFramebuffer(a.__webglFramebuffer[b]),m.deleteRenderbuffer(a.__webglRenderbuffer[b]);else m.deleteFramebuffer(a.__webglFramebuffer),m.deleteRenderbuffer(a.__webglRenderbuffer);
G.info.memory.textures--},ic=function(a){a=a.target;a.removeEventListener("dispose",ic);Nb(a)},Tb=function(a){void 0!==a.__webglVertexBuffer&&m.deleteBuffer(a.__webglVertexBuffer);void 0!==a.__webglNormalBuffer&&m.deleteBuffer(a.__webglNormalBuffer);void 0!==a.__webglTangentBuffer&&m.deleteBuffer(a.__webglTangentBuffer);void 0!==a.__webglColorBuffer&&m.deleteBuffer(a.__webglColorBuffer);void 0!==a.__webglUVBuffer&&m.deleteBuffer(a.__webglUVBuffer);void 0!==a.__webglUV2Buffer&&m.deleteBuffer(a.__webglUV2Buffer);
void 0!==a.__webglSkinIndicesBuffer&&m.deleteBuffer(a.__webglSkinIndicesBuffer);void 0!==a.__webglSkinWeightsBuffer&&m.deleteBuffer(a.__webglSkinWeightsBuffer);void 0!==a.__webglFaceBuffer&&m.deleteBuffer(a.__webglFaceBuffer);void 0!==a.__webglLineBuffer&&m.deleteBuffer(a.__webglLineBuffer);void 0!==a.__webglLineDistanceBuffer&&m.deleteBuffer(a.__webglLineDistanceBuffer);if(void 0!==a.__webglCustomAttributesList)for(var b in a.__webglCustomAttributesList)m.deleteBuffer(a.__webglCustomAttributesList[b].buffer);
G.info.memory.geometries--},Nb=function(a){var b=a.program.program;if(void 0!==b){a.program=void 0;var c,d,e=!1;a=0;for(c=Ba.length;a<c;a++)if(d=Ba[a],d.program===b){d.usedTimes--;0===d.usedTimes&&(e=!0);break}if(!0===e){e=[];a=0;for(c=Ba.length;a<c;a++)d=Ba[a],d.program!==b&&e.push(d);Ba=e;m.deleteProgram(b);G.info.memory.programs--}}};this.renderBufferImmediate=function(a,b,c){k();a.hasPositions&&!a.__webglVertexBuffer&&(a.__webglVertexBuffer=m.createBuffer());a.hasNormals&&!a.__webglNormalBuffer&&
(a.__webglNormalBuffer=m.createBuffer());a.hasUvs&&!a.__webglUvBuffer&&(a.__webglUvBuffer=m.createBuffer());a.hasColors&&!a.__webglColorBuffer&&(a.__webglColorBuffer=m.createBuffer());a.hasPositions&&(m.bindBuffer(m.ARRAY_BUFFER,a.__webglVertexBuffer),m.bufferData(m.ARRAY_BUFFER,a.positionArray,m.DYNAMIC_DRAW),l(b.attributes.position),m.vertexAttribPointer(b.attributes.position,3,m.FLOAT,!1,0,0));if(a.hasNormals){m.bindBuffer(m.ARRAY_BUFFER,a.__webglNormalBuffer);if(c.shading===THREE.FlatShading){var d,
e,f,g,h,p,r,q,s,t,u,w=3*a.count;for(u=0;u<w;u+=9)t=a.normalArray,d=t[u],e=t[u+1],f=t[u+2],g=t[u+3],p=t[u+4],q=t[u+5],h=t[u+6],r=t[u+7],s=t[u+8],d=(d+g+h)/3,e=(e+p+r)/3,f=(f+q+s)/3,t[u]=d,t[u+1]=e,t[u+2]=f,t[u+3]=d,t[u+4]=e,t[u+5]=f,t[u+6]=d,t[u+7]=e,t[u+8]=f}m.bufferData(m.ARRAY_BUFFER,a.normalArray,m.DYNAMIC_DRAW);l(b.attributes.normal);m.vertexAttribPointer(b.attributes.normal,3,m.FLOAT,!1,0,0)}a.hasUvs&&c.map&&(m.bindBuffer(m.ARRAY_BUFFER,a.__webglUvBuffer),m.bufferData(m.ARRAY_BUFFER,a.uvArray,
m.DYNAMIC_DRAW),l(b.attributes.uv),m.vertexAttribPointer(b.attributes.uv,2,m.FLOAT,!1,0,0));a.hasColors&&c.vertexColors!==THREE.NoColors&&(m.bindBuffer(m.ARRAY_BUFFER,a.__webglColorBuffer),m.bufferData(m.ARRAY_BUFFER,a.colorArray,m.DYNAMIC_DRAW),l(b.attributes.color),m.vertexAttribPointer(b.attributes.color,3,m.FLOAT,!1,0,0));n();m.drawArrays(m.TRIANGLES,0,a.count);a.count=0};this.renderBufferDirect=function(a,b,c,d,e,f){if(!1!==d.visible){var g=z(a,b,c,d,f);a=g.attributes;b=e.attributes;c=!1;g=16777215*
e.id+2*g.id+(d.wireframe?1:0);g!==ca&&(ca=g,c=!0);c&&k();if(f instanceof THREE.Mesh)if(g=b.index){var l,n;g.array instanceof Uint32Array?(l=m.UNSIGNED_INT,n=4):(l=m.UNSIGNED_SHORT,n=2);e=e.offsets;if(0===e.length)c&&(h(d,a,b,0),m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,g.buffer)),m.drawElements(m.TRIANGLES,g.array.length,l,0),G.info.render.calls++,G.info.render.vertices+=g.array.length,G.info.render.faces+=g.array.length/3;else{c=!0;for(var p=0,r=e.length;p<r;p++){var q=e[p].index;c&&(h(d,a,b,q),m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,
g.buffer));m.drawElements(m.TRIANGLES,e[p].count,l,e[p].start*n);G.info.render.calls++;G.info.render.vertices+=e[p].count;G.info.render.faces+=e[p].count/3}}}else c&&h(d,a,b,0),d=e.attributes.position,m.drawArrays(m.TRIANGLES,0,d.array.length/3),G.info.render.calls++,G.info.render.vertices+=d.array.length/3,G.info.render.faces+=d.array.length/9;else if(f instanceof THREE.PointCloud)c&&h(d,a,b,0),d=b.position,m.drawArrays(m.POINTS,0,d.array.length/3),G.info.render.calls++,G.info.render.points+=d.array.length/
3;else if(f instanceof THREE.Line)if(f=f.type===THREE.LineStrip?m.LINE_STRIP:m.LINES,O(d.linewidth),g=b.index)if(g.array instanceof Uint32Array?(l=m.UNSIGNED_INT,n=4):(l=m.UNSIGNED_SHORT,n=2),e=e.offsets,0===e.length)c&&(h(d,a,b,0),m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,g.buffer)),m.drawElements(f,g.array.length,l,0),G.info.render.calls++,G.info.render.vertices+=g.array.length;else for(1<e.length&&(c=!0),p=0,r=e.length;p<r;p++)q=e[p].index,c&&(h(d,a,b,q),m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,g.buffer)),
m.drawElements(f,e[p].count,l,e[p].start*n),G.info.render.calls++,G.info.render.vertices+=e[p].count;else c&&h(d,a,b,0),d=b.position,m.drawArrays(f,0,d.array.length/3),G.info.render.calls++,G.info.render.points+=d.array.length/3}};this.renderBuffer=function(a,b,c,d,e,f){if(!1!==d.visible){var g,h;c=z(a,b,c,d,f);b=c.attributes;a=!1;c=16777215*e.id+2*c.id+(d.wireframe?1:0);c!==ca&&(ca=c,a=!0);a&&k();if(!d.morphTargets&&0<=b.position)a&&(m.bindBuffer(m.ARRAY_BUFFER,e.__webglVertexBuffer),l(b.position),
m.vertexAttribPointer(b.position,3,m.FLOAT,!1,0,0));else if(f.morphTargetBase){c=d.program.attributes;-1!==f.morphTargetBase&&0<=c.position?(m.bindBuffer(m.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[f.morphTargetBase]),l(c.position),m.vertexAttribPointer(c.position,3,m.FLOAT,!1,0,0)):0<=c.position&&(m.bindBuffer(m.ARRAY_BUFFER,e.__webglVertexBuffer),l(c.position),m.vertexAttribPointer(c.position,3,m.FLOAT,!1,0,0));if(f.morphTargetForcedOrder.length){var p=0;h=f.morphTargetForcedOrder;for(g=f.morphTargetInfluences;p<
d.numSupportedMorphTargets&&p<h.length;)0<=c["morphTarget"+p]&&(m.bindBuffer(m.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[h[p]]),l(c["morphTarget"+p]),m.vertexAttribPointer(c["morphTarget"+p],3,m.FLOAT,!1,0,0)),0<=c["morphNormal"+p]&&d.morphNormals&&(m.bindBuffer(m.ARRAY_BUFFER,e.__webglMorphNormalsBuffers[h[p]]),l(c["morphNormal"+p]),m.vertexAttribPointer(c["morphNormal"+p],3,m.FLOAT,!1,0,0)),f.__webglMorphTargetInfluences[p]=g[h[p]],p++}else{h=[];g=f.morphTargetInfluences;var r,q=g.length;for(r=
0;r<q;r++)p=g[r],0<p&&h.push([p,r]);h.length>d.numSupportedMorphTargets?(h.sort(t),h.length=d.numSupportedMorphTargets):h.length>d.numSupportedMorphNormals?h.sort(t):0===h.length&&h.push([0,0]);for(p=0;p<d.numSupportedMorphTargets;)h[p]?(r=h[p][1],0<=c["morphTarget"+p]&&(m.bindBuffer(m.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[r]),l(c["morphTarget"+p]),m.vertexAttribPointer(c["morphTarget"+p],3,m.FLOAT,!1,0,0)),0<=c["morphNormal"+p]&&d.morphNormals&&(m.bindBuffer(m.ARRAY_BUFFER,e.__webglMorphNormalsBuffers[r]),
l(c["morphNormal"+p]),m.vertexAttribPointer(c["morphNormal"+p],3,m.FLOAT,!1,0,0)),f.__webglMorphTargetInfluences[p]=g[r]):f.__webglMorphTargetInfluences[p]=0,p++}null!==d.program.uniforms.morphTargetInfluences&&m.uniform1fv(d.program.uniforms.morphTargetInfluences,f.__webglMorphTargetInfluences)}if(a){if(e.__webglCustomAttributesList)for(g=0,h=e.__webglCustomAttributesList.length;g<h;g++)c=e.__webglCustomAttributesList[g],0<=b[c.buffer.belongsToAttribute]&&(m.bindBuffer(m.ARRAY_BUFFER,c.buffer),l(b[c.buffer.belongsToAttribute]),
m.vertexAttribPointer(b[c.buffer.belongsToAttribute],c.size,m.FLOAT,!1,0,0));0<=b.color&&(0<f.geometry.colors.length||0<f.geometry.faces.length?(m.bindBuffer(m.ARRAY_BUFFER,e.__webglColorBuffer),l(b.color),m.vertexAttribPointer(b.color,3,m.FLOAT,!1,0,0)):d.defaultAttributeValues&&m.vertexAttrib3fv(b.color,d.defaultAttributeValues.color));0<=b.normal&&(m.bindBuffer(m.ARRAY_BUFFER,e.__webglNormalBuffer),l(b.normal),m.vertexAttribPointer(b.normal,3,m.FLOAT,!1,0,0));0<=b.tangent&&(m.bindBuffer(m.ARRAY_BUFFER,
e.__webglTangentBuffer),l(b.tangent),m.vertexAttribPointer(b.tangent,4,m.FLOAT,!1,0,0));0<=b.uv&&(f.geometry.faceVertexUvs[0]?(m.bindBuffer(m.ARRAY_BUFFER,e.__webglUVBuffer),l(b.uv),m.vertexAttribPointer(b.uv,2,m.FLOAT,!1,0,0)):d.defaultAttributeValues&&m.vertexAttrib2fv(b.uv,d.defaultAttributeValues.uv));0<=b.uv2&&(f.geometry.faceVertexUvs[1]?(m.bindBuffer(m.ARRAY_BUFFER,e.__webglUV2Buffer),l(b.uv2),m.vertexAttribPointer(b.uv2,2,m.FLOAT,!1,0,0)):d.defaultAttributeValues&&m.vertexAttrib2fv(b.uv2,
d.defaultAttributeValues.uv2));d.skinning&&0<=b.skinIndex&&0<=b.skinWeight&&(m.bindBuffer(m.ARRAY_BUFFER,e.__webglSkinIndicesBuffer),l(b.skinIndex),m.vertexAttribPointer(b.skinIndex,4,m.FLOAT,!1,0,0),m.bindBuffer(m.ARRAY_BUFFER,e.__webglSkinWeightsBuffer),l(b.skinWeight),m.vertexAttribPointer(b.skinWeight,4,m.FLOAT,!1,0,0));0<=b.lineDistance&&(m.bindBuffer(m.ARRAY_BUFFER,e.__webglLineDistanceBuffer),l(b.lineDistance),m.vertexAttribPointer(b.lineDistance,1,m.FLOAT,!1,0,0))}n();f instanceof THREE.Mesh?
(f=e.__typeArray===Uint32Array?m.UNSIGNED_INT:m.UNSIGNED_SHORT,d.wireframe?(O(d.wireframeLinewidth),a&&m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,e.__webglLineBuffer),m.drawElements(m.LINES,e.__webglLineCount,f,0)):(a&&m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,e.__webglFaceBuffer),m.drawElements(m.TRIANGLES,e.__webglFaceCount,f,0)),G.info.render.calls++,G.info.render.vertices+=e.__webglFaceCount,G.info.render.faces+=e.__webglFaceCount/3):f instanceof THREE.Line?(f=f.type===THREE.LineStrip?m.LINE_STRIP:m.LINES,
O(d.linewidth),m.drawArrays(f,0,e.__webglLineCount),G.info.render.calls++):f instanceof THREE.PointCloud&&(m.drawArrays(m.POINTS,0,e.__webglParticleCount),G.info.render.calls++,G.info.render.points+=e.__webglParticleCount)}};this.render=function(a,b,c,d){function e(a){a instanceof THREE.SkinnedMesh&&a.skeleton.update();for(var b=0,c=a.children.length;b<c;b++)e(a.children[b])}if(!1===b instanceof THREE.Camera)console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");else{var f,
g,h,k,m=a.__lights,l=a.fog;Ca=-1;la=null;fb=!0;!0===a.autoUpdate&&a.updateMatrixWorld();void 0===b.parent&&b.updateMatrixWorld();e(a);b.matrixWorldInverse.getInverse(b.matrixWorld);Ub.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse);jc.setFromMatrix(Ub);fc(a);Oa.length=0;Pa.length=0;s(a,a,b);!0===G.sortObjects&&(Oa.sort(q),Pa.sort(r));p(this.renderPluginsPre,a,b);G.info.render.calls=0;G.info.render.vertices=0;G.info.render.faces=0;G.info.render.points=0;this.setRenderTarget(c);(this.autoClear||
d)&&this.clear(this.autoClearColor,this.autoClearDepth,this.autoClearStencil);k=a.__webglObjectsImmediate;d=0;for(f=k.length;d<f;d++)g=k[d],h=g.object,h.visible&&(N(h,b),u(g));a.overrideMaterial?(d=a.overrideMaterial,this.setBlending(d.blending,d.blendEquation,d.blendSrc,d.blendDst),this.setDepthTest(d.depthTest),this.setDepthWrite(d.depthWrite),J(d.polygonOffset,d.polygonOffsetFactor,d.polygonOffsetUnits),v(Oa,b,m,l,!0,d),v(Pa,b,m,l,!0,d),w(a.__webglObjectsImmediate,"",b,m,l,!1,d)):(d=null,this.setBlending(THREE.NoBlending),
v(Oa,b,m,l,!1,d),w(a.__webglObjectsImmediate,"opaque",b,m,l,!1,d),v(Pa,b,m,l,!0,d),w(a.__webglObjectsImmediate,"transparent",b,m,l,!0,d));p(this.renderPluginsPost,a,b);c&&c.generateMipmaps&&c.minFilter!==THREE.NearestFilter&&c.minFilter!==THREE.LinearFilter&&L(c);this.setDepthTest(!0);this.setDepthWrite(!0)}};this.renderImmediateObject=function(a,b,c,d,e){var f=z(a,b,c,d,e);ca=-1;G.setMaterialFaces(d);e.immediateRenderCallback?e.immediateRenderCallback(f,m,jc):e.render(function(a){G.renderBufferImmediate(a,
f,d)})};var fc=function(a){a.__webglObjects||(a.__webglObjects={},a.__webglObjectsImmediate=[]);for(;a.__objectsAdded.length;){var c=a.__objectsAdded[0],d=a,e=void 0,f=void 0;void 0===c.__webglInit&&(c.__webglInit=!0,c._modelViewMatrix=new THREE.Matrix4,c._normalMatrix=new THREE.Matrix3);e=c.geometry;if(void 0!==e&&void 0===e.__webglInit)if(e.__webglInit=!0,e.addEventListener("dispose",gc),e instanceof THREE.BufferGeometry)g(e);else if(c instanceof THREE.Mesh)void 0!==c.__webglActive&&I(c,d),D(d,
c,e);else if(c instanceof THREE.Line){if(!e.__webglVertexBuffer){f=e;f.__webglVertexBuffer=m.createBuffer();f.__webglColorBuffer=m.createBuffer();f.__webglLineDistanceBuffer=m.createBuffer();G.info.memory.geometries++;var f=e,h=c,k=f.vertices.length;f.__vertexArray=new Float32Array(3*k);f.__colorArray=new Float32Array(3*k);f.__lineDistanceArray=new Float32Array(1*k);f.__webglLineCount=k;b(f,h);e.verticesNeedUpdate=!0;e.colorsNeedUpdate=!0;e.lineDistancesNeedUpdate=!0}}else c instanceof THREE.PointCloud&&
!e.__webglVertexBuffer&&(f=e,f.__webglVertexBuffer=m.createBuffer(),f.__webglColorBuffer=m.createBuffer(),G.info.memory.geometries++,f=e,h=c,k=f.vertices.length,f.__vertexArray=new Float32Array(3*k),f.__colorArray=new Float32Array(3*k),f.__sortArray=[],f.__webglParticleCount=k,b(f,h),e.verticesNeedUpdate=!0,e.colorsNeedUpdate=!0);if(void 0===c.__webglActive){if(c instanceof THREE.Mesh)if(e=c.geometry,e instanceof THREE.BufferGeometry)A(d.__webglObjects,e,c);else{if(e instanceof THREE.Geometry)for(h=
0,k=e.geometryGroupsList.length;h<k;h++)f=e.geometryGroupsList[h],A(d.__webglObjects,f,c)}else c instanceof THREE.Line||c instanceof THREE.PointCloud?(e=c.geometry,A(d.__webglObjects,e,c)):(c instanceof THREE.ImmediateRenderObject||c.immediateRenderCallback)&&d.__webglObjectsImmediate.push({id:null,object:c,opaque:null,transparent:null,z:0});c.__webglActive=!0}a.__objectsAdded.splice(0,1)}for(;a.__objectsRemoved.length;)I(a.__objectsRemoved[0],a),a.__objectsRemoved.splice(0,1)};this.initMaterial=
function(a,b,c,d){var e,f,g,h;a.addEventListener("dispose",ic);var k,l,n,p;a instanceof THREE.MeshDepthMaterial?p="depth":a instanceof THREE.MeshNormalMaterial?p="normal":a instanceof THREE.MeshBasicMaterial?p="basic":a instanceof THREE.MeshLambertMaterial?p="lambert":a instanceof THREE.MeshPhongMaterial?p="phong":a instanceof THREE.LineBasicMaterial?p="basic":a instanceof THREE.LineDashedMaterial?p="dashed":a instanceof THREE.PointCloudMaterial&&(p="particle_basic");p?(e=THREE.ShaderLib[p],a.__webglShader=
{uniforms:THREE.UniformsUtils.clone(e.uniforms),vertexShader:e.vertexShader,fragmentShader:e.fragmentShader}):a.__webglShader={uniforms:a.uniforms,vertexShader:a.vertexShader,fragmentShader:a.fragmentShader};n=h=g=f=e=0;for(var r=b.length;n<r;n++){var q=b[n];q.onlyShadow||!1===q.visible||(q instanceof THREE.DirectionalLight&&e++,q instanceof THREE.PointLight&&f++,q instanceof THREE.SpotLight&&g++,q instanceof THREE.HemisphereLight&&h++)}r=n=0;for(q=b.length;r<q;r++){var s=b[r];s.castShadow&&(s instanceof
THREE.SpotLight&&n++,s instanceof THREE.DirectionalLight&&!s.shadowCascade&&n++)}b=n;Ob&&d&&d.skeleton&&d.skeleton.useVertexTexture?n=1024:(n=m.getParameter(m.MAX_VERTEX_UNIFORM_VECTORS),n=Math.floor((n-20)/4),void 0!==d&&d instanceof THREE.SkinnedMesh&&(n=Math.min(d.skeleton.bones.length,n),n<d.skeleton.bones.length&&console.warn("WebGLRenderer: too many bones - "+d.skeleton.bones.length+", this GPU supports just "+n+" (try OpenGL instead of ANGLE)")));c={precision:W,supportsVertexTextures:Sb,map:!!a.map,
envMap:!!a.envMap,lightMap:!!a.lightMap,bumpMap:!!a.bumpMap,normalMap:!!a.normalMap,specularMap:!!a.specularMap,alphaMap:!!a.alphaMap,vertexColors:a.vertexColors,fog:c,useFog:a.fog,fogExp:c instanceof THREE.FogExp2,sizeAttenuation:a.sizeAttenuation,logarithmicDepthBuffer:Ea,skinning:a.skinning,maxBones:n,useVertexTexture:Ob&&d&&d.skeleton&&d.skeleton.useVertexTexture,morphTargets:a.morphTargets,morphNormals:a.morphNormals,maxMorphTargets:this.maxMorphTargets,maxMorphNormals:this.maxMorphNormals,maxDirLights:e,
maxPointLights:f,maxSpotLights:g,maxHemiLights:h,maxShadows:b,shadowMapEnabled:this.shadowMapEnabled&&d.receiveShadow&&0<b,shadowMapType:this.shadowMapType,shadowMapDebug:this.shadowMapDebug,shadowMapCascade:this.shadowMapCascade,alphaTest:a.alphaTest,metal:a.metal,wrapAround:a.wrapAround,doubleSided:a.side===THREE.DoubleSide,flipSided:a.side===THREE.BackSide};d=[];p?d.push(p):(d.push(a.fragmentShader),d.push(a.vertexShader));for(var t in a.defines)d.push(t),d.push(a.defines[t]);for(l in c)d.push(l),
d.push(c[l]);p=d.join();var u;l=0;for(t=Ba.length;l<t;l++)if(d=Ba[l],d.code===p){u=d;u.usedTimes++;break}void 0===u&&(u=new THREE.WebGLProgram(this,p,a,c),Ba.push(u),G.info.memory.programs=Ba.length);a.program=u;u=a.program.attributes;if(a.morphTargets)for(a.numSupportedMorphTargets=0,t="morphTarget",l=0;l<this.maxMorphTargets;l++)p=t+l,0<=u[p]&&a.numSupportedMorphTargets++;if(a.morphNormals)for(a.numSupportedMorphNormals=0,t="morphNormal",l=0;l<this.maxMorphNormals;l++)p=t+l,0<=u[p]&&a.numSupportedMorphNormals++;
a.uniformsList=[];for(k in a.__webglShader.uniforms)(l=a.program.uniforms[k])&&a.uniformsList.push([a.__webglShader.uniforms[k],l])};this.setFaceCulling=function(a,b){a===THREE.CullFaceNone?m.disable(m.CULL_FACE):(b===THREE.FrontFaceDirectionCW?m.frontFace(m.CW):m.frontFace(m.CCW),a===THREE.CullFaceBack?m.cullFace(m.BACK):a===THREE.CullFaceFront?m.cullFace(m.FRONT):m.cullFace(m.FRONT_AND_BACK),m.enable(m.CULL_FACE))};this.setMaterialFaces=function(a){var b=a.side===THREE.DoubleSide;a=a.side===THREE.BackSide;
ua!==b&&(b?m.disable(m.CULL_FACE):m.enable(m.CULL_FACE),ua=b);ja!==a&&(a?m.frontFace(m.CW):m.frontFace(m.CCW),ja=a)};this.setDepthTest=function(a){ra!==a&&(a?m.enable(m.DEPTH_TEST):m.disable(m.DEPTH_TEST),ra=a)};this.setDepthWrite=function(a){Da!==a&&(m.depthMask(a),Da=a)};this.setBlending=function(a,b,c,d){a!==Fa&&(a===THREE.NoBlending?m.disable(m.BLEND):a===THREE.AdditiveBlending?(m.enable(m.BLEND),m.blendEquation(m.FUNC_ADD),m.blendFunc(m.SRC_ALPHA,m.ONE)):a===THREE.SubtractiveBlending?(m.enable(m.BLEND),
m.blendEquation(m.FUNC_ADD),m.blendFunc(m.ZERO,m.ONE_MINUS_SRC_COLOR)):a===THREE.MultiplyBlending?(m.enable(m.BLEND),m.blendEquation(m.FUNC_ADD),m.blendFunc(m.ZERO,m.SRC_COLOR)):a===THREE.CustomBlending?m.enable(m.BLEND):(m.enable(m.BLEND),m.blendEquationSeparate(m.FUNC_ADD,m.FUNC_ADD),m.blendFuncSeparate(m.SRC_ALPHA,m.ONE_MINUS_SRC_ALPHA,m.ONE,m.ONE_MINUS_SRC_ALPHA)),Fa=a);if(a===THREE.CustomBlending){if(b!==va&&(m.blendEquation(B(b)),va=b),c!==Ka||d!==aa)m.blendFunc(B(c),B(d)),Ka=c,aa=d}else aa=
Ka=va=null};this.setTexture=function(a,b){if(a.needsUpdate){a.__webglInit||(a.__webglInit=!0,a.addEventListener("dispose",Pb),a.__webglTexture=m.createTexture(),G.info.memory.textures++);m.activeTexture(m.TEXTURE0+b);m.bindTexture(m.TEXTURE_2D,a.__webglTexture);m.pixelStorei(m.UNPACK_FLIP_Y_WEBGL,a.flipY);m.pixelStorei(m.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha);m.pixelStorei(m.UNPACK_ALIGNMENT,a.unpackAlignment);var c=a.image,d=THREE.Math.isPowerOfTwo(c.width)&&THREE.Math.isPowerOfTwo(c.height),
e=B(a.format),f=B(a.type);E(m.TEXTURE_2D,a,d);var g=a.mipmaps;if(a instanceof THREE.DataTexture)if(0<g.length&&d){for(var h=0,k=g.length;h<k;h++)c=g[h],m.texImage2D(m.TEXTURE_2D,h,e,c.width,c.height,0,e,f,c.data);a.generateMipmaps=!1}else m.texImage2D(m.TEXTURE_2D,0,e,c.width,c.height,0,e,f,c.data);else if(a instanceof THREE.CompressedTexture)for(h=0,k=g.length;h<k;h++)c=g[h],a.format!==THREE.RGBAFormat?m.compressedTexImage2D(m.TEXTURE_2D,h,e,c.width,c.height,0,c.data):m.texImage2D(m.TEXTURE_2D,h,
e,c.width,c.height,0,e,f,c.data);else if(0<g.length&&d){h=0;for(k=g.length;h<k;h++)c=g[h],m.texImage2D(m.TEXTURE_2D,h,e,e,f,c);a.generateMipmaps=!1}else m.texImage2D(m.TEXTURE_2D,0,e,e,f,a.image);a.generateMipmaps&&d&&m.generateMipmap(m.TEXTURE_2D);a.needsUpdate=!1;if(a.onUpdate)a.onUpdate()}else m.activeTexture(m.TEXTURE0+b),m.bindTexture(m.TEXTURE_2D,a.__webglTexture)};this.setRenderTarget=function(a){var b=a instanceof THREE.WebGLRenderTargetCube;if(a&&!a.__webglFramebuffer){void 0===a.depthBuffer&&
(a.depthBuffer=!0);void 0===a.stencilBuffer&&(a.stencilBuffer=!0);a.addEventListener("dispose",hc);a.__webglTexture=m.createTexture();G.info.memory.textures++;var c=THREE.Math.isPowerOfTwo(a.width)&&THREE.Math.isPowerOfTwo(a.height),d=B(a.format),e=B(a.type);if(b){a.__webglFramebuffer=[];a.__webglRenderbuffer=[];m.bindTexture(m.TEXTURE_CUBE_MAP,a.__webglTexture);E(m.TEXTURE_CUBE_MAP,a,c);for(var f=0;6>f;f++){a.__webglFramebuffer[f]=m.createFramebuffer();a.__webglRenderbuffer[f]=m.createRenderbuffer();
m.texImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X+f,0,d,a.width,a.height,0,d,e,null);var g=a,h=m.TEXTURE_CUBE_MAP_POSITIVE_X+f;m.bindFramebuffer(m.FRAMEBUFFER,a.__webglFramebuffer[f]);m.framebufferTexture2D(m.FRAMEBUFFER,m.COLOR_ATTACHMENT0,h,g.__webglTexture,0);Q(a.__webglRenderbuffer[f],a)}c&&m.generateMipmap(m.TEXTURE_CUBE_MAP)}else a.__webglFramebuffer=m.createFramebuffer(),a.__webglRenderbuffer=a.shareDepthFrom?a.shareDepthFrom.__webglRenderbuffer:m.createRenderbuffer(),m.bindTexture(m.TEXTURE_2D,a.__webglTexture),
E(m.TEXTURE_2D,a,c),m.texImage2D(m.TEXTURE_2D,0,d,a.width,a.height,0,d,e,null),d=m.TEXTURE_2D,m.bindFramebuffer(m.FRAMEBUFFER,a.__webglFramebuffer),m.framebufferTexture2D(m.FRAMEBUFFER,m.COLOR_ATTACHMENT0,d,a.__webglTexture,0),a.shareDepthFrom?a.depthBuffer&&!a.stencilBuffer?m.framebufferRenderbuffer(m.FRAMEBUFFER,m.DEPTH_ATTACHMENT,m.RENDERBUFFER,a.__webglRenderbuffer):a.depthBuffer&&a.stencilBuffer&&m.framebufferRenderbuffer(m.FRAMEBUFFER,m.DEPTH_STENCIL_ATTACHMENT,m.RENDERBUFFER,a.__webglRenderbuffer):
Q(a.__webglRenderbuffer,a),c&&m.generateMipmap(m.TEXTURE_2D);b?m.bindTexture(m.TEXTURE_CUBE_MAP,null):m.bindTexture(m.TEXTURE_2D,null);m.bindRenderbuffer(m.RENDERBUFFER,null);m.bindFramebuffer(m.FRAMEBUFFER,null)}a?(b=b?a.__webglFramebuffer[a.activeCubeFace]:a.__webglFramebuffer,c=a.width,a=a.height,e=d=0):(b=null,c=wb,a=sb,d=ma,e=Ja);b!==Za&&(m.bindFramebuffer(m.FRAMEBUFFER,b),m.viewport(d,e,c,a),Za=b);Hb=c;Ib=a};this.shadowMapPlugin=new THREE.ShadowMapPlugin;this.addPrePlugin(this.shadowMapPlugin);
this.addPostPlugin(new THREE.SpritePlugin);this.addPostPlugin(new THREE.LensFlarePlugin)};
THREE.WebGLRenderTarget=function(a,b,c){this.width=a;this.height=b;c=c||{};this.wrapS=void 0!==c.wrapS?c.wrapS:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==c.wrapT?c.wrapT:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==c.magFilter?c.magFilter:THREE.LinearFilter;this.minFilter=void 0!==c.minFilter?c.minFilter:THREE.LinearMipMapLinearFilter;this.anisotropy=void 0!==c.anisotropy?c.anisotropy:1;this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.format=void 0!==c.format?c.format:
THREE.RGBAFormat;this.type=void 0!==c.type?c.type:THREE.UnsignedByteType;this.depthBuffer=void 0!==c.depthBuffer?c.depthBuffer:!0;this.stencilBuffer=void 0!==c.stencilBuffer?c.stencilBuffer:!0;this.generateMipmaps=!0;this.shareDepthFrom=null};
THREE.WebGLRenderTarget.prototype={constructor:THREE.WebGLRenderTarget,setSize:function(a,b){this.width=a;this.height=b},clone:function(){var a=new THREE.WebGLRenderTarget(this.width,this.height);a.wrapS=this.wrapS;a.wrapT=this.wrapT;a.magFilter=this.magFilter;a.minFilter=this.minFilter;a.anisotropy=this.anisotropy;a.offset.copy(this.offset);a.repeat.copy(this.repeat);a.format=this.format;a.type=this.type;a.depthBuffer=this.depthBuffer;a.stencilBuffer=this.stencilBuffer;a.generateMipmaps=this.generateMipmaps;
a.shareDepthFrom=this.shareDepthFrom;return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.WebGLRenderTarget.prototype);THREE.WebGLRenderTargetCube=function(a,b,c){THREE.WebGLRenderTarget.call(this,a,b,c);this.activeCubeFace=0};THREE.WebGLRenderTargetCube.prototype=Object.create(THREE.WebGLRenderTarget.prototype);
THREE.WebGLProgram=function(){var a=0;return function(b,c,d,e){var f=b.context,g=d.defines,h=d.__webglShader.uniforms,k=d.attributes,l=d.__webglShader.vertexShader,n=d.__webglShader.fragmentShader,q=d.index0AttributeName;void 0===q&&!0===e.morphTargets&&(q="position");var r="SHADOWMAP_TYPE_BASIC";e.shadowMapType===THREE.PCFShadowMap?r="SHADOWMAP_TYPE_PCF":e.shadowMapType===THREE.PCFSoftShadowMap&&(r="SHADOWMAP_TYPE_PCF_SOFT");var t,s;t=[];for(var p in g)s=g[p],!1!==s&&(s="#define "+p+" "+s,t.push(s));
t=t.join("\n");g=f.createProgram();d instanceof THREE.RawShaderMaterial?b=d="":(d=["precision "+e.precision+" float;","precision "+e.precision+" int;",t,e.supportsVertexTextures?"#define VERTEX_TEXTURES":"",b.gammaInput?"#define GAMMA_INPUT":"",b.gammaOutput?"#define GAMMA_OUTPUT":"","#define MAX_DIR_LIGHTS "+e.maxDirLights,"#define MAX_POINT_LIGHTS "+e.maxPointLights,"#define MAX_SPOT_LIGHTS "+e.maxSpotLights,"#define MAX_HEMI_LIGHTS "+e.maxHemiLights,"#define MAX_SHADOWS "+e.maxShadows,"#define MAX_BONES "+
e.maxBones,e.map?"#define USE_MAP":"",e.envMap?"#define USE_ENVMAP":"",e.lightMap?"#define USE_LIGHTMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.vertexColors?"#define USE_COLOR":"",e.skinning?"#define USE_SKINNING":"",e.useVertexTexture?"#define BONE_TEXTURE":"",e.morphTargets?"#define USE_MORPHTARGETS":"",e.morphNormals?"#define USE_MORPHNORMALS":"",e.wrapAround?"#define WRAP_AROUND":
"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+r:"",e.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",e.shadowMapCascade?"#define SHADOWMAP_CASCADE":"",e.sizeAttenuation?"#define USE_SIZEATTENUATION":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"","uniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n#ifdef USE_COLOR\n\tattribute vec3 color;\n#endif\n#ifdef USE_MORPHTARGETS\n\tattribute vec3 morphTarget0;\n\tattribute vec3 morphTarget1;\n\tattribute vec3 morphTarget2;\n\tattribute vec3 morphTarget3;\n\t#ifdef USE_MORPHNORMALS\n\t\tattribute vec3 morphNormal0;\n\t\tattribute vec3 morphNormal1;\n\t\tattribute vec3 morphNormal2;\n\t\tattribute vec3 morphNormal3;\n\t#else\n\t\tattribute vec3 morphTarget4;\n\t\tattribute vec3 morphTarget5;\n\t\tattribute vec3 morphTarget6;\n\t\tattribute vec3 morphTarget7;\n\t#endif\n#endif\n#ifdef USE_SKINNING\n\tattribute vec4 skinIndex;\n\tattribute vec4 skinWeight;\n#endif\n"].join("\n"),
b=["precision "+e.precision+" float;","precision "+e.precision+" int;",e.bumpMap||e.normalMap?"#extension GL_OES_standard_derivatives : enable":"",t,"#define MAX_DIR_LIGHTS "+e.maxDirLights,"#define MAX_POINT_LIGHTS "+e.maxPointLights,"#define MAX_SPOT_LIGHTS "+e.maxSpotLights,"#define MAX_HEMI_LIGHTS "+e.maxHemiLights,"#define MAX_SHADOWS "+e.maxShadows,e.alphaTest?"#define ALPHATEST "+e.alphaTest:"",b.gammaInput?"#define GAMMA_INPUT":"",b.gammaOutput?"#define GAMMA_OUTPUT":"",e.useFog&&e.fog?"#define USE_FOG":
"",e.useFog&&e.fogExp?"#define FOG_EXP2":"",e.map?"#define USE_MAP":"",e.envMap?"#define USE_ENVMAP":"",e.lightMap?"#define USE_LIGHTMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.vertexColors?"#define USE_COLOR":"",e.metal?"#define METAL":"",e.wrapAround?"#define WRAP_AROUND":"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":
"",e.shadowMapEnabled?"#define "+r:"",e.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",e.shadowMapCascade?"#define SHADOWMAP_CASCADE":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"","uniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n"].join("\n"));l=new THREE.WebGLShader(f,f.VERTEX_SHADER,d+l);n=new THREE.WebGLShader(f,f.FRAGMENT_SHADER,b+n);f.attachShader(g,l);f.attachShader(g,n);void 0!==q&&f.bindAttribLocation(g,0,q);f.linkProgram(g);!1===f.getProgramParameter(g,f.LINK_STATUS)&&(console.error("THREE.WebGLProgram: Could not initialise shader."),
console.error("gl.VALIDATE_STATUS",f.getProgramParameter(g,f.VALIDATE_STATUS)),console.error("gl.getError()",f.getError()));""!==f.getProgramInfoLog(g)&&console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",f.getProgramInfoLog(g));f.deleteShader(l);f.deleteShader(n);q="viewMatrix modelViewMatrix projectionMatrix normalMatrix modelMatrix cameraPosition morphTargetInfluences bindMatrix bindMatrixInverse".split(" ");e.useVertexTexture?(q.push("boneTexture"),q.push("boneTextureWidth"),q.push("boneTextureHeight")):
q.push("boneGlobalMatrices");e.logarithmicDepthBuffer&&q.push("logDepthBufFC");for(var v in h)q.push(v);h=q;v={};q=0;for(b=h.length;q<b;q++)r=h[q],v[r]=f.getUniformLocation(g,r);this.uniforms=v;q="position normal uv uv2 tangent color skinIndex skinWeight lineDistance".split(" ");for(h=0;h<e.maxMorphTargets;h++)q.push("morphTarget"+h);for(h=0;h<e.maxMorphNormals;h++)q.push("morphNormal"+h);for(var w in k)q.push(w);e=q;k={};w=0;for(h=e.length;w<h;w++)v=e[w],k[v]=f.getAttribLocation(g,v);this.attributes=
k;this.id=a++;this.code=c;this.usedTimes=1;this.program=g;this.vertexShader=l;this.fragmentShader=n;return this}}();
THREE.WebGLShader=function(){var a=function(a){a=a.split("\n");for(var c=0;c<a.length;c++)a[c]=c+1+": "+a[c];return a.join("\n")};return function(b,c,d){c=b.createShader(c);b.shaderSource(c,d);b.compileShader(c);!1===b.getShaderParameter(c,b.COMPILE_STATUS)&&console.error("THREE.WebGLShader: Shader couldn't compile.");""!==b.getShaderInfoLog(c)&&(console.warn("THREE.WebGLShader: gl.getShaderInfoLog()",b.getShaderInfoLog(c)),console.warn(a(d)));return c}}();
THREE.RenderableVertex=function(){this.position=new THREE.Vector3;this.positionWorld=new THREE.Vector3;this.positionScreen=new THREE.Vector4;this.visible=!0};THREE.RenderableVertex.prototype.copy=function(a){this.positionWorld.copy(a.positionWorld);this.positionScreen.copy(a.positionScreen)};
THREE.RenderableFace=function(){this.id=0;this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.v3=new THREE.RenderableVertex;this.normalModel=new THREE.Vector3;this.vertexNormalsModel=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];this.vertexNormalsLength=0;this.color=new THREE.Color;this.material=null;this.uvs=[new THREE.Vector2,new THREE.Vector2,new THREE.Vector2];this.z=0};THREE.RenderableObject=function(){this.id=0;this.object=null;this.z=0};
THREE.RenderableSprite=function(){this.id=0;this.object=null;this.rotation=this.z=this.y=this.x=0;this.scale=new THREE.Vector2;this.material=null};THREE.RenderableLine=function(){this.id=0;this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.vertexColors=[new THREE.Color,new THREE.Color];this.material=null;this.z=0};
THREE.GeometryUtils={merge:function(a,b,c){console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");var d;b instanceof THREE.Mesh&&(b.matrixAutoUpdate&&b.updateMatrix(),d=b.matrix,b=b.geometry);a.merge(b,d,c)},center:function(a){console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.");return a.center()}};
THREE.ImageUtils={crossOrigin:void 0,loadTexture:function(a,b,c,d){var e=new THREE.ImageLoader;e.crossOrigin=this.crossOrigin;var f=new THREE.Texture(void 0,b);e.load(a,function(a){f.image=a;f.needsUpdate=!0;c&&c(f)},void 0,function(a){d&&d(a)});f.sourceFile=a;return f},loadTextureCube:function(a,b,c,d){var e=new THREE.ImageLoader;e.crossOrigin=this.crossOrigin;var f=new THREE.CubeTexture([],b);f.flipY=!1;var g=0;b=function(b){e.load(a[b],function(a){f.images[b]=a;g+=1;6===g&&(f.needsUpdate=!0,c&&
c(f))})};d=0;for(var h=a.length;d<h;++d)b(d);return f},loadCompressedTexture:function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},loadCompressedTextureCube:function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")},getNormalMap:function(a,b){var c=function(a){var b=Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2]);return[a[0]/b,a[1]/b,a[2]/b]};b|=1;var d=a.width,e=a.height,f=document.createElement("canvas");
f.width=d;f.height=e;var g=f.getContext("2d");g.drawImage(a,0,0);for(var h=g.getImageData(0,0,d,e).data,k=g.createImageData(d,e),l=k.data,n=0;n<d;n++)for(var q=0;q<e;q++){var r=0>q-1?0:q-1,t=q+1>e-1?e-1:q+1,s=0>n-1?0:n-1,p=n+1>d-1?d-1:n+1,v=[],w=[0,0,h[4*(q*d+n)]/255*b];v.push([-1,0,h[4*(q*d+s)]/255*b]);v.push([-1,-1,h[4*(r*d+s)]/255*b]);v.push([0,-1,h[4*(r*d+n)]/255*b]);v.push([1,-1,h[4*(r*d+p)]/255*b]);v.push([1,0,h[4*(q*d+p)]/255*b]);v.push([1,1,h[4*(t*d+p)]/255*b]);v.push([0,1,h[4*(t*d+n)]/255*
b]);v.push([-1,1,h[4*(t*d+s)]/255*b]);r=[];s=v.length;for(t=0;t<s;t++){var p=v[t],u=v[(t+1)%s],p=[p[0]-w[0],p[1]-w[1],p[2]-w[2]],u=[u[0]-w[0],u[1]-w[1],u[2]-w[2]];r.push(c([p[1]*u[2]-p[2]*u[1],p[2]*u[0]-p[0]*u[2],p[0]*u[1]-p[1]*u[0]]))}v=[0,0,0];for(t=0;t<r.length;t++)v[0]+=r[t][0],v[1]+=r[t][1],v[2]+=r[t][2];v[0]/=r.length;v[1]/=r.length;v[2]/=r.length;w=4*(q*d+n);l[w]=(v[0]+1)/2*255|0;l[w+1]=(v[1]+1)/2*255|0;l[w+2]=255*v[2]|0;l[w+3]=255}g.putImageData(k,0,0);return f},generateDataTexture:function(a,
b,c){var d=a*b,e=new Uint8Array(3*d),f=Math.floor(255*c.r),g=Math.floor(255*c.g);c=Math.floor(255*c.b);for(var h=0;h<d;h++)e[3*h]=f,e[3*h+1]=g,e[3*h+2]=c;a=new THREE.DataTexture(e,a,b,THREE.RGBFormat);a.needsUpdate=!0;return a}};
THREE.SceneUtils={createMultiMaterialObject:function(a,b){for(var c=new THREE.Object3D,d=0,e=b.length;d<e;d++)c.add(new THREE.Mesh(a,b[d]));return c},detach:function(a,b,c){a.applyMatrix(b.matrixWorld);b.remove(a);c.add(a)},attach:function(a,b,c){var d=new THREE.Matrix4;d.getInverse(c.matrixWorld);a.applyMatrix(d);b.remove(a);c.add(a)}};
THREE.FontUtils={faces:{},face:"helvetiker",weight:"normal",style:"normal",size:150,divisions:10,getFace:function(){try{return this.faces[this.face][this.weight][this.style]}catch(a){throw"The font "+this.face+" with "+this.weight+" weight and "+this.style+" style is missing.";}},loadFace:function(a){var b=a.familyName.toLowerCase();this.faces[b]=this.faces[b]||{};this.faces[b][a.cssFontWeight]=this.faces[b][a.cssFontWeight]||{};this.faces[b][a.cssFontWeight][a.cssFontStyle]=a;return this.faces[b][a.cssFontWeight][a.cssFontStyle]=
a},drawText:function(a){var b=this.getFace(),c=this.size/b.resolution,d=0,e=String(a).split(""),f=e.length,g=[];for(a=0;a<f;a++){var h=new THREE.Path,h=this.extractGlyphPoints(e[a],b,c,d,h),d=d+h.offset;g.push(h.path)}return{paths:g,offset:d/2}},extractGlyphPoints:function(a,b,c,d,e){var f=[],g,h,k,l,n,q,r,t,s,p,v,w=b.glyphs[a]||b.glyphs["?"];if(w){if(w.o)for(b=w._cachedOutline||(w._cachedOutline=w.o.split(" ")),l=b.length,a=0;a<l;)switch(k=b[a++],k){case "m":k=b[a++]*c+d;n=b[a++]*c;e.moveTo(k,n);
break;case "l":k=b[a++]*c+d;n=b[a++]*c;e.lineTo(k,n);break;case "q":k=b[a++]*c+d;n=b[a++]*c;t=b[a++]*c+d;s=b[a++]*c;e.quadraticCurveTo(t,s,k,n);if(g=f[f.length-1])for(q=g.x,r=g.y,g=1,h=this.divisions;g<=h;g++){var u=g/h;THREE.Shape.Utils.b2(u,q,t,k);THREE.Shape.Utils.b2(u,r,s,n)}break;case "b":if(k=b[a++]*c+d,n=b[a++]*c,t=b[a++]*c+d,s=b[a++]*c,p=b[a++]*c+d,v=b[a++]*c,e.bezierCurveTo(t,s,p,v,k,n),g=f[f.length-1])for(q=g.x,r=g.y,g=1,h=this.divisions;g<=h;g++)u=g/h,THREE.Shape.Utils.b3(u,q,t,p,k),THREE.Shape.Utils.b3(u,
r,s,v,n)}return{offset:w.ha*c,path:e}}}};
THREE.FontUtils.generateShapes=function(a,b){b=b||{};var c=void 0!==b.curveSegments?b.curveSegments:4,d=void 0!==b.font?b.font:"helvetiker",e=void 0!==b.weight?b.weight:"normal",f=void 0!==b.style?b.style:"normal";THREE.FontUtils.size=void 0!==b.size?b.size:100;THREE.FontUtils.divisions=c;THREE.FontUtils.face=d;THREE.FontUtils.weight=e;THREE.FontUtils.style=f;c=THREE.FontUtils.drawText(a).paths;d=[];e=0;for(f=c.length;e<f;e++)Array.prototype.push.apply(d,c[e].toShapes());return d};
(function(a){var b=function(a){for(var b=a.length,e=0,f=b-1,g=0;g<b;f=g++)e+=a[f].x*a[g].y-a[g].x*a[f].y;return 0.5*e};a.Triangulate=function(a,d){var e=a.length;if(3>e)return null;var f=[],g=[],h=[],k,l,n;if(0<b(a))for(l=0;l<e;l++)g[l]=l;else for(l=0;l<e;l++)g[l]=e-1-l;var q=2*e;for(l=e-1;2<e;){if(0>=q--){console.log("Warning, unable to triangulate polygon!");break}k=l;e<=k&&(k=0);l=k+1;e<=l&&(l=0);n=l+1;e<=n&&(n=0);var r;a:{var t=r=void 0,s=void 0,p=void 0,v=void 0,w=void 0,u=void 0,D=void 0,A=
void 0,t=a[g[k]].x,s=a[g[k]].y,p=a[g[l]].x,v=a[g[l]].y,w=a[g[n]].x,u=a[g[n]].y;if(1E-10>(p-t)*(u-s)-(v-s)*(w-t))r=!1;else{var x=void 0,C=void 0,I=void 0,z=void 0,y=void 0,K=void 0,N=void 0,ba=void 0,P=void 0,O=void 0,P=ba=N=A=D=void 0,x=w-p,C=u-v,I=t-w,z=s-u,y=p-t,K=v-s;for(r=0;r<e;r++)if(D=a[g[r]].x,A=a[g[r]].y,!(D===t&&A===s||D===p&&A===v||D===w&&A===u)&&(N=D-t,ba=A-s,P=D-p,O=A-v,D-=w,A-=u,P=x*O-C*P,N=y*ba-K*N,ba=I*A-z*D,-1E-10<=P&&-1E-10<=ba&&-1E-10<=N)){r=!1;break a}r=!0}}if(r){f.push([a[g[k]],
a[g[l]],a[g[n]]]);h.push([g[k],g[l],g[n]]);k=l;for(n=l+1;n<e;k++,n++)g[k]=g[n];e--;q=2*e}}return d?h:f};a.Triangulate.area=b;return a})(THREE.FontUtils);self._typeface_js={faces:THREE.FontUtils.faces,loadFace:THREE.FontUtils.loadFace};THREE.typeface_js=self._typeface_js;THREE.Curve=function(){};THREE.Curve.prototype.getPoint=function(a){console.log("Warning, getPoint() not implemented!");return null};THREE.Curve.prototype.getPointAt=function(a){a=this.getUtoTmapping(a);return this.getPoint(a)};
THREE.Curve.prototype.getPoints=function(a){a||(a=5);var b,c=[];for(b=0;b<=a;b++)c.push(this.getPoint(b/a));return c};THREE.Curve.prototype.getSpacedPoints=function(a){a||(a=5);var b,c=[];for(b=0;b<=a;b++)c.push(this.getPointAt(b/a));return c};THREE.Curve.prototype.getLength=function(){var a=this.getLengths();return a[a.length-1]};
THREE.Curve.prototype.getLengths=function(a){a||(a=this.__arcLengthDivisions?this.__arcLengthDivisions:200);if(this.cacheArcLengths&&this.cacheArcLengths.length==a+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var b=[],c,d=this.getPoint(0),e,f=0;b.push(0);for(e=1;e<=a;e++)c=this.getPoint(e/a),f+=c.distanceTo(d),b.push(f),d=c;return this.cacheArcLengths=b};THREE.Curve.prototype.updateArcLengths=function(){this.needsUpdate=!0;this.getLengths()};
THREE.Curve.prototype.getUtoTmapping=function(a,b){var c=this.getLengths(),d=0,e=c.length,f;f=b?b:a*c[e-1];for(var g=0,h=e-1,k;g<=h;)if(d=Math.floor(g+(h-g)/2),k=c[d]-f,0>k)g=d+1;else if(0<k)h=d-1;else{h=d;break}d=h;if(c[d]==f)return d/(e-1);g=c[d];return c=(d+(f-g)/(c[d+1]-g))/(e-1)};THREE.Curve.prototype.getTangent=function(a){var b=a-1E-4;a+=1E-4;0>b&&(b=0);1<a&&(a=1);b=this.getPoint(b);return this.getPoint(a).clone().sub(b).normalize()};
THREE.Curve.prototype.getTangentAt=function(a){a=this.getUtoTmapping(a);return this.getTangent(a)};
THREE.Curve.Utils={tangentQuadraticBezier:function(a,b,c,d){return 2*(1-a)*(c-b)+2*a*(d-c)},tangentCubicBezier:function(a,b,c,d,e){return-3*b*(1-a)*(1-a)+3*c*(1-a)*(1-a)-6*a*c*(1-a)+6*a*d*(1-a)-3*a*a*d+3*a*a*e},tangentSpline:function(a,b,c,d,e){return 6*a*a-6*a+(3*a*a-4*a+1)+(-6*a*a+6*a)+(3*a*a-2*a)},interpolate:function(a,b,c,d,e){a=0.5*(c-a);d=0.5*(d-b);var f=e*e;return(2*b-2*c+a+d)*e*f+(-3*b+3*c-2*a-d)*f+a*e+b}};
THREE.Curve.create=function(a,b){a.prototype=Object.create(THREE.Curve.prototype);a.prototype.getPoint=b;return a};THREE.CurvePath=function(){this.curves=[];this.bends=[];this.autoClose=!1};THREE.CurvePath.prototype=Object.create(THREE.Curve.prototype);THREE.CurvePath.prototype.add=function(a){this.curves.push(a)};THREE.CurvePath.prototype.checkConnection=function(){};
THREE.CurvePath.prototype.closePath=function(){var a=this.curves[0].getPoint(0),b=this.curves[this.curves.length-1].getPoint(1);a.equals(b)||this.curves.push(new THREE.LineCurve(b,a))};THREE.CurvePath.prototype.getPoint=function(a){var b=a*this.getLength(),c=this.getCurveLengths();for(a=0;a<c.length;){if(c[a]>=b)return b=c[a]-b,a=this.curves[a],b=1-b/a.getLength(),a.getPointAt(b);a++}return null};THREE.CurvePath.prototype.getLength=function(){var a=this.getCurveLengths();return a[a.length-1]};
THREE.CurvePath.prototype.getCurveLengths=function(){if(this.cacheLengths&&this.cacheLengths.length==this.curves.length)return this.cacheLengths;var a=[],b=0,c,d=this.curves.length;for(c=0;c<d;c++)b+=this.curves[c].getLength(),a.push(b);return this.cacheLengths=a};
THREE.CurvePath.prototype.getBoundingBox=function(){var a=this.getPoints(),b,c,d,e,f,g;b=c=Number.NEGATIVE_INFINITY;e=f=Number.POSITIVE_INFINITY;var h,k,l,n,q=a[0]instanceof THREE.Vector3;n=q?new THREE.Vector3:new THREE.Vector2;k=0;for(l=a.length;k<l;k++)h=a[k],h.x>b?b=h.x:h.x<e&&(e=h.x),h.y>c?c=h.y:h.y<f&&(f=h.y),q&&(h.z>d?d=h.z:h.z<g&&(g=h.z)),n.add(h);a={minX:e,minY:f,maxX:b,maxY:c};q&&(a.maxZ=d,a.minZ=g);return a};
THREE.CurvePath.prototype.createPointsGeometry=function(a){a=this.getPoints(a,!0);return this.createGeometry(a)};THREE.CurvePath.prototype.createSpacedPointsGeometry=function(a){a=this.getSpacedPoints(a,!0);return this.createGeometry(a)};THREE.CurvePath.prototype.createGeometry=function(a){for(var b=new THREE.Geometry,c=0;c<a.length;c++)b.vertices.push(new THREE.Vector3(a[c].x,a[c].y,a[c].z||0));return b};THREE.CurvePath.prototype.addWrapPath=function(a){this.bends.push(a)};
THREE.CurvePath.prototype.getTransformedPoints=function(a,b){var c=this.getPoints(a),d,e;b||(b=this.bends);d=0;for(e=b.length;d<e;d++)c=this.getWrapPoints(c,b[d]);return c};THREE.CurvePath.prototype.getTransformedSpacedPoints=function(a,b){var c=this.getSpacedPoints(a),d,e;b||(b=this.bends);d=0;for(e=b.length;d<e;d++)c=this.getWrapPoints(c,b[d]);return c};
THREE.CurvePath.prototype.getWrapPoints=function(a,b){var c=this.getBoundingBox(),d,e,f,g,h,k;d=0;for(e=a.length;d<e;d++)f=a[d],g=f.x,h=f.y,k=g/c.maxX,k=b.getUtoTmapping(k,g),g=b.getPoint(k),k=b.getTangent(k),k.set(-k.y,k.x).multiplyScalar(h),f.x=g.x+k.x,f.y=g.y+k.y;return a};THREE.Gyroscope=function(){THREE.Object3D.call(this)};THREE.Gyroscope.prototype=Object.create(THREE.Object3D.prototype);
THREE.Gyroscope.prototype.updateMatrixWorld=function(a){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||a)this.parent?(this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorld.decompose(this.translationWorld,this.quaternionWorld,this.scaleWorld),this.matrix.decompose(this.translationObject,this.quaternionObject,this.scaleObject),this.matrixWorld.compose(this.translationWorld,this.quaternionObject,this.scaleWorld)):this.matrixWorld.copy(this.matrix),
this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=0,c=this.children.length;b<c;b++)this.children[b].updateMatrixWorld(a)};THREE.Gyroscope.prototype.translationWorld=new THREE.Vector3;THREE.Gyroscope.prototype.translationObject=new THREE.Vector3;THREE.Gyroscope.prototype.quaternionWorld=new THREE.Quaternion;THREE.Gyroscope.prototype.quaternionObject=new THREE.Quaternion;THREE.Gyroscope.prototype.scaleWorld=new THREE.Vector3;THREE.Gyroscope.prototype.scaleObject=new THREE.Vector3;
THREE.Path=function(a){THREE.CurvePath.call(this);this.actions=[];a&&this.fromPoints(a)};THREE.Path.prototype=Object.create(THREE.CurvePath.prototype);THREE.PathActions={MOVE_TO:"moveTo",LINE_TO:"lineTo",QUADRATIC_CURVE_TO:"quadraticCurveTo",BEZIER_CURVE_TO:"bezierCurveTo",CSPLINE_THRU:"splineThru",ARC:"arc",ELLIPSE:"ellipse"};THREE.Path.prototype.fromPoints=function(a){this.moveTo(a[0].x,a[0].y);for(var b=1,c=a.length;b<c;b++)this.lineTo(a[b].x,a[b].y)};
THREE.Path.prototype.moveTo=function(a,b){var c=Array.prototype.slice.call(arguments);this.actions.push({action:THREE.PathActions.MOVE_TO,args:c})};THREE.Path.prototype.lineTo=function(a,b){var c=Array.prototype.slice.call(arguments),d=this.actions[this.actions.length-1].args,d=new THREE.LineCurve(new THREE.Vector2(d[d.length-2],d[d.length-1]),new THREE.Vector2(a,b));this.curves.push(d);this.actions.push({action:THREE.PathActions.LINE_TO,args:c})};
THREE.Path.prototype.quadraticCurveTo=function(a,b,c,d){var e=Array.prototype.slice.call(arguments),f=this.actions[this.actions.length-1].args,f=new THREE.QuadraticBezierCurve(new THREE.Vector2(f[f.length-2],f[f.length-1]),new THREE.Vector2(a,b),new THREE.Vector2(c,d));this.curves.push(f);this.actions.push({action:THREE.PathActions.QUADRATIC_CURVE_TO,args:e})};
THREE.Path.prototype.bezierCurveTo=function(a,b,c,d,e,f){var g=Array.prototype.slice.call(arguments),h=this.actions[this.actions.length-1].args,h=new THREE.CubicBezierCurve(new THREE.Vector2(h[h.length-2],h[h.length-1]),new THREE.Vector2(a,b),new THREE.Vector2(c,d),new THREE.Vector2(e,f));this.curves.push(h);this.actions.push({action:THREE.PathActions.BEZIER_CURVE_TO,args:g})};
THREE.Path.prototype.splineThru=function(a){var b=Array.prototype.slice.call(arguments),c=this.actions[this.actions.length-1].args,c=[new THREE.Vector2(c[c.length-2],c[c.length-1])];Array.prototype.push.apply(c,a);c=new THREE.SplineCurve(c);this.curves.push(c);this.actions.push({action:THREE.PathActions.CSPLINE_THRU,args:b})};THREE.Path.prototype.arc=function(a,b,c,d,e,f){var g=this.actions[this.actions.length-1].args;this.absarc(a+g[g.length-2],b+g[g.length-1],c,d,e,f)};
THREE.Path.prototype.absarc=function(a,b,c,d,e,f){this.absellipse(a,b,c,c,d,e,f)};THREE.Path.prototype.ellipse=function(a,b,c,d,e,f,g){var h=this.actions[this.actions.length-1].args;this.absellipse(a+h[h.length-2],b+h[h.length-1],c,d,e,f,g)};THREE.Path.prototype.absellipse=function(a,b,c,d,e,f,g){var h=Array.prototype.slice.call(arguments),k=new THREE.EllipseCurve(a,b,c,d,e,f,g);this.curves.push(k);k=k.getPoint(1);h.push(k.x);h.push(k.y);this.actions.push({action:THREE.PathActions.ELLIPSE,args:h})};
THREE.Path.prototype.getSpacedPoints=function(a,b){a||(a=40);for(var c=[],d=0;d<a;d++)c.push(this.getPoint(d/a));return c};
THREE.Path.prototype.getPoints=function(a,b){if(this.useSpacedPoints)return console.log("tata"),this.getSpacedPoints(a,b);a=a||12;var c=[],d,e,f,g,h,k,l,n,q,r,t,s,p;d=0;for(e=this.actions.length;d<e;d++)switch(f=this.actions[d],g=f.action,f=f.args,g){case THREE.PathActions.MOVE_TO:c.push(new THREE.Vector2(f[0],f[1]));break;case THREE.PathActions.LINE_TO:c.push(new THREE.Vector2(f[0],f[1]));break;case THREE.PathActions.QUADRATIC_CURVE_TO:h=f[2];k=f[3];q=f[0];r=f[1];0<c.length?(g=c[c.length-1],t=g.x,
s=g.y):(g=this.actions[d-1].args,t=g[g.length-2],s=g[g.length-1]);for(f=1;f<=a;f++)p=f/a,g=THREE.Shape.Utils.b2(p,t,q,h),p=THREE.Shape.Utils.b2(p,s,r,k),c.push(new THREE.Vector2(g,p));break;case THREE.PathActions.BEZIER_CURVE_TO:h=f[4];k=f[5];q=f[0];r=f[1];l=f[2];n=f[3];0<c.length?(g=c[c.length-1],t=g.x,s=g.y):(g=this.actions[d-1].args,t=g[g.length-2],s=g[g.length-1]);for(f=1;f<=a;f++)p=f/a,g=THREE.Shape.Utils.b3(p,t,q,l,h),p=THREE.Shape.Utils.b3(p,s,r,n,k),c.push(new THREE.Vector2(g,p));break;case THREE.PathActions.CSPLINE_THRU:g=
this.actions[d-1].args;p=[new THREE.Vector2(g[g.length-2],g[g.length-1])];g=a*f[0].length;p=p.concat(f[0]);p=new THREE.SplineCurve(p);for(f=1;f<=g;f++)c.push(p.getPointAt(f/g));break;case THREE.PathActions.ARC:h=f[0];k=f[1];r=f[2];l=f[3];g=f[4];q=!!f[5];t=g-l;s=2*a;for(f=1;f<=s;f++)p=f/s,q||(p=1-p),p=l+p*t,g=h+r*Math.cos(p),p=k+r*Math.sin(p),c.push(new THREE.Vector2(g,p));break;case THREE.PathActions.ELLIPSE:for(h=f[0],k=f[1],r=f[2],n=f[3],l=f[4],g=f[5],q=!!f[6],t=g-l,s=2*a,f=1;f<=s;f++)p=f/s,q||
(p=1-p),p=l+p*t,g=h+r*Math.cos(p),p=k+n*Math.sin(p),c.push(new THREE.Vector2(g,p))}d=c[c.length-1];1E-10>Math.abs(d.x-c[0].x)&&1E-10>Math.abs(d.y-c[0].y)&&c.splice(c.length-1,1);b&&c.push(c[0]);return c};
THREE.Path.prototype.toShapes=function(a,b){function c(a){for(var b=[],c=0,d=a.length;c<d;c++){var e=a[c],f=new THREE.Shape;f.actions=e.actions;f.curves=e.curves;b.push(f)}return b}function d(a,b){for(var c=b.length,d=!1,e=c-1,f=0;f<c;e=f++){var g=b[e],h=b[f],k=h.x-g.x,l=h.y-g.y;if(1E-10<Math.abs(l)){if(0>l&&(g=b[f],k=-k,h=b[e],l=-l),!(a.y<g.y||a.y>h.y))if(a.y==g.y){if(a.x==g.x)return!0}else{e=l*(a.x-g.x)-k*(a.y-g.y);if(0==e)return!0;0>e||(d=!d)}}else if(a.y==g.y&&(h.x<=a.x&&a.x<=g.x||g.x<=a.x&&a.x<=
h.x))return!0}return d}var e=function(a){var b,c,d,e,f=[],g=new THREE.Path;b=0;for(c=a.length;b<c;b++)d=a[b],e=d.args,d=d.action,d==THREE.PathActions.MOVE_TO&&0!=g.actions.length&&(f.push(g),g=new THREE.Path),g[d].apply(g,e);0!=g.actions.length&&f.push(g);return f}(this.actions);if(0==e.length)return[];if(!0===b)return c(e);var f,g,h,k=[];if(1==e.length)return g=e[0],h=new THREE.Shape,h.actions=g.actions,h.curves=g.curves,k.push(h),k;var l=!THREE.Shape.Utils.isClockWise(e[0].getPoints()),l=a?!l:l;
h=[];var n=[],q=[],r=0,t;n[r]=void 0;q[r]=[];var s,p;s=0;for(p=e.length;s<p;s++)g=e[s],t=g.getPoints(),f=THREE.Shape.Utils.isClockWise(t),(f=a?!f:f)?(!l&&n[r]&&r++,n[r]={s:new THREE.Shape,p:t},n[r].s.actions=g.actions,n[r].s.curves=g.curves,l&&r++,q[r]=[]):q[r].push({h:g,p:t[0]});if(!n[0])return c(e);if(1<n.length){s=!1;p=[];g=0;for(e=n.length;g<e;g++)h[g]=[];g=0;for(e=n.length;g<e;g++)for(f=q[g],l=0;l<f.length;l++){r=f[l];t=!0;for(var v=0;v<n.length;v++)d(r.p,n[v].p)&&(g!=v&&p.push({froms:g,tos:v,
hole:l}),t?(t=!1,h[v].push(r)):s=!0);t&&h[g].push(r)}0<p.length&&(s||(q=h))}s=0;for(p=n.length;s<p;s++)for(h=n[s].s,k.push(h),g=q[s],e=0,f=g.length;e<f;e++)h.holes.push(g[e].h);return k};THREE.Shape=function(){THREE.Path.apply(this,arguments);this.holes=[]};THREE.Shape.prototype=Object.create(THREE.Path.prototype);THREE.Shape.prototype.extrude=function(a){return new THREE.ExtrudeGeometry(this,a)};THREE.Shape.prototype.makeGeometry=function(a){return new THREE.ShapeGeometry(this,a)};
THREE.Shape.prototype.getPointsHoles=function(a){var b,c=this.holes.length,d=[];for(b=0;b<c;b++)d[b]=this.holes[b].getTransformedPoints(a,this.bends);return d};THREE.Shape.prototype.getSpacedPointsHoles=function(a){var b,c=this.holes.length,d=[];for(b=0;b<c;b++)d[b]=this.holes[b].getTransformedSpacedPoints(a,this.bends);return d};THREE.Shape.prototype.extractAllPoints=function(a){return{shape:this.getTransformedPoints(a),holes:this.getPointsHoles(a)}};
THREE.Shape.prototype.extractPoints=function(a){return this.useSpacedPoints?this.extractAllSpacedPoints(a):this.extractAllPoints(a)};THREE.Shape.prototype.extractAllSpacedPoints=function(a){return{shape:this.getTransformedSpacedPoints(a),holes:this.getSpacedPointsHoles(a)}};
THREE.Shape.Utils={triangulateShape:function(a,b){function c(a,b,c){return a.x!=b.x?a.x<b.x?a.x<=c.x&&c.x<=b.x:b.x<=c.x&&c.x<=a.x:a.y<b.y?a.y<=c.y&&c.y<=b.y:b.y<=c.y&&c.y<=a.y}function d(a,b,d,e,f){var g=b.x-a.x,h=b.y-a.y,k=e.x-d.x,l=e.y-d.y,n=a.x-d.x,q=a.y-d.y,I=h*k-g*l,z=h*n-g*q;if(1E-10<Math.abs(I)){if(0<I){if(0>z||z>I)return[];k=l*n-k*q;if(0>k||k>I)return[]}else{if(0<z||z<I)return[];k=l*n-k*q;if(0<k||k<I)return[]}if(0==k)return!f||0!=z&&z!=I?[a]:[];if(k==I)return!f||0!=z&&z!=I?[b]:[];if(0==z)return[d];
if(z==I)return[e];f=k/I;return[{x:a.x+f*g,y:a.y+f*h}]}if(0!=z||l*n!=k*q)return[];h=0==g&&0==h;k=0==k&&0==l;if(h&&k)return a.x!=d.x||a.y!=d.y?[]:[a];if(h)return c(d,e,a)?[a]:[];if(k)return c(a,b,d)?[d]:[];0!=g?(a.x<b.x?(g=a,k=a.x,h=b,a=b.x):(g=b,k=b.x,h=a,a=a.x),d.x<e.x?(b=d,I=d.x,l=e,d=e.x):(b=e,I=e.x,l=d,d=d.x)):(a.y<b.y?(g=a,k=a.y,h=b,a=b.y):(g=b,k=b.y,h=a,a=a.y),d.y<e.y?(b=d,I=d.y,l=e,d=e.y):(b=e,I=e.y,l=d,d=d.y));return k<=I?a<I?[]:a==I?f?[]:[b]:a<=d?[b,h]:[b,l]:k>d?[]:k==d?f?[]:[g]:a<=d?[g,h]:
[g,l]}function e(a,b,c,d){var e=b.x-a.x,f=b.y-a.y;b=c.x-a.x;c=c.y-a.y;var g=d.x-a.x;d=d.y-a.y;a=e*c-f*b;e=e*d-f*g;return 1E-10<Math.abs(a)?(b=g*c-d*b,0<a?0<=e&&0<=b:0<=e||0<=b):0<e}var f,g,h,k,l,n={};h=a.concat();f=0;for(g=b.length;f<g;f++)Array.prototype.push.apply(h,b[f]);f=0;for(g=h.length;f<g;f++)l=h[f].x+":"+h[f].y,void 0!==n[l]&&console.log("Duplicate point",l),n[l]=f;f=function(a,b){function c(a,b){var d=h.length-1,f=a-1;0>f&&(f=d);var g=a+1;g>d&&(g=0);d=e(h[a],h[f],h[g],k[b]);if(!d)return!1;
d=k.length-1;f=b-1;0>f&&(f=d);g=b+1;g>d&&(g=0);return(d=e(k[b],k[f],k[g],h[a]))?!0:!1}function f(a,b){var c,e;for(c=0;c<h.length;c++)if(e=c+1,e%=h.length,e=d(a,b,h[c],h[e],!0),0<e.length)return!0;return!1}function g(a,c){var e,f,h,k;for(e=0;e<l.length;e++)for(f=b[l[e]],h=0;h<f.length;h++)if(k=h+1,k%=f.length,k=d(a,c,f[h],f[k],!0),0<k.length)return!0;return!1}var h=a.concat(),k,l=[],n,q,C,I,z,y=[],K,N,ba,P=0;for(n=b.length;P<n;P++)l.push(P);K=0;for(var O=2*l.length;0<l.length;){O--;if(0>O){console.log("Infinite Loop! Holes left:"+
l.length+", Probably Hole outside Shape!");break}for(q=K;q<h.length;q++){C=h[q];n=-1;for(P=0;P<l.length;P++)if(I=l[P],z=C.x+":"+C.y+":"+I,void 0===y[z]){k=b[I];for(N=0;N<k.length;N++)if(I=k[N],c(q,N)&&!f(C,I)&&!g(C,I)){n=N;l.splice(P,1);K=h.slice(0,q+1);I=h.slice(q);N=k.slice(n);ba=k.slice(0,n+1);h=K.concat(N).concat(ba).concat(I);K=q;break}if(0<=n)break;y[z]=!0}if(0<=n)break}}return h}(a,b);var q=THREE.FontUtils.Triangulate(f,!1);f=0;for(g=q.length;f<g;f++)for(k=q[f],h=0;3>h;h++)l=k[h].x+":"+k[h].y,
l=n[l],void 0!==l&&(k[h]=l);return q.concat()},isClockWise:function(a){return 0>THREE.FontUtils.Triangulate.area(a)},b2p0:function(a,b){var c=1-a;return c*c*b},b2p1:function(a,b){return 2*(1-a)*a*b},b2p2:function(a,b){return a*a*b},b2:function(a,b,c,d){return this.b2p0(a,b)+this.b2p1(a,c)+this.b2p2(a,d)},b3p0:function(a,b){var c=1-a;return c*c*c*b},b3p1:function(a,b){var c=1-a;return 3*c*c*a*b},b3p2:function(a,b){return 3*(1-a)*a*a*b},b3p3:function(a,b){return a*a*a*b},b3:function(a,b,c,d,e){return this.b3p0(a,
b)+this.b3p1(a,c)+this.b3p2(a,d)+this.b3p3(a,e)}};THREE.LineCurve=function(a,b){this.v1=a;this.v2=b};THREE.LineCurve.prototype=Object.create(THREE.Curve.prototype);THREE.LineCurve.prototype.getPoint=function(a){var b=this.v2.clone().sub(this.v1);b.multiplyScalar(a).add(this.v1);return b};THREE.LineCurve.prototype.getPointAt=function(a){return this.getPoint(a)};THREE.LineCurve.prototype.getTangent=function(a){return this.v2.clone().sub(this.v1).normalize()};
THREE.QuadraticBezierCurve=function(a,b,c){this.v0=a;this.v1=b;this.v2=c};THREE.QuadraticBezierCurve.prototype=Object.create(THREE.Curve.prototype);THREE.QuadraticBezierCurve.prototype.getPoint=function(a){var b;b=THREE.Shape.Utils.b2(a,this.v0.x,this.v1.x,this.v2.x);a=THREE.Shape.Utils.b2(a,this.v0.y,this.v1.y,this.v2.y);return new THREE.Vector2(b,a)};
THREE.QuadraticBezierCurve.prototype.getTangent=function(a){var b;b=THREE.Curve.Utils.tangentQuadraticBezier(a,this.v0.x,this.v1.x,this.v2.x);a=THREE.Curve.Utils.tangentQuadraticBezier(a,this.v0.y,this.v1.y,this.v2.y);b=new THREE.Vector2(b,a);b.normalize();return b};THREE.CubicBezierCurve=function(a,b,c,d){this.v0=a;this.v1=b;this.v2=c;this.v3=d};THREE.CubicBezierCurve.prototype=Object.create(THREE.Curve.prototype);
THREE.CubicBezierCurve.prototype.getPoint=function(a){var b;b=THREE.Shape.Utils.b3(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x);a=THREE.Shape.Utils.b3(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y);return new THREE.Vector2(b,a)};THREE.CubicBezierCurve.prototype.getTangent=function(a){var b;b=THREE.Curve.Utils.tangentCubicBezier(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x);a=THREE.Curve.Utils.tangentCubicBezier(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y);b=new THREE.Vector2(b,a);b.normalize();return b};
THREE.SplineCurve=function(a){this.points=void 0==a?[]:a};THREE.SplineCurve.prototype=Object.create(THREE.Curve.prototype);THREE.SplineCurve.prototype.getPoint=function(a){var b=new THREE.Vector2,c=[],d=this.points,e;e=(d.length-1)*a;a=Math.floor(e);e-=a;c[0]=0==a?a:a-1;c[1]=a;c[2]=a>d.length-2?d.length-1:a+1;c[3]=a>d.length-3?d.length-1:a+2;b.x=THREE.Curve.Utils.interpolate(d[c[0]].x,d[c[1]].x,d[c[2]].x,d[c[3]].x,e);b.y=THREE.Curve.Utils.interpolate(d[c[0]].y,d[c[1]].y,d[c[2]].y,d[c[3]].y,e);return b};
THREE.EllipseCurve=function(a,b,c,d,e,f,g){this.aX=a;this.aY=b;this.xRadius=c;this.yRadius=d;this.aStartAngle=e;this.aEndAngle=f;this.aClockwise=g};THREE.EllipseCurve.prototype=Object.create(THREE.Curve.prototype);
THREE.EllipseCurve.prototype.getPoint=function(a){var b;b=this.aEndAngle-this.aStartAngle;0>b&&(b+=2*Math.PI);b>2*Math.PI&&(b-=2*Math.PI);b=!0===this.aClockwise?this.aEndAngle+(1-a)*(2*Math.PI-b):this.aStartAngle+a*b;a=this.aX+this.xRadius*Math.cos(b);b=this.aY+this.yRadius*Math.sin(b);return new THREE.Vector2(a,b)};THREE.ArcCurve=function(a,b,c,d,e,f){THREE.EllipseCurve.call(this,a,b,c,c,d,e,f)};THREE.ArcCurve.prototype=Object.create(THREE.EllipseCurve.prototype);
THREE.LineCurve3=THREE.Curve.create(function(a,b){this.v1=a;this.v2=b},function(a){var b=new THREE.Vector3;b.subVectors(this.v2,this.v1);b.multiplyScalar(a);b.add(this.v1);return b});THREE.QuadraticBezierCurve3=THREE.Curve.create(function(a,b,c){this.v0=a;this.v1=b;this.v2=c},function(a){var b,c;b=THREE.Shape.Utils.b2(a,this.v0.x,this.v1.x,this.v2.x);c=THREE.Shape.Utils.b2(a,this.v0.y,this.v1.y,this.v2.y);a=THREE.Shape.Utils.b2(a,this.v0.z,this.v1.z,this.v2.z);return new THREE.Vector3(b,c,a)});
THREE.CubicBezierCurve3=THREE.Curve.create(function(a,b,c,d){this.v0=a;this.v1=b;this.v2=c;this.v3=d},function(a){var b,c;b=THREE.Shape.Utils.b3(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x);c=THREE.Shape.Utils.b3(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y);a=THREE.Shape.Utils.b3(a,this.v0.z,this.v1.z,this.v2.z,this.v3.z);return new THREE.Vector3(b,c,a)});
THREE.SplineCurve3=THREE.Curve.create(function(a){this.points=void 0==a?[]:a},function(a){var b=new THREE.Vector3,c=[],d=this.points,e;a*=d.length-1;e=Math.floor(a);a-=e;c[0]=0==e?e:e-1;c[1]=e;c[2]=e>d.length-2?d.length-1:e+1;c[3]=e>d.length-3?d.length-1:e+2;e=d[c[0]];var f=d[c[1]],g=d[c[2]],c=d[c[3]];b.x=THREE.Curve.Utils.interpolate(e.x,f.x,g.x,c.x,a);b.y=THREE.Curve.Utils.interpolate(e.y,f.y,g.y,c.y,a);b.z=THREE.Curve.Utils.interpolate(e.z,f.z,g.z,c.z,a);return b});
THREE.ClosedSplineCurve3=THREE.Curve.create(function(a){this.points=void 0==a?[]:a},function(a){var b=new THREE.Vector3,c=[],d=this.points,e;e=(d.length-0)*a;a=Math.floor(e);e-=a;a+=0<a?0:(Math.floor(Math.abs(a)/d.length)+1)*d.length;c[0]=(a-1)%d.length;c[1]=a%d.length;c[2]=(a+1)%d.length;c[3]=(a+2)%d.length;b.x=THREE.Curve.Utils.interpolate(d[c[0]].x,d[c[1]].x,d[c[2]].x,d[c[3]].x,e);b.y=THREE.Curve.Utils.interpolate(d[c[0]].y,d[c[1]].y,d[c[2]].y,d[c[3]].y,e);b.z=THREE.Curve.Utils.interpolate(d[c[0]].z,
d[c[1]].z,d[c[2]].z,d[c[3]].z,e);return b});
THREE.AnimationHandler={LINEAR:0,CATMULLROM:1,CATMULLROM_FORWARD:2,add:function(){console.warn("THREE.AnimationHandler.add() has been deprecated.")},get:function(){console.warn("THREE.AnimationHandler.get() has been deprecated.")},remove:function(){console.warn("THREE.AnimationHandler.remove() has been deprecated.")},animations:[],init:function(a){if(!0!==a.initialized){for(var b=0;b<a.hierarchy.length;b++){for(var c=0;c<a.hierarchy[b].keys.length;c++)if(0>a.hierarchy[b].keys[c].time&&(a.hierarchy[b].keys[c].time=
0),void 0!==a.hierarchy[b].keys[c].rot&&!(a.hierarchy[b].keys[c].rot instanceof THREE.Quaternion)){var d=a.hierarchy[b].keys[c].rot;a.hierarchy[b].keys[c].rot=(new THREE.Quaternion).fromArray(d)}if(a.hierarchy[b].keys.length&&void 0!==a.hierarchy[b].keys[0].morphTargets){d={};for(c=0;c<a.hierarchy[b].keys.length;c++)for(var e=0;e<a.hierarchy[b].keys[c].morphTargets.length;e++){var f=a.hierarchy[b].keys[c].morphTargets[e];d[f]=-1}a.hierarchy[b].usedMorphTargets=d;for(c=0;c<a.hierarchy[b].keys.length;c++){var g=
{};for(f in d){for(e=0;e<a.hierarchy[b].keys[c].morphTargets.length;e++)if(a.hierarchy[b].keys[c].morphTargets[e]===f){g[f]=a.hierarchy[b].keys[c].morphTargetsInfluences[e];break}e===a.hierarchy[b].keys[c].morphTargets.length&&(g[f]=0)}a.hierarchy[b].keys[c].morphTargetsInfluences=g}}for(c=1;c<a.hierarchy[b].keys.length;c++)a.hierarchy[b].keys[c].time===a.hierarchy[b].keys[c-1].time&&(a.hierarchy[b].keys.splice(c,1),c--);for(c=0;c<a.hierarchy[b].keys.length;c++)a.hierarchy[b].keys[c].index=c}a.initialized=
!0;return a}},parse:function(a){var b=function(a,c){c.push(a);for(var d=0;d<a.children.length;d++)b(a.children[d],c)},c=[];if(a instanceof THREE.SkinnedMesh)for(var d=0;d<a.skeleton.bones.length;d++)c.push(a.skeleton.bones[d]);else b(a,c);return c},play:function(a){-1===this.animations.indexOf(a)&&this.animations.push(a)},stop:function(a){a=this.animations.indexOf(a);-1!==a&&this.animations.splice(a,1)},update:function(a){for(var b=0;b<this.animations.length;b++)this.animations[b].update(a)}};
THREE.Animation=function(a,b){this.root=a;this.data=THREE.AnimationHandler.init(b);this.hierarchy=THREE.AnimationHandler.parse(a);this.currentTime=0;this.timeScale=1;this.isPlaying=!1;this.loop=!0;this.weight=0;this.interpolationType=THREE.AnimationHandler.LINEAR};THREE.Animation.prototype.keyTypes=["pos","rot","scl"];THREE.Animation.prototype.play=function(a,b){this.currentTime=void 0!==a?a:0;this.weight=void 0!==b?b:1;this.isPlaying=!0;this.reset();THREE.AnimationHandler.play(this)};
THREE.Animation.prototype.stop=function(){this.isPlaying=!1;THREE.AnimationHandler.stop(this)};
THREE.Animation.prototype.reset=function(){for(var a=0,b=this.hierarchy.length;a<b;a++){var c=this.hierarchy[a];c.matrixAutoUpdate=!0;void 0===c.animationCache&&(c.animationCache={});void 0===c.animationCache[this.data.name]&&(c.animationCache[this.data.name]={},c.animationCache[this.data.name].prevKey={pos:0,rot:0,scl:0},c.animationCache[this.data.name].nextKey={pos:0,rot:0,scl:0},c.animationCache[this.data.name].originalMatrix=c.matrix);for(var c=c.animationCache[this.data.name],d=0;3>d;d++){for(var e=
this.keyTypes[d],f=this.data.hierarchy[a].keys[0],g=this.getNextKeyWith(e,a,1);g.time<this.currentTime&&g.index>f.index;)f=g,g=this.getNextKeyWith(e,a,g.index+1);c.prevKey[e]=f;c.nextKey[e]=g}}};
THREE.Animation.prototype.update=function(){var a=[],b=new THREE.Vector3,c=new THREE.Vector3,d=new THREE.Quaternion,e=function(a,b){var c=[],d=[],e,q,r,t,s,p;e=(a.length-1)*b;q=Math.floor(e);e-=q;c[0]=0===q?q:q-1;c[1]=q;c[2]=q>a.length-2?q:q+1;c[3]=q>a.length-3?q:q+2;q=a[c[0]];t=a[c[1]];s=a[c[2]];p=a[c[3]];c=e*e;r=e*c;d[0]=f(q[0],t[0],s[0],p[0],e,c,r);d[1]=f(q[1],t[1],s[1],p[1],e,c,r);d[2]=f(q[2],t[2],s[2],p[2],e,c,r);return d},f=function(a,b,c,d,e,f,r){a=0.5*(c-a);d=0.5*(d-b);return(2*(b-c)+a+d)*
r+(-3*(b-c)-2*a-d)*f+a*e+b};return function(f){if(!1!==this.isPlaying&&(this.currentTime+=f*this.timeScale,0!==this.weight)){f=this.data.length;if(!0===this.loop&&this.currentTime>f)this.currentTime%=f,this.reset();else if(!1===this.loop&&this.currentTime>f){this.stop();return}f=0;for(var h=this.hierarchy.length;f<h;f++)for(var k=this.hierarchy[f],l=k.animationCache[this.data.name],n=0;3>n;n++){var q=this.keyTypes[n],r=l.prevKey[q],t=l.nextKey[q];if(t.time<=this.currentTime){r=this.data.hierarchy[f].keys[0];
for(t=this.getNextKeyWith(q,f,1);t.time<this.currentTime&&t.index>r.index;)r=t,t=this.getNextKeyWith(q,f,t.index+1);l.prevKey[q]=r;l.nextKey[q]=t}k.matrixAutoUpdate=!0;k.matrixWorldNeedsUpdate=!0;var s=(this.currentTime-r.time)/(t.time-r.time),p=r[q],v=t[q];0>s&&(s=0);1<s&&(s=1);if("pos"===q)if(this.interpolationType===THREE.AnimationHandler.LINEAR)c.x=p[0]+(v[0]-p[0])*s,c.y=p[1]+(v[1]-p[1])*s,c.z=p[2]+(v[2]-p[2])*s,k instanceof THREE.Bone?(r=this.weight/(this.weight+k.accumulatedPosWeight),k.position.lerp(c,
r),k.accumulatedPosWeight+=this.weight):k.position.copy(c);else{if(this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD)a[0]=this.getPrevKeyWith("pos",f,r.index-1).pos,a[1]=p,a[2]=v,a[3]=this.getNextKeyWith("pos",f,t.index+1).pos,s=0.33*s+0.33,t=e(a,s),r=1,k instanceof THREE.Bone&&(r=this.weight/(this.weight+k.accumulatedPosWeight),k.accumulatedPosWeight+=this.weight),q=k.position,q.x+=(t[0]-q.x)*r,q.y+=(t[1]-q.y)*r,q.z+=(t[2]-
q.z)*r,this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD&&(s=e(a,1.01*s),b.set(s[0],s[1],s[2]),b.sub(q),b.y=0,b.normalize(),s=Math.atan2(b.x,b.z),k.rotation.set(0,s,0))}else"rot"===q?(THREE.Quaternion.slerp(p,v,d,s),k instanceof THREE.Bone?0===k.accumulatedRotWeight?(k.quaternion.copy(d),k.accumulatedRotWeight=this.weight):(r=this.weight/(this.weight+k.accumulatedRotWeight),THREE.Quaternion.slerp(k.quaternion,d,k.quaternion,r),k.accumulatedRotWeight+=this.weight):k.quaternion.copy(d)):
"scl"===q&&(c.x=p[0]+(v[0]-p[0])*s,c.y=p[1]+(v[1]-p[1])*s,c.z=p[2]+(v[2]-p[2])*s,k instanceof THREE.Bone?(r=this.weight/(this.weight+k.accumulatedSclWeight),k.scale.lerp(c,r),k.accumulatedSclWeight+=this.weight):k.scale.copy(c))}return!0}}}();
THREE.Animation.prototype.getNextKeyWith=function(a,b,c){var d=this.data.hierarchy[b].keys;for(c=this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD?c<d.length-1?c:d.length-1:c%d.length;c<d.length;c++)if(void 0!==d[c][a])return d[c];return this.data.hierarchy[b].keys[0]};
THREE.Animation.prototype.getPrevKeyWith=function(a,b,c){var d=this.data.hierarchy[b].keys;for(c=this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD?0<c?c:0:0<=c?c:c+d.length;0<=c;c--)if(void 0!==d[c][a])return d[c];return this.data.hierarchy[b].keys[d.length-1]};
THREE.KeyFrameAnimation=function(a){this.root=a.node;this.data=THREE.AnimationHandler.init(a);this.hierarchy=THREE.AnimationHandler.parse(this.root);this.currentTime=0;this.timeScale=0.001;this.isPlaying=!1;this.loop=this.isPaused=!0;a=0;for(var b=this.hierarchy.length;a<b;a++){var c=this.data.hierarchy[a].sids,d=this.hierarchy[a];if(this.data.hierarchy[a].keys.length&&c){for(var e=0;e<c.length;e++){var f=c[e],g=this.getNextKeyWith(f,a,0);g&&g.apply(f)}d.matrixAutoUpdate=!1;this.data.hierarchy[a].node.updateMatrix();
d.matrixWorldNeedsUpdate=!0}}};
THREE.KeyFrameAnimation.prototype.play=function(a){this.currentTime=void 0!==a?a:0;if(!1===this.isPlaying){this.isPlaying=!0;var b=this.hierarchy.length,c,d;for(a=0;a<b;a++)c=this.hierarchy[a],d=this.data.hierarchy[a],void 0===d.animationCache&&(d.animationCache={},d.animationCache.prevKey=null,d.animationCache.nextKey=null,d.animationCache.originalMatrix=c.matrix),c=this.data.hierarchy[a].keys,c.length&&(d.animationCache.prevKey=c[0],d.animationCache.nextKey=c[1],this.startTime=Math.min(c[0].time,
this.startTime),this.endTime=Math.max(c[c.length-1].time,this.endTime));this.update(0)}this.isPaused=!1;THREE.AnimationHandler.play(this)};THREE.KeyFrameAnimation.prototype.stop=function(){this.isPaused=this.isPlaying=!1;THREE.AnimationHandler.stop(this);for(var a=0;a<this.data.hierarchy.length;a++){var b=this.hierarchy[a],c=this.data.hierarchy[a];if(void 0!==c.animationCache){var d=c.animationCache.originalMatrix;d.copy(b.matrix);b.matrix=d;delete c.animationCache}}};
THREE.KeyFrameAnimation.prototype.update=function(a){if(!1!==this.isPlaying){this.currentTime+=a*this.timeScale;a=this.data.length;!0===this.loop&&this.currentTime>a&&(this.currentTime%=a);this.currentTime=Math.min(this.currentTime,a);a=0;for(var b=this.hierarchy.length;a<b;a++){var c=this.hierarchy[a],d=this.data.hierarchy[a],e=d.keys,d=d.animationCache;if(e.length){var f=d.prevKey,g=d.nextKey;if(g.time<=this.currentTime){for(;g.time<this.currentTime&&g.index>f.index;)f=g,g=e[f.index+1];d.prevKey=
f;d.nextKey=g}g.time>=this.currentTime?f.interpolate(g,this.currentTime):f.interpolate(g,g.time);this.data.hierarchy[a].node.updateMatrix();c.matrixWorldNeedsUpdate=!0}}}};THREE.KeyFrameAnimation.prototype.getNextKeyWith=function(a,b,c){b=this.data.hierarchy[b].keys;for(c%=b.length;c<b.length;c++)if(b[c].hasTarget(a))return b[c];return b[0]};
THREE.KeyFrameAnimation.prototype.getPrevKeyWith=function(a,b,c){b=this.data.hierarchy[b].keys;for(c=0<=c?c:c+b.length;0<=c;c--)if(b[c].hasTarget(a))return b[c];return b[b.length-1]};THREE.MorphAnimation=function(a){this.mesh=a;this.frames=a.morphTargetInfluences.length;this.currentTime=0;this.duration=1E3;this.loop=!0;this.isPlaying=!1};
THREE.MorphAnimation.prototype={play:function(){this.isPlaying=!0},pause:function(){this.isPlaying=!1},update:function(){var a=0,b=0;return function(c){if(!1!==this.isPlaying){this.currentTime+=c;!0===this.loop&&this.currentTime>this.duration&&(this.currentTime%=this.duration);this.currentTime=Math.min(this.currentTime,this.duration);c=this.duration/this.frames;var d=Math.floor(this.currentTime/c);d!=b&&(this.mesh.morphTargetInfluences[a]=0,this.mesh.morphTargetInfluences[b]=1,this.mesh.morphTargetInfluences[d]=
0,a=b,b=d);this.mesh.morphTargetInfluences[d]=this.currentTime%c/c;this.mesh.morphTargetInfluences[a]=1-this.mesh.morphTargetInfluences[d]}}}()};
THREE.BoxGeometry=function(a,b,c,d,e,f){function g(a,b,c,d,e,f,g,p){var v,w=h.widthSegments,u=h.heightSegments,D=e/2,A=f/2,x=h.vertices.length;if("x"===a&&"y"===b||"y"===a&&"x"===b)v="z";else if("x"===a&&"z"===b||"z"===a&&"x"===b)v="y",u=h.depthSegments;else if("z"===a&&"y"===b||"y"===a&&"z"===b)v="x",w=h.depthSegments;var C=w+1,I=u+1,z=e/w,y=f/u,K=new THREE.Vector3;K[v]=0<g?1:-1;for(e=0;e<I;e++)for(f=0;f<C;f++){var N=new THREE.Vector3;N[a]=(f*z-D)*c;N[b]=(e*y-A)*d;N[v]=g;h.vertices.push(N)}for(e=
0;e<u;e++)for(f=0;f<w;f++)A=f+C*e,a=f+C*(e+1),b=f+1+C*(e+1),c=f+1+C*e,d=new THREE.Vector2(f/w,1-e/u),g=new THREE.Vector2(f/w,1-(e+1)/u),v=new THREE.Vector2((f+1)/w,1-(e+1)/u),D=new THREE.Vector2((f+1)/w,1-e/u),A=new THREE.Face3(A+x,a+x,c+x),A.normal.copy(K),A.vertexNormals.push(K.clone(),K.clone(),K.clone()),A.materialIndex=p,h.faces.push(A),h.faceVertexUvs[0].push([d,g,D]),A=new THREE.Face3(a+x,b+x,c+x),A.normal.copy(K),A.vertexNormals.push(K.clone(),K.clone(),K.clone()),A.materialIndex=p,h.faces.push(A),
h.faceVertexUvs[0].push([g.clone(),v,D.clone()])}THREE.Geometry.call(this);this.parameters={width:a,height:b,depth:c,widthSegments:d,heightSegments:e,depthSegments:f};this.widthSegments=d||1;this.heightSegments=e||1;this.depthSegments=f||1;var h=this;d=a/2;e=b/2;f=c/2;g("z","y",-1,-1,c,b,d,0);g("z","y",1,-1,c,b,-d,1);g("x","z",1,1,a,c,e,2);g("x","z",1,-1,a,c,-e,3);g("x","y",1,-1,a,b,f,4);g("x","y",-1,-1,a,b,-f,5);this.mergeVertices()};THREE.BoxGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.CircleGeometry=function(a,b,c,d){THREE.Geometry.call(this);this.parameters={radius:a,segments:b,thetaStart:c,thetaLength:d};a=a||50;b=void 0!==b?Math.max(3,b):8;c=void 0!==c?c:0;d=void 0!==d?d:2*Math.PI;var e,f=[];e=new THREE.Vector3;var g=new THREE.Vector2(0.5,0.5);this.vertices.push(e);f.push(g);for(e=0;e<=b;e++){var h=new THREE.Vector3,k=c+e/b*d;h.x=a*Math.cos(k);h.y=a*Math.sin(k);this.vertices.push(h);f.push(new THREE.Vector2((h.x/a+1)/2,(h.y/a+1)/2))}c=new THREE.Vector3(0,0,1);for(e=1;e<=
b;e++)this.faces.push(new THREE.Face3(e,e+1,0,[c.clone(),c.clone(),c.clone()])),this.faceVertexUvs[0].push([f[e].clone(),f[e+1].clone(),g.clone()]);this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,a)};THREE.CircleGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.CubeGeometry=function(a,b,c,d,e,f){console.warn("THEE.CubeGeometry has been renamed to THREE.BoxGeometry.");return new THREE.BoxGeometry(a,b,c,d,e,f)};
THREE.CylinderGeometry=function(a,b,c,d,e,f){THREE.Geometry.call(this);this.parameters={radiusTop:a,radiusBottom:b,height:c,radialSegments:d,heightSegments:e,openEnded:f};a=void 0!==a?a:20;b=void 0!==b?b:20;c=void 0!==c?c:100;d=d||8;e=e||1;f=void 0!==f?f:!1;var g=c/2,h,k,l=[],n=[];for(k=0;k<=e;k++){var q=[],r=[],t=k/e,s=t*(b-a)+a;for(h=0;h<=d;h++){var p=h/d,v=new THREE.Vector3;v.x=s*Math.sin(p*Math.PI*2);v.y=-t*c+g;v.z=s*Math.cos(p*Math.PI*2);this.vertices.push(v);q.push(this.vertices.length-1);r.push(new THREE.Vector2(p,
1-t))}l.push(q);n.push(r)}c=(b-a)/c;for(h=0;h<d;h++)for(0!==a?(q=this.vertices[l[0][h]].clone(),r=this.vertices[l[0][h+1]].clone()):(q=this.vertices[l[1][h]].clone(),r=this.vertices[l[1][h+1]].clone()),q.setY(Math.sqrt(q.x*q.x+q.z*q.z)*c).normalize(),r.setY(Math.sqrt(r.x*r.x+r.z*r.z)*c).normalize(),k=0;k<e;k++){var t=l[k][h],s=l[k+1][h],p=l[k+1][h+1],v=l[k][h+1],w=q.clone(),u=q.clone(),D=r.clone(),A=r.clone(),x=n[k][h].clone(),C=n[k+1][h].clone(),I=n[k+1][h+1].clone(),z=n[k][h+1].clone();this.faces.push(new THREE.Face3(t,
s,v,[w,u,A]));this.faceVertexUvs[0].push([x,C,z]);this.faces.push(new THREE.Face3(s,p,v,[u.clone(),D,A.clone()]));this.faceVertexUvs[0].push([C.clone(),I,z.clone()])}if(!1===f&&0<a)for(this.vertices.push(new THREE.Vector3(0,g,0)),h=0;h<d;h++)t=l[0][h],s=l[0][h+1],p=this.vertices.length-1,w=new THREE.Vector3(0,1,0),u=new THREE.Vector3(0,1,0),D=new THREE.Vector3(0,1,0),x=n[0][h].clone(),C=n[0][h+1].clone(),I=new THREE.Vector2(C.x,0),this.faces.push(new THREE.Face3(t,s,p,[w,u,D])),this.faceVertexUvs[0].push([x,
C,I]);if(!1===f&&0<b)for(this.vertices.push(new THREE.Vector3(0,-g,0)),h=0;h<d;h++)t=l[k][h+1],s=l[k][h],p=this.vertices.length-1,w=new THREE.Vector3(0,-1,0),u=new THREE.Vector3(0,-1,0),D=new THREE.Vector3(0,-1,0),x=n[k][h+1].clone(),C=n[k][h].clone(),I=new THREE.Vector2(C.x,1),this.faces.push(new THREE.Face3(t,s,p,[w,u,D])),this.faceVertexUvs[0].push([x,C,I]);this.computeFaceNormals()};THREE.CylinderGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.ExtrudeGeometry=function(a,b){"undefined"!==typeof a&&(THREE.Geometry.call(this),a=a instanceof Array?a:[a],this.addShapeList(a,b),this.computeFaceNormals())};THREE.ExtrudeGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ExtrudeGeometry.prototype.addShapeList=function(a,b){for(var c=a.length,d=0;d<c;d++)this.addShape(a[d],b)};
THREE.ExtrudeGeometry.prototype.addShape=function(a,b){function c(a,b,c){b||console.log("die");return b.clone().multiplyScalar(c).add(a)}function d(a,b,c){var d=THREE.Math.sign,e=1,e=a.x-b.x,f=a.y-b.y,g=c.x-a.x,h=c.y-a.y,k=e*e+f*f;if(1E-10<Math.abs(e*h-f*g)){var l=Math.sqrt(k),d=Math.sqrt(g*g+h*h),k=b.x-f/l;b=b.y+e/l;g=((c.x-h/d-k)*h-(c.y+g/d-b)*g)/(e*h-f*g);c=k+e*g-a.x;a=b+f*g-a.y;e=c*c+a*a;if(2>=e)return new THREE.Vector2(c,a);e=Math.sqrt(e/2)}else a=!1,1E-10<e?1E-10<g&&(a=!0):-1E-10>e?-1E-10>g&&
(a=!0):d(f)==d(h)&&(a=!0),a?(c=-f,a=e,e=Math.sqrt(k)):(c=e,a=f,e=Math.sqrt(k/2));return new THREE.Vector2(c/e,a/e)}function e(c,d){var e,f;for(H=c.length;0<=--H;){e=H;f=H-1;0>f&&(f=c.length-1);for(var g=0,h=t+2*n,g=0;g<h;g++){var k=S*g,l=S*(g+1),p=d+e+k,k=d+f+k,q=d+f+l,l=d+e+l,r=c,s=g,v=h,w=e,x=f,p=p+ba,k=k+ba,q=q+ba,l=l+ba;N.faces.push(new THREE.Face3(p,k,l,null,null,u));N.faces.push(new THREE.Face3(k,q,l,null,null,u));p=D.generateSideWallUV(N,a,r,b,p,k,q,l,s,v,w,x);N.faceVertexUvs[0].push([p[0],
p[1],p[3]]);N.faceVertexUvs[0].push([p[1],p[2],p[3]])}}}function f(a,b,c){N.vertices.push(new THREE.Vector3(a,b,c))}function g(c,d,e,f){c+=ba;d+=ba;e+=ba;N.faces.push(new THREE.Face3(c,d,e,null,null,w));c=f?D.generateBottomUV(N,a,b,c,d,e):D.generateTopUV(N,a,b,c,d,e);N.faceVertexUvs[0].push(c)}var h=void 0!==b.amount?b.amount:100,k=void 0!==b.bevelThickness?b.bevelThickness:6,l=void 0!==b.bevelSize?b.bevelSize:k-2,n=void 0!==b.bevelSegments?b.bevelSegments:3,q=void 0!==b.bevelEnabled?b.bevelEnabled:
!0,r=void 0!==b.curveSegments?b.curveSegments:12,t=void 0!==b.steps?b.steps:1,s=b.extrudePath,p,v=!1,w=b.material,u=b.extrudeMaterial,D=void 0!==b.UVGenerator?b.UVGenerator:THREE.ExtrudeGeometry.WorldUVGenerator,A,x,C,I;s&&(p=s.getSpacedPoints(t),v=!0,q=!1,A=void 0!==b.frames?b.frames:new THREE.TubeGeometry.FrenetFrames(s,t,!1),x=new THREE.Vector3,C=new THREE.Vector3,I=new THREE.Vector3);q||(l=k=n=0);var z,y,K,N=this,ba=this.vertices.length,s=a.extractPoints(r),r=s.shape,P=s.holes;if(s=!THREE.Shape.Utils.isClockWise(r)){r=
r.reverse();y=0;for(K=P.length;y<K;y++)z=P[y],THREE.Shape.Utils.isClockWise(z)&&(P[y]=z.reverse());s=!1}var O=THREE.Shape.Utils.triangulateShape(r,P),J=r;y=0;for(K=P.length;y<K;y++)z=P[y],r=r.concat(z);var E,Q,L,R,B,S=r.length,V,W=O.length,s=[],H=0;L=J.length;E=L-1;for(Q=H+1;H<L;H++,E++,Q++)E===L&&(E=0),Q===L&&(Q=0),s[H]=d(J[H],J[E],J[Q]);var oa=[],$,X=s.concat();y=0;for(K=P.length;y<K;y++){z=P[y];$=[];H=0;L=z.length;E=L-1;for(Q=H+1;H<L;H++,E++,Q++)E===L&&(E=0),Q===L&&(Q=0),$[H]=d(z[H],z[E],z[Q]);
oa.push($);X=X.concat($)}for(E=0;E<n;E++){L=E/n;R=k*(1-L);Q=l*Math.sin(L*Math.PI/2);H=0;for(L=J.length;H<L;H++)B=c(J[H],s[H],Q),f(B.x,B.y,-R);y=0;for(K=P.length;y<K;y++)for(z=P[y],$=oa[y],H=0,L=z.length;H<L;H++)B=c(z[H],$[H],Q),f(B.x,B.y,-R)}Q=l;for(H=0;H<S;H++)B=q?c(r[H],X[H],Q):r[H],v?(C.copy(A.normals[0]).multiplyScalar(B.x),x.copy(A.binormals[0]).multiplyScalar(B.y),I.copy(p[0]).add(C).add(x),f(I.x,I.y,I.z)):f(B.x,B.y,0);for(L=1;L<=t;L++)for(H=0;H<S;H++)B=q?c(r[H],X[H],Q):r[H],v?(C.copy(A.normals[L]).multiplyScalar(B.x),
x.copy(A.binormals[L]).multiplyScalar(B.y),I.copy(p[L]).add(C).add(x),f(I.x,I.y,I.z)):f(B.x,B.y,h/t*L);for(E=n-1;0<=E;E--){L=E/n;R=k*(1-L);Q=l*Math.sin(L*Math.PI/2);H=0;for(L=J.length;H<L;H++)B=c(J[H],s[H],Q),f(B.x,B.y,h+R);y=0;for(K=P.length;y<K;y++)for(z=P[y],$=oa[y],H=0,L=z.length;H<L;H++)B=c(z[H],$[H],Q),v?f(B.x,B.y+p[t-1].y,p[t-1].x+R):f(B.x,B.y,h+R)}(function(){if(q){var a;a=0*S;for(H=0;H<W;H++)V=O[H],g(V[2]+a,V[1]+a,V[0]+a,!0);a=t+2*n;a*=S;for(H=0;H<W;H++)V=O[H],g(V[0]+a,V[1]+a,V[2]+a,!1)}else{for(H=
0;H<W;H++)V=O[H],g(V[2],V[1],V[0],!0);for(H=0;H<W;H++)V=O[H],g(V[0]+S*t,V[1]+S*t,V[2]+S*t,!1)}})();(function(){var a=0;e(J,a);a+=J.length;y=0;for(K=P.length;y<K;y++)z=P[y],e(z,a),a+=z.length})()};
THREE.ExtrudeGeometry.WorldUVGenerator={generateTopUV:function(a,b,c,d,e,f){b=a.vertices[e].x;e=a.vertices[e].y;c=a.vertices[f].x;f=a.vertices[f].y;return[new THREE.Vector2(a.vertices[d].x,a.vertices[d].y),new THREE.Vector2(b,e),new THREE.Vector2(c,f)]},generateBottomUV:function(a,b,c,d,e,f){return this.generateTopUV(a,b,c,d,e,f)},generateSideWallUV:function(a,b,c,d,e,f,g,h,k,l,n,q){b=a.vertices[e].x;c=a.vertices[e].y;e=a.vertices[e].z;d=a.vertices[f].x;k=a.vertices[f].y;f=a.vertices[f].z;l=a.vertices[g].x;
n=a.vertices[g].y;g=a.vertices[g].z;q=a.vertices[h].x;var r=a.vertices[h].y;a=a.vertices[h].z;return 0.01>Math.abs(c-k)?[new THREE.Vector2(b,1-e),new THREE.Vector2(d,1-f),new THREE.Vector2(l,1-g),new THREE.Vector2(q,1-a)]:[new THREE.Vector2(c,1-e),new THREE.Vector2(k,1-f),new THREE.Vector2(n,1-g),new THREE.Vector2(r,1-a)]}};THREE.ExtrudeGeometry.__v1=new THREE.Vector2;THREE.ExtrudeGeometry.__v2=new THREE.Vector2;THREE.ExtrudeGeometry.__v3=new THREE.Vector2;THREE.ExtrudeGeometry.__v4=new THREE.Vector2;
THREE.ExtrudeGeometry.__v5=new THREE.Vector2;THREE.ExtrudeGeometry.__v6=new THREE.Vector2;THREE.ShapeGeometry=function(a,b){THREE.Geometry.call(this);!1===a instanceof Array&&(a=[a]);this.addShapeList(a,b);this.computeFaceNormals()};THREE.ShapeGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ShapeGeometry.prototype.addShapeList=function(a,b){for(var c=0,d=a.length;c<d;c++)this.addShape(a[c],b);return this};
THREE.ShapeGeometry.prototype.addShape=function(a,b){void 0===b&&(b={});var c=b.material,d=void 0===b.UVGenerator?THREE.ExtrudeGeometry.WorldUVGenerator:b.UVGenerator,e,f,g,h=this.vertices.length;e=a.extractPoints(void 0!==b.curveSegments?b.curveSegments:12);var k=e.shape,l=e.holes;if(!THREE.Shape.Utils.isClockWise(k))for(k=k.reverse(),e=0,f=l.length;e<f;e++)g=l[e],THREE.Shape.Utils.isClockWise(g)&&(l[e]=g.reverse());var n=THREE.Shape.Utils.triangulateShape(k,l);e=0;for(f=l.length;e<f;e++)g=l[e],
k=k.concat(g);l=k.length;f=n.length;for(e=0;e<l;e++)g=k[e],this.vertices.push(new THREE.Vector3(g.x,g.y,0));for(e=0;e<f;e++)l=n[e],k=l[0]+h,g=l[1]+h,l=l[2]+h,this.faces.push(new THREE.Face3(k,g,l,null,null,c)),this.faceVertexUvs[0].push(d.generateBottomUV(this,a,b,k,g,l))};
THREE.LatheGeometry=function(a,b,c,d){THREE.Geometry.call(this);b=b||12;c=c||0;d=d||2*Math.PI;for(var e=1/(a.length-1),f=1/b,g=0,h=b;g<=h;g++)for(var k=c+g*f*d,l=Math.cos(k),n=Math.sin(k),k=0,q=a.length;k<q;k++){var r=a[k],t=new THREE.Vector3;t.x=l*r.x-n*r.y;t.y=n*r.x+l*r.y;t.z=r.z;this.vertices.push(t)}c=a.length;g=0;for(h=b;g<h;g++)for(k=0,q=a.length-1;k<q;k++){b=n=k+c*g;d=n+c;var l=n+1+c,n=n+1,r=g*f,t=k*e,s=r+f,p=t+e;this.faces.push(new THREE.Face3(b,d,n));this.faceVertexUvs[0].push([new THREE.Vector2(r,
t),new THREE.Vector2(s,t),new THREE.Vector2(r,p)]);this.faces.push(new THREE.Face3(d,l,n));this.faceVertexUvs[0].push([new THREE.Vector2(s,t),new THREE.Vector2(s,p),new THREE.Vector2(r,p)])}this.mergeVertices();this.computeFaceNormals();this.computeVertexNormals()};THREE.LatheGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.PlaneGeometry=function(a,b,c,d){THREE.Geometry.call(this);this.parameters={width:a,height:b,widthSegments:c,heightSegments:d};var e=a/2,f=b/2;c=c||1;d=d||1;var g=c+1,h=d+1,k=a/c,l=b/d,n=new THREE.Vector3(0,0,1);for(a=0;a<h;a++){var q=a*l-f;for(b=0;b<g;b++)this.vertices.push(new THREE.Vector3(b*k-e,-q,0))}for(a=0;a<d;a++)for(b=0;b<c;b++){var r=b+g*a,e=b+g*(a+1),f=b+1+g*(a+1),h=b+1+g*a,k=new THREE.Vector2(b/c,1-a/d),l=new THREE.Vector2(b/c,1-(a+1)/d),q=new THREE.Vector2((b+1)/c,1-(a+1)/d),t=new THREE.Vector2((b+
1)/c,1-a/d),r=new THREE.Face3(r,e,h);r.normal.copy(n);r.vertexNormals.push(n.clone(),n.clone(),n.clone());this.faces.push(r);this.faceVertexUvs[0].push([k,l,t]);r=new THREE.Face3(e,f,h);r.normal.copy(n);r.vertexNormals.push(n.clone(),n.clone(),n.clone());this.faces.push(r);this.faceVertexUvs[0].push([l.clone(),q,t.clone()])}};THREE.PlaneGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.RingGeometry=function(a,b,c,d,e,f){THREE.Geometry.call(this);a=a||0;b=b||50;e=void 0!==e?e:0;f=void 0!==f?f:2*Math.PI;c=void 0!==c?Math.max(3,c):8;d=void 0!==d?Math.max(1,d):8;var g,h=[],k=a,l=(b-a)/d;for(a=0;a<d+1;a++){for(g=0;g<c+1;g++){var n=new THREE.Vector3,q=e+g/c*f;n.x=k*Math.cos(q);n.y=k*Math.sin(q);this.vertices.push(n);h.push(new THREE.Vector2((n.x/b+1)/2,(n.y/b+1)/2))}k+=l}b=new THREE.Vector3(0,0,1);for(a=0;a<d;a++)for(e=a*(c+1),g=0;g<c;g++)f=q=g+e,l=q+c+1,n=q+c+2,this.faces.push(new THREE.Face3(f,
l,n,[b.clone(),b.clone(),b.clone()])),this.faceVertexUvs[0].push([h[f].clone(),h[l].clone(),h[n].clone()]),f=q,l=q+c+2,n=q+1,this.faces.push(new THREE.Face3(f,l,n,[b.clone(),b.clone(),b.clone()])),this.faceVertexUvs[0].push([h[f].clone(),h[l].clone(),h[n].clone()]);this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,k)};THREE.RingGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.SphereGeometry=function(a,b,c,d,e,f,g){THREE.Geometry.call(this);this.parameters={radius:a,widthSegments:b,heightSegments:c,phiStart:d,phiLength:e,thetaStart:f,thetaLength:g};a=a||50;b=Math.max(3,Math.floor(b)||8);c=Math.max(2,Math.floor(c)||6);d=void 0!==d?d:0;e=void 0!==e?e:2*Math.PI;f=void 0!==f?f:0;g=void 0!==g?g:Math.PI;var h,k,l=[],n=[];for(k=0;k<=c;k++){var q=[],r=[];for(h=0;h<=b;h++){var t=h/b,s=k/c,p=new THREE.Vector3;p.x=-a*Math.cos(d+t*e)*Math.sin(f+s*g);p.y=a*Math.cos(f+s*g);p.z=
a*Math.sin(d+t*e)*Math.sin(f+s*g);this.vertices.push(p);q.push(this.vertices.length-1);r.push(new THREE.Vector2(t,1-s))}l.push(q);n.push(r)}for(k=0;k<c;k++)for(h=0;h<b;h++){d=l[k][h+1];e=l[k][h];f=l[k+1][h];g=l[k+1][h+1];var q=this.vertices[d].clone().normalize(),r=this.vertices[e].clone().normalize(),t=this.vertices[f].clone().normalize(),s=this.vertices[g].clone().normalize(),p=n[k][h+1].clone(),v=n[k][h].clone(),w=n[k+1][h].clone(),u=n[k+1][h+1].clone();Math.abs(this.vertices[d].y)===a?(p.x=(p.x+
v.x)/2,this.faces.push(new THREE.Face3(d,f,g,[q,t,s])),this.faceVertexUvs[0].push([p,w,u])):Math.abs(this.vertices[f].y)===a?(w.x=(w.x+u.x)/2,this.faces.push(new THREE.Face3(d,e,f,[q,r,t])),this.faceVertexUvs[0].push([p,v,w])):(this.faces.push(new THREE.Face3(d,e,g,[q,r,s])),this.faceVertexUvs[0].push([p,v,u]),this.faces.push(new THREE.Face3(e,f,g,[r.clone(),t,s.clone()])),this.faceVertexUvs[0].push([v.clone(),w,u.clone()]))}this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,
a)};THREE.SphereGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.TextGeometry=function(a,b){b=b||{};var c=THREE.FontUtils.generateShapes(a,b);b.amount=void 0!==b.height?b.height:50;void 0===b.bevelThickness&&(b.bevelThickness=10);void 0===b.bevelSize&&(b.bevelSize=8);void 0===b.bevelEnabled&&(b.bevelEnabled=!1);THREE.ExtrudeGeometry.call(this,c,b)};THREE.TextGeometry.prototype=Object.create(THREE.ExtrudeGeometry.prototype);
THREE.TorusGeometry=function(a,b,c,d,e){THREE.Geometry.call(this);this.parameters={radius:a,tube:b,radialSegments:c,tubularSegments:d,arc:e};a=a||100;b=b||40;c=c||8;d=d||6;e=e||2*Math.PI;for(var f=new THREE.Vector3,g=[],h=[],k=0;k<=c;k++)for(var l=0;l<=d;l++){var n=l/d*e,q=k/c*Math.PI*2;f.x=a*Math.cos(n);f.y=a*Math.sin(n);var r=new THREE.Vector3;r.x=(a+b*Math.cos(q))*Math.cos(n);r.y=(a+b*Math.cos(q))*Math.sin(n);r.z=b*Math.sin(q);this.vertices.push(r);g.push(new THREE.Vector2(l/d,k/c));h.push(r.clone().sub(f).normalize())}for(k=
1;k<=c;k++)for(l=1;l<=d;l++)a=(d+1)*k+l-1,b=(d+1)*(k-1)+l-1,e=(d+1)*(k-1)+l,f=(d+1)*k+l,n=new THREE.Face3(a,b,f,[h[a].clone(),h[b].clone(),h[f].clone()]),this.faces.push(n),this.faceVertexUvs[0].push([g[a].clone(),g[b].clone(),g[f].clone()]),n=new THREE.Face3(b,e,f,[h[b].clone(),h[e].clone(),h[f].clone()]),this.faces.push(n),this.faceVertexUvs[0].push([g[b].clone(),g[e].clone(),g[f].clone()]);this.computeFaceNormals()};THREE.TorusGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.TorusKnotGeometry=function(a,b,c,d,e,f,g){function h(a,b,c,d,e){var f=Math.cos(a),g=Math.sin(a);a*=b/c;b=Math.cos(a);f*=d*(2+b)*0.5;g=d*(2+b)*g*0.5;d=e*d*Math.sin(a)*0.5;return new THREE.Vector3(f,g,d)}THREE.Geometry.call(this);this.parameters={radius:a,tube:b,radialSegments:c,tubularSegments:d,p:e,q:f,heightScale:g};a=a||100;b=b||40;c=c||64;d=d||8;e=e||2;f=f||3;g=g||1;for(var k=Array(c),l=new THREE.Vector3,n=new THREE.Vector3,q=new THREE.Vector3,r=0;r<c;++r){k[r]=Array(d);var t=r/c*2*e*Math.PI,
s=h(t,f,e,a,g),t=h(t+0.01,f,e,a,g);l.subVectors(t,s);n.addVectors(t,s);q.crossVectors(l,n);n.crossVectors(q,l);q.normalize();n.normalize();for(t=0;t<d;++t){var p=t/d*2*Math.PI,v=-b*Math.cos(p),p=b*Math.sin(p),w=new THREE.Vector3;w.x=s.x+v*n.x+p*q.x;w.y=s.y+v*n.y+p*q.y;w.z=s.z+v*n.z+p*q.z;k[r][t]=this.vertices.push(w)-1}}for(r=0;r<c;++r)for(t=0;t<d;++t)e=(r+1)%c,f=(t+1)%d,a=k[r][t],b=k[e][t],e=k[e][f],f=k[r][f],g=new THREE.Vector2(r/c,t/d),l=new THREE.Vector2((r+1)/c,t/d),n=new THREE.Vector2((r+1)/
c,(t+1)/d),q=new THREE.Vector2(r/c,(t+1)/d),this.faces.push(new THREE.Face3(a,b,f)),this.faceVertexUvs[0].push([g,l,q]),this.faces.push(new THREE.Face3(b,e,f)),this.faceVertexUvs[0].push([l.clone(),n,q.clone()]);this.computeFaceNormals();this.computeVertexNormals()};THREE.TorusKnotGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.TubeGeometry=function(a,b,c,d,e){THREE.Geometry.call(this);this.parameters={path:a,segments:b,radius:c,radialSegments:d,closed:e};b=b||64;c=c||1;d=d||8;e=e||!1;var f=[],g,h,k=b+1,l,n,q,r,t=new THREE.Vector3,s,p,v;s=new THREE.TubeGeometry.FrenetFrames(a,b,e);p=s.normals;v=s.binormals;this.tangents=s.tangents;this.normals=p;this.binormals=v;for(s=0;s<k;s++)for(f[s]=[],l=s/(k-1),r=a.getPointAt(l),g=p[s],h=v[s],l=0;l<d;l++)n=l/d*2*Math.PI,q=-c*Math.cos(n),n=c*Math.sin(n),t.copy(r),t.x+=q*g.x+n*
h.x,t.y+=q*g.y+n*h.y,t.z+=q*g.z+n*h.z,f[s][l]=this.vertices.push(new THREE.Vector3(t.x,t.y,t.z))-1;for(s=0;s<b;s++)for(l=0;l<d;l++)k=e?(s+1)%b:s+1,t=(l+1)%d,a=f[s][l],c=f[k][l],k=f[k][t],t=f[s][t],p=new THREE.Vector2(s/b,l/d),v=new THREE.Vector2((s+1)/b,l/d),g=new THREE.Vector2((s+1)/b,(l+1)/d),h=new THREE.Vector2(s/b,(l+1)/d),this.faces.push(new THREE.Face3(a,c,t)),this.faceVertexUvs[0].push([p,v,h]),this.faces.push(new THREE.Face3(c,k,t)),this.faceVertexUvs[0].push([v.clone(),g,h.clone()]);this.computeFaceNormals();
this.computeVertexNormals()};THREE.TubeGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.TubeGeometry.FrenetFrames=function(a,b,c){new THREE.Vector3;var d=new THREE.Vector3;new THREE.Vector3;var e=[],f=[],g=[],h=new THREE.Vector3,k=new THREE.Matrix4;b+=1;var l,n,q;this.tangents=e;this.normals=f;this.binormals=g;for(l=0;l<b;l++)n=l/(b-1),e[l]=a.getTangentAt(n),e[l].normalize();f[0]=new THREE.Vector3;g[0]=new THREE.Vector3;a=Number.MAX_VALUE;l=Math.abs(e[0].x);n=Math.abs(e[0].y);q=Math.abs(e[0].z);l<=a&&(a=l,d.set(1,0,0));n<=a&&(a=n,d.set(0,1,0));q<=a&&d.set(0,0,1);h.crossVectors(e[0],
d).normalize();f[0].crossVectors(e[0],h);g[0].crossVectors(e[0],f[0]);for(l=1;l<b;l++)f[l]=f[l-1].clone(),g[l]=g[l-1].clone(),h.crossVectors(e[l-1],e[l]),1E-4<h.length()&&(h.normalize(),d=Math.acos(THREE.Math.clamp(e[l-1].dot(e[l]),-1,1)),f[l].applyMatrix4(k.makeRotationAxis(h,d))),g[l].crossVectors(e[l],f[l]);if(c)for(d=Math.acos(THREE.Math.clamp(f[0].dot(f[b-1]),-1,1)),d/=b-1,0<e[0].dot(h.crossVectors(f[0],f[b-1]))&&(d=-d),l=1;l<b;l++)f[l].applyMatrix4(k.makeRotationAxis(e[l],d*l)),g[l].crossVectors(e[l],
f[l])};
THREE.PolyhedronGeometry=function(a,b,c,d){function e(a){var b=a.normalize().clone();b.index=k.vertices.push(b)-1;var c=Math.atan2(a.z,-a.x)/2/Math.PI+0.5;a=Math.atan2(-a.y,Math.sqrt(a.x*a.x+a.z*a.z))/Math.PI+0.5;b.uv=new THREE.Vector2(c,1-a);return b}function f(a,b,c){var d=new THREE.Face3(a.index,b.index,c.index,[a.clone(),b.clone(),c.clone()]);k.faces.push(d);v.copy(a).add(b).add(c).divideScalar(3);d=Math.atan2(v.z,-v.x);k.faceVertexUvs[0].push([h(a.uv,a,d),h(b.uv,b,d),h(c.uv,c,d)])}function g(a,b){var c=
Math.pow(2,b);Math.pow(4,b);for(var d=e(k.vertices[a.a]),g=e(k.vertices[a.b]),h=e(k.vertices[a.c]),l=[],n=0;n<=c;n++){l[n]=[];for(var p=e(d.clone().lerp(h,n/c)),q=e(g.clone().lerp(h,n/c)),r=c-n,s=0;s<=r;s++)l[n][s]=0==s&&n==c?p:e(p.clone().lerp(q,s/r))}for(n=0;n<c;n++)for(s=0;s<2*(c-n)-1;s++)d=Math.floor(s/2),0==s%2?f(l[n][d+1],l[n+1][d],l[n][d]):f(l[n][d+1],l[n+1][d+1],l[n+1][d])}function h(a,b,c){0>c&&1===a.x&&(a=new THREE.Vector2(a.x-1,a.y));0===b.x&&0===b.z&&(a=new THREE.Vector2(c/2/Math.PI+0.5,
a.y));return a.clone()}THREE.Geometry.call(this);c=c||1;d=d||0;for(var k=this,l=0,n=a.length;l<n;l+=3)e(new THREE.Vector3(a[l],a[l+1],a[l+2]));a=this.vertices;for(var q=[],r=l=0,n=b.length;l<n;l+=3,r++){var t=a[b[l]],s=a[b[l+1]],p=a[b[l+2]];q[r]=new THREE.Face3(t.index,s.index,p.index,[t.clone(),s.clone(),p.clone()])}for(var v=new THREE.Vector3,l=0,n=q.length;l<n;l++)g(q[l],d);l=0;for(n=this.faceVertexUvs[0].length;l<n;l++)b=this.faceVertexUvs[0][l],d=b[0].x,a=b[1].x,q=b[2].x,r=Math.max(d,Math.max(a,
q)),t=Math.min(d,Math.min(a,q)),0.9<r&&0.1>t&&(0.2>d&&(b[0].x+=1),0.2>a&&(b[1].x+=1),0.2>q&&(b[2].x+=1));l=0;for(n=this.vertices.length;l<n;l++)this.vertices[l].multiplyScalar(c);this.mergeVertices();this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,c)};THREE.PolyhedronGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.IcosahedronGeometry=function(a,b){this.parameters={radius:a,detail:b};var c=(1+Math.sqrt(5))/2;THREE.PolyhedronGeometry.call(this,[-1,c,0,1,c,0,-1,-c,0,1,-c,0,0,-1,c,0,1,c,0,-1,-c,0,1,-c,c,0,-1,c,0,1,-c,0,-1,-c,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],a,b)};THREE.IcosahedronGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.OctahedronGeometry=function(a,b){this.parameters={radius:a,detail:b};THREE.PolyhedronGeometry.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],a,b)};THREE.OctahedronGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.TetrahedronGeometry=function(a,b){THREE.PolyhedronGeometry.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],a,b)};THREE.TetrahedronGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.ParametricGeometry=function(a,b,c){THREE.Geometry.call(this);var d=this.vertices,e=this.faces,f=this.faceVertexUvs[0],g,h,k,l,n=b+1;for(g=0;g<=c;g++)for(l=g/c,h=0;h<=b;h++)k=h/b,k=a(k,l),d.push(k);var q,r,t,s;for(g=0;g<c;g++)for(h=0;h<b;h++)a=g*n+h,d=g*n+h+1,l=(g+1)*n+h+1,k=(g+1)*n+h,q=new THREE.Vector2(h/b,g/c),r=new THREE.Vector2((h+1)/b,g/c),t=new THREE.Vector2((h+1)/b,(g+1)/c),s=new THREE.Vector2(h/b,(g+1)/c),e.push(new THREE.Face3(a,d,k)),f.push([q,r,s]),e.push(new THREE.Face3(d,l,k)),
f.push([r.clone(),t,s.clone()]);this.computeFaceNormals();this.computeVertexNormals()};THREE.ParametricGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.AxisHelper=function(a){a=a||1;var b=new Float32Array([0,0,0,a,0,0,0,0,0,0,a,0,0,0,0,0,0,a]),c=new Float32Array([1,0,0,1,0.6,0,0,1,0,0.6,1,0,0,0,1,0,0.6,1]);a=new THREE.BufferGeometry;a.addAttribute("position",new THREE.BufferAttribute(b,3));a.addAttribute("color",new THREE.BufferAttribute(c,3));b=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});THREE.Line.call(this,a,b,THREE.LinePieces)};THREE.AxisHelper.prototype=Object.create(THREE.Line.prototype);
THREE.ArrowHelper=function(){var a=new THREE.Geometry;a.vertices.push(new THREE.Vector3(0,0,0),new THREE.Vector3(0,1,0));var b=new THREE.CylinderGeometry(0,0.5,1,5,1);b.applyMatrix((new THREE.Matrix4).makeTranslation(0,-0.5,0));return function(c,d,e,f,g,h){THREE.Object3D.call(this);void 0===f&&(f=16776960);void 0===e&&(e=1);void 0===g&&(g=0.2*e);void 0===h&&(h=0.2*g);this.position.copy(d);this.line=new THREE.Line(a,new THREE.LineBasicMaterial({color:f}));this.line.matrixAutoUpdate=!1;this.add(this.line);
this.cone=new THREE.Mesh(b,new THREE.MeshBasicMaterial({color:f}));this.cone.matrixAutoUpdate=!1;this.add(this.cone);this.setDirection(c);this.setLength(e,g,h)}}();THREE.ArrowHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.ArrowHelper.prototype.setDirection=function(){var a=new THREE.Vector3,b;return function(c){0.99999<c.y?this.quaternion.set(0,0,0,1):-0.99999>c.y?this.quaternion.set(1,0,0,0):(a.set(c.z,0,-c.x).normalize(),b=Math.acos(c.y),this.quaternion.setFromAxisAngle(a,b))}}();
THREE.ArrowHelper.prototype.setLength=function(a,b,c){void 0===b&&(b=0.2*a);void 0===c&&(c=0.2*b);this.line.scale.set(1,a,1);this.line.updateMatrix();this.cone.scale.set(c,b,c);this.cone.position.y=a;this.cone.updateMatrix()};THREE.ArrowHelper.prototype.setColor=function(a){this.line.material.color.set(a);this.cone.material.color.set(a)};
THREE.BoxHelper=function(a){var b=new THREE.BufferGeometry;b.addAttribute("position",new THREE.BufferAttribute(new Float32Array(72),3));THREE.Line.call(this,b,new THREE.LineBasicMaterial({color:16776960}),THREE.LinePieces);void 0!==a&&this.update(a)};THREE.BoxHelper.prototype=Object.create(THREE.Line.prototype);
THREE.BoxHelper.prototype.update=function(a){var b=a.geometry;null===b.boundingBox&&b.computeBoundingBox();var c=b.boundingBox.min,b=b.boundingBox.max,d=this.geometry.attributes.position.array;d[0]=b.x;d[1]=b.y;d[2]=b.z;d[3]=c.x;d[4]=b.y;d[5]=b.z;d[6]=c.x;d[7]=b.y;d[8]=b.z;d[9]=c.x;d[10]=c.y;d[11]=b.z;d[12]=c.x;d[13]=c.y;d[14]=b.z;d[15]=b.x;d[16]=c.y;d[17]=b.z;d[18]=b.x;d[19]=c.y;d[20]=b.z;d[21]=b.x;d[22]=b.y;d[23]=b.z;d[24]=b.x;d[25]=b.y;d[26]=c.z;d[27]=c.x;d[28]=b.y;d[29]=c.z;d[30]=c.x;d[31]=b.y;
d[32]=c.z;d[33]=c.x;d[34]=c.y;d[35]=c.z;d[36]=c.x;d[37]=c.y;d[38]=c.z;d[39]=b.x;d[40]=c.y;d[41]=c.z;d[42]=b.x;d[43]=c.y;d[44]=c.z;d[45]=b.x;d[46]=b.y;d[47]=c.z;d[48]=b.x;d[49]=b.y;d[50]=b.z;d[51]=b.x;d[52]=b.y;d[53]=c.z;d[54]=c.x;d[55]=b.y;d[56]=b.z;d[57]=c.x;d[58]=b.y;d[59]=c.z;d[60]=c.x;d[61]=c.y;d[62]=b.z;d[63]=c.x;d[64]=c.y;d[65]=c.z;d[66]=b.x;d[67]=c.y;d[68]=b.z;d[69]=b.x;d[70]=c.y;d[71]=c.z;this.geometry.attributes.position.needsUpdate=!0;this.geometry.computeBoundingSphere();this.matrixAutoUpdate=
!1;this.matrixWorld=a.matrixWorld};THREE.BoundingBoxHelper=function(a,b){var c=void 0!==b?b:8947848;this.object=a;this.box=new THREE.Box3;THREE.Mesh.call(this,new THREE.BoxGeometry(1,1,1),new THREE.MeshBasicMaterial({color:c,wireframe:!0}))};THREE.BoundingBoxHelper.prototype=Object.create(THREE.Mesh.prototype);THREE.BoundingBoxHelper.prototype.update=function(){this.box.setFromObject(this.object);this.box.size(this.scale);this.box.center(this.position)};
THREE.CameraHelper=function(a){function b(a,b,d){c(a,d);c(b,d)}function c(a,b){d.vertices.push(new THREE.Vector3);d.colors.push(new THREE.Color(b));void 0===f[a]&&(f[a]=[]);f[a].push(d.vertices.length-1)}var d=new THREE.Geometry,e=new THREE.LineBasicMaterial({color:16777215,vertexColors:THREE.FaceColors}),f={};b("n1","n2",16755200);b("n2","n4",16755200);b("n4","n3",16755200);b("n3","n1",16755200);b("f1","f2",16755200);b("f2","f4",16755200);b("f4","f3",16755200);b("f3","f1",16755200);b("n1","f1",16755200);
b("n2","f2",16755200);b("n3","f3",16755200);b("n4","f4",16755200);b("p","n1",16711680);b("p","n2",16711680);b("p","n3",16711680);b("p","n4",16711680);b("u1","u2",43775);b("u2","u3",43775);b("u3","u1",43775);b("c","t",16777215);b("p","c",3355443);b("cn1","cn2",3355443);b("cn3","cn4",3355443);b("cf1","cf2",3355443);b("cf3","cf4",3355443);THREE.Line.call(this,d,e,THREE.LinePieces);this.camera=a;this.matrixWorld=a.matrixWorld;this.matrixAutoUpdate=!1;this.pointMap=f;this.update()};
THREE.CameraHelper.prototype=Object.create(THREE.Line.prototype);
THREE.CameraHelper.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Camera,c=new THREE.Projector;return function(){function d(d,g,h,k){a.set(g,h,k);c.unprojectVector(a,b);d=e.pointMap[d];if(void 0!==d)for(g=0,h=d.length;g<h;g++)e.geometry.vertices[d[g]].copy(a)}var e=this;b.projectionMatrix.copy(this.camera.projectionMatrix);d("c",0,0,-1);d("t",0,0,1);d("n1",-1,-1,-1);d("n2",1,-1,-1);d("n3",-1,1,-1);d("n4",1,1,-1);d("f1",-1,-1,1);d("f2",1,-1,1);d("f3",-1,1,1);d("f4",1,1,1);d("u1",0.7,
1.1,-1);d("u2",-0.7,1.1,-1);d("u3",0,2,-1);d("cf1",-1,0,1);d("cf2",1,0,1);d("cf3",0,-1,1);d("cf4",0,1,1);d("cn1",-1,0,-1);d("cn2",1,0,-1);d("cn3",0,-1,-1);d("cn4",0,1,-1);this.geometry.verticesNeedUpdate=!0}}();
THREE.DirectionalLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrixWorld=a.matrixWorld;this.matrixAutoUpdate=!1;b=b||1;var c=new THREE.Geometry;c.vertices.push(new THREE.Vector3(-b,b,0),new THREE.Vector3(b,b,0),new THREE.Vector3(b,-b,0),new THREE.Vector3(-b,-b,0),new THREE.Vector3(-b,b,0));var d=new THREE.LineBasicMaterial({fog:!1});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.lightPlane=new THREE.Line(c,d);this.add(this.lightPlane);
c=new THREE.Geometry;c.vertices.push(new THREE.Vector3,new THREE.Vector3);d=new THREE.LineBasicMaterial({fog:!1});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.targetLine=new THREE.Line(c,d);this.add(this.targetLine);this.update()};THREE.DirectionalLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.DirectionalLightHelper.prototype.dispose=function(){this.lightPlane.geometry.dispose();this.lightPlane.material.dispose();this.targetLine.geometry.dispose();this.targetLine.material.dispose()};
THREE.DirectionalLightHelper.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(){a.setFromMatrixPosition(this.light.matrixWorld);b.setFromMatrixPosition(this.light.target.matrixWorld);c.subVectors(b,a);this.lightPlane.lookAt(c);this.lightPlane.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.targetLine.geometry.vertices[1].copy(c);this.targetLine.geometry.verticesNeedUpdate=!0;this.targetLine.material.color.copy(this.lightPlane.material.color)}}();
THREE.EdgesHelper=function(a,b){var c=void 0!==b?b:16777215,d=[0,0],e={},f=function(a,b){return a-b},g=["a","b","c"],h=new THREE.BufferGeometry,k=a.geometry.clone();k.mergeVertices();k.computeFaceNormals();for(var l=k.vertices,k=k.faces,n=0,q=0,r=k.length;q<r;q++)for(var t=k[q],s=0;3>s;s++){d[0]=t[g[s]];d[1]=t[g[(s+1)%3]];d.sort(f);var p=d.toString();void 0===e[p]?(e[p]={vert1:d[0],vert2:d[1],face1:q,face2:void 0},n++):e[p].face2=q}h.addAttribute("position",new THREE.Float32Attribute(6*n,3));d=h.attributes.position.array;
f=0;for(p in e)if(g=e[p],void 0===g.face2||0.9999>k[g.face1].normal.dot(k[g.face2].normal))n=l[g.vert1],d[f++]=n.x,d[f++]=n.y,d[f++]=n.z,n=l[g.vert2],d[f++]=n.x,d[f++]=n.y,d[f++]=n.z;THREE.Line.call(this,h,new THREE.LineBasicMaterial({color:c}),THREE.LinePieces);this.matrixAutoUpdate=!1;this.matrixWorld=a.matrixWorld};THREE.EdgesHelper.prototype=Object.create(THREE.Line.prototype);
THREE.FaceNormalsHelper=function(a,b,c,d){this.object=a;this.size=void 0!==b?b:1;a=void 0!==c?c:16776960;d=void 0!==d?d:1;b=new THREE.Geometry;c=0;for(var e=this.object.geometry.faces.length;c<e;c++)b.vertices.push(new THREE.Vector3,new THREE.Vector3);THREE.Line.call(this,b,new THREE.LineBasicMaterial({color:a,linewidth:d}),THREE.LinePieces);this.matrixAutoUpdate=!1;this.normalMatrix=new THREE.Matrix3;this.update()};THREE.FaceNormalsHelper.prototype=Object.create(THREE.Line.prototype);
THREE.FaceNormalsHelper.prototype.update=function(){var a=this.geometry.vertices,b=this.object,c=b.geometry.vertices,d=b.geometry.faces,e=b.matrixWorld;b.updateMatrixWorld(!0);this.normalMatrix.getNormalMatrix(e);for(var f=b=0,g=d.length;b<g;b++,f+=2){var h=d[b];a[f].copy(c[h.a]).add(c[h.b]).add(c[h.c]).divideScalar(3).applyMatrix4(e);a[f+1].copy(h.normal).applyMatrix3(this.normalMatrix).normalize().multiplyScalar(this.size).add(a[f])}this.geometry.verticesNeedUpdate=!0;return this};
THREE.GridHelper=function(a,b){var c=new THREE.Geometry,d=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});this.color1=new THREE.Color(4473924);this.color2=new THREE.Color(8947848);for(var e=-a;e<=a;e+=b){c.vertices.push(new THREE.Vector3(-a,0,e),new THREE.Vector3(a,0,e),new THREE.Vector3(e,0,-a),new THREE.Vector3(e,0,a));var f=0===e?this.color1:this.color2;c.colors.push(f,f,f,f)}THREE.Line.call(this,c,d,THREE.LinePieces)};THREE.GridHelper.prototype=Object.create(THREE.Line.prototype);
THREE.GridHelper.prototype.setColors=function(a,b){this.color1.set(a);this.color2.set(b);this.geometry.colorsNeedUpdate=!0};
THREE.HemisphereLightHelper=function(a,b,c,d){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrixWorld=a.matrixWorld;this.matrixAutoUpdate=!1;this.colors=[new THREE.Color,new THREE.Color];a=new THREE.SphereGeometry(b,4,2);a.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2));for(b=0;8>b;b++)a.faces[b].color=this.colors[4>b?0:1];b=new THREE.MeshBasicMaterial({vertexColors:THREE.FaceColors,wireframe:!0});this.lightSphere=new THREE.Mesh(a,b);this.add(this.lightSphere);
this.update()};THREE.HemisphereLightHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.HemisphereLightHelper.prototype.dispose=function(){this.lightSphere.geometry.dispose();this.lightSphere.material.dispose()};
THREE.HemisphereLightHelper.prototype.update=function(){var a=new THREE.Vector3;return function(){this.colors[0].copy(this.light.color).multiplyScalar(this.light.intensity);this.colors[1].copy(this.light.groundColor).multiplyScalar(this.light.intensity);this.lightSphere.lookAt(a.setFromMatrixPosition(this.light.matrixWorld).negate());this.lightSphere.geometry.colorsNeedUpdate=!0}}();
THREE.PointLightHelper=function(a,b){this.light=a;this.light.updateMatrixWorld();var c=new THREE.SphereGeometry(b,4,2),d=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);THREE.Mesh.call(this,c,d);this.matrixWorld=this.light.matrixWorld;this.matrixAutoUpdate=!1};THREE.PointLightHelper.prototype=Object.create(THREE.Mesh.prototype);THREE.PointLightHelper.prototype.dispose=function(){this.geometry.dispose();this.material.dispose()};
THREE.PointLightHelper.prototype.update=function(){this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)};
THREE.SkeletonHelper=function(a){this.bones=this.getBoneList(a);for(var b=new THREE.Geometry,c=0;c<this.bones.length;c++)this.bones[c].parent instanceof THREE.Bone&&(b.vertices.push(new THREE.Vector3),b.vertices.push(new THREE.Vector3),b.colors.push(new THREE.Color(0,0,1)),b.colors.push(new THREE.Color(0,1,0)));c=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors,depthTest:!1,depthWrite:!1,transparent:!0});THREE.Line.call(this,b,c,THREE.LinePieces);this.root=a;this.matrixWorld=a.matrixWorld;
this.matrixAutoUpdate=!1;this.update()};THREE.SkeletonHelper.prototype=Object.create(THREE.Line.prototype);THREE.SkeletonHelper.prototype.getBoneList=function(a){var b=[];a instanceof THREE.Bone&&b.push(a);for(var c=0;c<a.children.length;c++)b.push.apply(b,this.getBoneList(a.children[c]));return b};
THREE.SkeletonHelper.prototype.update=function(){for(var a=this.geometry,b=(new THREE.Matrix4).getInverse(this.root.matrixWorld),c=new THREE.Matrix4,d=0,e=0;e<this.bones.length;e++){var f=this.bones[e];f.parent instanceof THREE.Bone&&(c.multiplyMatrices(b,f.matrixWorld),a.vertices[d].setFromMatrixPosition(c),c.multiplyMatrices(b,f.parent.matrixWorld),a.vertices[d+1].setFromMatrixPosition(c),d+=2)}a.verticesNeedUpdate=!0;a.computeBoundingSphere()};
THREE.SpotLightHelper=function(a){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrixWorld=a.matrixWorld;this.matrixAutoUpdate=!1;a=new THREE.CylinderGeometry(0,1,1,8,1,!0);a.applyMatrix((new THREE.Matrix4).makeTranslation(0,-0.5,0));a.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2));var b=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});this.cone=new THREE.Mesh(a,b);this.add(this.cone);this.update()};THREE.SpotLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.SpotLightHelper.prototype.dispose=function(){this.cone.geometry.dispose();this.cone.material.dispose()};THREE.SpotLightHelper.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(){var c=this.light.distance?this.light.distance:1E4,d=c*Math.tan(this.light.angle);this.cone.scale.set(d,d,c);a.setFromMatrixPosition(this.light.matrixWorld);b.setFromMatrixPosition(this.light.target.matrixWorld);this.cone.lookAt(b.sub(a));this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)}}();
THREE.VertexNormalsHelper=function(a,b,c,d){this.object=a;this.size=void 0!==b?b:1;b=void 0!==c?c:16711680;d=void 0!==d?d:1;c=new THREE.Geometry;a=a.geometry.faces;for(var e=0,f=a.length;e<f;e++)for(var g=0,h=a[e].vertexNormals.length;g<h;g++)c.vertices.push(new THREE.Vector3,new THREE.Vector3);THREE.Line.call(this,c,new THREE.LineBasicMaterial({color:b,linewidth:d}),THREE.LinePieces);this.matrixAutoUpdate=!1;this.normalMatrix=new THREE.Matrix3;this.update()};THREE.VertexNormalsHelper.prototype=Object.create(THREE.Line.prototype);
THREE.VertexNormalsHelper.prototype.update=function(a){var b=new THREE.Vector3;return function(a){a=["a","b","c","d"];this.object.updateMatrixWorld(!0);this.normalMatrix.getNormalMatrix(this.object.matrixWorld);for(var d=this.geometry.vertices,e=this.object.geometry.vertices,f=this.object.geometry.faces,g=this.object.matrixWorld,h=0,k=0,l=f.length;k<l;k++)for(var n=f[k],q=0,r=n.vertexNormals.length;q<r;q++){var t=n.vertexNormals[q];d[h].copy(e[n[a[q]]]).applyMatrix4(g);b.copy(t).applyMatrix3(this.normalMatrix).normalize().multiplyScalar(this.size);
b.add(d[h]);h+=1;d[h].copy(b);h+=1}this.geometry.verticesNeedUpdate=!0;return this}}();
THREE.VertexTangentsHelper=function(a,b,c,d){this.object=a;this.size=void 0!==b?b:1;b=void 0!==c?c:255;d=void 0!==d?d:1;c=new THREE.Geometry;a=a.geometry.faces;for(var e=0,f=a.length;e<f;e++)for(var g=0,h=a[e].vertexTangents.length;g<h;g++)c.vertices.push(new THREE.Vector3),c.vertices.push(new THREE.Vector3);THREE.Line.call(this,c,new THREE.LineBasicMaterial({color:b,linewidth:d}),THREE.LinePieces);this.matrixAutoUpdate=!1;this.update()};THREE.VertexTangentsHelper.prototype=Object.create(THREE.Line.prototype);
THREE.VertexTangentsHelper.prototype.update=function(a){var b=new THREE.Vector3;return function(a){a=["a","b","c","d"];this.object.updateMatrixWorld(!0);for(var d=this.geometry.vertices,e=this.object.geometry.vertices,f=this.object.geometry.faces,g=this.object.matrixWorld,h=0,k=0,l=f.length;k<l;k++)for(var n=f[k],q=0,r=n.vertexTangents.length;q<r;q++){var t=n.vertexTangents[q];d[h].copy(e[n[a[q]]]).applyMatrix4(g);b.copy(t).transformDirection(g).multiplyScalar(this.size);b.add(d[h]);h+=1;d[h].copy(b);
h+=1}this.geometry.verticesNeedUpdate=!0;return this}}();
THREE.WireframeHelper=function(a,b){var c=void 0!==b?b:16777215,d=[0,0],e={},f=function(a,b){return a-b},g=["a","b","c"],h=new THREE.BufferGeometry;if(a.geometry instanceof THREE.Geometry){for(var k=a.geometry.vertices,l=a.geometry.faces,n=0,q=new Uint32Array(6*l.length),r=0,t=l.length;r<t;r++)for(var s=l[r],p=0;3>p;p++){d[0]=s[g[p]];d[1]=s[g[(p+1)%3]];d.sort(f);var v=d.toString();void 0===e[v]&&(q[2*n]=d[0],q[2*n+1]=d[1],e[v]=!0,n++)}d=new Float32Array(6*n);r=0;for(t=n;r<t;r++)for(p=0;2>p;p++)n=
k[q[2*r+p]],g=6*r+3*p,d[g+0]=n.x,d[g+1]=n.y,d[g+2]=n.z;h.addAttribute("position",new THREE.BufferAttribute(d,3))}else if(a.geometry instanceof THREE.BufferGeometry){if(void 0!==a.geometry.attributes.index){for(var k=a.geometry.attributes.position.array,t=a.geometry.attributes.index.array,l=a.geometry.offsets,n=0,q=new Uint32Array(2*t.length),s=0,w=l.length;s<w;++s)for(var p=l[s].start,v=l[s].count,g=l[s].index,r=p,u=p+v;r<u;r+=3)for(p=0;3>p;p++)d[0]=g+t[r+p],d[1]=g+t[r+(p+1)%3],d.sort(f),v=d.toString(),
void 0===e[v]&&(q[2*n]=d[0],q[2*n+1]=d[1],e[v]=!0,n++);d=new Float32Array(6*n);r=0;for(t=n;r<t;r++)for(p=0;2>p;p++)g=6*r+3*p,n=3*q[2*r+p],d[g+0]=k[n],d[g+1]=k[n+1],d[g+2]=k[n+2]}else for(k=a.geometry.attributes.position.array,n=k.length/3,q=n/3,d=new Float32Array(6*n),r=0,t=q;r<t;r++)for(p=0;3>p;p++)g=18*r+6*p,q=9*r+3*p,d[g+0]=k[q],d[g+1]=k[q+1],d[g+2]=k[q+2],n=9*r+(p+1)%3*3,d[g+3]=k[n],d[g+4]=k[n+1],d[g+5]=k[n+2];h.addAttribute("position",new THREE.BufferAttribute(d,3))}THREE.Line.call(this,h,new THREE.LineBasicMaterial({color:c}),
THREE.LinePieces);this.matrixAutoUpdate=!1;this.matrixWorld=a.matrixWorld};THREE.WireframeHelper.prototype=Object.create(THREE.Line.prototype);THREE.ImmediateRenderObject=function(){THREE.Object3D.call(this);this.render=function(a){}};THREE.ImmediateRenderObject.prototype=Object.create(THREE.Object3D.prototype);THREE.LensFlare=function(a,b,c,d,e){THREE.Object3D.call(this);this.lensFlares=[];this.positionScreen=new THREE.Vector3;this.customUpdateCallback=void 0;void 0!==a&&this.add(a,b,c,d,e)};
THREE.LensFlare.prototype=Object.create(THREE.Object3D.prototype);THREE.LensFlare.prototype.add=function(a,b,c,d,e,f){void 0===b&&(b=-1);void 0===c&&(c=0);void 0===f&&(f=1);void 0===e&&(e=new THREE.Color(16777215));void 0===d&&(d=THREE.NormalBlending);c=Math.min(c,Math.max(0,c));this.lensFlares.push({texture:a,size:b,distance:c,x:0,y:0,z:0,scale:1,rotation:1,opacity:f,color:e,blending:d})};
THREE.LensFlare.prototype.updateLensFlares=function(){var a,b=this.lensFlares.length,c,d=2*-this.positionScreen.x,e=2*-this.positionScreen.y;for(a=0;a<b;a++)c=this.lensFlares[a],c.x=this.positionScreen.x+d*c.distance,c.y=this.positionScreen.y+e*c.distance,c.wantedRotation=c.x*Math.PI*0.25,c.rotation+=0.25*(c.wantedRotation-c.rotation)};
THREE.MorphBlendMesh=function(a,b){THREE.Mesh.call(this,a,b);this.animationsMap={};this.animationsList=[];var c=this.geometry.morphTargets.length;this.createAnimation("__default",0,c-1,c/1);this.setAnimationWeight("__default",1)};THREE.MorphBlendMesh.prototype=Object.create(THREE.Mesh.prototype);
THREE.MorphBlendMesh.prototype.createAnimation=function(a,b,c,d){b={startFrame:b,endFrame:c,length:c-b+1,fps:d,duration:(c-b)/d,lastFrame:0,currentFrame:0,active:!1,time:0,direction:1,weight:1,directionBackwards:!1,mirroredLoop:!1};this.animationsMap[a]=b;this.animationsList.push(b)};
THREE.MorphBlendMesh.prototype.autoCreateAnimations=function(a){for(var b=/([a-z]+)_?(\d+)/,c,d={},e=this.geometry,f=0,g=e.morphTargets.length;f<g;f++){var h=e.morphTargets[f].name.match(b);if(h&&1<h.length){var k=h[1];d[k]||(d[k]={start:Infinity,end:-Infinity});h=d[k];f<h.start&&(h.start=f);f>h.end&&(h.end=f);c||(c=k)}}for(k in d)h=d[k],this.createAnimation(k,h.start,h.end,a);this.firstAnimation=c};
THREE.MorphBlendMesh.prototype.setAnimationDirectionForward=function(a){if(a=this.animationsMap[a])a.direction=1,a.directionBackwards=!1};THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward=function(a){if(a=this.animationsMap[a])a.direction=-1,a.directionBackwards=!0};THREE.MorphBlendMesh.prototype.setAnimationFPS=function(a,b){var c=this.animationsMap[a];c&&(c.fps=b,c.duration=(c.end-c.start)/c.fps)};
THREE.MorphBlendMesh.prototype.setAnimationDuration=function(a,b){var c=this.animationsMap[a];c&&(c.duration=b,c.fps=(c.end-c.start)/c.duration)};THREE.MorphBlendMesh.prototype.setAnimationWeight=function(a,b){var c=this.animationsMap[a];c&&(c.weight=b)};THREE.MorphBlendMesh.prototype.setAnimationTime=function(a,b){var c=this.animationsMap[a];c&&(c.time=b)};THREE.MorphBlendMesh.prototype.getAnimationTime=function(a){var b=0;if(a=this.animationsMap[a])b=a.time;return b};
THREE.MorphBlendMesh.prototype.getAnimationDuration=function(a){var b=-1;if(a=this.animationsMap[a])b=a.duration;return b};THREE.MorphBlendMesh.prototype.playAnimation=function(a){var b=this.animationsMap[a];b?(b.time=0,b.active=!0):console.warn("animation["+a+"] undefined")};THREE.MorphBlendMesh.prototype.stopAnimation=function(a){if(a=this.animationsMap[a])a.active=!1};
THREE.MorphBlendMesh.prototype.update=function(a){for(var b=0,c=this.animationsList.length;b<c;b++){var d=this.animationsList[b];if(d.active){var e=d.duration/d.length;d.time+=d.direction*a;if(d.mirroredLoop){if(d.time>d.duration||0>d.time)d.direction*=-1,d.time>d.duration&&(d.time=d.duration,d.directionBackwards=!0),0>d.time&&(d.time=0,d.directionBackwards=!1)}else d.time%=d.duration,0>d.time&&(d.time+=d.duration);var f=d.startFrame+THREE.Math.clamp(Math.floor(d.time/e),0,d.length-1),g=d.weight;
f!==d.currentFrame&&(this.morphTargetInfluences[d.lastFrame]=0,this.morphTargetInfluences[d.currentFrame]=1*g,this.morphTargetInfluences[f]=0,d.lastFrame=d.currentFrame,d.currentFrame=f);e=d.time%e/e;d.directionBackwards&&(e=1-e);this.morphTargetInfluences[d.currentFrame]=e*g;this.morphTargetInfluences[d.lastFrame]=(1-e)*g}}};
THREE.LensFlarePlugin=function(){function a(a,b){var d=c.createProgram(),e=c.createShader(c.FRAGMENT_SHADER),f=c.createShader(c.VERTEX_SHADER),g="precision "+b+" float;\n";c.shaderSource(e,g+a.fragmentShader);c.shaderSource(f,g+a.vertexShader);c.compileShader(e);c.compileShader(f);c.attachShader(d,e);c.attachShader(d,f);c.linkProgram(d);return d}var b=[],c,d,e,f,g,h,k,l,n,q,r,t,s;this.init=function(b){c=b.context;d=b;e=b.getPrecision();f=new Float32Array(16);g=new Uint16Array(6);b=0;f[b++]=-1;f[b++]=
-1;f[b++]=0;f[b++]=0;f[b++]=1;f[b++]=-1;f[b++]=1;f[b++]=0;f[b++]=1;f[b++]=1;f[b++]=1;f[b++]=1;f[b++]=-1;f[b++]=1;f[b++]=0;f[b++]=1;b=0;g[b++]=0;g[b++]=1;g[b++]=2;g[b++]=0;g[b++]=2;g[b++]=3;h=c.createBuffer();k=c.createBuffer();c.bindBuffer(c.ARRAY_BUFFER,h);c.bufferData(c.ARRAY_BUFFER,f,c.STATIC_DRAW);c.bindBuffer(c.ELEMENT_ARRAY_BUFFER,k);c.bufferData(c.ELEMENT_ARRAY_BUFFER,g,c.STATIC_DRAW);l=c.createTexture();n=c.createTexture();c.bindTexture(c.TEXTURE_2D,l);c.texImage2D(c.TEXTURE_2D,0,c.RGB,16,
16,0,c.RGB,c.UNSIGNED_BYTE,null);c.texParameteri(c.TEXTURE_2D,c.TEXTURE_WRAP_S,c.CLAMP_TO_EDGE);c.texParameteri(c.TEXTURE_2D,c.TEXTURE_WRAP_T,c.CLAMP_TO_EDGE);c.texParameteri(c.TEXTURE_2D,c.TEXTURE_MAG_FILTER,c.NEAREST);c.texParameteri(c.TEXTURE_2D,c.TEXTURE_MIN_FILTER,c.NEAREST);c.bindTexture(c.TEXTURE_2D,n);c.texImage2D(c.TEXTURE_2D,0,c.RGBA,16,16,0,c.RGBA,c.UNSIGNED_BYTE,null);c.texParameteri(c.TEXTURE_2D,c.TEXTURE_WRAP_S,c.CLAMP_TO_EDGE);c.texParameteri(c.TEXTURE_2D,c.TEXTURE_WRAP_T,c.CLAMP_TO_EDGE);
c.texParameteri(c.TEXTURE_2D,c.TEXTURE_MAG_FILTER,c.NEAREST);c.texParameteri(c.TEXTURE_2D,c.TEXTURE_MIN_FILTER,c.NEAREST);0>=c.getParameter(c.MAX_VERTEX_TEXTURE_IMAGE_UNITS)?(q=!1,r=a(THREE.ShaderFlares.lensFlare,e)):(q=!0,r=a(THREE.ShaderFlares.lensFlareVertexTexture,e));t={};s={};t.vertex=c.getAttribLocation(r,"position");t.uv=c.getAttribLocation(r,"uv");s.renderType=c.getUniformLocation(r,"renderType");s.map=c.getUniformLocation(r,"map");s.occlusionMap=c.getUniformLocation(r,"occlusionMap");s.opacity=
c.getUniformLocation(r,"opacity");s.color=c.getUniformLocation(r,"color");s.scale=c.getUniformLocation(r,"scale");s.rotation=c.getUniformLocation(r,"rotation");s.screenPosition=c.getUniformLocation(r,"screenPosition")};this.render=function(a,e,f,g){b.length=0;a.traverseVisible(function(a){a instanceof THREE.LensFlare&&b.push(a)});if(0!==b.length){a=new THREE.Vector3;var D=g/f,A=0.5*f,x=0.5*g,C=16/g,I=new THREE.Vector2(C*D,C),z=new THREE.Vector3(1,1,0),y=new THREE.Vector2(1,1),K=s,C=t;c.useProgram(r);
c.enableVertexAttribArray(t.vertex);c.enableVertexAttribArray(t.uv);c.uniform1i(K.occlusionMap,0);c.uniform1i(K.map,1);c.bindBuffer(c.ARRAY_BUFFER,h);c.vertexAttribPointer(C.vertex,2,c.FLOAT,!1,16,0);c.vertexAttribPointer(C.uv,2,c.FLOAT,!1,16,8);c.bindBuffer(c.ELEMENT_ARRAY_BUFFER,k);c.disable(c.CULL_FACE);c.depthMask(!1);for(var N=0,ba=b.length;N<ba;N++){C=16/g;I.set(C*D,C);var P=b[N];a.set(P.matrixWorld.elements[12],P.matrixWorld.elements[13],P.matrixWorld.elements[14]);a.applyMatrix4(e.matrixWorldInverse);
a.applyProjection(e.projectionMatrix);z.copy(a);y.x=z.x*A+A;y.y=z.y*x+x;if(q||0<y.x&&y.x<f&&0<y.y&&y.y<g){c.activeTexture(c.TEXTURE1);c.bindTexture(c.TEXTURE_2D,l);c.copyTexImage2D(c.TEXTURE_2D,0,c.RGB,y.x-8,y.y-8,16,16,0);c.uniform1i(K.renderType,0);c.uniform2f(K.scale,I.x,I.y);c.uniform3f(K.screenPosition,z.x,z.y,z.z);c.disable(c.BLEND);c.enable(c.DEPTH_TEST);c.drawElements(c.TRIANGLES,6,c.UNSIGNED_SHORT,0);c.activeTexture(c.TEXTURE0);c.bindTexture(c.TEXTURE_2D,n);c.copyTexImage2D(c.TEXTURE_2D,
0,c.RGBA,y.x-8,y.y-8,16,16,0);c.uniform1i(K.renderType,1);c.disable(c.DEPTH_TEST);c.activeTexture(c.TEXTURE1);c.bindTexture(c.TEXTURE_2D,l);c.drawElements(c.TRIANGLES,6,c.UNSIGNED_SHORT,0);P.positionScreen.copy(z);P.customUpdateCallback?P.customUpdateCallback(P):P.updateLensFlares();c.uniform1i(K.renderType,2);c.enable(c.BLEND);for(var O=0,J=P.lensFlares.length;O<J;O++){var E=P.lensFlares[O];0.001<E.opacity&&0.001<E.scale&&(z.x=E.x,z.y=E.y,z.z=E.z,C=E.size*E.scale/g,I.x=C*D,I.y=C,c.uniform3f(K.screenPosition,
z.x,z.y,z.z),c.uniform2f(K.scale,I.x,I.y),c.uniform1f(K.rotation,E.rotation),c.uniform1f(K.opacity,E.opacity),c.uniform3f(K.color,E.color.r,E.color.g,E.color.b),d.setBlending(E.blending,E.blendEquation,E.blendSrc,E.blendDst),d.setTexture(E.texture,1),c.drawElements(c.TRIANGLES,6,c.UNSIGNED_SHORT,0))}}}c.enable(c.CULL_FACE);c.enable(c.DEPTH_TEST);c.depthMask(!0)}}};
THREE.ShadowMapPlugin=function(){function a(b,c,d){if(c.visible){var e=b.__webglObjects[c.id];if(e&&c.castShadow&&(!1===c.frustumCulled||!0===h.intersectsObject(c)))for(var f=0,g=e.length;f<g;f++){var k=e[f];c._modelViewMatrix.multiplyMatrices(d.matrixWorldInverse,c.matrixWorld);r.push(k)}f=0;for(g=c.children.length;f<g;f++)a(b,c.children[f],d)}}var b,c,d,e,f,g,h=new THREE.Frustum,k=new THREE.Matrix4,l=new THREE.Vector3,n=new THREE.Vector3,q=new THREE.Vector3,r=[];this.init=function(a){b=a.context;
c=a;a=THREE.ShaderLib.depthRGBA;var h=THREE.UniformsUtils.clone(a.uniforms);d=new THREE.ShaderMaterial({fragmentShader:a.fragmentShader,vertexShader:a.vertexShader,uniforms:h});e=new THREE.ShaderMaterial({fragmentShader:a.fragmentShader,vertexShader:a.vertexShader,uniforms:h,morphTargets:!0});f=new THREE.ShaderMaterial({fragmentShader:a.fragmentShader,vertexShader:a.vertexShader,uniforms:h,skinning:!0});g=new THREE.ShaderMaterial({fragmentShader:a.fragmentShader,vertexShader:a.vertexShader,uniforms:h,
morphTargets:!0,skinning:!0});d._shadowPass=!0;e._shadowPass=!0;f._shadowPass=!0;g._shadowPass=!0};this.render=function(a,b){c.shadowMapEnabled&&c.shadowMapAutoUpdate&&this.update(a,b)};this.update=function(t,s){var p,v,w,u,D,A,x,C,I=[];u=0;b.clearColor(1,1,1,1);b.disable(b.BLEND);b.enable(b.CULL_FACE);b.frontFace(b.CCW);c.shadowMapCullFace===THREE.CullFaceFront?b.cullFace(b.FRONT):b.cullFace(b.BACK);c.setDepthTest(!0);p=0;for(v=t.__lights.length;p<v;p++)if(w=t.__lights[p],w.castShadow)if(w instanceof
THREE.DirectionalLight&&w.shadowCascade)for(D=0;D<w.shadowCascadeCount;D++){var z;if(w.shadowCascadeArray[D])z=w.shadowCascadeArray[D];else{x=w;var y=D;z=new THREE.DirectionalLight;z.isVirtual=!0;z.onlyShadow=!0;z.castShadow=!0;z.shadowCameraNear=x.shadowCameraNear;z.shadowCameraFar=x.shadowCameraFar;z.shadowCameraLeft=x.shadowCameraLeft;z.shadowCameraRight=x.shadowCameraRight;z.shadowCameraBottom=x.shadowCameraBottom;z.shadowCameraTop=x.shadowCameraTop;z.shadowCameraVisible=x.shadowCameraVisible;
z.shadowDarkness=x.shadowDarkness;z.shadowBias=x.shadowCascadeBias[y];z.shadowMapWidth=x.shadowCascadeWidth[y];z.shadowMapHeight=x.shadowCascadeHeight[y];z.pointsWorld=[];z.pointsFrustum=[];C=z.pointsWorld;A=z.pointsFrustum;for(var K=0;8>K;K++)C[K]=new THREE.Vector3,A[K]=new THREE.Vector3;C=x.shadowCascadeNearZ[y];x=x.shadowCascadeFarZ[y];A[0].set(-1,-1,C);A[1].set(1,-1,C);A[2].set(-1,1,C);A[3].set(1,1,C);A[4].set(-1,-1,x);A[5].set(1,-1,x);A[6].set(-1,1,x);A[7].set(1,1,x);z.originalCamera=s;A=new THREE.Gyroscope;
A.position.copy(w.shadowCascadeOffset);A.add(z);A.add(z.target);s.add(A);w.shadowCascadeArray[D]=z;console.log("Created virtualLight",z)}y=w;C=D;x=y.shadowCascadeArray[C];x.position.copy(y.position);x.target.position.copy(y.target.position);x.lookAt(x.target);x.shadowCameraVisible=y.shadowCameraVisible;x.shadowDarkness=y.shadowDarkness;x.shadowBias=y.shadowCascadeBias[C];A=y.shadowCascadeNearZ[C];y=y.shadowCascadeFarZ[C];x=x.pointsFrustum;x[0].z=A;x[1].z=A;x[2].z=A;x[3].z=A;x[4].z=y;x[5].z=y;x[6].z=
y;x[7].z=y;I[u]=z;u++}else I[u]=w,u++;p=0;for(v=I.length;p<v;p++){w=I[p];w.shadowMap||(D=THREE.LinearFilter,c.shadowMapType===THREE.PCFSoftShadowMap&&(D=THREE.NearestFilter),w.shadowMap=new THREE.WebGLRenderTarget(w.shadowMapWidth,w.shadowMapHeight,{minFilter:D,magFilter:D,format:THREE.RGBAFormat}),w.shadowMapSize=new THREE.Vector2(w.shadowMapWidth,w.shadowMapHeight),w.shadowMatrix=new THREE.Matrix4);if(!w.shadowCamera){if(w instanceof THREE.SpotLight)w.shadowCamera=new THREE.PerspectiveCamera(w.shadowCameraFov,
w.shadowMapWidth/w.shadowMapHeight,w.shadowCameraNear,w.shadowCameraFar);else if(w instanceof THREE.DirectionalLight)w.shadowCamera=new THREE.OrthographicCamera(w.shadowCameraLeft,w.shadowCameraRight,w.shadowCameraTop,w.shadowCameraBottom,w.shadowCameraNear,w.shadowCameraFar);else{console.error("Unsupported light type for shadow");continue}t.add(w.shadowCamera);!0===t.autoUpdate&&t.updateMatrixWorld()}w.shadowCameraVisible&&!w.cameraHelper&&(w.cameraHelper=new THREE.CameraHelper(w.shadowCamera),w.shadowCamera.add(w.cameraHelper));
if(w.isVirtual&&z.originalCamera==s){D=s;u=w.shadowCamera;A=w.pointsFrustum;x=w.pointsWorld;l.set(Infinity,Infinity,Infinity);n.set(-Infinity,-Infinity,-Infinity);for(y=0;8>y;y++)C=x[y],C.copy(A[y]),THREE.ShadowMapPlugin.__projector.unprojectVector(C,D),C.applyMatrix4(u.matrixWorldInverse),C.x<l.x&&(l.x=C.x),C.x>n.x&&(n.x=C.x),C.y<l.y&&(l.y=C.y),C.y>n.y&&(n.y=C.y),C.z<l.z&&(l.z=C.z),C.z>n.z&&(n.z=C.z);u.left=l.x;u.right=n.x;u.top=n.y;u.bottom=l.y;u.updateProjectionMatrix()}u=w.shadowMap;A=w.shadowMatrix;
D=w.shadowCamera;D.position.setFromMatrixPosition(w.matrixWorld);q.setFromMatrixPosition(w.target.matrixWorld);D.lookAt(q);D.updateMatrixWorld();D.matrixWorldInverse.getInverse(D.matrixWorld);w.cameraHelper&&(w.cameraHelper.visible=w.shadowCameraVisible);w.shadowCameraVisible&&w.cameraHelper.update();A.set(0.5,0,0,0.5,0,0.5,0,0.5,0,0,0.5,0.5,0,0,0,1);A.multiply(D.projectionMatrix);A.multiply(D.matrixWorldInverse);k.multiplyMatrices(D.projectionMatrix,D.matrixWorldInverse);h.setFromMatrix(k);c.setRenderTarget(u);
c.clear();r.length=0;a(t,t,D);w=0;for(u=r.length;w<u;w++)x=r[w],A=x.object,x=x.buffer,y=A.material instanceof THREE.MeshFaceMaterial?A.material.materials[0]:A.material,C=void 0!==A.geometry.morphTargets&&0<A.geometry.morphTargets.length&&y.morphTargets,K=A instanceof THREE.SkinnedMesh&&y.skinning,C=A.customDepthMaterial?A.customDepthMaterial:K?C?g:f:C?e:d,c.setMaterialFaces(y),x instanceof THREE.BufferGeometry?c.renderBufferDirect(D,t.__lights,null,C,x,A):c.renderBuffer(D,t.__lights,null,C,x,A);y=
t.__webglObjectsImmediate;w=0;for(u=y.length;w<u;w++)x=y[w],A=x.object,A.visible&&A.castShadow&&(A._modelViewMatrix.multiplyMatrices(D.matrixWorldInverse,A.matrixWorld),c.renderImmediateObject(D,t.__lights,null,d,A))}p=c.getClearColor();v=c.getClearAlpha();b.clearColor(p.r,p.g,p.b,v);b.enable(b.BLEND);c.shadowMapCullFace===THREE.CullFaceFront&&b.cullFace(b.BACK)}};THREE.ShadowMapPlugin.__projector=new THREE.Projector;
THREE.SpritePlugin=function(){var a,b,c,d,e,f,g,h,k,l,n,q,r,t,s,p,v;function w(a,b){return a.z!==b.z?b.z-a.z:b.id-a.id}var u,D,A,x=[],C,I,z,y,K;this.init=function(w){u=w.context;D=w;C=new Float32Array([-0.5,-0.5,0,0,0.5,-0.5,1,0,0.5,0.5,1,1,-0.5,0.5,0,1]);I=new Uint16Array([0,1,2,0,2,3]);z=u.createBuffer();y=u.createBuffer();u.bindBuffer(u.ARRAY_BUFFER,z);u.bufferData(u.ARRAY_BUFFER,C,u.STATIC_DRAW);u.bindBuffer(u.ELEMENT_ARRAY_BUFFER,y);u.bufferData(u.ELEMENT_ARRAY_BUFFER,I,u.STATIC_DRAW);w=u.createProgram();
var x=u.createShader(u.VERTEX_SHADER),P=u.createShader(u.FRAGMENT_SHADER);u.shaderSource(x,["precision "+D.getPrecision()+" float;","uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position * scale;\nvec2 rotatedPosition;\nrotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\nrotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\nvec4 finalPosition;\nfinalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition;\nfinalPosition = projectionMatrix * finalPosition;\ngl_Position = finalPosition;\n}"].join("\n"));
u.shaderSource(P,["precision "+D.getPrecision()+" float;","uniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nuniform float alphaTest;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\nif ( texture.a < alphaTest ) discard;\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\nif ( fogType > 0 ) {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat fogFactor = 0.0;\nif ( fogType == 1 ) {\nfogFactor = smoothstep( fogNear, fogFar, depth );\n} else {\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n}\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}\n}"].join("\n"));
u.compileShader(x);u.compileShader(P);u.attachShader(w,x);u.attachShader(w,P);u.linkProgram(w);K=w;p=u.getAttribLocation(K,"position");v=u.getAttribLocation(K,"uv");a=u.getUniformLocation(K,"uvOffset");b=u.getUniformLocation(K,"uvScale");c=u.getUniformLocation(K,"rotation");d=u.getUniformLocation(K,"scale");e=u.getUniformLocation(K,"color");f=u.getUniformLocation(K,"map");g=u.getUniformLocation(K,"opacity");h=u.getUniformLocation(K,"modelViewMatrix");k=u.getUniformLocation(K,"projectionMatrix");l=
u.getUniformLocation(K,"fogType");n=u.getUniformLocation(K,"fogDensity");q=u.getUniformLocation(K,"fogNear");r=u.getUniformLocation(K,"fogFar");t=u.getUniformLocation(K,"fogColor");s=u.getUniformLocation(K,"alphaTest");w=document.createElement("canvas");w.width=8;w.height=8;x=w.getContext("2d");x.fillStyle="white";x.fillRect(0,0,8,8);A=new THREE.Texture(w);A.needsUpdate=!0};this.render=function(C,I,P,O){x.length=0;C.traverseVisible(function(a){a instanceof THREE.Sprite&&x.push(a)});if(0!==x.length){u.useProgram(K);
u.enableVertexAttribArray(p);u.enableVertexAttribArray(v);u.disable(u.CULL_FACE);u.enable(u.BLEND);u.bindBuffer(u.ARRAY_BUFFER,z);u.vertexAttribPointer(p,2,u.FLOAT,!1,16,0);u.vertexAttribPointer(v,2,u.FLOAT,!1,16,8);u.bindBuffer(u.ELEMENT_ARRAY_BUFFER,y);u.uniformMatrix4fv(k,!1,I.projectionMatrix.elements);u.activeTexture(u.TEXTURE0);u.uniform1i(f,0);O=P=0;var J=C.fog;J?(u.uniform3f(t,J.color.r,J.color.g,J.color.b),J instanceof THREE.Fog?(u.uniform1f(q,J.near),u.uniform1f(r,J.far),u.uniform1i(l,1),
O=P=1):J instanceof THREE.FogExp2&&(u.uniform1f(n,J.density),u.uniform1i(l,2),O=P=2)):(u.uniform1i(l,0),O=P=0);for(var J=0,E=x.length;J<E;J++){var Q=x[J],L=Q.material;Q._modelViewMatrix.multiplyMatrices(I.matrixWorldInverse,Q.matrixWorld);Q.z=-Q._modelViewMatrix.elements[14]}x.sort(w);I=[];J=0;for(E=x.length;J<E;J++)Q=x[J],L=Q.material,u.uniform1f(s,L.alphaTest),u.uniformMatrix4fv(h,!1,Q._modelViewMatrix.elements),I[0]=Q.scale.x,I[1]=Q.scale.y,Q=0,C.fog&&L.fog&&(Q=O),P!==Q&&(u.uniform1i(l,Q),P=Q),
null!==L.map?(u.uniform2f(a,L.map.offset.x,L.map.offset.y),u.uniform2f(b,L.map.repeat.x,L.map.repeat.y)):(u.uniform2f(a,0,0),u.uniform2f(b,1,1)),u.uniform1f(g,L.opacity),u.uniform3f(e,L.color.r,L.color.g,L.color.b),u.uniform1f(c,L.rotation),u.uniform2fv(d,I),D.setBlending(L.blending,L.blendEquation,L.blendSrc,L.blendDst),D.setDepthTest(L.depthTest),D.setDepthWrite(L.depthWrite),L.map&&L.map.image&&L.map.image.width?D.setTexture(L.map,0):D.setTexture(A,0),u.drawElements(u.TRIANGLES,6,u.UNSIGNED_SHORT,
0);u.enable(u.CULL_FACE)}}};
THREE.DepthPassPlugin=function(){function a(b,c,d){if(c.visible){var e=b.__webglObjects[c.id];if(e&&(!1===c.frustumCulled||!0===h.intersectsObject(c)))for(var f=0,g=e.length;f<g;f++){var k=e[f];c._modelViewMatrix.multiplyMatrices(d.matrixWorldInverse,c.matrixWorld);l.push(k)}f=0;for(g=c.children.length;f<g;f++)a(b,c.children[f],d)}}this.enabled=!1;this.renderTarget=null;var b,c,d,e,f,g,h=new THREE.Frustum,k=new THREE.Matrix4,l=[];this.init=function(a){b=a.context;c=a;a=THREE.ShaderLib.depthRGBA;var h=
THREE.UniformsUtils.clone(a.uniforms);d=new THREE.ShaderMaterial({fragmentShader:a.fragmentShader,vertexShader:a.vertexShader,uniforms:h});e=new THREE.ShaderMaterial({fragmentShader:a.fragmentShader,vertexShader:a.vertexShader,uniforms:h,morphTargets:!0});f=new THREE.ShaderMaterial({fragmentShader:a.fragmentShader,vertexShader:a.vertexShader,uniforms:h,skinning:!0});g=new THREE.ShaderMaterial({fragmentShader:a.fragmentShader,vertexShader:a.vertexShader,uniforms:h,morphTargets:!0,skinning:!0});d._shadowPass=
!0;e._shadowPass=!0;f._shadowPass=!0;g._shadowPass=!0};this.render=function(a,b){this.enabled&&this.update(a,b)};this.update=function(n,q){var r,t,s,p,v;b.clearColor(1,1,1,1);b.disable(b.BLEND);c.setDepthTest(!0);!0===n.autoUpdate&&n.updateMatrixWorld();q.matrixWorldInverse.getInverse(q.matrixWorld);k.multiplyMatrices(q.projectionMatrix,q.matrixWorldInverse);h.setFromMatrix(k);c.setRenderTarget(this.renderTarget);c.clear();l.length=0;a(n,n,q);var w;r=0;for(t=l.length;r<t;r++)s=l[r],v=s.object,s=s.buffer,
v instanceof THREE.PointCloud&&!v.customDepthMaterial||((w=v.material instanceof THREE.MeshFaceMaterial?v.material.materials[0]:v.material)&&c.setMaterialFaces(v.material),p=void 0!==v.geometry.morphTargets&&0<v.geometry.morphTargets.length&&w.morphTargets,w=v instanceof THREE.SkinnedMesh&&w.skinning,p=v.customDepthMaterial?v.customDepthMaterial:w?p?g:f:p?e:d,s instanceof THREE.BufferGeometry?c.renderBufferDirect(q,n.__lights,null,p,s,v):c.renderBuffer(q,n.__lights,null,p,s,v));p=n.__webglObjectsImmediate;
r=0;for(t=p.length;r<t;r++)s=p[r],v=s.object,v.visible&&(v._modelViewMatrix.multiplyMatrices(q.matrixWorldInverse,v.matrixWorld),c.renderImmediateObject(q,n.__lights,null,d,v));r=c.getClearColor();t=c.getClearAlpha();b.clearColor(r.r,r.g,r.b,t);b.enable(b.BLEND)}};
THREE.ShaderFlares={lensFlareVertexTexture:{vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility =        visibility.r / 9.0;\nvVisibility *= 1.0 - visibility.g / 9.0;\nvVisibility *=       visibility.b / 9.0;\nvVisibility *= 1.0 - visibility.a / 9.0;\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",fragmentShader:"uniform lowp int renderType;\nuniform sampler2D map;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"},
lensFlare:{vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
fragmentShader:"precision mediump float;\nuniform lowp int renderType;\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * visibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"}};

/**
 * @author Eberhard Graether / http://egraether.com/
 * @author Mark Lundin 	/ http://mark-lundin.com
 */

THREE.TrackballControls = function ( object, domElement ) {

	var _this = this;
	var STATE = { NONE: -1, ROTATE: 0, ZOOM: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_ZOOM_PAN: 4 };

	this.object = object;
	this.domElement = ( domElement !== undefined ) ? domElement : document;

	// API

	this.enabled = true;

	this.screen = { left: 0, top: 0, width: 0, height: 0 };

	this.rotateSpeed = 1.0;
	this.zoomSpeed = 1.2;
	this.panSpeed = 0.3;

	this.noRotate = false;
	this.noZoom = false;
	this.noPan = false;
	this.noRoll = false;

	this.staticMoving = false;
	this.dynamicDampingFactor = 0.2;

	this.minDistance = 0;
	this.maxDistance = Infinity;

	this.keys = [ 65 /*A*/, 83 /*S*/, 68 /*D*/ ];

	// internals

	this.target = new THREE.Vector3();

	var EPS = 0.000001;

	var lastPosition = new THREE.Vector3();

	var _state = STATE.NONE,
	_prevState = STATE.NONE,

	_eye = new THREE.Vector3(),

	_rotateStart = new THREE.Vector3(),
	_rotateEnd = new THREE.Vector3(),

	_zoomStart = new THREE.Vector2(),
	_zoomEnd = new THREE.Vector2(),

	_touchZoomDistanceStart = 0,
	_touchZoomDistanceEnd = 0,

	_panStart = new THREE.Vector2(),
	_panEnd = new THREE.Vector2();

	// for reset

	this.target0 = this.target.clone();
	this.position0 = this.object.position.clone();
	this.up0 = this.object.up.clone();

	// events

	var changeEvent = { type: 'change' };
	var startEvent = { type: 'start'};
	var endEvent = { type: 'end'};


	// methods

	this.handleResize = function () {

		if ( this.domElement === document ) {

			this.screen.left = 0;
			this.screen.top = 0;
			this.screen.width = window.innerWidth;
			this.screen.height = window.innerHeight;

		} else {

			var box = this.domElement.getBoundingClientRect();
			// adjustments come from similar code in the jquery offset() function
			var d = this.domElement.ownerDocument.documentElement;
			this.screen.left = box.left + window.pageXOffset - d.clientLeft;
			this.screen.top = box.top + window.pageYOffset - d.clientTop;
			this.screen.width = box.width;
			this.screen.height = box.height;

		}

	};

	this.handleEvent = function ( event ) {

		if ( typeof this[ event.type ] == 'function' ) {

			this[ event.type ]( event );

		}

	};

	var getMouseOnScreen = ( function () {

		var vector = new THREE.Vector2();

		return function ( pageX, pageY ) {

			vector.set(
				( pageX - _this.screen.left ) / _this.screen.width,
				( pageY - _this.screen.top ) / _this.screen.height
			);

			return vector;

		};

	}() );

	var getMouseProjectionOnBall = ( function () {

		var vector = new THREE.Vector3();
		var objectUp = new THREE.Vector3();
		var mouseOnBall = new THREE.Vector3();

		return function ( pageX, pageY ) {

			mouseOnBall.set(
				( pageX - _this.screen.width * 0.5 - _this.screen.left ) / (_this.screen.width*.5),
				( _this.screen.height * 0.5 + _this.screen.top - pageY ) / (_this.screen.height*.5),
				0.0
			);

			var length = mouseOnBall.length();

			if ( _this.noRoll ) {

				if ( length < Math.SQRT1_2 ) {

					mouseOnBall.z = Math.sqrt( 1.0 - length*length );

				} else {

					mouseOnBall.z = .5 / length;
					
				}

			} else if ( length > 1.0 ) {

				mouseOnBall.normalize();

			} else {

				mouseOnBall.z = Math.sqrt( 1.0 - length * length );

			}

			_eye.copy( _this.object.position ).sub( _this.target );

			vector.copy( _this.object.up ).setLength( mouseOnBall.y )
			vector.add( objectUp.copy( _this.object.up ).cross( _eye ).setLength( mouseOnBall.x ) );
			vector.add( _eye.setLength( mouseOnBall.z ) );

			return vector;

		};

	}() );

	this.rotateCamera = (function(){

		var axis = new THREE.Vector3(),
			quaternion = new THREE.Quaternion();


		return function () {

			var angle = Math.acos( _rotateStart.dot( _rotateEnd ) / _rotateStart.length() / _rotateEnd.length() );

			if ( angle ) {

				axis.crossVectors( _rotateStart, _rotateEnd ).normalize();

				angle *= _this.rotateSpeed;

				quaternion.setFromAxisAngle( axis, -angle );

				_eye.applyQuaternion( quaternion );
				_this.object.up.applyQuaternion( quaternion );

				_rotateEnd.applyQuaternion( quaternion );

				if ( _this.staticMoving ) {

					_rotateStart.copy( _rotateEnd );

				} else {

					quaternion.setFromAxisAngle( axis, angle * ( _this.dynamicDampingFactor - 1.0 ) );
					_rotateStart.applyQuaternion( quaternion );

				}

			}
		}

	}());

	this.zoomCamera = function () {

		if ( _state === STATE.TOUCH_ZOOM_PAN ) {

			var factor = _touchZoomDistanceStart / _touchZoomDistanceEnd;
			_touchZoomDistanceStart = _touchZoomDistanceEnd;
			_eye.multiplyScalar( factor );

		} else {

			var factor = 1.0 + ( _zoomEnd.y - _zoomStart.y ) * _this.zoomSpeed;

			if ( factor !== 1.0 && factor > 0.0 ) {

				_eye.multiplyScalar( factor );

				if ( _this.staticMoving ) {

					_zoomStart.copy( _zoomEnd );

				} else {

					_zoomStart.y += ( _zoomEnd.y - _zoomStart.y ) * this.dynamicDampingFactor;

				}

			}

		}

	};

	this.panCamera = (function(){

		var mouseChange = new THREE.Vector2(),
			objectUp = new THREE.Vector3(),
			pan = new THREE.Vector3();

		return function () {

			mouseChange.copy( _panEnd ).sub( _panStart );

			if ( mouseChange.lengthSq() ) {

				mouseChange.multiplyScalar( _eye.length() * _this.panSpeed );

				pan.copy( _eye ).cross( _this.object.up ).setLength( mouseChange.x );
				pan.add( objectUp.copy( _this.object.up ).setLength( mouseChange.y ) );

				_this.object.position.add( pan );
				_this.target.add( pan );

				if ( _this.staticMoving ) {

					_panStart.copy( _panEnd );

				} else {

					_panStart.add( mouseChange.subVectors( _panEnd, _panStart ).multiplyScalar( _this.dynamicDampingFactor ) );

				}

			}
		}

	}());

	this.checkDistances = function () {

		if ( !_this.noZoom || !_this.noPan ) {

			if ( _eye.lengthSq() > _this.maxDistance * _this.maxDistance ) {

				_this.object.position.addVectors( _this.target, _eye.setLength( _this.maxDistance ) );

			}

			if ( _eye.lengthSq() < _this.minDistance * _this.minDistance ) {

				_this.object.position.addVectors( _this.target, _eye.setLength( _this.minDistance ) );

			}

		}

	};

	this.update = function () {

		_eye.subVectors( _this.object.position, _this.target );

		if ( !_this.noRotate ) {

			_this.rotateCamera();

		}

		if ( !_this.noZoom ) {

			_this.zoomCamera();

		}

		if ( !_this.noPan ) {

			_this.panCamera();

		}

		_this.object.position.addVectors( _this.target, _eye );

		_this.checkDistances();

		_this.object.lookAt( _this.target );

		if ( lastPosition.distanceToSquared( _this.object.position ) > EPS ) {

			_this.dispatchEvent( changeEvent );

			lastPosition.copy( _this.object.position );

		}

	};

	this.reset = function () {

		_state = STATE.NONE;
		_prevState = STATE.NONE;

		_this.target.copy( _this.target0 );
		_this.object.position.copy( _this.position0 );
		_this.object.up.copy( _this.up0 );

		_eye.subVectors( _this.object.position, _this.target );

		_this.object.lookAt( _this.target );

		_this.dispatchEvent( changeEvent );

		lastPosition.copy( _this.object.position );

	};

	// listeners

	function keydown( event ) {

		if ( _this.enabled === false ) return;

		window.removeEventListener( 'keydown', keydown );

		_prevState = _state;

		if ( _state !== STATE.NONE ) {

			return;

		} else if ( event.keyCode === _this.keys[ STATE.ROTATE ] && !_this.noRotate ) {

			_state = STATE.ROTATE;

		} else if ( event.keyCode === _this.keys[ STATE.ZOOM ] && !_this.noZoom ) {

			_state = STATE.ZOOM;

		} else if ( event.keyCode === _this.keys[ STATE.PAN ] && !_this.noPan ) {

			_state = STATE.PAN;

		}

	}

	function keyup( event ) {

		if ( _this.enabled === false ) return;

		_state = _prevState;

		window.addEventListener( 'keydown', keydown, false );

	}

	function mousedown( event ) {

		if ( _this.enabled === false ) return;

		event.preventDefault();
		// event.stopPropagation();

		if ( _state === STATE.NONE ) {

			_state = event.button;

		}

		if ( _state === STATE.ROTATE && !_this.noRotate ) {

			_rotateStart.copy( getMouseProjectionOnBall( event.pageX, event.pageY ) );
			_rotateEnd.copy( _rotateStart );

		} else if ( _state === STATE.ZOOM && !_this.noZoom ) {

			_zoomStart.copy( getMouseOnScreen( event.pageX, event.pageY ) );
			_zoomEnd.copy(_zoomStart);

		} else if ( _state === STATE.PAN && !_this.noPan ) {

			_panStart.copy( getMouseOnScreen( event.pageX, event.pageY ) );
			_panEnd.copy(_panStart)

		}

		document.addEventListener( 'mousemove', mousemove, false );
		document.addEventListener( 'mouseup', mouseup, false );

		_this.dispatchEvent( startEvent );

	}

	function mousemove( event ) {

		if ( _this.enabled === false ) return;

		event.preventDefault();
		// event.stopPropagation();

		if ( _state === STATE.ROTATE && !_this.noRotate ) {

			_rotateEnd.copy( getMouseProjectionOnBall( event.pageX, event.pageY ) );

		} else if ( _state === STATE.ZOOM && !_this.noZoom ) {

			_zoomEnd.copy( getMouseOnScreen( event.pageX, event.pageY ) );

		} else if ( _state === STATE.PAN && !_this.noPan ) {

			_panEnd.copy( getMouseOnScreen( event.pageX, event.pageY ) );

		}

	}

	function mouseup( event ) {

		if ( _this.enabled === false ) return;

		event.preventDefault();
		// event.stopPropagation();

		_state = STATE.NONE;

		document.removeEventListener( 'mousemove', mousemove );
		document.removeEventListener( 'mouseup', mouseup );
		_this.dispatchEvent( endEvent );

	}

	function mousewheel( event ) {

		if ( _this.enabled === false ) return;

		event.preventDefault();
		// event.stopPropagation();

		var delta = 0;

		if ( event.wheelDelta ) { // WebKit / Opera / Explorer 9

			delta = event.wheelDelta / 40;

		} else if ( event.detail ) { // Firefox

			delta = - event.detail / 3;

		}

		_zoomStart.y += delta * 0.01;
		_this.dispatchEvent( startEvent );
		_this.dispatchEvent( endEvent );

	}

	function touchstart( event ) {

		if ( _this.enabled === false ) return;

		switch ( event.touches.length ) {

			case 1:
				_state = STATE.TOUCH_ROTATE;
				_rotateStart.copy( getMouseProjectionOnBall( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY ) );
				_rotateEnd.copy( _rotateStart );
				break;

			case 2:
				_state = STATE.TOUCH_ZOOM_PAN;
				var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
				var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;
				_touchZoomDistanceEnd = _touchZoomDistanceStart = Math.sqrt( dx * dx + dy * dy );

				var x = ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX ) / 2;
				var y = ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY ) / 2;
				_panStart.copy( getMouseOnScreen( x, y ) );
				_panEnd.copy( _panStart );
				break;

			default:
				_state = STATE.NONE;

		}
		_this.dispatchEvent( startEvent );


	}

	function touchmove( event ) {

		if ( _this.enabled === false ) return;

		event.preventDefault();
		event.stopPropagation();

		switch ( event.touches.length ) {

			case 1:
				_rotateEnd.copy( getMouseProjectionOnBall( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY ) );
				break;

			case 2:
				var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
				var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;
				_touchZoomDistanceEnd = Math.sqrt( dx * dx + dy * dy );

				var x = ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX ) / 2;
				var y = ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY ) / 2;
				_panEnd.copy( getMouseOnScreen( x, y ) );
				break;

			default:
				_state = STATE.NONE;

		}

	}

	function touchend( event ) {

		if ( _this.enabled === false ) return;

		switch ( event.touches.length ) {

			case 1:
				_rotateEnd.copy( getMouseProjectionOnBall( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY ) );
				_rotateStart.copy( _rotateEnd );
				break;

			case 2:
				_touchZoomDistanceStart = _touchZoomDistanceEnd = 0;

				var x = ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX ) / 2;
				var y = ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY ) / 2;
				_panEnd.copy( getMouseOnScreen( x, y ) );
				_panStart.copy( _panEnd );
				break;

		}

		_state = STATE.NONE;
		_this.dispatchEvent( endEvent );

	}

	this.domElement.addEventListener( 'contextmenu', function ( event ) { event.preventDefault(); }, false );

	this.domElement.addEventListener( 'mousedown', mousedown, false );

	this.domElement.addEventListener( 'mousewheel', mousewheel, false );
	this.domElement.addEventListener( 'DOMMouseScroll', mousewheel, false ); // firefox

	this.domElement.addEventListener( 'touchstart', touchstart, false );
	this.domElement.addEventListener( 'touchend', touchend, false );
	this.domElement.addEventListener( 'touchmove', touchmove, false );

	window.addEventListener( 'keydown', keydown, false );
	window.addEventListener( 'keyup', keyup, false );

	this.handleResize();

	// force an update at start
	this.update();

};

THREE.TrackballControls.prototype = Object.create( THREE.EventDispatcher.prototype );

/*
 *	@author zz85 / http://twitter.com/blurspline / http://www.lab4games.net/zz85/blog 
 *
 *	Subdivision Geometry Modifier 
 *		using Catmull-Clark Subdivision Surfaces
 *		for creating smooth geometry meshes
 *
 *	Note: a modifier modifies vertices and faces of geometry,
 *		so use geometry.clone() if original geometry needs to be retained
 * 
 *	Readings: 
 *		http://en.wikipedia.org/wiki/Catmull%E2%80%93Clark_subdivision_surface
 *		http://www.rorydriscoll.com/2008/08/01/catmull-clark-subdivision-the-basics/
 *		http://xrt.wikidot.com/blog:31
 *		"Subdivision Surfaces in Character Animation"
 *
 *		(on boundary edges)
 *		http://rosettacode.org/wiki/Catmull%E2%80%93Clark_subdivision_surface
 *		https://graphics.stanford.edu/wikis/cs148-09-summer/Assignment3Description
 *
 *	Supports:
 *		Closed and Open geometries.
 *
 *	TODO:
 *		crease vertex and "semi-sharp" features
 *		selective subdivision
 */

THREE.Face4Stub = function ( a, b, c, d, normal, color, materialIndex ) {

	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;

	this.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();
	this.vertexNormals = normal instanceof Array ? normal : [ ];

	this.color = color instanceof THREE.Color ? color : new THREE.Color();
	this.vertexColors = color instanceof Array ? color : [];

	this.vertexTangents = [];

	this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

	this.centroid = new THREE.Vector3();

};


THREE.GeometryUtils.convertFace4s = function(geometry) {

	// return geometry;

	var faces = geometry.faces;
	var faceVertexUvs = geometry.faceVertexUvs[0];

	var newfaces = [];
	var newfaceVertexUvs = [];

	var f, fl, face, uv;

	for (f=0, fl=faces.length; f < fl; f++) {

		face = faces[f];
		uv = faceVertexUvs[f];

		if ( face instanceof THREE.Face3 ) {
			
			newfaces.push(face);
			if (uv) newfaceVertexUvs.push(uv);

		} else {

			newfaces.push( new THREE.Face3( face.a, face.b, face.c, null, face.color, face.materialIndex) );
			newfaces.push( new THREE.Face3( face.d, face.a, face.c, null, face.color, face.materialIndex) );


			if (uv) newfaceVertexUvs.push([uv[0], uv[1], uv[2]]);
			if (uv) newfaceVertexUvs.push([uv[3], uv[0], uv[2]]);

		}

	}

	geometry.faces = newfaces;
	geometry.faceVertexUvs = [newfaceVertexUvs];

}


THREE.SubdivisionModifier = function ( subdivisions ) {

	this.subdivisions = (subdivisions === undefined ) ? 1 : subdivisions;

	// Settings
	this.useOldVertexColors = false;
	this.supportUVs = true;
	this.debug = false;

};

// Applies the "modify" pattern
THREE.SubdivisionModifier.prototype.modify = function ( geometry ) {

	var repeats = this.subdivisions;

	while ( repeats-- > 0 ) {
		this.smooth( geometry );
	}

	THREE.GeometryUtils.convertFace4s( geometry );
	delete geometry.__tmpVertices;
	// geometry.computeCentroids();
	geometry.computeFaceNormals();
	geometry.computeVertexNormals();


};

/// REFACTORING THIS OUT

THREE.GeometryUtils.orderedKey = function ( a, b ) {

	return Math.min( a, b ) + "_" + Math.max( a, b );

};


// Returns a hashmap - of { edge_key: face_index }
THREE.GeometryUtils.computeEdgeFaces = function ( geometry ) {

	var i, il, v1, v2, j, k,
		face, faceIndices, faceIndex,
		edge,
		hash,
		edgeFaceMap = {};

	var orderedKey = THREE.GeometryUtils.orderedKey;

	function mapEdgeHash( hash, i ) {

		if ( edgeFaceMap[ hash ] === undefined ) {

			edgeFaceMap[ hash ] = [];

		}

		edgeFaceMap[ hash ].push( i );
	}


	// construct vertex -> face map

	for( i = 0, il = geometry.faces.length; i < il; i ++ ) {

		face = geometry.faces[ i ];

		if ( face instanceof THREE.Face3 ) {

			hash = orderedKey( face.a, face.b );
			mapEdgeHash( hash, i );

			hash = orderedKey( face.b, face.c );
			mapEdgeHash( hash, i );

			hash = orderedKey( face.c, face.a );
			mapEdgeHash( hash, i );

		} else if ( face instanceof THREE.Face4Stub ) {

			hash = orderedKey( face.a, face.b );
			mapEdgeHash( hash, i );

			hash = orderedKey( face.b, face.c );
			mapEdgeHash( hash, i );

			hash = orderedKey( face.c, face.d );
			mapEdgeHash( hash, i );

			hash = orderedKey( face.d, face.a );
			mapEdgeHash( hash, i );

		}

	}

	// extract faces

	// var edges = [];
	// 
	// var numOfEdges = 0;
	// for (i in edgeFaceMap) {
	// 	numOfEdges++;
	//
	// 	edge = edgeFaceMap[i];
	// 	edges.push(edge);
	//
	// }

	//debug('edgeFaceMap', edgeFaceMap, 'geometry.edges',geometry.edges, 'numOfEdges', numOfEdges);

	return edgeFaceMap;

}

/////////////////////////////

// Performs an iteration of Catmull-Clark Subdivision
THREE.SubdivisionModifier.prototype.smooth = function ( oldGeometry ) {

	//debug( 'running smooth' );

	// New set of vertices, faces and uvs
	var newVertices = [], newFaces = [], newUVs = [];

	function v( x, y, z ) {
		newVertices.push( new THREE.Vector3( x, y, z ) );
	}

	var scope = this;
	var orderedKey = THREE.GeometryUtils.orderedKey;
	var computeEdgeFaces = THREE.GeometryUtils.computeEdgeFaces;

	function assert() {

		if (scope.debug && console && console.assert) console.assert.apply(console, arguments);

	}

	function debug() {

		if (scope.debug) console.log.apply(console, arguments);

	}

	function warn() {

		if (console)
		console.log.apply(console, arguments);

	}

	function f4( a, b, c, d, oldFace, orders, facei ) {

		// TODO move vertex selection over here!

		var newFace = new THREE.Face4Stub( a, b, c, d, null, oldFace.color, oldFace.materialIndex );

		if (scope.useOldVertexColors) {

			newFace.vertexColors = []; 

			var color, tmpColor, order;

			for (var i=0;i<4;i++) {

				order = orders[i];

				color = new THREE.Color(),
				color.setRGB(0,0,0);

				for (var j=0, jl=0; j<order.length;j++) {
					tmpColor = oldFace.vertexColors[order[j]-1];
					color.r += tmpColor.r;
					color.g += tmpColor.g;
					color.b += tmpColor.b;
				}

				color.r /= order.length;
				color.g /= order.length;
				color.b /= order.length;

				newFace.vertexColors[i] = color;

			}

		}

		newFaces.push( newFace );

		if (scope.supportUVs) {

			var aUv = [
				getUV(a, ''),
				getUV(b, facei),
				getUV(c, facei),
				getUV(d, facei)
			];

			if (!aUv[0]) debug('a :( ', a+':'+facei);
			else if (!aUv[1]) debug('b :( ', b+':'+facei);
			else if (!aUv[2]) debug('c :( ', c+':'+facei);
			else if (!aUv[3]) debug('d :( ', d+':'+facei);
			else 
				newUVs.push( aUv );

		}
	}

	var originalPoints = oldGeometry.vertices;
	var originalFaces = oldGeometry.faces;
	var originalVerticesLength = originalPoints.length;

	var newPoints = originalPoints.concat(); // New set of vertices to work on

	var facePoints = [], // these are new points on exisiting faces
		edgePoints = {}; // these are new points on exisiting edges

	var sharpEdges = {}, sharpVertices = []; // Mark edges and vertices to prevent smoothening on them
	// TODO: handle this correctly.

	var uvForVertices = {}; // Stored in {vertex}:{old face} format


	function debugCoreStuff() {

		console.log('facePoints', facePoints, 'edgePoints', edgePoints);
		console.log('edgeFaceMap', edgeFaceMap, 'vertexEdgeMap', vertexEdgeMap);

	}

	function getUV(vertexNo, oldFaceNo) {
		var j,jl;

		var key = vertexNo+':'+oldFaceNo;
		var theUV = uvForVertices[key];

		if (!theUV) {
			if (vertexNo>=originalVerticesLength && vertexNo < (originalVerticesLength + originalFaces.length)) {
				debug('face pt');
			} else {
				debug('edge pt');
			}

			warn('warning, UV not found for', key);

			return null;
		}

		return theUV;
 
		// Original faces -> Vertex Nos. 
		// new Facepoint -> Vertex Nos.
		// edge Points

	}

	function addUV(vertexNo, oldFaceNo, value) {

		var key = vertexNo+':'+oldFaceNo;
		if (!(key in uvForVertices)) {
			uvForVertices[key] = value;
		} else {
			warn('dup vertexNo', vertexNo, 'oldFaceNo', oldFaceNo, 'value', value, 'key', key, uvForVertices[key]);
		}
	}

	// Step 1
	//	For each face, add a face point
	//	Set each face point to be the centroid of all original points for the respective face.
	// debug(oldGeometry);
	var i, il, j, jl, face;

	// For Uvs
	var uvs = oldGeometry.faceVertexUvs[0];
	var abcd = 'abcd', vertice;

	debug('originalFaces, uvs, originalVerticesLength', originalFaces.length, uvs.length, originalVerticesLength);

	if (scope.supportUVs)

	for (i=0, il = uvs.length; i<il; i++ ) {

		for (j=0,jl=uvs[i].length;j<jl;j++) {

			vertice = originalFaces[i][abcd.charAt(j)];
			addUV(vertice, i, uvs[i][j]);

		}

	}

	if (uvs.length == 0) scope.supportUVs = false;

	// Additional UVs check, if we index original 
	var uvCount = 0;
	for (var u in uvForVertices) {
		uvCount++;
	}
	if (!uvCount) {
		scope.supportUVs = false;
		debug('no uvs');
	}

	var avgUv ;

	for (i=0, il = originalFaces.length; i<il ;i++) {

		face = originalFaces[ i ];
		facePoints.push( face.centroid );
		newPoints.push( face.centroid );

		if (!scope.supportUVs) continue;

		// Prepare subdivided uv

		avgUv = new THREE.Vector2();

		if ( face instanceof THREE.Face3 ) {

			avgUv.x = getUV( face.a, i ).x + getUV( face.b, i ).x + getUV( face.c, i ).x;
			avgUv.y = getUV( face.a, i ).y + getUV( face.b, i ).y + getUV( face.c, i ).y;
			avgUv.x /= 3;
			avgUv.y /= 3;

		} else if ( face instanceof THREE.Face4Stub ) {

			avgUv.x = getUV( face.a, i ).x + getUV( face.b, i ).x + getUV( face.c, i ).x + getUV( face.d, i ).x;
			avgUv.y = getUV( face.a, i ).y + getUV( face.b, i ).y + getUV( face.c, i ).y + getUV( face.d, i ).y;
			avgUv.x /= 4;
			avgUv.y /= 4;

		}

		addUV(originalVerticesLength + i, '', avgUv);

	}

	// Step 2
	//	For each edge, add an edge point.
	//	Set each edge point to be the average of the two neighbouring face points and its two original endpoints.

	var edgeFaceMap = computeEdgeFaces ( oldGeometry ); // Edge Hash -> Faces Index  eg { edge_key: [face_index, face_index2 ]}
	var edge, faceIndexA, faceIndexB, avg;

	// debug('edgeFaceMap', edgeFaceMap);

	var edgeCount = 0;

	var edgeVertex, edgeVertexA, edgeVertexB;

	////

	var vertexEdgeMap = {}; // Gives edges connecting from each vertex
	var vertexFaceMap = {}; // Gives faces connecting from each vertex

	function addVertexEdgeMap(vertex, edge) {

		if (vertexEdgeMap[vertex]===undefined) {

			vertexEdgeMap[vertex] = [];

		}

		vertexEdgeMap[vertex].push(edge);
	}

	function addVertexFaceMap(vertex, face, edge) {

		if (vertexFaceMap[vertex]===undefined) {

			vertexFaceMap[vertex] = {};

		}

		vertexFaceMap[vertex][face] = edge;
		// vertexFaceMap[vertex][face] = null;
	}

	// Prepares vertexEdgeMap and vertexFaceMap
	for (i in edgeFaceMap) { // This is for every edge
		edge = edgeFaceMap[i];

		edgeVertex = i.split('_');
		edgeVertexA = edgeVertex[0];
		edgeVertexB = edgeVertex[1];

		// Maps an edgeVertex to connecting edges
		addVertexEdgeMap(edgeVertexA, [edgeVertexA, edgeVertexB] );
		addVertexEdgeMap(edgeVertexB, [edgeVertexA, edgeVertexB] );

		for (j=0,jl=edge.length;j<jl;j++) {

			face = edge[j];
			addVertexFaceMap(edgeVertexA, face, i);
			addVertexFaceMap(edgeVertexB, face, i);

		}

		// {edge vertex: { face1: edge_key, face2: edge_key.. } }

		// this thing is fishy right now.
		if (edge.length < 2) {

			// edge is "sharp";
			sharpEdges[i] = true;
			sharpVertices[edgeVertexA] = true;
			sharpVertices[edgeVertexB] = true;

		}

	}

	for (i in edgeFaceMap) {

		edge = edgeFaceMap[i];

		faceIndexA = edge[0]; // face index a
		faceIndexB = edge[1]; // face index b

		edgeVertex = i.split('_');
		edgeVertexA = edgeVertex[0];
		edgeVertexB = edgeVertex[1];

		avg = new THREE.Vector3();

		//debug(i, faceIndexB,facePoints[faceIndexB]);

		assert(edge.length > 0, 'an edge without faces?!');

		if (edge.length==1) {

			avg.add( originalPoints[ edgeVertexA ] );
			avg.add( originalPoints[ edgeVertexB ] );
			avg.multiplyScalar( 0.5 );

			sharpVertices[newPoints.length] = true;

		} else {

			avg.add( facePoints[ faceIndexA ] );
			avg.add( facePoints[ faceIndexB ] );

			avg.add( originalPoints[ edgeVertexA ] );
			avg.add( originalPoints[ edgeVertexB ] );

			avg.multiplyScalar( 0.25 );

		}

		edgePoints[i] = originalVerticesLength + originalFaces.length + edgeCount;

		newPoints.push( avg );

		edgeCount ++;

		if (!scope.supportUVs) {
			continue;
		}

		// Prepare subdivided uv

		avgUv = new THREE.Vector2();

		avgUv.x = getUV(edgeVertexA, faceIndexA).x + getUV(edgeVertexB, faceIndexA).x;
		avgUv.y = getUV(edgeVertexA, faceIndexA).y + getUV(edgeVertexB, faceIndexA).y;
		avgUv.x /= 2;
		avgUv.y /= 2;

		addUV(edgePoints[i], faceIndexA, avgUv);

		if (edge.length>=2) {
			assert(edge.length == 2, 'did we plan for more than 2 edges?');
			avgUv = new THREE.Vector2();

			avgUv.x = getUV(edgeVertexA, faceIndexB).x + getUV(edgeVertexB, faceIndexB).x;
			avgUv.y = getUV(edgeVertexA, faceIndexB).y + getUV(edgeVertexB, faceIndexB).y;
			avgUv.x /= 2;
			avgUv.y /= 2;

			addUV(edgePoints[i], faceIndexB, avgUv);
		}

	}

	debug('-- Step 2 done');

	// Step 3
	//	For each face point, add an edge for every edge of the face, 
	//	connecting the face point to each edge point for the face.

	var facePt, currentVerticeIndex;

	var hashAB, hashBC, hashCD, hashDA, hashCA;

	var abc123 = ['123', '12', '2', '23'];
	var bca123 = ['123', '23', '3', '31'];
	var cab123 = ['123', '31', '1', '12'];
	var abc1234 = ['1234', '12', '2', '23'];
	var bcd1234 = ['1234', '23', '3', '34'];
	var cda1234 = ['1234', '34', '4', '41'];
	var dab1234 = ['1234', '41', '1', '12'];

	for (i=0, il = facePoints.length; i<il ;i++) { // for every face
		facePt = facePoints[i];
		face = originalFaces[i];
		currentVerticeIndex = originalVerticesLength+ i;

		if ( face instanceof THREE.Face3 ) {

			// create 3 face4s

			hashAB = orderedKey( face.a, face.b );
			hashBC = orderedKey( face.b, face.c );
			hashCA = orderedKey( face.c, face.a );

			f4( currentVerticeIndex, edgePoints[hashAB], face.b, edgePoints[hashBC], face, abc123, i );
			f4( currentVerticeIndex, edgePoints[hashBC], face.c, edgePoints[hashCA], face, bca123, i );
			f4( currentVerticeIndex, edgePoints[hashCA], face.a, edgePoints[hashAB], face, cab123, i );

		} else if ( face instanceof THREE.Face4Stub ) {

			// create 4 face4s

			hashAB = orderedKey( face.a, face.b );
			hashBC = orderedKey( face.b, face.c );
			hashCD = orderedKey( face.c, face.d );
			hashDA = orderedKey( face.d, face.a );

			f4( currentVerticeIndex, edgePoints[hashAB], face.b, edgePoints[hashBC], face, abc1234, i );
			f4( currentVerticeIndex, edgePoints[hashBC], face.c, edgePoints[hashCD], face, bcd1234, i );
			f4( currentVerticeIndex, edgePoints[hashCD], face.d, edgePoints[hashDA], face, cda1234, i );
			f4( currentVerticeIndex, edgePoints[hashDA], face.a, edgePoints[hashAB], face, dab1234, i );


		} else {

			debug('face should be a face!', face);

		}

	}

	newVertices = newPoints;

	// Step 4

	//	For each original point P, 
	//		take the average F of all n face points for faces touching P, 
	//		and take the average R of all n edge midpoints for edges touching P, 
	//		where each edge midpoint is the average of its two endpoint vertices. 
	//	Move each original point to the point


	var F = new THREE.Vector3();
	var R = new THREE.Vector3();

	var n;
	for (i=0, il = originalPoints.length; i<il; i++) {
		// (F + 2R + (n-3)P) / n

		if (vertexEdgeMap[i]===undefined) continue;

		F.set(0,0,0);
		R.set(0,0,0);
		var newPos =  new THREE.Vector3(0,0,0);

		var f = 0; // this counts number of faces, original vertex is connected to (also known as valance?)
		for (j in vertexFaceMap[i]) {
			F.add(facePoints[j]);
			f++;
		}

		var sharpEdgeCount = 0;

		n = vertexEdgeMap[i].length; // given a vertex, return its connecting edges

		// Are we on the border?
		var boundary_case = f != n;

		// if (boundary_case) {
		// 	console.error('moo', 'o', i, 'faces touched', f, 'edges',  n, n == 2);
		// }

		for (j=0;j<n;j++) {
			if (
				sharpEdges[
					orderedKey(vertexEdgeMap[i][j][0],vertexEdgeMap[i][j][1])
				]) {
					sharpEdgeCount++;
				}
		}

		// if ( sharpEdgeCount==2 ) {
		// 	continue;
		// 	// Do not move vertex if there's 2 connecting sharp edges.
		// }

		/*
		if (sharpEdgeCount>2) {
			// TODO
		}
		*/

		F.divideScalar(f);


		var boundary_edges = 0;

		if (boundary_case) {

			var bb_edge;
			for (j=0; j<n;j++) {
				edge = vertexEdgeMap[i][j];
				bb_edge = edgeFaceMap[orderedKey(edge[0], edge[1])].length == 1
				if (bb_edge) {
					var midPt = originalPoints[edge[0]].clone().add(originalPoints[edge[1]]).divideScalar(2);
					R.add(midPt);
					boundary_edges++;
				}
			}

			R.divideScalar(4);
			// console.log(j + ' --- ' + n + ' --- ' + boundary_edges);
			assert(boundary_edges == 2, 'should have only 2 boundary edges');

		} else {
			for (j=0; j<n;j++) {
				edge = vertexEdgeMap[i][j];
				var midPt = originalPoints[edge[0]].clone().add(originalPoints[edge[1]]).divideScalar(2);
				R.add(midPt);
			}

			R.divideScalar(n);
		}

		// Sum the formula
		newPos.add(originalPoints[i]);


		if (boundary_case) {

			newPos.divideScalar(2);
			newPos.add(R);

		} else {

			newPos.multiplyScalar(n - 3);

			newPos.add(F);
			newPos.add(R.multiplyScalar(2));
			newPos.divideScalar(n);

		}

		newVertices[i] = newPos;

	}

	var newGeometry = oldGeometry; // Let's pretend the old geometry is now new :P

	newGeometry.vertices = newVertices;
	newGeometry.faces = newFaces;
	newGeometry.faceVertexUvs[ 0 ] = newUVs;

	delete newGeometry.__tmpVertices; // makes __tmpVertices undefined :P

	newGeometry.computeCentroids();
	newGeometry.computeFaceNormals();
	newGeometry.computeVertexNormals();

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.GeometryUtils = {

	// Merge two geometries or geometry and geometry from object (using object's transform)

	merge: function ( geometry1, geometry2, materialIndexOffset ) {

		console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );

		var matrix;

		if ( geometry2 instanceof THREE.Mesh ) {

			geometry2.matrixAutoUpdate && geometry2.updateMatrix();

			matrix = geometry2.matrix;
			geometry2 = geometry2.geometry;

		}

		geometry1.merge( geometry2, matrix, materialIndexOffset );

	},

	// Get random point in triangle (via barycentric coordinates)
	// 	(uniform distribution)
	// 	http://www.cgafaq.info/wiki/Random_Point_In_Triangle

	randomPointInTriangle: function () {

		var vector = new THREE.Vector3();

		return function ( vectorA, vectorB, vectorC ) {

			var point = new THREE.Vector3();

			var a = THREE.Math.random16();
			var b = THREE.Math.random16();

			if ( ( a + b ) > 1 ) {

				a = 1 - a;
				b = 1 - b;

			}

			var c = 1 - a - b;

			point.copy( vectorA );
			point.multiplyScalar( a );

			vector.copy( vectorB );
			vector.multiplyScalar( b );

			point.add( vector );

			vector.copy( vectorC );
			vector.multiplyScalar( c );

			point.add( vector );

			return point;

		};

	}(),

	// Get random point in face (triangle)
	// (uniform distribution)

	randomPointInFace: function ( face, geometry, useCachedAreas ) {

		var vA, vB, vC;

		vA = geometry.vertices[ face.a ];
		vB = geometry.vertices[ face.b ];
		vC = geometry.vertices[ face.c ];

		return THREE.GeometryUtils.randomPointInTriangle( vA, vB, vC );

	},

	// Get uniformly distributed random points in mesh
	// 	- create array with cumulative sums of face areas
	//  - pick random number from 0 to total area
	//  - find corresponding place in area array by binary search
	//	- get random point in face

	randomPointsInGeometry: function ( geometry, n ) {

		var face, i,
			faces = geometry.faces,
			vertices = geometry.vertices,
			il = faces.length,
			totalArea = 0,
			cumulativeAreas = [],
			vA, vB, vC, vD;

		// precompute face areas

		for ( i = 0; i < il; i ++ ) {

			face = faces[ i ];

			vA = vertices[ face.a ];
			vB = vertices[ face.b ];
			vC = vertices[ face.c ];

			face._area = THREE.GeometryUtils.triangleArea( vA, vB, vC );

			totalArea += face._area;

			cumulativeAreas[ i ] = totalArea;

		}

		// binary search cumulative areas array

		function binarySearchIndices( value ) {

			function binarySearch( start, end ) {

				// return closest larger index
				// if exact number is not found

				if ( end < start )
					return start;

				var mid = start + Math.floor( ( end - start ) / 2 );

				if ( cumulativeAreas[ mid ] > value ) {

					return binarySearch( start, mid - 1 );

				} else if ( cumulativeAreas[ mid ] < value ) {

					return binarySearch( mid + 1, end );

				} else {

					return mid;

				}

			}

			var result = binarySearch( 0, cumulativeAreas.length - 1 )
			return result;

		}

		// pick random face weighted by face area

		var r, index,
			result = [];

		var stats = {};

		for ( i = 0; i < n; i ++ ) {

			r = THREE.Math.random16() * totalArea;

			index = binarySearchIndices( r );

			result[ i ] = THREE.GeometryUtils.randomPointInFace( faces[ index ], geometry, true );

			if ( ! stats[ index ] ) {

				stats[ index ] = 1;

			} else {

				stats[ index ] += 1;

			}

		}

		return result;

	},

	randomPointsInBufferGeometry: function ( geometry, n ) {

		var i,
			vertices = geometry.attributes.position.array,
			totalArea = 0,
			cumulativeAreas = [],
			vA, vB, vC;

		// precompute face areas
		vA = new THREE.Vector3();
		vB = new THREE.Vector3();
		vC = new THREE.Vector3();

		// geometry._areas = [];
		var il = vertices.length / 9;

		for ( i = 0; i < il; i ++ ) {

			vA.set( vertices[i * 9 + 0], vertices[i * 9 + 1], vertices[i * 9 + 2] );
			vB.set( vertices[i * 9 + 3], vertices[i * 9 + 4], vertices[i * 9 + 5] );
			vC.set( vertices[i * 9 + 6], vertices[i * 9 + 7], vertices[i * 9 + 8] );

			area = THREE.GeometryUtils.triangleArea( vA, vB, vC );
			totalArea += area;

			cumulativeAreas.push(totalArea);
		}

		// binary search cumulative areas array

		function binarySearchIndices( value ) {

			function binarySearch( start, end ) {

				// return closest larger index
				// if exact number is not found

				if ( end < start )
					return start;

				var mid = start + Math.floor( ( end - start ) / 2 );

				if ( cumulativeAreas[ mid ] > value ) {

					return binarySearch( start, mid - 1 );

				} else if ( cumulativeAreas[ mid ] < value ) {

					return binarySearch( mid + 1, end );

				} else {

					return mid;

				}

			}

			var result = binarySearch( 0, cumulativeAreas.length - 1 )
			return result;

		}

		// pick random face weighted by face area

		var r, index,
			result = [];

		for ( i = 0; i < n; i ++ ) {

			r = THREE.Math.random16() * totalArea;

			index = binarySearchIndices( r );

			// result[ i ] = THREE.GeometryUtils.randomPointInFace( faces[ index ], geometry, true );
			vA.set( vertices[index * 9 + 0], vertices[index * 9 + 1], vertices[index * 9 + 2] );
			vB.set( vertices[index * 9 + 3], vertices[index * 9 + 4], vertices[index * 9 + 5] );
			vC.set( vertices[index * 9 + 6], vertices[index * 9 + 7], vertices[index * 9 + 8] );
			result[ i ] = THREE.GeometryUtils.randomPointInTriangle( vA, vB, vC );

		}

		return result;

	},

	// Get triangle area (half of parallelogram)
	// http://mathworld.wolfram.com/TriangleArea.html

	triangleArea: function () {

		var vector1 = new THREE.Vector3();
		var vector2 = new THREE.Vector3();

		return function ( vectorA, vectorB, vectorC ) {

			vector1.subVectors( vectorB, vectorA );
			vector2.subVectors( vectorC, vectorA );
			vector1.cross( vector2 );

			return 0.5 * vector1.length();

		};

	}(),

	center: function ( geometry ) {

		console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
		return geometry.center();

	},

	convertFace4s: function(geometry) {

		// return geometry;

		var faces = geometry.faces;
		var faceVertexUvs = geometry.faceVertexUvs[0];

		var newfaces = [];
		var newfaceVertexUvs = [];

		var f, fl, face, uv;

		for (f=0, fl=faces.length; f < fl; f++) {

			face = faces[f];
			uv = faceVertexUvs[f];

			if ( face instanceof THREE.Face3 ) {
				
				newfaces.push(face);
				if (uv) newfaceVertexUvs.push(uv);

			} else {

				newfaces.push( new THREE.Face3( face.a, face.b, face.c, null, face.color, face.materialIndex) );
				newfaces.push( new THREE.Face3( face.d, face.a, face.c, null, face.color, face.materialIndex) );


				if (uv) newfaceVertexUvs.push([uv[0], uv[1], uv[2]]);
				if (uv) newfaceVertexUvs.push([uv[3], uv[0], uv[2]]);

			}

		}

		geometry.faces = newfaces;
		geometry.faceVertexUvs = [newfaceVertexUvs];

	}
};
/*!
 *  howler.js v1.1.25
 *  howlerjs.com
 *
 *  (c) 2013-2014, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */
!function(){var e={},t=null,n=!0,r=!1;try{"undefined"!=typeof AudioContext?t=new AudioContext:"undefined"!=typeof webkitAudioContext?t=new webkitAudioContext:n=!1}catch(i){n=!1}if(!n)if("undefined"!=typeof Audio)try{new Audio}catch(i){r=!0}else r=!0;if(n){var s=void 0===t.createGain?t.createGainNode():t.createGain();s.gain.value=1,s.connect(t.destination)}var o=function(e){this._volume=1,this._muted=!1,this.usingWebAudio=n,this.ctx=t,this.noAudio=r,this._howls=[],this._codecs=e,this.iOSAutoEnable=!0};o.prototype={volume:function(e){var t=this;if(e=parseFloat(e),e>=0&&1>=e){t._volume=e,n&&(s.gain.value=e);for(var r in t._howls)if(t._howls.hasOwnProperty(r)&&t._howls[r]._webAudio===!1)for(var i=0;i<t._howls[r]._audioNode.length;i++)t._howls[r]._audioNode[i].volume=t._howls[r]._volume*t._volume;return t}return n?s.gain.value:t._volume},mute:function(){return this._setMuted(!0),this},unmute:function(){return this._setMuted(!1),this},_setMuted:function(e){var t=this;t._muted=e,n&&(s.gain.value=e?0:t._volume);for(var r in t._howls)if(t._howls.hasOwnProperty(r)&&t._howls[r]._webAudio===!1)for(var i=0;i<t._howls[r]._audioNode.length;i++)t._howls[r]._audioNode[i].muted=e},codecs:function(e){return this._codecs[e]},_enableiOSAudio:function(){var e=this;if(!t||!e._iOSEnabled&&/iPhone|iPad|iPod/i.test(navigator.userAgent)){e._iOSEnabled=!1;var n=function(){var r=t.createBuffer(1,1,22050),i=t.createBufferSource();i.buffer=r,i.connect(t.destination),void 0===i.start?i.noteOn(0):i.start(0),setTimeout(function(){(i.playbackState===i.PLAYING_STATE||i.playbackState===i.FINISHED_STATE)&&(e._iOSEnabled=!0,e.iOSAutoEnable=!1,window.removeEventListener("touchstart",n,!1))},0)};return window.addEventListener("touchstart",n,!1),e}}};var u=null,a={};r||(u=new Audio,a={mp3:!!u.canPlayType("audio/mpeg;").replace(/^no$/,""),opus:!!u.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/,""),ogg:!!u.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),wav:!!u.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),aac:!!u.canPlayType("audio/aac;").replace(/^no$/,""),m4a:!!(u.canPlayType("audio/x-m4a;")||u.canPlayType("audio/m4a;")||u.canPlayType("audio/aac;")).replace(/^no$/,""),mp4:!!(u.canPlayType("audio/x-mp4;")||u.canPlayType("audio/mp4;")||u.canPlayType("audio/aac;")).replace(/^no$/,""),weba:!!u.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,"")});var f=new o(a),l=function(e){var r=this;r._autoplay=e.autoplay||!1,r._buffer=e.buffer||!1,r._duration=e.duration||0,r._format=e.format||null,r._loop=e.loop||!1,r._loaded=!1,r._sprite=e.sprite||{},r._src=e.src||"",r._pos3d=e.pos3d||[0,0,-.5],r._volume=void 0!==e.volume?e.volume:1,r._urls=e.urls||[],r._rate=e.rate||1,r._model=e.model||null,r._onload=[e.onload||function(){}],r._onloaderror=[e.onloaderror||function(){}],r._onend=[e.onend||function(){}],r._onpause=[e.onpause||function(){}],r._onplay=[e.onplay||function(){}],r._onendTimer=[],r._webAudio=n&&!r._buffer,r._audioNode=[],r._webAudio&&r._setupAudioNode(),void 0!==t&&t&&f.iOSAutoEnable&&f._enableiOSAudio(),f._howls.push(r),r.load()};if(l.prototype={load:function(){var e=this,t=null;if(r)return void e.on("loaderror");for(var n=0;n<e._urls.length;n++){var i,s;if(e._format)i=e._format;else{if(s=e._urls[n],i=/^data:audio\/([^;,]+);/i.exec(s),i||(i=/\.([^.]+)$/.exec(s.split("?",1)[0])),!i)return void e.on("loaderror");i=i[1].toLowerCase()}if(a[i]){t=e._urls[n];break}}if(!t)return void e.on("loaderror");if(e._src=t,e._webAudio)c(e,t);else{var u=new Audio;u.addEventListener("error",function(){u.error&&4===u.error.code&&(o.noAudio=!0),e.on("loaderror",{type:u.error?u.error.code:0})},!1),e._audioNode.push(u),u.src=t,u._pos=0,u.preload="auto",u.volume=f._muted?0:e._volume*f.volume();var l=function(){e._duration=Math.ceil(10*u.duration)/10,0===Object.getOwnPropertyNames(e._sprite).length&&(e._sprite={_default:[0,1e3*e._duration]}),e._loaded||(e._loaded=!0,e.on("load")),e._autoplay&&e.play(),u.removeEventListener("canplaythrough",l,!1)};u.addEventListener("canplaythrough",l,!1),u.load()}return e},urls:function(e){var t=this;return e?(t.stop(),t._urls="string"==typeof e?[e]:e,t._loaded=!1,t.load(),t):t._urls},play:function(e,n){var r=this;return"function"==typeof e&&(n=e),e&&"function"!=typeof e||(e="_default"),r._loaded?r._sprite[e]?(r._inactiveNode(function(i){i._sprite=e;var s=i._pos>0?i._pos:r._sprite[e][0]/1e3,o=0;r._webAudio?(o=r._sprite[e][1]/1e3-i._pos,i._pos>0&&(s=r._sprite[e][0]/1e3+s)):o=r._sprite[e][1]/1e3-(s-r._sprite[e][0]/1e3);var u,a=!(!r._loop&&!r._sprite[e][2]),l="string"==typeof n?n:Math.round(Date.now()*Math.random())+"";if(function(){var t={id:l,sprite:e,loop:a};u=setTimeout(function(){!r._webAudio&&a&&r.stop(t.id).play(e,t.id),r._webAudio&&!a&&(r._nodeById(t.id).paused=!0,r._nodeById(t.id)._pos=0,r._clearEndTimer(t.id)),r._webAudio||a||r.stop(t.id),r.on("end",l)},1e3*o),r._onendTimer.push({timer:u,id:t.id})}(),r._webAudio){var c=r._sprite[e][0]/1e3,h=r._sprite[e][1]/1e3;i.id=l,i.paused=!1,d(r,[a,c,h],l),r._playStart=t.currentTime,i.gain.value=r._volume,void 0===i.bufferSource.start?i.bufferSource.noteGrainOn(0,s,o):i.bufferSource.start(0,s,o)}else{if(4!==i.readyState&&(i.readyState||!navigator.isCocoonJS))return r._clearEndTimer(l),function(){var t=r,s=e,o=n,u=i,a=function(){t.play(s,o),u.removeEventListener("canplaythrough",a,!1)};u.addEventListener("canplaythrough",a,!1)}(),r;i.readyState=4,i.id=l,i.currentTime=s,i.muted=f._muted||i.muted,i.volume=r._volume*f.volume(),setTimeout(function(){i.play()},0)}return r.on("play"),"function"==typeof n&&n(l),r}),r):("function"==typeof n&&n(),r):(r.on("load",function(){r.play(e,n)}),r)},pause:function(e){var t=this;if(!t._loaded)return t.on("play",function(){t.pause(e)}),t;t._clearEndTimer(e);var n=e?t._nodeById(e):t._activeNode();if(n)if(n._pos=t.pos(null,e),t._webAudio){if(!n.bufferSource||n.paused)return t;n.paused=!0,void 0===n.bufferSource.stop?n.bufferSource.noteOff(0):n.bufferSource.stop(0)}else n.pause();return t.on("pause"),t},stop:function(e){var t=this;if(!t._loaded)return t.on("play",function(){t.stop(e)}),t;t._clearEndTimer(e);var n=e?t._nodeById(e):t._activeNode();if(n)if(n._pos=0,t._webAudio){if(!n.bufferSource||n.paused)return t;n.paused=!0,void 0===n.bufferSource.stop?n.bufferSource.noteOff(0):n.bufferSource.stop(0)}else isNaN(n.duration)||(n.pause(),n.currentTime=0);return t},mute:function(e){var t=this;if(!t._loaded)return t.on("play",function(){t.mute(e)}),t;var n=e?t._nodeById(e):t._activeNode();return n&&(t._webAudio?n.gain.value=0:n.muted=!0),t},unmute:function(e){var t=this;if(!t._loaded)return t.on("play",function(){t.unmute(e)}),t;var n=e?t._nodeById(e):t._activeNode();return n&&(t._webAudio?n.gain.value=t._volume:n.muted=!1),t},volume:function(e,t){var n=this;if(e=parseFloat(e),e>=0&&1>=e){if(n._volume=e,!n._loaded)return n.on("play",function(){n.volume(e,t)}),n;var r=t?n._nodeById(t):n._activeNode();return r&&(n._webAudio?r.gain.value=e:r.volume=e*f.volume()),n}return n._volume},loop:function(e){var t=this;return"boolean"==typeof e?(t._loop=e,t):t._loop},sprite:function(e){var t=this;return"object"==typeof e?(t._sprite=e,t):t._sprite},pos:function(e,n){var r=this;if(!r._loaded)return r.on("load",function(){r.pos(e)}),"number"==typeof e?r:r._pos||0;e=parseFloat(e);var i=n?r._nodeById(n):r._activeNode();if(i)return e>=0?(r.pause(n),i._pos=e,r.play(i._sprite,n),r):r._webAudio?i._pos+(t.currentTime-r._playStart):i.currentTime;if(e>=0)return r;for(var s=0;s<r._audioNode.length;s++)if(r._audioNode[s].paused&&4===r._audioNode[s].readyState)return r._webAudio?r._audioNode[s]._pos:r._audioNode[s].currentTime},pos3d:function(e,t,n,r){var i=this;if(t=void 0!==t&&t?t:0,n=void 0!==n&&n?n:-.5,!i._loaded)return i.on("play",function(){i.pos3d(e,t,n,r)}),i;if(!(e>=0||0>e))return i._pos3d;if(i._webAudio){var s=r?i._nodeById(r):i._activeNode();s&&(i._pos3d=[e,t,n],s.panner.setPosition(e,t,n),s.panner.panningModel=i._model||"HRTF")}return i},fade:function(e,t,n,r,i){var s=this,o=Math.abs(e-t),u=e>t?"down":"up",a=o/.01,f=n/a;if(!s._loaded)return s.on("load",function(){s.fade(e,t,n,r,i)}),s;s.volume(e,i);for(var l=1;a>=l;l++)!function(){var e=s._volume+("up"===u?.01:-.01)*l,n=Math.round(1e3*e)/1e3,o=t;setTimeout(function(){s.volume(n,i),n===o&&r&&r()},f*l)}()},fadeIn:function(e,t,n){return this.volume(0).play().fade(0,e,t,n)},fadeOut:function(e,t,n,r){var i=this;return i.fade(i._volume,e,t,function(){n&&n(),i.pause(r),i.on("end")},r)},_nodeById:function(e){for(var t=this,n=t._audioNode[0],r=0;r<t._audioNode.length;r++)if(t._audioNode[r].id===e){n=t._audioNode[r];break}return n},_activeNode:function(){for(var e=this,t=null,n=0;n<e._audioNode.length;n++)if(!e._audioNode[n].paused){t=e._audioNode[n];break}return e._drainPool(),t},_inactiveNode:function(e){for(var t=this,n=null,r=0;r<t._audioNode.length;r++)if(t._audioNode[r].paused&&4===t._audioNode[r].readyState){e(t._audioNode[r]),n=!0;break}if(t._drainPool(),!n){var i;if(t._webAudio)i=t._setupAudioNode(),e(i);else{t.load(),i=t._audioNode[t._audioNode.length-1];var s=navigator.isCocoonJS?"canplaythrough":"loadedmetadata",o=function(){i.removeEventListener(s,o,!1),e(i)};i.addEventListener(s,o,!1)}}},_drainPool:function(){var e,t=this,n=0;for(e=0;e<t._audioNode.length;e++)t._audioNode[e].paused&&n++;for(e=t._audioNode.length-1;e>=0&&!(5>=n);e--)t._audioNode[e].paused&&(t._webAudio&&t._audioNode[e].disconnect(0),n--,t._audioNode.splice(e,1))},_clearEndTimer:function(e){for(var t=this,n=0,r=0;r<t._onendTimer.length;r++)if(t._onendTimer[r].id===e){n=r;break}var i=t._onendTimer[n];i&&(clearTimeout(i.timer),t._onendTimer.splice(n,1))},_setupAudioNode:function(){var e=this,n=e._audioNode,r=e._audioNode.length;return n[r]=void 0===t.createGain?t.createGainNode():t.createGain(),n[r].gain.value=e._volume,n[r].paused=!0,n[r]._pos=0,n[r].readyState=4,n[r].connect(s),n[r].panner=t.createPanner(),n[r].panner.panningModel=e._model||"equalpower",n[r].panner.setPosition(e._pos3d[0],e._pos3d[1],e._pos3d[2]),n[r].panner.connect(n[r]),n[r]},on:function(e,t){var n=this,r=n["_on"+e];if("function"==typeof t)r.push(t);else for(var i=0;i<r.length;i++)t?r[i].call(n,t):r[i].call(n);return n},off:function(e,t){var n=this,r=n["_on"+e],i=t?""+t:null;if(i){for(var s=0;s<r.length;s++)if(i===""+r[s]){r.splice(s,1);break}}else n["_on"+e]=[];return n},unload:function(){for(var t=this,n=t._audioNode,r=0;r<t._audioNode.length;r++)n[r].paused||(t.stop(n[r].id),t.on("end",n[r].id)),t._webAudio?n[r].disconnect(0):n[r].src="";for(r=0;r<t._onendTimer.length;r++)clearTimeout(t._onendTimer[r].timer);var i=f._howls.indexOf(t);null!==i&&i>=0&&f._howls.splice(i,1),delete e[t._src],t=null}},n)var c=function(t,n){if(n in e)return t._duration=e[n].duration,void p(t);if(/^data:[^;]+;base64,/.test(n)){for(var r=atob(n.split(",")[1]),i=new Uint8Array(r.length),s=0;s<r.length;++s)i[s]=r.charCodeAt(s);h(i.buffer,t,n)}else{var o=new XMLHttpRequest;o.open("GET",n,!0),o.responseType="arraybuffer",o.onload=function(){h(o.response,t,n)},o.onerror=function(){t._webAudio&&(t._buffer=!0,t._webAudio=!1,t._audioNode=[],delete t._gainNode,delete e[n],t.load())};try{o.send()}catch(u){o.onerror()}}},h=function(n,r,i){t.decodeAudioData(n,function(t){t&&(e[i]=t,p(r,t))},function(){r.on("loaderror")})},p=function(e,t){e._duration=t?t.duration:e._duration,0===Object.getOwnPropertyNames(e._sprite).length&&(e._sprite={_default:[0,1e3*e._duration]}),e._loaded||(e._loaded=!0,e.on("load")),e._autoplay&&e.play()},d=function(n,r,i){var s=n._nodeById(i);s.bufferSource=t.createBufferSource(),s.bufferSource.buffer=e[n._src],s.bufferSource.connect(s.panner),s.bufferSource.loop=r[0],r[0]&&(s.bufferSource.loopStart=r[1],s.bufferSource.loopEnd=r[1]+r[2]),s.bufferSource.playbackRate.value=n._rate};"function"==typeof define&&define.amd&&define(function(){return{Howler:f,Howl:l}}),"undefined"!=typeof exports&&(exports.Howler=f,exports.Howl=l),"undefined"!=typeof window&&(window.Howler=f,window.Howl=l)}();
/*global jQuery */
/*!	
* Lettering.JS 0.6.1
*
* Copyright 2010, Dave Rupert http://daverupert.com
* Released under the WTFPL license 
* http://sam.zoy.org/wtfpl/
*
* Thanks to Paul Irish - http://paulirish.com - for the feedback.
*
* Date: Mon Sep 20 17:14:00 2010 -0600
*/
(function($){
	function injector(t, splitter, klass, after) {
		var a = t.text().split(splitter), inject = '';
		if (a.length) {
			$(a).each(function(i, item) {
				inject += '<span class="'+klass+(i+1)+'">'+item+'</span>'+after;
			});	
			t.empty().append(inject);
		}
	}
	
	var methods = {
		init : function() {

			return this.each(function() {
				injector($(this), '', 'char', '');
			});

		},

		words : function() {

			return this.each(function() {
				injector($(this), ' ', 'word', ' ');
			});

		},
		
		lines : function() {

			return this.each(function() {
				var r = "eefec303079ad17405c889e092e105b0";
				// Because it's hard to split a <br/> tag consistently across browsers,
				// (*ahem* IE *ahem*), we replace all <br/> instances with an md5 hash 
				// (of the word "split").  If you're trying to use this plugin on that 
				// md5 hash string, it will fail because you're being ridiculous.
				injector($(this).children("br").replaceWith(r).end(), r, 'line', '');
			});

		}
	};

	$.fn.lettering = function( method ) {
		// Method calling logic
		if ( method && methods[method] ) {
			return methods[ method ].apply( this, [].slice.call( arguments, 1 ));
		} else if ( method === 'letters' || ! method ) {
			return methods.init.apply( this, [].slice.call( arguments, 0 ) ); // always pass an array
		}
		$.error( 'Method ' +  method + ' does not exist on jQuery.lettering' );
		return this;
	};

})(jQuery);

if (_typeface_js && _typeface_js.loadFace) _typeface_js.loadFace({"glyphs":{"S":{"x_min":-96.3125,"x_max":695.859375,"ha":716,"o":"m 618 99 q 634 80 629 82 q 636 65 632 71 q 641 48 641 58 q 652 25 649 35 q 667 -8 659 0 q 670 -35 667 -23 q 671 -62 672 -47 q 659 -93 661 -80 q 651 -115 657 -107 q 645 -138 652 -130 q 636 -160 638 -146 q 626 -172 629 -161 q 611 -185 615 -176 q 594 -198 606 -195 q 580 -214 584 -210 q 571 -221 576 -218 q 553 -239 558 -236 q 539 -245 548 -242 q 533 -254 537 -252 q 526 -263 529 -256 q 508 -274 514 -272 q 500 -282 503 -275 q 479 -295 484 -291 q 469 -305 474 -299 q 461 -310 465 -309 q 457 -316 457 -311 q 443 -326 446 -316 q 425 -330 430 -330 q 411 -340 415 -337 q 404 -347 406 -343 q 389 -356 389 -358 q 376 -364 383 -362 q 363 -373 368 -367 q 346 -381 351 -378 q 339 -390 341 -385 q 320 -397 321 -394 q 314 -401 318 -400 q 290 -411 297 -400 q 282 -411 286 -409 q 272 -413 278 -413 q 252 -416 255 -416 q 239 -418 245 -419 q 227 -421 233 -417 q 210 -421 221 -417 q 199 -423 200 -424 q 195 -423 198 -423 q 177 -423 187 -421 q 161 -423 168 -424 q 147 -418 147 -419 q 143 -415 146 -417 q 134 -416 139 -417 q 126 -413 130 -415 q 111 -413 119 -412 q 97 -411 104 -413 q 71 -405 77 -409 q 55 -401 66 -401 q 36 -382 40 -393 q 23 -380 25 -381 q 18 -377 20 -379 q -17 -352 -2 -370 q -19 -343 -18 -345 q -23 -337 -20 -340 q -31 -336 -25 -336 q -39 -333 -36 -336 q -50 -318 -48 -321 q -50 -313 -52 -314 q -59 -298 -59 -299 q -61 -294 -59 -297 q -69 -280 -69 -284 q -71 -271 -70 -276 q -78 -263 -75 -268 q -84 -255 -80 -257 q -89 -240 -89 -242 q -92 -238 -89 -237 q -96 -222 -90 -223 q -94 -208 -93 -208 q -96 -204 -96 -207 q -93 -191 -92 -193 q -94 -184 -94 -188 q -90 -174 -93 -179 q -90 -162 -86 -169 q -83 -149 -84 -158 q -81 -134 -82 -141 q -71 -130 -75 -131 q -66 -123 -67 -128 q -67 -111 -66 -113 q -65 -107 -67 -109 q -58 -97 -61 -99 q -55 -92 -55 -96 q -45 -78 -48 -82 q -39 -70 -42 -74 q -31 -57 -32 -59 q -29 -54 -31 -55 q -21 -46 -25 -50 q -14 -40 -17 -43 q -4 -27 -6 -29 q -4 -21 -1 -25 q 11 -10 9 -13 q 17 -8 13 -8 q 29 4 21 -1 q 40 12 37 10 q 43 16 43 13 q 73 37 59 28 q 78 43 75 40 q 84 48 81 46 q 100 59 99 56 q 111 66 107 62 q 120 67 116 70 q 139 80 135 80 q 149 84 142 81 q 161 86 160 88 q 165 84 162 85 q 169 69 174 73 q 162 56 164 65 q 145 49 146 51 q 142 46 145 47 q 115 24 119 39 q 99 16 100 17 q 97 13 99 14 q 81 0 86 9 q 60 -18 65 -13 q 48 -25 55 -23 q 40 -40 46 -37 q 33 -59 37 -51 q 21 -75 28 -67 q 16 -97 21 -88 q 14 -118 12 -107 q 9 -132 8 -131 q 10 -137 10 -134 q 7 -170 8 -154 q 18 -196 6 -187 q 24 -214 20 -212 q 36 -231 29 -227 q 44 -249 42 -244 q 54 -257 47 -255 q 56 -269 52 -268 q 62 -272 59 -269 q 86 -293 77 -288 q 104 -299 96 -298 q 120 -312 115 -306 q 134 -314 126 -318 q 145 -324 139 -320 q 157 -330 150 -328 q 177 -333 174 -332 q 184 -336 180 -335 q 208 -337 203 -339 q 217 -339 212 -336 q 227 -339 225 -337 q 231 -343 229 -340 q 249 -342 241 -341 q 269 -343 257 -343 q 286 -337 283 -337 q 295 -336 288 -337 q 317 -333 307 -335 q 347 -325 333 -332 q 364 -316 362 -316 q 368 -316 366 -317 q 389 -303 386 -306 q 396 -298 393 -301 q 406 -296 401 -299 q 417 -290 412 -293 q 427 -275 423 -278 q 436 -275 431 -272 q 442 -269 439 -272 q 446 -263 444 -267 q 459 -254 459 -253 q 462 -255 459 -255 q 473 -246 470 -248 q 480 -241 476 -244 q 503 -221 497 -229 q 514 -207 512 -208 q 524 -194 524 -195 q 527 -191 524 -193 q 546 -151 543 -173 q 552 -142 552 -149 q 557 -134 552 -135 q 558 -124 556 -128 q 561 -116 560 -120 q 562 -103 560 -107 q 564 -96 564 -100 q 559 -82 557 -85 q 562 -75 561 -80 q 562 -69 562 -73 q 561 -61 561 -65 q 557 -40 557 -42 q 554 -25 554 -28 q 552 -18 554 -21 q 550 -11 550 -14 q 548 -2 550 -8 q 541 10 543 6 q 538 18 539 14 q 535 31 535 25 q 531 40 534 36 q 524 51 526 48 q 520 55 523 54 q 510 73 516 69 q 504 89 505 85 q 500 96 503 93 q 496 103 497 99 q 493 109 495 107 l 485 126 q 470 142 474 138 q 465 154 466 146 q 458 160 462 158 q 453 169 454 162 q 442 183 448 176 q 436 193 439 189 q 430 204 434 198 q 420 219 425 211 q 411 233 413 230 q 408 238 409 236 q 401 247 401 245 q 400 252 401 249 q 389 268 392 263 q 381 280 383 279 q 377 283 378 280 q 373 292 374 290 q 368 297 371 294 q 351 325 358 316 q 346 334 348 329 q 339 341 344 339 q 327 360 330 354 q 317 370 324 367 q 309 389 311 382 q 299 400 306 396 q 295 416 297 415 q 284 431 290 428 q 275 451 278 444 q 264 467 265 466 q 257 470 263 469 q 252 479 253 477 q 249 484 252 481 q 240 496 241 496 q 237 497 238 496 q 227 515 236 504 q 204 546 211 533 q 188 563 192 561 q 184 572 184 565 q 177 582 179 576 q 169 591 174 588 q 160 609 164 609 q 154 621 158 615 q 146 632 150 626 q 139 642 142 637 q 131 652 137 648 q 130 659 132 657 q 128 668 127 661 q 123 673 126 671 q 116 678 120 675 q 117 689 118 683 q 109 694 116 694 q 109 712 109 710 q 109 717 108 714 q 101 756 104 744 q 101 784 99 769 q 103 796 104 793 q 103 801 103 798 q 105 807 103 804 q 104 816 107 811 q 107 830 107 827 q 105 834 108 832 q 113 855 107 849 q 115 868 115 865 q 119 870 116 870 q 137 904 126 892 q 145 920 142 916 q 154 923 147 923 q 162 935 157 930 q 172 948 168 941 q 189 967 185 954 q 198 970 196 967 q 206 976 200 973 q 218 988 211 988 q 227 997 227 995 q 230 1001 227 999 q 242 1007 236 1003 q 255 1014 248 1011 l 269 1021 q 279 1029 276 1024 q 291 1032 282 1034 q 306 1041 299 1039 q 320 1047 311 1045 q 335 1055 328 1049 q 351 1062 351 1059 q 352 1066 351 1064 q 368 1068 360 1067 q 382 1074 375 1070 q 394 1074 390 1074 q 402 1077 397 1074 q 413 1077 412 1075 q 417 1082 415 1079 q 425 1081 421 1079 q 432 1085 430 1082 q 447 1087 446 1082 q 478 1087 467 1091 q 498 1085 496 1087 q 505 1085 500 1083 q 518 1078 511 1079 q 533 1075 526 1077 q 546 1069 542 1072 q 558 1067 550 1066 q 568 1058 562 1062 q 583 1053 573 1053 q 591 1047 585 1048 q 598 1041 596 1047 q 613 1032 611 1033 q 615 1026 615 1030 q 638 1005 626 1009 q 647 992 641 996 q 655 979 652 987 q 662 970 660 976 q 667 957 664 964 q 677 940 674 949 q 685 923 680 931 q 692 908 690 910 q 695 904 694 907 q 693 888 693 891 q 694 883 694 885 q 688 865 689 870 q 685 855 687 859 q 679 836 679 841 q 675 831 679 831 l 672 813 q 653 794 659 796 q 642 778 645 782 q 636 770 640 774 q 630 764 633 767 q 623 755 626 760 q 610 744 611 746 q 604 744 609 743 q 600 738 602 741 q 595 732 599 735 q 594 725 598 728 q 588 717 591 722 q 579 710 579 712 q 577 705 580 708 q 562 705 567 705 q 553 701 558 705 q 542 702 548 704 q 533 704 537 701 q 532 716 535 713 q 526 724 529 718 q 532 731 531 727 q 538 737 533 735 q 546 754 541 746 q 566 768 562 762 q 577 777 571 774 q 587 797 583 793 q 596 815 594 813 q 599 819 598 816 q 601 832 599 831 q 603 836 603 834 q 599 857 599 846 q 602 870 603 866 q 600 880 600 874 q 594 889 595 883 q 590 902 594 896 q 587 919 590 916 q 581 925 584 922 q 566 948 573 946 q 557 960 558 950 q 543 969 552 961 q 526 986 531 983 q 515 994 520 990 q 501 999 503 998 q 499 1002 500 999 q 483 1004 485 1002 q 478 1007 481 1006 q 463 1009 465 1009 q 461 1007 461 1010 q 448 1015 448 1017 q 444 1014 447 1014 q 425 1017 436 1020 q 415 1017 416 1018 q 411 1015 413 1015 q 400 1016 405 1015 q 389 1014 394 1017 q 371 1011 382 1017 q 360 1009 362 1010 q 356 1007 359 1007 q 342 1001 343 1003 q 339 998 341 999 q 318 995 322 996 q 314 990 314 994 q 304 985 307 988 q 293 982 301 982 q 285 976 288 979 q 276 972 282 973 q 262 963 263 960 q 255 964 261 967 q 240 952 241 957 q 229 940 233 948 q 218 927 225 931 q 210 917 212 921 q 204 912 208 914 q 204 902 207 907 q 204 891 200 897 q 191 878 193 878 q 188 874 189 877 q 192 855 191 859 q 195 849 193 851 q 187 819 191 824 q 191 810 189 813 q 192 800 192 807 q 191 790 192 794 q 193 779 191 785 q 203 762 198 769 q 206 739 208 744 q 207 727 204 733 q 218 716 211 717 q 220 708 217 712 q 225 702 223 705 q 233 690 231 694 q 238 683 234 686 q 240 674 237 676 q 246 668 242 671 q 250 653 249 655 q 262 639 257 647 q 272 629 267 632 q 274 622 272 625 q 276 614 276 619 q 284 605 280 610 q 291 595 287 600 q 298 585 298 588 q 299 580 298 583 q 310 569 303 573 q 320 552 313 557 q 326 545 322 549 q 335 538 330 542 q 339 531 337 535 q 344 526 340 527 q 345 515 341 520 q 352 505 349 510 q 367 469 366 482 q 373 462 370 465 q 378 455 377 459 q 388 442 385 444 q 393 436 392 440 q 406 422 401 425 q 416 412 412 419 q 427 396 423 398 q 432 381 428 381 q 436 379 435 381 q 442 368 442 368 q 444 366 443 368 q 449 360 447 363 q 455 355 451 356 q 465 341 463 343 q 471 329 469 330 q 473 325 473 328 q 486 304 484 310 q 496 294 489 298 q 504 278 501 276 q 513 259 510 264 q 522 249 516 253 q 533 232 530 240 q 545 222 537 225 q 561 194 557 200 q 567 177 565 188 q 573 172 569 174 q 581 166 577 169 q 588 148 585 154 q 595 135 591 142 q 604 120 603 122 q 609 116 604 118 l 618 99 "},"/":{"x_min":-27.125,"x_max":689.078125,"ha":515,"o":"m 108 -24 q 106 -37 111 -33 q 105 -47 101 -42 q 97 -78 101 -70 q 96 -100 93 -86 q 87 -125 93 -111 q 82 -146 81 -139 q 75 -169 71 -157 q 63 -181 70 -180 q 67 -193 69 -192 q 66 -196 66 -193 q 65 -208 67 -206 q 61 -217 62 -211 q 67 -231 69 -229 q 65 -237 66 -234 q 63 -253 63 -246 q 61 -265 63 -260 q 63 -274 61 -269 q 67 -283 66 -278 q 65 -296 65 -294 q 66 -301 66 -298 q 68 -309 65 -305 q 71 -317 71 -313 q 71 -334 73 -322 q 69 -348 69 -345 l 54 -368 q 39 -368 50 -364 q 23 -368 28 -373 q 8 -359 10 -359 q 5 -356 6 -359 q -4 -338 -2 -344 q -10 -328 -6 -332 q -13 -314 -12 -320 q -16 -302 -14 -309 q -23 -288 -21 -288 q -24 -286 -24 -287 q -26 -264 -28 -275 q -27 -242 -24 -253 q -21 -230 -18 -233 q -25 -222 -24 -227 q -21 -214 -25 -215 q -16 -206 -16 -212 q -20 -192 -21 -195 q -17 -187 -18 -189 q -19 -166 -21 -169 q -16 -161 -17 -164 q -18 -151 -17 -157 q -17 -139 -18 -146 q -11 -117 -12 -123 q -4 -108 -10 -111 q -3 -94 -6 -97 q -4 -84 0 -90 q 4 -71 4 -74 q 2 -69 5 -67 q 12 -44 6 -52 q 15 -29 14 -31 q 18 -25 16 -27 q 20 -8 20 -12 q 25 -2 20 -4 q 27 16 23 6 q 36 37 32 27 q 47 63 43 51 q 54 81 54 74 q 60 97 56 94 q 65 103 63 100 q 70 113 67 111 q 71 118 73 115 q 75 124 71 119 q 80 132 80 130 q 85 147 82 139 q 97 172 92 168 q 101 185 103 176 q 111 202 109 199 q 116 208 113 206 q 119 220 116 215 q 124 230 122 225 q 130 240 127 234 q 139 249 134 246 q 146 272 142 265 q 151 286 150 279 q 170 314 162 306 q 180 337 179 322 q 187 345 185 340 q 192 358 189 351 q 207 380 203 366 q 222 402 211 394 q 228 416 226 413 q 234 421 230 419 q 236 434 234 428 q 244 442 237 439 q 252 463 250 458 q 259 472 253 469 q 269 490 261 482 q 280 510 278 497 q 296 524 291 519 q 305 535 301 529 l 313 556 q 320 564 320 558 q 326 573 320 571 q 330 582 325 579 q 337 591 335 585 q 347 606 343 606 q 356 623 355 619 q 356 630 356 626 q 369 644 367 642 q 371 649 371 647 q 389 676 385 660 q 408 701 394 691 q 412 710 409 706 q 417 720 415 713 q 427 737 423 733 q 436 748 432 741 q 444 760 443 759 q 448 762 446 762 q 463 784 453 774 q 468 795 463 788 q 480 811 473 803 q 492 828 486 820 q 497 841 497 836 l 527 873 q 541 889 531 876 q 548 908 550 902 q 556 916 550 910 q 569 929 562 922 q 580 944 575 937 q 585 953 585 950 q 597 965 596 960 q 599 973 598 969 q 614 979 614 976 q 615 983 614 982 q 625 994 622 991 q 632 999 628 998 q 651 1010 645 1010 q 667 1017 657 1010 q 674 1009 670 1011 q 685 1009 678 1006 q 688 993 690 999 q 689 980 686 987 q 678 969 678 971 q 675 964 678 967 l 668 950 q 662 944 666 948 q 656 938 659 941 q 649 923 649 926 q 651 918 648 921 q 642 912 645 915 q 632 907 638 908 q 625 887 629 897 q 618 877 621 877 q 613 867 613 869 q 611 864 613 865 q 589 831 598 849 q 572 811 580 813 q 560 794 564 796 q 558 788 557 793 q 543 773 545 777 q 539 767 542 770 q 529 750 531 754 q 524 746 527 747 q 510 722 518 728 q 503 705 503 716 q 488 695 489 694 q 484 697 486 697 q 479 675 481 679 q 477 664 477 671 q 466 657 465 659 q 466 652 467 655 q 454 634 458 637 q 447 629 450 632 q 441 615 443 617 q 436 613 439 614 q 433 594 435 602 q 425 579 431 585 q 396 548 415 554 q 390 533 392 533 l 378 522 q 371 504 371 508 q 367 499 371 500 q 356 480 360 484 q 348 473 351 477 q 347 453 352 462 q 336 439 343 444 q 332 426 333 428 q 328 421 330 424 q 320 405 321 412 q 311 394 318 398 l 294 386 q 290 367 288 381 q 280 355 280 363 q 280 336 280 347 q 268 313 272 318 q 261 301 264 307 q 252 283 250 287 q 244 271 248 274 q 244 263 241 269 q 234 244 237 248 q 229 238 231 241 q 223 227 225 227 q 221 223 221 226 q 212 207 215 211 q 206 200 210 203 q 202 185 204 188 q 196 181 199 183 q 191 166 196 172 q 187 151 187 161 q 179 133 184 139 q 166 123 173 127 q 160 109 168 115 q 160 94 160 94 q 160 92 161 94 q 154 77 157 85 q 143 67 151 70 q 143 56 143 59 q 142 51 143 54 q 138 42 138 46 q 135 35 138 37 q 124 21 132 29 q 124 8 127 12 q 122 -4 120 4 q 113 -13 111 -13 q 115 -17 116 -13 l 108 -24 "},"K":{"x_min":-69.625,"x_max":1494.796875,"ha":1161,"o":"m 1494 -491 q 1479 -502 1482 -499 q 1469 -508 1477 -505 q 1449 -515 1452 -514 q 1443 -518 1445 -516 l 1426 -524 q 1409 -534 1412 -533 q 1403 -537 1406 -535 q 1386 -541 1391 -535 q 1355 -543 1371 -539 q 1327 -541 1338 -548 q 1314 -539 1315 -541 q 1310 -537 1313 -538 q 1293 -535 1302 -537 q 1277 -529 1284 -533 q 1258 -534 1260 -535 q 1238 -529 1238 -533 q 1228 -529 1234 -530 q 1220 -523 1222 -529 q 1202 -516 1207 -523 q 1188 -507 1197 -510 q 1174 -499 1173 -501 q 1176 -495 1176 -497 q 1167 -492 1170 -495 q 1162 -486 1165 -489 q 1156 -480 1159 -482 q 1146 -478 1152 -478 q 1140 -469 1144 -472 q 1133 -459 1136 -466 q 1123 -452 1124 -453 q 1121 -447 1121 -451 q 1115 -441 1117 -444 q 1108 -438 1113 -438 l 1102 -421 q 1091 -409 1091 -412 q 1087 -408 1090 -406 q 1079 -393 1082 -398 q 1072 -385 1077 -387 q 1062 -360 1064 -366 q 1058 -347 1059 -355 q 1049 -331 1048 -333 q 1048 -326 1049 -329 q 1043 -316 1044 -320 q 1039 -310 1041 -313 q 1033 -294 1036 -297 q 1029 -278 1033 -283 q 1025 -263 1025 -274 q 1015 -240 1022 -246 q 1011 -224 1011 -227 q 1006 -221 1010 -221 q 998 -199 1005 -210 q 994 -181 992 -184 q 990 -177 995 -179 q 988 -162 994 -173 q 983 -147 986 -154 q 973 -112 982 -120 q 968 -96 973 -100 q 969 -87 971 -93 q 964 -78 967 -81 q 963 -65 964 -66 q 963 -59 963 -65 q 954 -44 956 -44 q 954 -31 956 -37 q 950 -23 952 -25 q 946 -8 949 -12 q 945 1 944 -4 q 938 23 941 10 q 921 62 929 50 q 910 93 912 74 q 902 108 902 104 q 899 116 902 112 q 891 127 891 123 q 887 132 891 131 q 885 143 888 139 q 883 153 881 146 q 875 161 877 155 q 866 168 873 166 q 864 180 869 174 q 854 189 859 185 q 853 198 857 195 q 845 206 849 202 q 834 221 842 217 q 826 234 830 230 q 820 241 823 238 q 815 247 817 244 q 807 253 812 250 q 802 263 804 261 q 796 265 800 265 q 781 276 790 272 q 766 287 773 280 q 755 295 758 293 q 750 299 752 297 q 735 306 739 302 q 724 310 732 310 q 716 318 717 314 q 712 322 714 321 q 683 326 691 328 q 665 333 671 330 q 653 332 659 335 q 641 330 651 329 q 628 326 632 332 q 611 326 619 328 q 596 325 603 325 q 587 319 591 322 q 579 320 583 316 q 573 307 571 307 q 576 303 575 306 q 577 282 579 293 q 581 263 576 271 q 581 251 579 252 q 583 248 583 250 q 581 239 580 244 q 579 230 583 234 q 585 215 583 226 q 587 195 581 195 q 585 179 581 183 q 584 162 584 164 q 585 152 584 155 q 583 146 587 149 q 586 134 587 134 q 585 131 585 134 q 588 114 587 116 q 590 111 590 112 q 590 77 587 88 q 592 55 592 66 q 592 42 591 43 q 592 39 592 42 q 590 26 590 27 q 591 24 591 25 q 589 10 591 10 q 585 6 587 9 q 588 -5 590 -2 q 588 -9 585 -8 q 583 -15 585 -12 q 579 -23 581 -18 q 582 -35 584 -35 q 580 -39 580 -36 q 583 -56 584 -51 q 585 -65 583 -61 q 583 -79 584 -77 q 581 -82 581 -81 q 577 -101 580 -97 q 575 -111 573 -104 q 566 -126 568 -116 q 556 -139 565 -137 q 554 -148 557 -146 q 553 -157 552 -150 q 543 -165 548 -161 q 539 -176 539 -169 q 533 -181 535 -179 q 526 -185 530 -184 q 518 -201 519 -196 q 511 -206 518 -206 q 504 -217 505 -215 q 503 -223 503 -219 q 494 -231 496 -226 q 485 -238 492 -236 q 467 -257 476 -246 l 457 -268 q 451 -274 454 -271 q 443 -280 447 -278 q 431 -288 431 -286 q 428 -291 431 -290 q 417 -297 419 -295 q 412 -299 416 -299 q 399 -310 401 -307 q 393 -313 397 -313 q 377 -327 379 -325 q 370 -330 375 -329 q 335 -351 344 -340 q 320 -348 322 -351 q 294 -358 301 -355 q 282 -366 287 -362 q 269 -367 275 -367 q 256 -370 263 -367 q 248 -374 252 -371 q 241 -377 245 -377 q 221 -379 225 -378 q 200 -378 210 -377 q 183 -373 189 -379 q 160 -371 166 -373 q 134 -366 143 -366 q 119 -366 126 -367 q 94 -352 100 -358 q 82 -347 85 -349 q 75 -343 78 -345 q 69 -339 73 -340 q 59 -335 65 -337 q 33 -324 46 -324 l 17 -309 q 2 -298 5 -298 q -13 -282 -1 -286 q -24 -255 -16 -267 q -33 -238 -31 -246 q -40 -227 -37 -234 q -48 -218 -42 -221 q -50 -204 -48 -206 q -52 -200 -51 -203 q -56 -185 -55 -188 q -59 -177 -58 -181 q -63 -165 -63 -170 q -65 -157 -63 -160 q -67 -149 -66 -153 q -67 -142 -67 -146 q -69 -126 -67 -127 q -67 -123 -70 -126 q -63 -111 -63 -112 q -63 -108 -62 -111 q -60 -88 -61 -94 q -61 -75 -59 -82 q -56 -66 -55 -69 q -58 -61 -58 -63 q -54 -44 -55 -46 q -51 -40 -52 -43 q -51 -27 -50 -33 q -50 -14 -52 -20 q -42 6 -43 0 q -37 16 -40 13 q -31 34 -32 32 q -29 40 -29 36 q -14 59 -16 55 q -10 66 -13 63 q -6 71 -8 67 q -1 78 -4 75 q 10 87 10 85 q 12 92 10 89 l 27 101 q 42 118 40 111 q 57 126 52 122 q 66 127 62 130 q 74 133 69 131 q 85 138 80 135 q 95 147 92 146 q 97 150 99 147 q 105 151 103 149 q 112 153 107 153 q 126 162 126 161 q 128 165 126 164 q 161 173 149 162 q 180 173 169 165 q 200 166 195 166 q 207 166 204 166 q 221 163 219 164 q 225 161 222 162 q 241 160 236 160 q 252 149 252 150 q 255 146 253 147 q 273 135 269 141 q 283 127 276 130 l 293 115 q 301 107 299 111 q 309 103 303 104 q 320 84 311 90 q 324 63 321 67 q 329 54 328 59 q 328 43 326 44 q 332 37 330 42 q 332 18 332 18 q 324 7 326 9 q 322 2 322 5 q 326 -10 325 -6 q 325 -17 326 -13 q 314 -35 314 -32 q 310 -40 313 -39 q 299 -54 299 -51 q 294 -58 298 -56 q 288 -70 288 -69 q 287 -77 288 -71 q 281 -78 283 -75 q 277 -82 279 -80 q 273 -88 275 -85 q 265 -89 271 -90 q 256 -101 260 -99 q 249 -105 252 -103 q 237 -105 238 -107 q 234 -105 236 -104 q 216 -115 222 -115 q 206 -119 210 -116 q 214 -92 208 -103 q 229 -71 219 -81 q 230 -65 230 -69 q 233 -56 230 -61 q 236 -39 237 -42 q 236 -33 234 -36 q 236 -18 234 -18 q 237 -17 237 -18 q 232 -2 233 -4 q 229 0 231 -1 q 222 17 229 14 q 217 30 218 27 q 211 35 215 33 q 200 54 204 52 q 192 59 195 55 q 178 65 183 65 q 170 69 173 66 q 160 76 162 74 q 153 77 158 78 q 145 83 154 81 q 134 84 137 85 q 111 91 116 89 q 103 96 107 93 q 94 93 99 94 q 84 92 90 92 q 75 80 77 80 q 73 80 74 81 q 59 66 63 67 q 55 51 61 55 q 52 36 50 47 q 46 21 44 24 q 44 16 47 18 l 36 -6 q 31 -21 28 -18 q 33 -25 33 -23 q 33 -35 32 -33 q 32 -40 33 -37 q 28 -58 32 -48 q 18 -73 24 -67 q 27 -89 27 -77 q 31 -101 29 -96 q 29 -112 32 -105 q 39 -132 33 -130 q 44 -153 39 -147 q 47 -174 50 -160 q 56 -183 54 -181 q 61 -187 59 -184 q 71 -203 69 -199 q 74 -214 74 -207 q 85 -225 84 -225 q 108 -248 100 -242 q 115 -253 111 -250 q 124 -257 119 -256 l 138 -265 q 158 -278 154 -274 q 169 -282 162 -282 q 183 -288 177 -287 q 202 -295 198 -293 q 210 -294 206 -297 q 241 -301 229 -299 q 263 -306 253 -303 q 280 -305 279 -306 q 282 -302 280 -303 q 306 -301 303 -299 q 320 -297 318 -298 q 325 -295 322 -295 q 335 -290 329 -293 q 344 -284 340 -288 q 360 -281 355 -286 q 373 -274 364 -276 q 383 -267 381 -268 q 387 -267 385 -267 q 404 -246 401 -252 q 413 -237 406 -240 q 420 -227 419 -229 q 424 -225 421 -225 q 432 -212 434 -217 q 438 -208 431 -207 q 440 -200 438 -204 q 444 -193 443 -196 q 454 -171 450 -174 q 458 -161 458 -168 q 470 -140 466 -153 q 480 -119 473 -127 q 480 -108 478 -109 q 482 -104 481 -107 q 482 -93 480 -100 q 485 -78 484 -86 q 485 -57 485 -62 q 486 -48 485 -52 q 489 -34 489 -36 q 488 -29 488 -32 q 489 -16 488 -23 q 491 -6 491 -10 q 491 8 493 8 q 488 10 489 9 q 492 24 493 14 q 491 40 491 33 q 492 53 493 52 q 491 55 491 54 q 490 70 489 67 q 491 75 491 73 q 489 90 492 88 q 491 94 486 92 q 489 117 488 107 q 488 137 489 127 q 486 149 485 147 q 488 151 488 150 q 486 185 489 169 q 484 217 484 202 q 484 231 484 223 q 484 248 485 240 q 482 263 482 263 q 481 264 481 263 q 480 320 484 290 q 477 377 476 349 q 472 397 473 392 q 470 408 470 402 q 469 425 470 421 q 467 436 467 430 q 466 455 467 448 q 465 469 465 462 q 465 480 466 478 q 463 485 463 482 q 462 501 461 499 q 462 507 463 504 q 461 512 461 510 q 462 522 462 515 q 457 545 457 537 q 455 562 458 554 q 453 587 455 577 q 454 604 451 596 q 451 617 448 617 q 451 619 453 617 q 448 639 446 628 q 443 657 450 651 q 444 672 446 666 q 443 686 443 679 q 444 703 444 701 q 444 708 443 705 q 442 721 442 714 q 444 737 442 728 q 442 761 442 754 q 438 774 443 769 q 435 791 438 784 q 438 805 432 798 q 434 818 431 811 q 430 830 436 826 q 430 853 434 843 q 429 863 432 862 q 427 868 427 864 q 427 889 428 883 q 427 904 427 896 q 426 917 428 914 q 424 925 424 921 q 423 946 423 940 q 417 965 423 960 q 398 956 401 959 q 393 952 396 953 q 377 944 382 945 q 368 938 373 942 q 352 933 355 938 q 320 923 333 926 q 299 912 306 921 q 277 905 286 906 q 265 897 268 904 q 252 894 257 897 q 242 888 248 891 q 223 873 226 877 q 214 864 215 862 q 208 865 212 866 q 200 860 202 862 q 193 858 199 858 q 184 849 185 851 q 179 847 183 846 q 172 843 176 845 q 168 834 168 841 q 154 826 157 827 q 131 803 146 813 q 116 774 123 779 q 108 758 109 769 q 102 752 105 755 q 99 743 99 748 q 92 737 93 741 q 85 732 90 733 q 81 718 80 718 q 82 714 82 717 q 75 701 78 704 q 75 695 73 698 q 71 680 70 680 q 71 676 73 679 q 67 659 70 661 q 67 650 66 653 q 63 644 69 647 q 64 628 65 630 q 66 623 63 625 q 65 607 63 617 q 69 594 66 598 q 69 581 71 580 q 67 579 67 581 l 75 560 q 85 545 82 545 q 91 526 89 530 q 96 520 93 523 q 107 510 104 511 q 107 503 109 508 q 113 498 109 500 q 120 493 118 496 q 134 475 130 476 q 139 469 139 474 q 151 460 150 461 q 151 457 153 459 q 168 451 161 454 q 183 446 174 448 l 195 436 q 212 428 208 432 q 235 427 223 427 q 256 428 246 428 q 269 437 267 435 q 279 442 272 439 q 282 430 282 434 q 283 423 283 427 q 274 417 278 420 q 267 411 269 415 q 249 400 253 409 q 227 387 236 389 q 217 377 219 385 q 196 375 204 375 q 184 368 187 375 q 172 370 177 370 q 162 368 168 371 q 147 371 149 373 q 143 368 146 370 q 124 375 127 374 q 117 379 120 377 q 110 383 113 382 q 101 383 107 385 q 92 392 97 389 q 82 400 88 396 q 69 404 69 405 q 67 405 69 404 q 54 413 54 412 q 46 421 48 419 q 40 425 43 423 q 28 438 32 438 q 21 442 24 439 q 10 457 12 453 q 4 463 8 461 q 0 478 1 472 q -9 489 -2 485 q -10 504 -8 496 q -16 521 -16 518 q -20 526 -16 524 q -23 555 -23 545 q -27 571 -23 565 q -25 584 -25 577 q -29 596 -25 591 q -22 619 -25 613 q -21 630 -18 625 q -17 641 -16 638 q -20 647 -18 644 q -16 653 -16 649 q -16 663 -16 657 q -10 679 -9 672 q 0 697 -1 691 q 6 705 1 702 q 11 716 10 714 q 14 718 12 717 q 26 738 17 731 q 37 756 35 746 q 52 775 48 770 q 59 788 55 781 q 67 798 63 793 q 74 809 71 803 q 80 813 77 812 q 88 816 82 815 q 93 824 89 822 q 97 834 97 827 q 105 837 104 832 q 112 842 105 842 q 121 851 115 849 q 128 862 127 854 q 142 870 141 869 q 147 872 143 872 q 164 883 162 883 q 179 892 174 892 q 183 898 180 893 q 191 902 185 903 q 202 914 199 914 q 204 918 204 915 q 226 927 219 918 q 246 938 233 935 q 255 942 253 941 q 263 946 257 944 q 276 952 275 953 q 278 953 276 952 q 284 959 280 956 q 288 965 287 963 q 305 972 302 967 q 329 978 320 976 q 345 982 339 980 q 361 990 354 990 q 371 996 368 991 q 379 1011 377 1003 q 391 1018 390 1017 q 394 1021 392 1020 q 404 1024 402 1022 q 409 1025 405 1025 q 417 1029 412 1028 q 427 1033 421 1030 q 431 1039 430 1036 q 436 1045 432 1043 q 455 1048 451 1045 q 474 1055 472 1056 q 497 1058 492 1063 q 511 1056 501 1053 q 516 1041 519 1041 q 514 1039 514 1041 q 519 1012 516 1024 q 515 994 522 1001 q 521 981 522 988 q 522 965 520 973 q 520 951 520 952 q 519 949 519 950 q 524 936 523 938 q 522 933 524 934 q 524 918 522 923 q 526 910 526 914 q 524 894 523 895 q 524 891 524 893 q 527 876 527 877 q 529 873 527 874 q 527 858 526 866 q 531 846 529 850 q 529 838 527 843 q 530 826 531 832 q 529 796 526 805 q 526 782 533 788 q 529 767 529 769 q 527 763 530 766 q 531 750 533 752 q 529 743 529 747 q 531 732 533 733 q 530 728 530 731 q 533 712 534 716 q 533 705 531 709 q 535 690 533 694 q 535 683 537 686 q 533 675 535 679 q 534 667 531 671 q 537 658 537 663 q 541 651 537 653 q 535 632 535 637 q 531 625 534 628 q 539 614 541 615 q 537 610 537 613 q 540 596 541 596 q 539 595 539 596 q 545 577 543 579 q 548 552 548 560 q 554 538 548 545 q 550 529 552 531 q 552 520 549 526 q 555 512 553 516 q 556 504 557 508 q 556 481 554 488 q 558 467 557 474 q 562 444 557 455 q 564 425 561 431 q 567 400 568 406 q 569 385 567 393 q 577 386 576 385 q 584 389 579 387 q 600 392 596 393 q 606 393 603 392 q 621 400 613 394 q 631 399 626 397 q 642 401 636 401 q 672 402 661 400 q 693 405 683 405 q 709 408 704 405 q 727 415 725 412 q 754 432 747 425 q 769 444 762 439 q 777 457 777 453 q 785 461 778 461 q 794 476 793 474 q 798 477 796 477 q 802 486 798 484 q 807 496 805 489 q 815 506 812 504 q 820 511 819 508 q 824 520 823 518 q 828 526 826 523 q 832 539 828 534 q 838 548 835 543 q 845 563 841 558 q 850 576 849 568 q 857 586 855 584 q 858 591 858 588 q 865 605 865 602 q 866 611 865 609 q 875 630 873 628 q 878 636 877 633 q 885 656 883 653 q 884 661 887 659 q 889 669 888 664 q 893 678 891 674 q 899 686 896 682 q 904 693 902 690 q 908 706 902 699 q 911 718 914 712 q 921 732 918 724 q 931 746 925 740 q 940 765 940 759 q 946 773 941 770 q 956 790 952 785 q 963 798 960 794 l 975 816 q 994 840 987 835 q 1005 853 1002 845 q 1015 861 1010 855 q 1022 873 1020 866 q 1029 878 1028 874 q 1037 883 1030 883 q 1049 895 1048 891 q 1056 900 1051 899 q 1070 912 1070 910 q 1074 915 1070 915 q 1096 929 1085 926 q 1117 942 1106 940 q 1124 947 1120 945 q 1132 952 1128 949 q 1146 962 1146 960 q 1150 964 1147 964 q 1163 973 1159 972 q 1169 976 1166 973 q 1189 980 1182 978 q 1201 986 1197 986 q 1208 987 1205 986 q 1224 991 1222 990 q 1239 998 1238 996 q 1245 1001 1241 999 q 1257 1003 1250 1003 q 1266 1009 1264 1003 q 1276 1009 1272 1007 q 1284 1010 1280 1010 q 1298 1008 1295 1007 q 1303 1009 1300 1009 q 1313 1007 1308 1009 q 1322 1007 1317 1005 q 1329 1004 1323 1003 q 1336 998 1336 1005 q 1352 998 1351 998 q 1358 992 1355 995 q 1364 986 1361 990 q 1353 977 1360 980 q 1344 969 1346 975 q 1296 948 1318 961 q 1285 938 1289 944 q 1273 930 1280 933 q 1258 935 1264 937 q 1239 943 1243 942 q 1234 941 1235 944 q 1216 941 1218 945 q 1192 935 1199 935 q 1184 929 1186 935 q 1174 928 1177 930 q 1165 926 1171 926 q 1145 916 1147 919 q 1138 914 1143 914 q 1131 906 1138 907 q 1125 897 1125 904 q 1119 893 1120 897 q 1112 888 1119 888 q 1101 875 1104 873 q 1096 874 1098 877 q 1074 854 1086 855 q 1068 836 1072 849 q 1060 830 1062 835 q 1052 822 1058 824 q 1051 812 1053 815 q 1049 803 1048 809 q 1037 785 1043 786 q 1033 773 1030 784 q 1024 763 1028 767 q 1018 751 1021 758 q 1001 727 1002 735 q 996 718 996 721 q 992 712 995 714 q 988 695 988 697 q 983 693 988 694 q 981 678 984 683 q 978 667 978 674 q 967 643 968 651 q 960 632 967 636 q 954 613 954 617 q 950 610 954 610 q 945 595 950 599 q 941 580 940 591 q 931 566 933 568 q 930 558 929 564 q 923 550 923 557 q 915 541 922 542 q 908 522 910 527 q 903 514 906 518 q 888 499 891 499 q 878 483 880 486 q 876 474 876 480 q 868 470 869 474 q 861 465 866 465 q 855 456 858 461 q 847 448 851 451 q 833 440 838 442 q 826 432 828 439 q 809 426 812 430 q 804 423 807 423 q 784 402 790 415 q 773 398 777 402 q 771 390 769 394 q 782 389 775 390 q 790 381 789 387 q 803 377 798 382 q 815 373 807 373 l 827 363 q 834 358 831 360 q 842 354 838 356 q 855 345 853 345 q 859 341 858 345 q 875 334 869 335 q 883 326 881 333 q 892 317 895 318 q 893 313 889 316 q 902 307 899 310 q 911 301 906 303 q 916 292 914 295 q 918 283 919 290 q 938 268 933 269 q 946 253 945 253 q 948 252 946 253 q 961 234 960 237 q 971 221 967 229 q 978 204 975 212 q 989 186 987 192 q 995 176 991 180 q 997 169 995 172 q 996 160 999 166 q 1004 147 1006 147 q 1003 142 1002 146 q 1013 133 1007 139 q 1015 120 1018 127 q 1028 94 1026 101 q 1036 80 1030 86 q 1038 66 1033 73 q 1045 52 1043 59 q 1047 39 1045 40 q 1048 36 1048 37 l 1052 18 q 1059 -4 1056 9 q 1064 -23 1064 -17 q 1068 -30 1066 -25 q 1066 -37 1071 -35 q 1076 -54 1075 -48 q 1079 -63 1077 -59 q 1085 -82 1085 -82 q 1089 -99 1090 -94 q 1091 -105 1089 -103 q 1097 -122 1093 -119 q 1095 -131 1096 -127 q 1100 -138 1094 -135 q 1104 -160 1105 -153 q 1106 -170 1102 -168 q 1112 -188 1106 -184 q 1119 -203 1119 -192 q 1127 -223 1123 -218 q 1129 -234 1132 -229 q 1136 -250 1135 -248 q 1135 -256 1136 -252 q 1147 -276 1143 -269 q 1154 -293 1151 -283 q 1166 -316 1162 -301 q 1169 -331 1167 -329 q 1170 -336 1170 -333 l 1182 -351 q 1186 -364 1184 -364 q 1192 -366 1189 -364 q 1197 -374 1195 -370 q 1201 -381 1199 -378 q 1207 -396 1203 -392 q 1219 -402 1212 -401 q 1226 -412 1222 -409 q 1233 -421 1231 -415 q 1245 -433 1242 -432 q 1252 -436 1249 -434 q 1258 -444 1254 -442 q 1265 -453 1262 -447 q 1277 -459 1275 -458 q 1279 -463 1279 -461 q 1307 -474 1296 -470 q 1327 -484 1318 -478 q 1341 -489 1338 -486 q 1346 -493 1344 -491 l 1361 -495 q 1380 -497 1368 -496 q 1402 -499 1393 -499 q 1420 -499 1416 -499 q 1433 -497 1425 -500 q 1451 -491 1441 -497 q 1461 -488 1460 -489 q 1464 -484 1462 -486 q 1471 -482 1469 -484 q 1481 -482 1474 -481 l 1494 -491 "},"7":{"x_min":27.125,"x_max":942.9375,"ha":770,"o":"m 345 -142 q 342 -168 344 -162 q 341 -183 340 -173 q 341 -202 343 -199 q 343 -206 340 -204 q 345 -225 344 -222 q 345 -230 345 -227 q 354 -250 351 -238 q 346 -258 348 -253 q 341 -265 344 -263 q 324 -274 328 -264 q 314 -276 317 -272 q 306 -282 310 -279 q 297 -287 301 -287 q 293 -291 294 -287 q 279 -295 283 -291 q 268 -302 275 -299 q 261 -299 264 -301 q 252 -299 257 -298 q 242 -287 244 -290 q 240 -271 240 -280 q 242 -255 240 -261 q 240 -242 240 -248 q 237 -230 241 -236 q 240 -222 241 -227 q 241 -214 238 -217 q 238 -200 238 -207 q 242 -188 238 -192 q 239 -172 238 -173 q 242 -169 240 -170 q 241 -161 240 -166 q 242 -150 242 -155 q 244 -139 245 -145 q 244 -126 244 -132 q 247 -118 248 -123 q 248 -108 246 -112 q 250 -74 252 -92 q 254 -59 256 -59 q 252 -55 252 -58 q 259 -38 259 -44 q 264 -29 259 -32 q 268 -6 261 -16 q 272 13 275 2 q 284 41 282 31 q 290 61 287 51 q 293 81 293 74 q 298 90 293 88 q 303 115 299 107 q 308 128 306 128 q 310 130 310 128 q 312 141 310 139 q 316 147 314 143 q 325 170 322 169 q 329 189 326 181 q 335 207 332 196 q 343 228 341 225 q 348 237 345 231 q 353 250 351 244 q 358 263 355 256 q 362 279 364 274 q 373 294 368 290 q 382 313 379 307 q 383 326 383 324 q 383 329 382 328 q 388 340 387 337 q 392 344 389 343 q 396 357 393 352 q 401 370 400 362 q 408 382 406 379 q 408 390 411 385 q 415 400 412 398 q 417 405 417 402 q 421 414 419 412 q 424 419 423 416 q 425 426 425 423 q 428 435 425 430 q 436 453 438 448 q 450 471 448 466 q 453 482 451 476 q 462 499 459 497 q 463 504 465 500 q 477 524 473 508 q 486 534 482 529 q 493 548 491 539 q 499 554 497 550 q 504 560 501 557 q 508 572 508 569 q 510 577 508 575 q 526 602 522 596 q 533 617 531 607 q 541 624 539 618 q 552 630 542 630 q 557 641 556 638 q 562 645 558 644 q 573 657 567 652 q 581 674 579 663 q 594 680 591 679 q 595 686 596 682 q 607 700 603 699 q 610 706 611 701 q 618 708 615 705 q 622 714 621 710 q 626 721 623 718 q 634 724 628 724 q 638 732 637 727 q 641 740 638 737 q 657 748 653 748 q 661 751 660 748 q 670 760 670 758 q 672 763 670 762 q 662 765 668 766 q 653 762 656 763 q 644 764 649 765 q 636 766 640 763 q 625 764 630 763 q 613 765 619 765 q 588 765 598 765 q 569 769 579 766 q 545 771 550 769 q 537 770 541 773 q 529 773 534 773 q 522 774 524 774 q 505 776 507 777 q 503 778 503 775 q 475 781 482 782 q 459 784 467 781 q 442 788 446 788 q 431 790 438 788 q 414 794 417 792 q 408 798 411 796 q 385 801 396 793 q 373 801 379 801 q 364 804 367 801 q 351 804 352 801 q 345 807 349 807 q 328 805 332 803 q 321 803 324 807 q 307 804 314 804 q 294 804 301 804 q 264 801 274 800 q 250 796 255 803 q 226 794 238 798 q 203 786 214 789 q 185 775 188 777 q 173 770 174 773 q 173 762 172 767 q 164 750 168 754 q 160 740 161 747 q 143 725 147 727 q 145 710 147 710 q 142 708 142 710 q 137 691 145 699 q 133 678 135 679 q 134 670 131 676 q 126 651 126 656 q 126 641 127 647 q 127 622 123 626 q 123 615 124 618 q 116 609 122 611 q 119 596 120 596 q 118 592 118 595 q 120 578 120 579 q 119 576 119 577 q 124 563 120 569 q 126 548 127 557 q 120 526 119 533 q 114 520 115 526 q 111 512 113 515 q 96 502 101 504 q 88 496 90 500 q 78 493 81 496 q 71 491 74 491 q 52 505 59 495 q 42 526 55 519 q 39 535 42 533 q 36 542 36 538 q 29 558 33 556 q 31 571 32 569 q 27 576 29 573 q 29 609 27 600 q 33 626 32 617 q 39 641 37 637 q 42 649 40 645 q 47 666 47 661 q 50 674 47 671 q 51 687 48 682 q 56 696 54 691 q 61 706 59 701 q 61 718 63 710 q 66 727 63 724 q 69 737 69 731 q 78 743 73 740 q 81 754 82 746 q 99 770 97 758 q 114 781 112 777 q 118 788 116 785 q 133 796 131 794 q 139 800 135 797 l 153 811 q 160 815 157 813 q 166 819 164 816 q 179 822 176 817 q 188 826 181 826 q 212 846 208 838 q 240 853 226 846 q 257 857 250 858 q 268 862 264 857 q 290 865 287 864 q 299 866 295 864 q 306 869 302 869 q 322 871 313 872 q 340 872 330 870 q 357 874 352 874 q 367 876 362 874 q 377 877 375 876 q 382 878 378 878 q 389 876 386 877 q 397 872 393 874 q 412 874 404 876 q 428 873 420 873 q 450 868 444 869 q 471 864 465 864 q 484 862 477 865 q 494 858 489 861 q 505 858 499 855 q 519 854 515 855 q 527 851 523 853 q 543 847 542 849 q 546 846 545 846 q 579 841 568 841 q 602 834 591 841 l 640 830 q 647 828 642 830 q 656 827 652 827 q 666 827 659 827 q 676 823 672 827 q 708 825 693 826 q 739 824 722 824 q 751 825 750 826 q 754 824 752 824 q 778 827 773 827 q 789 830 784 827 q 805 835 803 836 q 811 835 808 834 q 821 839 816 836 q 831 845 826 842 q 843 854 834 850 q 856 853 849 851 q 866 853 864 854 q 884 859 878 858 q 897 861 889 859 q 913 864 910 865 q 919 865 916 864 q 929 867 926 869 q 935 868 933 865 q 942 841 945 846 q 940 828 938 835 q 931 828 933 828 q 925 828 930 827 q 911 820 915 822 q 903 816 907 819 q 876 807 883 809 q 861 801 869 804 q 839 798 846 800 q 830 789 832 796 q 811 786 820 788 q 800 777 803 785 q 784 774 785 775 q 766 762 769 766 q 748 749 751 751 q 743 743 744 747 q 728 729 731 732 q 718 725 725 725 q 712 713 717 717 q 705 702 708 709 q 688 685 690 689 q 679 680 686 682 q 669 666 676 672 q 659 652 661 660 q 651 644 652 647 q 652 638 649 642 q 640 632 642 636 q 636 630 638 628 q 629 616 632 623 q 619 602 626 609 q 613 588 613 590 q 613 587 614 587 q 604 577 606 579 q 602 572 602 575 q 592 562 594 567 q 585 557 591 558 q 578 539 584 546 q 572 520 572 533 q 564 512 565 518 q 560 501 562 507 q 548 486 552 489 q 546 478 545 484 q 539 473 543 476 q 533 466 535 470 q 529 457 531 458 q 529 451 526 457 q 522 437 524 439 q 522 430 519 435 q 508 411 516 419 q 507 397 510 397 q 504 396 505 397 q 503 385 504 389 q 500 374 501 381 q 490 367 492 373 q 484 359 488 362 q 484 343 485 344 q 481 341 482 343 q 474 322 478 328 q 466 302 467 305 l 462 286 q 457 274 458 282 q 454 259 457 267 q 442 245 442 248 q 442 238 443 242 q 434 223 436 225 q 435 217 432 222 q 430 208 430 214 q 425 203 431 203 q 425 185 428 187 q 420 181 423 184 q 417 171 419 173 q 417 165 416 169 q 409 151 409 151 q 407 134 406 138 q 406 128 408 131 q 394 108 405 116 q 394 98 397 101 q 393 88 392 94 q 389 72 390 75 q 386 66 387 69 q 383 50 385 54 q 382 42 381 47 q 377 31 378 33 q 378 24 377 29 q 373 23 374 24 q 371 18 371 21 q 370 14 371 16 q 366 12 370 12 q 367 -14 370 -8 q 360 -24 364 -20 q 361 -45 363 -35 q 359 -66 359 -55 q 352 -84 354 -81 q 349 -90 351 -86 q 351 -106 354 -105 q 347 -109 348 -107 q 347 -126 348 -126 q 345 -130 345 -126 l 345 -142 "},"d":{"x_min":27.125,"x_max":685.140625,"ha":627,"o":"m 539 -168 q 531 -168 534 -169 q 524 -165 527 -166 q 507 -163 511 -164 q 505 -157 504 -162 q 474 -149 486 -154 q 463 -135 473 -137 q 457 -120 459 -120 q 453 -118 454 -120 q 435 -103 443 -103 q 427 -84 431 -88 q 424 -75 423 -80 q 418 -66 420 -69 q 419 -61 416 -63 q 413 -52 415 -58 q 406 -44 411 -47 q 401 -25 402 -27 q 402 -20 400 -23 l 398 1 q 394 18 394 13 q 392 27 394 24 q 390 44 394 36 q 387 61 386 51 q 386 81 385 77 q 364 66 366 69 q 351 59 355 65 q 337 52 347 54 q 328 44 330 47 q 322 44 325 42 q 307 33 309 36 q 303 27 306 29 q 282 23 287 24 q 275 18 279 20 q 268 13 271 16 q 246 7 252 14 q 226 -1 240 0 q 210 -6 215 -2 q 199 -10 206 -9 q 183 -10 191 -12 q 169 -14 174 -8 l 146 -14 q 134 -14 137 -16 q 128 -12 131 -13 q 118 -10 122 -10 q 109 -6 113 -10 q 99 -4 101 -6 q 94 1 97 -1 q 77 8 82 6 q 67 12 71 9 q 61 22 62 20 q 55 24 59 24 q 46 39 50 36 q 37 55 43 50 q 35 73 37 67 q 32 93 32 82 q 27 113 28 101 q 27 132 27 126 q 37 166 29 154 q 40 181 39 179 q 42 184 40 183 q 47 200 47 189 q 50 215 51 211 q 54 222 50 219 l 58 238 q 67 255 66 249 q 74 263 69 260 q 82 280 71 276 q 90 293 88 294 q 93 294 92 293 q 101 305 100 302 q 105 307 101 309 q 114 322 111 318 q 122 329 118 326 q 132 338 128 335 q 138 344 135 341 q 147 348 145 345 q 153 355 150 351 q 168 362 162 356 q 181 370 173 367 q 196 381 192 377 q 207 385 199 385 q 231 398 215 392 q 252 410 245 408 q 265 415 259 412 q 277 418 275 416 q 282 421 279 420 q 299 424 295 423 q 306 427 302 425 q 329 427 317 428 q 352 427 341 427 q 362 426 358 425 q 368 427 366 427 q 379 424 375 425 q 387 425 383 423 q 390 439 392 435 q 389 450 389 443 q 389 463 390 462 q 387 466 387 465 q 388 482 387 481 q 389 484 389 482 q 389 512 387 497 q 389 521 389 516 q 390 530 390 526 q 387 539 389 535 q 386 550 386 543 q 387 566 387 565 q 386 571 386 568 q 386 580 385 576 q 387 590 387 584 q 387 598 387 594 q 386 610 386 603 q 386 620 386 615 q 387 632 386 625 q 387 646 386 641 q 387 657 387 651 q 389 674 387 672 q 389 680 390 675 q 385 695 387 691 q 383 701 383 698 q 384 715 383 716 q 385 716 385 714 q 382 744 383 735 q 383 760 381 754 q 380 773 381 769 q 382 779 379 777 q 378 798 378 796 q 378 801 378 800 q 372 810 371 808 q 371 815 373 812 q 368 825 367 822 q 364 831 368 828 q 360 850 366 842 q 360 861 363 857 q 358 873 356 865 q 351 885 354 883 q 345 891 348 888 q 340 902 341 900 q 337 907 339 904 q 321 923 325 911 q 313 926 316 925 q 307 930 310 927 q 288 930 297 929 q 274 926 280 931 q 256 923 264 923 q 240 921 248 922 q 233 931 234 926 q 231 941 233 937 q 238 946 234 944 q 241 953 241 948 q 248 957 246 953 q 253 964 250 961 q 268 971 264 964 q 284 975 279 969 q 299 980 288 980 q 320 991 311 987 q 336 992 328 995 q 355 996 351 994 q 363 998 359 998 q 390 988 386 992 q 406 986 404 988 q 409 982 408 984 q 419 971 417 972 q 424 969 421 971 q 430 955 430 957 q 432 950 431 953 q 442 942 439 945 q 447 935 446 940 q 452 923 448 926 q 453 918 455 921 q 463 888 455 895 q 466 868 465 876 q 473 855 467 859 q 473 845 474 847 q 474 838 472 843 q 474 816 476 817 q 477 808 477 813 q 480 800 477 803 q 478 785 477 793 q 480 770 480 777 q 478 760 478 762 q 480 755 478 758 q 479 741 477 748 q 482 725 481 733 q 482 710 482 710 q 481 706 481 709 q 483 675 480 685 q 482 657 486 666 q 481 642 482 644 q 480 638 480 641 q 480 621 481 623 q 482 617 478 619 q 482 598 480 603 q 480 590 484 594 q 482 578 482 584 q 482 565 482 572 q 482 552 480 553 q 484 548 485 550 q 481 515 482 524 q 481 495 480 505 q 482 467 482 482 q 481 440 482 451 q 481 427 482 430 q 480 423 480 424 q 479 411 478 412 q 480 408 480 411 q 478 394 480 393 q 476 392 476 394 q 477 364 477 373 q 482 352 477 356 q 496 349 495 349 q 499 347 497 348 q 505 337 505 339 q 507 332 505 335 q 507 307 511 316 q 507 291 504 299 q 503 281 504 287 q 497 272 501 275 q 496 246 497 255 q 488 234 495 238 q 488 226 491 230 q 484 218 485 222 q 484 200 482 211 q 484 180 485 189 q 482 158 481 164 q 480 149 482 153 q 484 120 485 138 q 485 85 482 101 q 489 71 486 78 q 486 55 492 63 q 495 36 493 40 q 499 25 496 32 q 501 6 496 18 q 506 -5 508 -5 q 504 -8 504 -5 q 507 -15 507 -10 q 512 -21 508 -20 q 516 -37 516 -35 q 516 -43 515 -40 q 522 -51 523 -48 q 527 -54 522 -54 q 537 -76 533 -74 q 541 -85 541 -78 q 552 -97 549 -96 q 557 -101 554 -99 q 569 -114 568 -113 q 572 -118 571 -115 q 598 -130 591 -123 q 607 -130 602 -130 q 615 -131 611 -130 q 634 -134 628 -135 q 647 -132 641 -134 q 654 -128 651 -131 q 661 -126 657 -126 q 674 -115 672 -116 q 676 -111 676 -115 q 684 -123 687 -122 q 680 -130 680 -124 q 670 -137 671 -135 q 667 -142 668 -139 q 638 -154 645 -151 q 624 -160 626 -161 q 619 -161 622 -160 q 607 -164 607 -165 q 604 -164 606 -164 q 581 -171 588 -169 q 565 -168 575 -173 l 539 -168 m 389 193 q 384 206 385 204 q 386 211 383 208 q 381 238 381 229 q 385 256 382 248 q 379 272 382 261 q 382 287 383 283 q 381 295 381 291 q 383 309 383 307 q 382 313 382 310 q 379 325 382 325 q 374 326 377 325 q 358 339 360 336 q 349 340 356 341 q 335 350 337 351 q 329 349 332 349 q 309 355 318 355 q 298 358 299 360 q 294 358 297 356 q 282 360 288 362 q 269 356 276 358 q 259 359 264 360 q 250 356 255 358 q 235 354 242 354 q 221 351 227 354 q 206 345 211 345 q 199 339 202 343 q 191 336 196 336 q 186 330 189 332 q 180 325 183 328 q 169 304 172 311 q 161 291 166 297 q 154 263 151 275 q 149 257 149 263 q 143 248 149 250 q 138 225 139 234 q 130 211 137 217 q 125 179 130 187 q 123 160 120 170 q 121 144 122 145 q 120 141 120 143 q 124 126 124 126 q 128 118 127 120 q 128 109 130 116 q 143 93 137 96 q 149 81 149 90 q 165 69 157 80 q 181 62 174 62 q 187 56 187 62 q 200 54 193 56 q 211 50 206 51 q 223 50 221 51 q 230 48 226 48 q 244 50 241 50 q 252 51 248 51 q 269 55 264 54 q 275 55 274 56 q 293 67 290 63 q 303 71 297 70 q 320 88 316 84 q 328 96 324 93 q 344 111 343 109 q 354 120 352 119 q 359 123 356 122 q 370 139 366 130 q 378 160 374 149 l 389 193 "},",":{"x_min":6.78125,"x_max":123.4375,"ha":165,"o":"m 120 78 q 118 69 118 74 q 116 56 118 65 q 120 43 119 47 q 123 35 122 39 q 120 17 119 20 q 122 12 122 14 q 111 -8 118 -4 q 115 -21 115 -17 q 113 -27 115 -24 q 103 -48 108 -40 q 103 -63 97 -55 q 92 -73 100 -70 q 88 -89 85 -77 q 71 -101 74 -90 q 63 -119 69 -111 q 42 -131 46 -128 q 35 -139 37 -134 q 21 -143 25 -139 q 10 -141 17 -147 q 10 -126 12 -132 q 13 -116 8 -120 q 29 -96 8 -99 q 37 -65 37 -88 q 39 -40 40 -46 q 37 -29 37 -35 q 38 -22 37 -23 q 36 -14 39 -21 q 30 -1 29 -2 q 29 1 31 0 q 20 9 25 6 q 9 14 14 12 q 10 23 12 18 q 6 32 8 27 q 13 39 12 33 q 17 47 14 44 q 30 54 25 52 q 35 62 35 55 q 46 67 42 63 q 58 73 51 71 q 81 88 67 84 q 92 94 88 90 q 105 97 96 99 q 118 82 119 85 q 120 78 118 80 "},"Y":{"x_min":-180.796875,"x_max":1018.015625,"ha":891,"o":"m 230 1071 q 238 1052 234 1062 q 255 1041 242 1043 q 264 1024 263 1029 q 269 1017 265 1020 q 271 1007 269 1010 q 275 999 274 1003 q 278 985 274 986 q 282 980 282 984 q 281 971 279 975 q 280 963 283 967 q 286 946 287 952 q 287 935 286 941 q 289 923 290 925 q 288 918 288 921 q 288 904 290 908 q 287 895 287 900 q 288 884 288 885 q 287 880 287 883 q 288 866 287 873 q 288 851 290 858 q 287 838 288 845 q 287 826 286 832 q 283 803 284 809 q 278 793 282 796 q 275 776 279 782 q 272 759 271 770 q 263 741 268 746 q 257 729 259 737 q 250 714 252 717 q 250 708 249 712 q 247 701 248 705 q 244 693 246 697 q 238 676 238 682 q 225 647 227 657 q 215 629 223 636 q 215 618 217 623 q 215 609 212 613 q 208 592 210 595 q 204 584 206 588 q 202 572 203 577 q 196 564 202 567 q 189 537 193 549 q 185 510 185 524 q 178 501 177 504 q 177 496 179 499 q 168 478 169 482 q 163 465 162 467 q 164 461 164 463 q 160 444 160 447 q 153 425 154 428 q 151 419 151 423 q 151 398 149 408 q 150 379 153 387 l 143 362 q 139 324 141 339 q 138 295 138 310 q 139 281 138 288 q 141 267 141 274 q 141 248 141 253 q 139 240 142 244 q 145 226 145 233 q 151 212 145 219 q 154 196 154 200 q 157 188 154 191 q 165 174 161 179 q 175 158 173 160 q 181 154 177 155 q 206 127 193 134 q 221 120 219 122 q 225 118 222 119 q 245 115 231 115 q 277 111 261 113 q 307 111 293 108 q 322 113 320 112 q 329 115 325 113 q 342 120 341 118 q 345 119 343 122 q 352 123 349 120 q 359 127 355 126 q 385 141 375 135 q 400 160 394 147 q 417 168 412 164 q 427 172 421 172 q 444 188 442 183 q 450 199 447 193 q 469 212 465 207 q 477 223 473 218 q 485 235 482 230 q 495 242 488 240 q 499 249 496 246 q 503 257 501 252 q 519 271 519 265 q 528 282 522 278 q 537 294 534 287 q 550 307 545 306 q 553 316 554 309 q 560 322 560 316 q 567 330 561 328 q 573 340 573 336 q 577 344 573 344 q 582 358 579 356 q 585 364 585 359 q 596 376 594 373 q 599 386 598 379 q 600 398 600 397 q 598 402 599 400 q 598 411 598 406 q 598 420 599 416 q 596 433 595 431 q 595 436 596 435 q 593 451 592 447 q 592 457 594 454 q 590 472 592 465 q 590 486 587 480 q 586 509 588 501 q 590 519 584 516 q 584 534 585 534 q 583 537 583 534 q 587 554 590 542 q 591 569 584 565 q 592 600 588 584 q 594 629 596 615 q 598 652 600 647 q 602 659 600 655 q 604 667 603 663 q 613 680 610 672 q 615 697 613 691 q 617 705 617 699 q 619 716 617 710 l 623 733 q 630 763 625 755 q 632 782 634 770 q 636 795 637 793 q 636 801 634 797 q 649 822 644 817 q 656 842 648 831 q 666 866 661 857 q 676 878 670 874 q 682 893 682 888 q 699 914 695 907 q 709 927 704 921 q 725 940 720 934 q 736 949 729 946 q 751 961 744 957 q 756 968 754 964 q 760 975 758 972 q 778 986 775 975 q 797 994 792 988 q 818 1003 813 1001 q 826 1011 823 1006 q 856 1020 843 1018 q 878 1028 869 1021 q 888 1025 881 1024 q 897 1022 895 1026 q 914 1019 914 1021 q 916 1015 914 1017 q 923 1012 922 1017 q 930 1009 923 1007 q 931 992 931 1003 q 933 980 930 986 q 933 965 935 973 q 936 959 934 961 q 940 952 938 957 q 933 925 937 930 q 931 915 929 921 q 923 899 922 902 q 922 891 923 896 q 912 874 918 880 q 908 859 915 864 q 906 840 908 843 q 902 834 904 836 l 899 815 q 893 803 891 804 q 893 798 895 801 q 888 775 889 785 q 883 763 887 766 q 880 748 883 759 l 873 731 q 866 721 864 722 q 866 717 868 720 q 851 686 859 698 q 850 671 843 675 q 839 659 846 664 q 835 644 832 653 q 830 638 832 641 q 824 633 828 634 q 815 615 819 622 q 805 600 805 604 q 801 594 804 596 q 794 578 793 579 q 793 575 794 577 q 787 567 789 572 q 778 560 785 562 l 770 542 q 751 508 766 519 q 739 488 748 496 q 725 465 731 473 q 716 453 718 455 q 712 448 714 451 q 705 437 706 442 q 701 431 704 432 q 701 400 705 416 q 705 373 698 385 q 704 360 704 362 q 706 356 704 359 q 708 335 704 336 q 706 325 705 330 q 708 317 708 320 l 712 297 q 715 285 717 286 q 713 282 713 284 q 727 246 721 260 q 733 225 731 229 q 736 215 736 222 q 736 206 733 208 q 740 198 739 203 q 741 190 741 195 q 743 183 740 185 q 741 151 743 164 q 748 134 739 139 q 753 121 750 126 q 752 109 756 116 q 758 93 758 100 q 768 68 766 77 q 773 52 770 59 q 775 42 774 48 q 778 31 775 36 q 784 11 784 16 q 786 2 784 6 q 788 -13 786 -8 q 786 -23 789 -18 q 792 -42 790 -39 q 790 -44 793 -44 q 794 -51 792 -48 q 796 -59 796 -54 q 813 -58 805 -59 q 827 -55 820 -56 q 838 -54 836 -54 q 843 -55 841 -55 q 863 -53 858 -52 q 873 -54 868 -54 q 893 -55 885 -54 q 908 -54 900 -56 q 939 -61 929 -61 q 956 -67 949 -62 q 970 -73 969 -71 q 972 -75 971 -74 q 985 -84 982 -80 q 994 -92 988 -89 q 999 -100 998 -99 q 1003 -104 1001 -101 q 1017 -122 1010 -119 q 1017 -137 1015 -128 q 1017 -155 1018 -146 q 1006 -173 1010 -173 q 1003 -192 1009 -184 q 998 -208 998 -200 q 990 -219 991 -215 q 986 -225 988 -222 q 973 -227 976 -226 q 967 -231 971 -229 q 961 -235 964 -234 q 953 -240 957 -236 q 938 -233 941 -231 q 925 -218 925 -219 q 926 -210 925 -214 q 927 -200 927 -207 q 925 -189 926 -192 q 927 -180 923 -185 l 916 -164 q 906 -144 910 -149 q 895 -139 903 -139 q 887 -132 892 -134 q 877 -127 881 -131 q 853 -126 861 -128 q 834 -127 845 -123 q 818 -126 822 -124 q 811 -128 815 -127 q 811 -141 809 -135 q 813 -153 813 -147 q 815 -175 812 -169 q 816 -188 819 -181 q 819 -200 819 -195 q 822 -211 819 -204 q 819 -227 817 -218 q 823 -242 820 -237 q 822 -260 823 -259 q 822 -264 822 -261 q 824 -277 824 -274 q 823 -282 823 -280 q 826 -306 823 -301 q 824 -318 824 -316 q 820 -324 823 -321 q 823 -338 824 -339 q 820 -340 822 -337 q 816 -378 816 -360 q 811 -394 809 -393 q 811 -400 812 -396 q 805 -410 804 -409 q 804 -413 805 -411 q 800 -430 798 -423 q 797 -442 801 -438 q 794 -459 796 -454 q 789 -467 792 -463 q 784 -474 786 -470 q 779 -484 782 -478 q 765 -502 770 -497 q 759 -515 760 -507 q 751 -529 754 -519 q 738 -544 740 -542 q 736 -552 736 -546 q 729 -557 731 -553 q 724 -565 727 -561 q 716 -571 720 -568 q 710 -579 712 -573 q 697 -589 701 -581 q 683 -599 693 -596 q 674 -613 675 -611 q 667 -617 672 -615 q 652 -630 657 -626 q 644 -640 647 -633 l 632 -649 l 617 -655 q 604 -667 607 -667 q 599 -667 602 -667 q 587 -674 590 -672 q 581 -679 584 -676 q 562 -688 564 -685 q 558 -694 561 -691 q 548 -697 552 -693 q 541 -704 543 -701 q 527 -713 529 -710 q 511 -718 514 -718 q 505 -720 508 -718 q 489 -731 495 -729 q 481 -735 484 -732 q 461 -746 465 -741 q 448 -750 457 -751 q 442 -754 446 -752 q 431 -758 439 -755 q 419 -763 427 -760 q 405 -766 412 -765 q 387 -769 389 -767 q 377 -772 379 -773 q 373 -773 375 -771 q 349 -777 354 -778 q 336 -775 344 -775 q 315 -772 324 -775 q 297 -771 306 -769 q 274 -760 286 -765 q 253 -746 261 -755 q 240 -739 240 -741 q 237 -737 240 -736 q 229 -725 231 -727 q 223 -721 226 -724 q 215 -708 223 -713 q 219 -693 218 -702 q 211 -682 219 -685 l 207 -666 q 207 -642 206 -647 q 207 -632 208 -637 q 205 -615 204 -619 q 206 -604 206 -610 q 210 -588 208 -590 q 210 -581 211 -585 q 223 -543 217 -556 q 233 -514 230 -530 q 238 -508 236 -511 q 244 -503 240 -505 q 248 -485 244 -492 q 253 -467 253 -478 q 260 -462 257 -465 q 267 -457 263 -459 q 276 -440 269 -446 q 288 -427 282 -434 q 295 -413 290 -421 q 306 -402 299 -408 q 320 -392 313 -397 q 326 -379 325 -383 q 330 -371 328 -375 q 337 -364 333 -368 q 345 -356 341 -359 q 356 -341 352 -348 q 370 -330 360 -333 q 377 -317 375 -317 q 382 -316 379 -317 q 403 -294 390 -302 q 423 -271 416 -286 q 432 -266 428 -271 q 440 -257 436 -261 q 457 -246 450 -252 q 472 -237 465 -240 q 477 -226 474 -230 q 485 -225 480 -222 q 491 -218 488 -221 q 496 -210 493 -215 q 512 -202 511 -204 q 516 -196 514 -199 q 531 -187 529 -187 q 534 -187 533 -188 q 545 -177 542 -180 q 550 -173 548 -174 q 565 -166 561 -169 q 572 -158 569 -162 q 587 -147 583 -155 q 596 -145 592 -147 q 602 -139 599 -142 q 611 -135 607 -137 q 618 -131 614 -134 q 633 -124 625 -127 q 657 -113 651 -119 q 672 -104 663 -108 q 689 -99 685 -99 q 697 -96 693 -99 q 695 -80 694 -82 q 694 -73 695 -77 q 690 -50 687 -61 q 683 -27 686 -33 q 682 -16 680 -20 q 675 11 676 0 q 667 31 674 23 q 661 52 664 47 q 661 63 661 58 q 656 71 660 69 q 653 92 656 82 q 652 108 651 101 q 649 122 648 118 q 647 130 649 126 q 644 137 645 132 q 641 149 642 142 q 637 174 637 162 q 634 193 637 185 q 630 209 632 200 q 630 225 628 218 q 624 236 626 231 q 623 250 622 240 q 618 264 619 261 q 615 269 617 267 q 610 288 611 280 q 606 303 609 297 q 592 290 594 293 q 590 283 590 287 q 581 274 584 280 q 572 267 579 268 q 554 249 565 256 q 541 229 543 242 q 522 219 529 223 q 512 207 516 215 q 500 196 501 198 q 497 189 499 193 q 485 182 486 185 q 478 179 484 179 q 462 162 466 168 q 451 154 458 157 q 440 141 444 143 q 431 137 435 139 q 419 128 423 131 q 413 122 416 126 q 397 109 398 113 q 381 105 386 109 q 370 93 375 100 q 358 89 362 90 q 349 85 355 88 q 332 70 337 73 q 315 62 317 62 q 310 61 313 62 q 299 56 303 56 q 293 51 295 55 q 278 44 280 51 q 267 44 269 46 q 263 40 265 42 q 241 39 252 37 q 221 37 230 40 q 212 42 218 42 q 203 37 206 42 q 191 40 198 40 q 181 46 184 40 q 170 44 177 43 q 160 42 164 44 q 149 46 157 46 q 138 51 141 46 q 120 58 122 55 q 112 61 118 61 q 95 80 100 73 q 84 92 90 86 q 74 104 82 99 q 67 120 70 118 q 62 124 63 122 l 58 142 q 51 162 52 158 q 52 169 50 166 q 44 179 46 176 q 42 189 43 183 q 40 212 42 204 q 39 223 39 219 q 40 233 39 229 q 42 244 42 238 q 43 258 43 250 q 43 272 43 265 q 44 297 44 284 q 46 322 44 309 q 48 331 47 326 q 51 339 48 336 q 55 373 55 358 q 62 389 59 379 q 62 408 65 400 q 75 434 73 421 q 84 454 77 447 q 90 472 81 466 q 90 483 86 478 q 93 497 94 488 q 98 507 97 500 q 99 522 99 515 q 107 539 105 537 q 105 542 108 542 q 115 567 109 560 q 119 580 122 573 q 123 590 123 585 q 127 598 123 595 q 134 623 134 614 q 141 637 134 633 q 147 653 145 645 q 151 664 151 659 q 153 672 150 670 q 161 687 160 682 q 165 698 162 693 q 170 724 168 718 q 176 735 173 729 q 174 747 172 746 q 179 751 177 748 q 181 765 181 759 q 183 778 181 771 l 185 800 q 187 812 185 807 q 188 823 188 817 q 189 838 189 836 q 188 842 188 841 q 189 863 191 857 q 191 876 188 869 q 187 887 185 885 q 189 891 189 888 l 189 908 q 187 923 187 919 q 184 930 188 927 q 182 942 187 935 q 174 956 177 948 q 167 978 169 972 q 162 987 165 983 q 149 1001 157 995 q 139 1017 142 1007 q 127 1026 131 1020 q 99 1032 112 1029 q 74 1032 85 1034 q 58 1035 61 1034 q 50 1034 55 1036 q 34 1034 39 1034 q 27 1028 29 1033 q -2 1016 4 1022 q -13 1003 -8 1010 q -29 992 -23 999 q -44 980 -36 986 q -55 959 -54 964 q -64 937 -62 945 q -70 923 -66 930 q -74 908 -71 910 q -77 904 -77 907 q -78 891 -75 896 q -78 881 -81 887 q -84 865 -85 866 q -82 861 -82 864 q -83 851 -85 858 q -88 842 -81 845 q -87 826 -86 827 q -88 822 -88 824 q -77 808 -81 811 q -70 798 -73 805 q -45 788 -54 790 q -29 778 -36 785 q -18 777 -23 781 q -10 773 -14 774 q 11 775 0 773 q 32 785 23 777 q 42 773 44 777 q 40 763 39 770 q 29 748 29 752 q 25 741 28 744 q 4 729 10 736 q -8 715 -4 716 q -10 708 -12 714 q -21 706 -17 709 q -29 702 -24 704 q -52 692 -43 695 q -66 682 -61 689 q -77 684 -73 680 q -88 683 -81 687 q -107 691 -96 689 q -122 705 -118 694 q -143 716 -141 713 q -151 718 -145 718 q -165 729 -155 728 q -169 739 -165 736 q -176 748 -173 743 q -179 764 -177 763 q -180 766 -180 765 q -178 786 -181 778 q -174 805 -174 794 q -175 812 -174 809 q -174 820 -176 815 q -170 832 -172 831 q -169 836 -169 834 q -166 850 -168 849 q -165 854 -165 851 q -162 862 -162 858 q -161 872 -162 866 q -156 878 -158 874 q -154 889 -154 883 q -151 897 -153 893 q -149 908 -149 902 q -143 914 -145 911 q -137 919 -142 918 q -132 937 -135 937 q -127 942 -130 938 q -120 956 -119 953 q -119 960 -120 959 q -107 971 -111 968 q -101 980 -103 973 q -93 986 -96 984 q -89 990 -90 987 l -75 1002 q -63 1013 -66 1007 q -54 1022 -59 1018 q -44 1029 -50 1025 q -36 1040 -39 1033 q -25 1046 -27 1045 q -20 1049 -23 1047 q -10 1057 -12 1055 q -6 1060 -9 1059 q 7 1069 6 1067 q 10 1068 8 1071 q 14 1075 10 1074 q 17 1082 17 1077 q 29 1084 24 1081 q 37 1091 33 1087 q 50 1097 47 1096 q 55 1100 52 1098 q 75 1105 70 1105 q 82 1109 80 1105 q 99 1107 90 1105 q 113 1109 107 1109 q 121 1108 116 1109 q 128 1106 126 1106 q 139 1106 134 1106 q 151 1102 145 1106 q 172 1101 162 1105 q 192 1097 181 1097 q 202 1092 202 1093 q 207 1091 202 1091 q 221 1077 218 1082 q 230 1071 223 1072 m 698 545 q 724 588 714 562 q 731 594 729 590 q 736 600 732 598 q 740 617 736 611 q 750 629 744 623 q 753 638 750 636 q 754 649 756 641 q 767 667 762 664 q 773 682 771 680 q 778 686 775 683 q 780 693 778 690 q 782 701 782 695 q 791 716 790 714 q 790 721 792 717 l 797 739 q 803 746 801 741 q 805 755 804 751 q 812 771 811 770 q 813 774 813 771 q 817 788 817 788 q 816 790 816 788 q 824 812 824 809 q 830 841 831 834 q 836 855 834 847 q 842 870 839 862 q 847 903 843 897 q 847 918 842 908 q 844 929 843 923 q 842 941 845 935 q 834 945 839 944 q 827 949 830 946 q 819 947 823 946 q 811 948 815 948 q 798 944 800 942 q 796 944 797 945 q 781 929 781 933 q 777 927 781 926 q 771 918 775 921 q 765 911 767 915 q 755 899 758 900 q 750 884 750 885 q 749 876 748 880 q 748 869 750 872 q 736 853 736 858 q 736 836 737 838 q 733 830 735 834 q 730 805 733 812 q 729 789 727 797 q 720 773 722 775 q 721 767 718 770 q 714 747 716 751 q 712 740 712 743 q 708 727 710 729 q 709 721 706 725 q 704 708 705 709 q 704 706 702 708 l 699 683 q 695 663 698 671 q 695 648 693 656 q 693 625 689 638 q 688 611 687 618 q 690 595 689 603 q 689 569 689 577 q 690 553 689 560 q 689 539 690 546 q 693 530 689 533 q 697 536 694 534 q 698 545 699 538 m 697 -146 q 680 -156 686 -154 q 664 -160 674 -158 q 648 -166 656 -166 l 636 -176 q 628 -179 633 -179 q 621 -183 623 -180 q 612 -187 615 -185 q 603 -191 609 -188 q 592 -200 595 -198 q 585 -203 590 -203 q 574 -210 576 -210 q 569 -211 572 -211 q 560 -219 565 -217 q 550 -222 554 -221 q 537 -232 538 -229 q 534 -234 537 -236 q 525 -244 533 -241 q 515 -250 518 -246 q 500 -264 503 -261 q 491 -268 497 -267 q 481 -278 486 -275 q 469 -286 476 -282 q 461 -295 462 -291 q 457 -297 461 -298 q 450 -306 454 -303 q 443 -314 446 -309 q 425 -333 430 -329 q 416 -340 420 -336 q 408 -349 408 -347 q 405 -351 408 -351 q 394 -366 396 -360 q 385 -373 392 -371 q 382 -381 385 -379 q 378 -389 379 -383 q 366 -400 364 -398 q 366 -405 367 -401 q 359 -413 363 -409 q 354 -424 355 -417 q 342 -438 344 -436 q 339 -443 340 -440 q 335 -453 336 -448 q 332 -462 333 -457 q 311 -500 318 -484 q 306 -514 305 -514 q 307 -516 307 -514 q 302 -524 305 -520 q 298 -531 299 -527 q 298 -548 299 -543 q 297 -554 297 -552 q 297 -572 294 -568 q 294 -579 299 -576 q 296 -602 297 -596 q 295 -614 295 -607 q 301 -637 305 -623 q 310 -651 309 -649 q 314 -655 311 -653 q 320 -666 320 -663 q 321 -671 320 -670 q 330 -678 324 -676 q 339 -687 336 -680 q 357 -694 354 -691 q 363 -698 360 -697 q 381 -701 378 -698 q 419 -703 408 -706 q 442 -702 430 -701 l 462 -697 q 479 -688 474 -689 q 488 -685 484 -687 q 501 -678 500 -679 q 509 -674 505 -675 q 515 -671 512 -674 q 532 -661 522 -664 q 550 -653 542 -657 q 558 -648 554 -651 q 567 -642 562 -645 q 585 -630 581 -636 q 594 -621 588 -623 q 617 -604 613 -609 q 630 -590 629 -595 q 637 -584 632 -585 q 647 -570 645 -571 q 651 -568 649 -569 q 655 -556 656 -557 q 655 -552 655 -554 q 668 -542 660 -543 q 672 -533 670 -537 q 674 -523 674 -530 l 685 -507 q 695 -493 695 -493 q 702 -480 698 -484 q 708 -453 705 -457 q 710 -443 710 -450 q 715 -429 714 -432 q 714 -421 716 -425 q 718 -402 718 -415 q 724 -383 717 -390 q 722 -371 721 -378 q 727 -360 724 -364 q 722 -348 724 -355 q 725 -336 720 -341 q 722 -304 720 -324 q 720 -274 725 -284 q 720 -259 721 -267 q 721 -249 718 -252 q 716 -221 716 -237 q 710 -191 717 -206 q 710 -174 712 -176 q 709 -170 709 -173 q 708 -156 709 -160 q 706 -149 706 -153 l 697 -146 "},"E":{"x_min":27.125,"x_max":1071.046875,"ha":1137,"o":"m 998 874 q 1001 859 999 861 q 1002 854 1002 857 q 1002 834 1001 836 q 1003 828 1003 831 q 998 815 998 819 q 995 809 998 811 q 991 799 994 801 q 984 796 988 797 q 974 784 979 790 q 963 775 969 778 q 954 760 957 762 q 952 751 950 758 q 944 747 949 748 q 940 740 940 746 q 929 735 931 737 q 925 727 926 732 q 911 710 916 724 q 898 707 900 710 q 891 706 896 704 q 870 706 876 701 q 861 720 864 712 q 866 727 862 725 q 869 736 869 729 q 883 748 877 747 q 888 755 888 750 q 897 764 893 763 q 902 767 900 765 q 910 788 908 785 q 911 796 911 792 q 899 823 910 812 q 891 847 892 839 q 883 859 889 855 q 876 872 878 870 q 868 876 873 874 q 852 895 857 891 q 841 903 847 900 q 828 916 830 914 q 822 921 826 918 q 805 926 807 923 q 801 927 804 929 q 781 937 788 934 q 767 945 774 941 q 759 946 762 944 q 751 946 756 948 q 737 952 739 953 q 733 950 736 950 q 718 956 728 956 q 699 956 708 957 q 685 955 693 953 q 671 952 676 957 q 655 952 659 953 q 649 948 652 950 q 629 945 637 946 q 617 940 621 944 q 594 933 599 937 q 580 929 588 930 q 571 922 577 925 q 561 919 565 919 q 548 910 550 914 q 541 907 546 907 l 531 891 q 514 873 518 878 q 509 867 512 870 q 503 859 505 864 q 496 840 501 849 q 489 817 491 831 q 495 803 495 805 q 495 798 496 801 q 499 784 499 793 q 503 770 500 775 q 505 759 501 760 q 510 751 510 758 q 522 735 516 737 q 530 725 529 733 q 538 718 535 722 q 548 712 541 713 q 555 702 550 702 q 560 697 560 702 q 576 690 573 693 q 581 685 579 687 q 590 686 585 686 q 596 690 595 686 q 607 688 600 687 q 618 690 613 689 q 657 691 642 687 q 670 691 668 693 q 675 689 672 690 q 689 687 686 689 q 693 687 693 685 q 710 685 705 686 q 718 687 716 685 q 735 683 727 685 q 747 675 744 682 q 755 676 752 678 q 762 672 758 675 q 765 653 762 655 q 767 647 769 652 q 754 639 758 641 q 748 634 751 637 q 734 623 737 623 q 727 622 731 622 q 720 617 724 619 q 714 613 717 615 q 706 610 708 614 q 699 604 704 606 q 688 607 694 606 q 678 611 682 607 q 657 603 667 604 q 636 596 647 602 q 621 597 622 599 q 618 594 621 595 q 601 596 609 596 q 587 595 594 595 q 572 596 575 596 q 561 598 567 598 q 553 602 556 598 q 543 600 546 600 q 535 602 539 599 q 520 598 529 598 q 504 594 511 599 q 493 592 496 595 q 488 587 491 590 q 459 580 470 587 q 448 571 448 573 q 444 569 447 569 q 426 562 432 565 q 413 558 420 560 q 401 552 406 556 q 393 542 396 549 q 383 538 387 539 q 377 533 379 537 q 368 530 370 533 q 362 526 367 527 q 352 514 359 519 q 337 508 345 508 q 326 501 330 505 q 314 496 322 497 q 303 485 309 482 q 286 472 290 476 q 283 463 283 467 q 269 454 275 462 q 260 450 263 454 q 253 443 257 446 q 248 432 249 435 q 242 428 246 428 q 239 420 242 423 q 236 412 236 417 q 215 392 218 400 q 204 382 212 385 q 197 362 200 367 q 192 349 193 358 q 183 337 187 341 q 176 329 180 333 q 174 318 173 320 q 173 313 174 316 q 168 305 172 309 q 166 298 165 302 q 153 268 161 276 q 147 244 145 260 q 137 224 137 230 q 135 211 138 218 q 131 195 131 200 q 130 184 131 189 q 126 163 127 166 q 124 155 124 160 q 124 147 126 153 q 123 139 123 142 q 122 122 122 127 q 123 113 123 118 q 124 101 123 104 q 126 94 126 97 q 126 78 124 84 q 124 69 127 73 q 130 43 131 51 q 132 24 130 35 q 136 6 134 10 q 139 -1 138 2 q 142 -12 143 -12 q 141 -16 141 -13 q 149 -31 143 -25 q 153 -45 151 -44 q 155 -48 154 -46 q 170 -82 153 -77 q 170 -96 168 -93 q 174 -101 173 -99 q 181 -115 179 -112 q 184 -123 183 -119 q 193 -141 189 -138 q 198 -150 196 -143 q 206 -160 204 -158 q 210 -164 208 -161 q 221 -177 217 -174 q 227 -184 225 -180 q 233 -190 230 -187 q 238 -196 236 -193 q 252 -207 250 -206 q 265 -222 255 -222 q 276 -235 275 -233 q 279 -240 276 -237 q 291 -248 288 -246 q 298 -250 294 -250 q 305 -258 303 -256 q 310 -264 306 -260 q 318 -268 313 -267 q 326 -272 324 -269 q 348 -285 343 -284 q 356 -290 354 -286 q 379 -296 373 -297 q 390 -297 385 -295 q 400 -300 396 -297 q 409 -301 404 -303 q 420 -305 412 -306 q 431 -309 428 -305 q 448 -310 442 -307 q 465 -317 455 -313 q 488 -314 477 -316 q 497 -316 493 -314 q 505 -317 501 -317 q 520 -314 516 -314 q 542 -314 534 -316 q 560 -311 550 -313 q 573 -312 571 -313 q 577 -310 575 -311 q 592 -309 588 -310 q 608 -305 606 -305 q 613 -306 610 -306 q 623 -304 618 -306 q 633 -301 628 -302 q 649 -300 641 -299 q 667 -298 657 -301 q 678 -296 676 -295 q 683 -295 680 -297 q 702 -288 697 -291 q 710 -287 706 -287 q 718 -286 714 -287 q 735 -279 727 -284 q 744 -276 739 -276 q 751 -274 748 -275 q 769 -267 766 -267 q 777 -265 771 -268 q 796 -254 789 -259 q 809 -244 803 -249 q 824 -234 816 -238 q 838 -225 831 -230 q 845 -219 842 -222 q 853 -212 849 -215 q 859 -207 855 -210 q 864 -198 864 -204 q 889 -173 878 -181 q 893 -162 891 -168 q 902 -155 895 -157 q 906 -140 904 -149 q 914 -127 907 -131 q 926 -109 925 -113 q 933 -104 927 -105 q 935 -89 933 -94 q 941 -77 938 -84 q 947 -69 945 -71 q 948 -61 949 -66 q 960 -42 956 -48 q 961 -27 960 -29 q 963 -23 961 -24 q 965 0 964 -6 q 969 9 965 6 q 971 19 967 14 q 978 27 975 24 q 977 46 976 40 q 980 54 978 51 q 979 68 978 66 q 982 73 980 70 q 983 90 980 89 q 984 94 986 90 q 974 115 978 108 q 973 130 971 123 q 969 151 972 147 q 968 158 965 154 q 963 173 964 170 q 964 176 961 176 q 956 211 949 185 q 944 220 949 215 q 935 233 938 225 q 925 248 927 240 q 918 255 922 250 q 911 261 915 259 q 906 269 908 268 q 900 272 903 269 q 897 282 900 280 q 892 286 893 283 q 878 293 883 290 q 868 299 873 297 q 859 310 859 306 q 851 313 858 314 q 837 324 841 321 q 831 329 834 326 q 811 336 820 333 l 792 341 q 782 346 785 344 q 777 348 779 348 q 760 349 763 352 q 754 354 756 352 q 746 356 751 355 q 729 356 732 356 q 724 359 727 356 q 715 357 718 356 q 705 355 712 358 q 691 353 691 354 q 689 352 690 352 q 677 353 685 352 q 663 351 670 354 q 644 347 649 347 q 634 341 638 347 q 624 340 628 343 q 617 340 621 337 q 604 334 610 337 q 591 332 598 330 q 578 328 580 329 q 571 325 576 328 q 563 321 567 322 q 556 317 560 320 q 531 309 539 309 q 523 301 526 306 q 514 294 520 295 q 509 287 511 291 q 500 280 507 283 q 490 266 492 268 q 485 264 488 264 q 484 254 488 257 q 484 248 481 250 q 473 229 476 237 q 467 214 470 222 q 463 198 463 206 q 465 184 462 191 q 461 160 458 168 q 461 146 463 153 q 465 136 462 141 q 465 126 467 131 q 467 110 466 115 q 469 101 469 105 q 486 68 478 74 q 500 52 495 62 q 514 39 511 47 q 529 33 526 33 q 534 31 531 33 q 556 22 548 21 q 571 21 564 23 q 582 18 577 20 q 591 16 587 17 q 609 19 607 20 q 614 18 611 18 q 621 20 617 18 q 629 23 625 21 q 649 26 644 24 q 657 25 653 28 q 668 31 661 28 q 676 27 674 33 q 661 17 667 17 q 653 9 653 9 q 651 6 652 9 l 630 2 q 614 -7 617 -6 q 609 -10 611 -8 q 594 -16 596 -14 q 588 -21 591 -18 q 579 -20 581 -18 q 569 -23 576 -21 q 543 -25 553 -25 q 527 -32 531 -31 q 516 -31 523 -33 q 496 -31 501 -33 q 484 -32 486 -33 q 477 -32 481 -31 q 459 -21 463 -25 q 438 -13 443 -17 q 421 -6 425 -9 q 415 4 419 0 q 406 14 411 8 q 396 23 397 25 q 392 23 394 21 q 380 41 382 37 q 378 48 378 44 q 368 67 378 63 q 368 84 368 75 q 362 99 367 93 q 363 108 364 104 q 364 116 362 112 q 363 130 362 128 q 366 135 364 132 q 366 147 363 142 q 367 160 368 151 q 374 177 374 166 q 381 189 379 183 q 386 204 383 196 q 390 212 387 210 q 394 219 393 214 q 400 225 397 222 q 404 236 404 229 q 413 247 409 245 q 417 256 417 249 q 433 274 427 269 q 440 284 439 278 q 457 299 451 288 q 473 314 462 309 q 477 321 476 317 q 484 325 478 325 q 487 332 484 330 q 493 337 491 333 q 518 349 511 345 q 533 360 526 354 q 543 364 542 362 q 546 370 543 367 q 558 373 557 371 q 560 378 560 374 q 573 382 571 381 q 579 385 576 383 q 600 393 590 387 q 614 396 613 397 q 618 397 615 396 q 624 400 621 398 q 632 404 628 401 q 649 408 647 408 q 657 412 652 409 l 675 416 q 687 419 682 417 q 697 419 693 421 q 703 423 699 421 q 709 428 706 425 q 722 427 714 425 q 732 431 729 428 q 749 432 747 432 q 752 431 751 431 q 769 435 769 438 q 771 432 769 432 q 803 432 788 439 q 820 432 812 431 q 834 428 828 434 q 856 423 847 423 q 868 416 865 423 q 881 413 876 415 q 889 409 885 411 q 904 402 902 404 q 906 398 907 401 q 923 385 918 394 q 936 375 935 377 q 940 374 937 374 q 980 337 967 354 q 994 328 992 328 q 1002 316 998 317 q 1003 309 1006 316 q 1022 295 1013 297 q 1032 278 1024 282 q 1036 267 1034 272 q 1041 257 1037 261 q 1044 246 1041 250 q 1049 238 1047 242 q 1051 228 1051 233 q 1052 219 1051 223 q 1058 202 1059 204 q 1058 198 1058 200 q 1062 185 1062 188 q 1063 177 1062 181 q 1064 168 1063 172 q 1064 157 1066 164 q 1069 139 1067 145 q 1068 130 1071 132 q 1070 117 1070 119 q 1068 112 1071 115 q 1069 91 1068 99 q 1064 81 1070 84 q 1062 69 1066 73 q 1059 56 1059 65 q 1054 42 1053 46 q 1051 37 1055 37 q 1052 24 1052 28 q 1051 17 1052 20 q 1048 2 1047 2 q 1040 -18 1044 -14 q 1037 -32 1036 -23 q 1027 -47 1030 -46 q 1026 -52 1024 -48 q 1010 -76 1015 -71 q 1002 -89 1005 -81 q 992 -103 995 -101 q 987 -108 988 -105 l 978 -127 q 971 -137 973 -131 q 964 -147 968 -142 q 963 -162 967 -155 q 957 -174 960 -168 q 946 -183 950 -177 q 934 -191 941 -188 q 918 -204 925 -199 q 908 -217 912 -210 q 895 -226 902 -222 q 885 -237 889 -230 q 862 -256 864 -244 q 845 -266 849 -264 q 836 -271 842 -268 q 822 -280 823 -278 q 817 -280 822 -282 q 797 -295 803 -287 q 786 -299 790 -295 q 779 -306 782 -302 q 765 -311 773 -309 q 752 -321 758 -314 q 731 -328 736 -322 q 710 -335 717 -329 q 690 -340 702 -340 q 668 -344 676 -343 l 652 -349 q 626 -357 634 -358 q 613 -363 617 -356 q 590 -364 595 -362 q 579 -364 585 -366 q 552 -370 558 -368 q 539 -368 545 -373 q 518 -375 524 -377 q 508 -377 512 -373 q 495 -376 497 -374 q 489 -379 492 -378 q 475 -380 480 -379 q 463 -378 470 -381 q 446 -383 448 -385 q 442 -379 444 -381 q 422 -383 425 -381 q 415 -381 419 -385 q 396 -382 400 -383 q 389 -379 393 -381 q 377 -381 383 -379 q 366 -379 371 -382 q 348 -374 356 -374 q 328 -369 332 -368 q 320 -368 324 -370 q 297 -363 303 -362 q 283 -363 291 -364 q 271 -354 274 -355 q 269 -351 268 -354 q 250 -343 256 -345 q 242 -337 245 -341 q 230 -332 233 -333 q 226 -329 227 -330 q 218 -324 221 -326 q 210 -317 215 -321 q 196 -305 200 -309 q 185 -295 187 -295 q 183 -294 184 -295 q 170 -278 173 -284 q 161 -269 168 -272 q 150 -252 151 -255 q 146 -250 149 -250 q 134 -237 137 -237 q 130 -234 132 -237 q 126 -221 127 -225 q 122 -214 124 -218 q 115 -210 118 -212 q 107 -204 112 -207 q 95 -181 99 -187 q 90 -168 92 -176 q 83 -159 86 -162 q 81 -147 80 -155 q 72 -133 71 -135 q 73 -130 73 -131 q 66 -109 66 -116 q 59 -100 66 -103 q 54 -75 56 -84 q 47 -58 48 -61 q 43 -39 46 -44 l 39 -23 q 37 -12 36 -14 q 37 -6 37 -9 q 35 7 37 0 q 32 23 33 14 q 31 39 32 37 q 31 42 31 40 q 27 71 33 61 q 29 78 29 74 q 31 88 29 81 q 35 107 33 104 q 36 115 36 111 q 35 122 36 118 q 35 131 35 127 q 39 149 36 145 q 39 160 42 154 q 44 168 43 162 q 50 176 46 173 q 49 191 50 187 q 51 200 48 196 q 54 213 55 210 q 55 219 54 217 q 63 235 61 234 q 66 238 65 236 q 71 254 67 252 q 71 259 74 256 q 77 268 75 263 q 84 276 78 274 q 86 284 82 282 q 89 291 90 286 q 96 303 94 301 q 97 309 99 305 q 112 332 104 326 q 121 349 115 343 q 134 363 127 356 q 139 375 134 371 q 143 387 143 379 q 157 395 155 394 q 160 398 158 396 q 171 413 169 411 q 176 417 173 415 q 212 461 199 436 q 225 471 223 467 q 230 480 227 474 q 244 489 241 486 q 248 497 248 491 q 258 504 259 503 q 259 508 257 505 q 279 518 272 511 q 294 531 286 524 q 302 537 301 535 q 306 542 303 539 q 316 548 314 545 q 321 553 317 552 q 340 567 336 562 q 345 572 343 569 q 354 575 347 575 q 360 581 356 579 q 366 587 363 583 q 381 591 377 587 q 387 600 385 595 q 412 614 406 603 q 436 628 424 626 q 454 640 448 630 q 431 663 450 656 q 421 676 425 671 q 415 686 417 680 q 405 707 408 702 q 404 716 402 712 q 395 750 397 739 q 392 773 393 760 q 394 783 394 778 q 397 793 394 788 q 398 803 396 801 q 400 811 401 805 q 409 830 409 815 q 419 839 416 836 q 423 847 421 842 q 439 866 438 861 q 446 870 440 870 q 458 881 455 878 q 470 897 466 893 q 477 903 473 900 q 489 916 488 914 q 500 927 496 923 q 515 940 514 938 q 533 953 527 953 q 545 964 541 961 q 559 972 558 971 q 562 976 560 973 q 577 983 571 983 q 600 994 594 992 q 611 1002 606 996 q 618 1002 615 1001 q 628 1006 621 1003 q 640 1012 638 1014 q 642 1015 642 1010 q 654 1016 649 1013 q 664 1021 659 1020 q 676 1022 672 1020 q 682 1021 679 1024 q 707 1029 702 1025 q 720 1030 712 1033 q 730 1034 725 1033 q 741 1034 735 1036 q 760 1038 751 1041 q 778 1033 770 1034 l 793 1033 q 815 1028 805 1032 q 836 1024 826 1025 q 844 1018 841 1021 q 854 1017 847 1015 q 872 1005 855 1005 q 897 990 891 995 q 912 983 903 986 q 921 975 916 979 q 935 969 926 971 q 946 952 944 953 q 949 948 949 950 q 963 940 961 941 q 964 935 964 938 q 974 921 971 929 q 984 907 978 912 q 988 893 984 897 q 995 883 992 888 l 998 874 "},"y":{"x_min":-82.75,"x_max":527.65625,"ha":604,"o":"m 402 -415 q 394 -418 398 -416 q 385 -423 389 -420 q 371 -431 374 -431 q 360 -442 362 -440 q 351 -449 355 -448 q 344 -454 347 -450 q 320 -465 332 -461 q 301 -476 309 -469 q 290 -479 291 -477 q 287 -484 290 -481 q 274 -489 280 -485 q 261 -496 268 -492 q 247 -502 250 -503 q 240 -503 244 -501 q 233 -507 237 -505 q 227 -514 230 -510 q 203 -518 210 -515 q 192 -523 196 -520 q 181 -522 185 -520 q 172 -526 177 -524 q 159 -525 162 -524 q 151 -526 155 -526 q 141 -523 145 -522 q 137 -522 138 -524 q 112 -526 113 -523 q 78 -523 99 -519 q 55 -516 67 -516 q 33 -505 43 -515 q 25 -505 27 -505 q 18 -505 24 -504 q 10 -501 16 -503 q 2 -495 5 -500 q -9 -483 -8 -481 q -13 -484 -10 -485 q -30 -469 -25 -472 q -36 -461 -35 -466 q -46 -457 -43 -461 q -52 -453 -48 -454 q -59 -442 -54 -444 q -67 -438 -65 -440 q -69 -424 -69 -431 q -74 -413 -70 -417 q -77 -400 -73 -406 q -82 -386 -81 -393 q -80 -376 -80 -383 q -77 -366 -80 -368 q -78 -356 -77 -362 q -75 -348 -80 -349 q -75 -330 -75 -336 q -71 -324 -74 -324 q -69 -313 -70 -317 q -65 -305 -67 -309 q -66 -291 -70 -294 q -56 -282 -62 -288 q -46 -270 -48 -271 q -42 -269 -44 -269 q -33 -255 -40 -255 q -30 -242 -35 -246 q -23 -231 -25 -238 q -12 -219 -17 -222 q -4 -210 -6 -217 q 2 -204 1 -208 q 9 -198 2 -199 q 16 -185 17 -185 q 17 -181 16 -184 q 38 -174 32 -177 q 51 -172 44 -172 q 53 -187 50 -187 q 56 -189 56 -187 q 51 -208 52 -204 q 48 -215 50 -211 q 38 -218 40 -215 q 31 -221 36 -221 q 29 -231 33 -229 q 29 -240 25 -233 q 21 -254 21 -252 q 20 -257 20 -256 q 10 -270 12 -268 q 6 -274 9 -272 q 8 -286 10 -286 q 6 -290 6 -287 q 6 -303 6 -301 q 4 -310 5 -305 q 2 -325 1 -321 q 2 -333 2 -329 q 6 -354 5 -351 q 8 -362 6 -356 q 20 -381 16 -375 q 24 -396 24 -386 q 40 -408 37 -406 q 44 -413 42 -411 q 53 -417 51 -413 q 62 -420 55 -421 q 76 -432 73 -432 q 82 -438 80 -432 q 94 -438 89 -435 q 103 -443 99 -440 q 120 -448 116 -447 q 126 -450 124 -450 q 155 -454 145 -453 q 177 -457 166 -455 q 206 -459 198 -459 q 222 -458 214 -458 q 230 -459 226 -458 q 237 -458 234 -461 q 246 -456 240 -455 q 256 -453 253 -457 q 269 -451 264 -455 q 282 -446 275 -447 l 294 -436 q 318 -419 305 -425 q 336 -398 330 -413 q 348 -391 345 -393 q 348 -383 351 -389 q 356 -376 355 -382 q 363 -368 356 -370 q 373 -348 371 -358 q 383 -335 375 -339 q 387 -324 383 -328 q 393 -316 390 -320 q 394 -296 390 -305 q 394 -276 398 -287 q 402 -269 401 -275 q 406 -261 402 -264 q 408 -244 405 -250 q 409 -226 411 -237 q 413 -216 413 -222 q 415 -199 413 -210 q 417 -183 417 -184 q 416 -177 416 -183 q 419 -168 417 -172 q 419 -158 421 -164 q 423 -143 424 -143 q 423 -139 423 -142 q 422 -128 423 -132 q 424 -119 421 -123 q 422 -104 423 -108 q 421 -97 421 -100 q 425 -86 425 -94 q 427 -75 424 -78 q 424 -57 423 -63 q 423 -46 425 -51 q 425 -37 427 -43 q 427 -25 423 -31 q 424 -8 423 -10 q 424 1 425 -5 q 428 69 421 43 q 425 89 427 88 q 423 93 423 90 q 424 102 423 99 q 424 109 425 105 q 422 122 424 116 q 423 134 420 127 q 419 145 419 142 q 420 151 420 149 q 420 166 420 158 q 423 179 420 174 q 419 200 423 192 q 421 214 416 207 q 418 256 419 240 q 420 287 417 272 q 417 300 416 298 q 419 305 419 302 q 415 323 415 318 q 413 332 416 328 q 406 329 408 333 q 401 321 404 325 q 393 309 396 311 q 387 303 390 306 q 382 297 385 301 q 374 293 379 294 q 366 282 367 283 q 366 279 366 280 q 358 267 359 269 q 355 261 358 264 l 344 238 q 334 229 336 230 q 333 223 332 227 q 320 204 321 210 q 313 196 318 199 q 301 179 301 184 q 292 174 295 177 q 284 169 290 172 q 272 158 274 160 q 268 157 271 157 q 252 147 253 147 q 248 143 250 146 q 238 136 238 135 q 234 135 237 137 q 228 130 231 132 q 222 124 225 127 q 209 118 211 120 q 204 113 207 116 q 187 103 191 107 q 173 99 183 99 q 162 92 166 96 q 150 89 158 89 q 130 86 135 86 q 122 92 124 86 q 99 100 104 97 q 84 120 85 115 q 82 132 82 126 q 82 143 81 138 q 81 153 84 149 q 80 160 78 155 q 80 168 82 164 q 78 179 80 176 q 77 187 77 183 q 76 200 75 193 q 75 217 77 206 q 75 227 75 223 q 73 234 75 231 q 75 248 74 246 q 74 249 75 249 q 73 265 73 260 q 74 282 73 276 q 70 291 75 288 q 72 308 74 302 q 70 322 70 314 q 70 337 71 329 q 69 351 69 344 q 61 373 66 367 q 59 385 56 379 q 46 409 51 396 q 21 425 40 423 q -2 438 9 438 l -25 438 q -34 437 -32 438 q -42 438 -36 436 q -54 445 -55 442 q -56 448 -54 448 q -45 462 -46 459 q -40 463 -44 465 q -14 480 -21 477 q 2 484 -8 484 q 11 491 8 489 q 20 493 14 493 q 37 498 27 497 q 55 505 48 499 q 65 501 59 503 q 73 497 70 500 q 89 493 88 496 q 93 491 90 491 q 107 484 104 488 q 124 478 120 480 q 130 473 127 476 q 142 457 142 459 q 146 453 142 454 q 147 444 143 448 q 154 432 151 439 q 155 417 155 424 q 165 408 155 409 q 165 385 165 397 q 166 370 170 379 q 169 356 162 362 q 169 325 168 340 q 168 303 170 307 q 169 294 166 299 l 169 278 q 170 261 169 269 q 168 248 172 252 q 170 226 170 237 q 172 214 170 217 q 172 208 174 211 q 177 182 176 191 q 185 170 179 173 q 225 181 218 158 l 237 196 q 245 211 240 206 q 252 227 250 217 q 264 240 264 237 q 278 250 274 249 q 288 267 287 263 q 294 274 288 272 q 301 288 298 287 q 305 294 305 288 q 321 310 313 302 q 326 320 324 317 q 328 326 329 322 q 338 341 336 340 q 343 345 340 343 q 347 356 344 352 q 355 364 351 360 q 359 379 354 374 q 362 390 364 383 q 374 402 370 397 q 377 413 378 408 q 387 430 386 417 q 398 445 394 436 q 406 461 401 454 q 409 478 411 477 q 408 482 408 480 q 418 501 415 499 q 423 508 421 503 q 442 519 439 516 q 448 524 446 522 q 463 527 458 524 q 470 533 467 530 q 488 541 486 533 q 508 541 504 543 q 519 537 512 538 q 518 500 519 515 q 516 467 516 485 q 513 454 514 457 q 516 448 512 451 q 512 420 514 432 q 515 405 518 413 q 514 386 512 397 q 511 374 510 375 q 515 370 512 373 q 516 359 516 360 q 515 355 515 358 q 516 340 516 348 q 514 326 516 332 q 517 307 518 317 q 518 288 516 298 q 520 267 520 274 q 519 252 519 260 q 520 238 522 240 q 519 233 519 236 q 520 212 520 221 q 523 199 520 204 q 520 187 519 189 q 522 183 522 184 q 520 168 522 177 q 519 153 519 158 q 521 141 520 147 q 524 130 522 134 q 522 109 520 113 q 524 99 524 104 q 524 80 524 84 q 527 73 523 75 q 523 54 526 59 q 523 46 520 50 q 520 32 518 32 q 522 31 522 32 q 522 15 523 17 q 523 9 522 13 q 526 -20 520 -13 q 524 -35 523 -33 q 526 -40 526 -37 l 523 -56 q 522 -68 522 -67 q 523 -71 523 -69 q 522 -87 523 -82 q 519 -94 522 -92 l 518 -109 l 518 -132 q 518 -145 519 -141 q 516 -151 518 -149 q 513 -158 514 -154 q 515 -169 512 -161 q 511 -184 511 -173 q 510 -199 511 -195 l 507 -217 q 504 -231 505 -227 q 501 -238 503 -234 q 497 -259 500 -253 q 496 -275 495 -265 q 487 -286 488 -284 q 484 -290 486 -288 q 476 -316 478 -306 q 469 -326 469 -325 q 466 -328 469 -328 q 463 -341 465 -339 q 458 -343 461 -343 q 455 -353 458 -349 q 453 -363 453 -356 q 445 -368 447 -363 q 440 -377 443 -373 q 430 -387 430 -386 q 428 -390 430 -389 q 412 -403 415 -402 q 409 -406 409 -404 l 402 -415 "},"\"":{"x_min":62.390625,"x_max":374.375,"ha":438,"o":"m 294 721 q 297 731 298 728 q 295 736 295 733 q 291 754 297 752 q 295 761 295 756 q 295 770 294 766 q 297 783 298 782 q 294 786 295 784 q 295 795 294 792 q 291 803 297 798 q 282 812 280 811 q 280 815 283 813 q 281 830 284 828 q 276 834 278 831 q 281 855 282 849 q 284 865 280 861 q 290 874 287 873 q 297 874 293 876 q 314 874 311 876 q 322 874 320 877 q 330 873 324 872 q 337 866 335 868 q 341 862 339 864 q 348 847 348 847 q 355 835 354 838 q 354 832 356 832 q 363 819 360 820 q 370 799 366 804 q 374 788 374 794 q 363 779 366 785 q 363 769 360 774 q 358 752 360 759 q 358 743 355 746 q 351 731 348 732 q 354 728 354 731 q 351 711 347 712 q 355 708 355 710 q 356 679 355 686 q 360 674 358 676 q 360 664 362 671 q 356 651 355 652 q 356 647 356 649 q 354 626 355 630 q 354 619 352 622 q 357 611 354 617 q 355 600 360 604 q 358 587 360 594 q 358 573 356 580 q 360 552 358 557 q 362 542 362 546 q 361 524 362 534 q 360 505 360 515 q 360 495 362 499 q 363 489 359 492 q 364 465 364 473 q 364 453 362 455 q 363 447 366 450 q 367 420 364 428 q 367 410 368 413 q 370 404 366 406 q 353 385 360 389 q 335 379 345 381 q 327 383 332 382 q 317 386 322 383 q 309 400 314 397 q 295 416 302 417 q 291 429 293 427 q 287 435 290 432 q 280 448 282 447 q 278 450 279 448 q 273 463 274 462 q 271 463 272 463 q 281 479 282 476 q 282 485 280 482 q 285 501 283 493 q 288 515 287 508 q 288 523 288 519 q 290 531 287 527 q 292 545 291 542 q 290 550 293 548 q 292 564 291 560 q 294 575 293 568 q 296 585 294 583 q 295 590 298 587 q 290 613 294 604 q 290 632 286 621 q 294 644 295 640 q 295 655 293 649 q 292 668 293 667 q 291 672 291 670 q 294 688 295 687 q 291 691 293 689 l 294 721 m 84 721 q 88 731 89 728 q 88 736 88 733 q 87 752 88 751 q 82 754 86 752 q 86 761 86 756 q 88 770 85 766 q 84 786 89 782 q 86 795 84 792 q 82 803 89 798 q 72 812 71 811 q 70 815 73 813 q 71 830 74 828 q 67 834 67 831 q 72 855 73 849 q 75 865 71 861 q 80 874 78 873 q 89 874 82 876 q 107 874 104 876 q 112 874 109 877 q 122 873 115 872 q 126 866 124 868 q 132 862 128 864 q 139 847 139 847 q 147 835 146 838 q 143 832 147 832 q 155 819 150 822 q 162 799 158 804 q 166 788 165 794 q 155 779 158 785 q 155 769 153 774 q 150 752 153 759 q 150 743 147 746 q 143 731 139 732 q 143 728 146 731 q 142 711 137 712 q 147 708 147 710 q 149 679 147 686 q 151 674 150 676 q 151 664 153 671 q 148 651 147 652 q 149 647 149 649 q 145 626 147 630 q 143 619 143 622 q 149 611 146 617 q 147 600 153 604 q 151 587 153 594 q 150 573 149 580 q 151 552 149 557 q 154 542 154 546 q 153 524 154 534 q 151 505 153 515 q 153 495 154 499 q 155 489 151 492 q 157 465 157 473 q 155 453 153 455 q 155 447 158 450 q 158 420 155 428 q 160 410 161 413 q 162 404 158 406 q 144 385 151 389 q 124 379 137 381 q 118 383 122 382 q 109 386 113 383 q 101 400 107 397 q 88 416 94 417 q 82 429 84 427 q 77 435 81 432 q 71 448 73 447 q 69 450 70 448 q 63 463 63 462 q 62 463 63 463 q 72 479 73 476 q 73 485 71 482 q 75 501 73 493 q 80 515 78 508 q 79 523 80 519 q 81 531 78 527 q 83 545 82 542 q 81 550 84 548 q 82 564 81 560 q 84 575 84 568 q 88 585 85 583 q 88 590 90 587 q 80 613 84 604 q 81 632 77 621 q 86 644 88 640 q 88 655 84 649 q 83 668 84 667 q 82 672 82 670 q 82 691 84 689 l 84 721 "},"g":{"x_min":-229.53125,"x_max":436.78125,"ha":529,"o":"m 359 587 q 385 580 378 577 q 404 583 393 583 q 414 568 412 569 q 417 564 416 567 q 410 539 411 545 q 416 527 409 533 q 411 507 408 515 q 428 507 427 508 q 432 504 430 507 q 436 480 436 488 q 431 467 436 473 q 431 458 435 462 q 431 448 427 454 q 421 432 423 432 q 419 431 420 432 q 415 406 420 413 q 406 392 411 398 q 407 376 405 385 q 404 362 409 367 q 406 338 409 345 q 411 325 404 330 q 410 309 408 317 q 413 295 412 302 q 414 279 413 282 q 415 269 415 276 q 415 262 413 267 q 416 255 416 257 q 416 229 413 237 q 415 210 413 215 q 413 200 416 204 q 415 181 413 184 q 416 172 416 177 q 416 160 415 161 q 417 155 417 158 q 415 147 416 151 q 412 139 413 142 q 415 115 415 122 q 416 103 415 109 q 416 91 416 97 q 417 77 416 85 q 418 65 417 69 q 416 56 419 61 q 414 41 417 42 q 411 36 411 40 q 413 18 412 28 q 413 1 413 9 q 411 -23 409 -18 q 409 -29 412 -27 q 411 -42 412 -35 q 408 -56 411 -50 q 409 -78 408 -70 q 404 -94 411 -86 q 404 -120 405 -115 q 402 -134 404 -126 q 401 -145 402 -143 q 400 -151 400 -147 q 394 -172 401 -168 q 394 -187 393 -187 q 394 -189 396 -188 q 392 -198 394 -193 q 393 -206 390 -202 q 387 -218 390 -215 q 387 -225 385 -221 q 383 -236 383 -234 q 385 -241 383 -238 q 379 -260 379 -255 q 377 -271 378 -265 q 370 -284 371 -284 q 368 -286 368 -284 q 364 -309 366 -305 q 363 -320 362 -313 q 358 -330 359 -324 q 355 -341 358 -336 q 350 -353 352 -348 q 348 -364 348 -358 q 342 -372 345 -367 q 341 -383 339 -377 q 334 -390 337 -386 q 332 -401 330 -394 q 320 -419 322 -415 q 314 -425 317 -423 l 309 -447 q 297 -454 298 -453 q 294 -455 297 -455 q 283 -475 290 -466 q 269 -491 276 -484 q 251 -512 257 -508 q 242 -523 245 -516 q 233 -529 237 -526 q 226 -535 230 -533 q 212 -550 214 -546 q 204 -554 210 -553 q 187 -568 189 -562 q 177 -572 179 -567 q 169 -577 176 -577 q 150 -592 155 -590 q 141 -600 145 -594 q 113 -615 123 -610 q 93 -626 104 -621 q 82 -634 86 -633 q 75 -640 78 -636 q 60 -644 66 -644 q 48 -648 54 -645 q 33 -655 33 -655 q 17 -657 17 -656 q 14 -660 17 -659 q 0 -662 5 -659 q -13 -663 -4 -666 q -36 -660 -27 -660 q -51 -658 -43 -657 q -66 -657 -59 -659 q -75 -653 -70 -656 q -85 -651 -80 -651 q -96 -647 -94 -645 q -100 -647 -97 -648 q -126 -637 -119 -640 q -141 -632 -132 -634 q -153 -621 -153 -623 q -157 -618 -154 -619 q -170 -609 -166 -610 q -177 -606 -174 -609 q -189 -595 -185 -599 q -199 -588 -192 -591 q -210 -571 -207 -572 q -215 -568 -212 -571 q -217 -551 -215 -553 q -222 -546 -219 -549 q -225 -529 -221 -537 q -229 -512 -230 -520 q -223 -503 -227 -507 q -217 -491 -218 -499 q -215 -480 -214 -485 q -215 -469 -217 -476 q -204 -463 -208 -462 q -200 -459 -200 -463 q -178 -457 -180 -459 q -169 -455 -176 -455 q -165 -463 -166 -458 q -161 -470 -164 -467 q -150 -499 -158 -492 q -143 -511 -147 -505 q -137 -522 -139 -516 q -120 -537 -124 -531 q -109 -548 -115 -542 q -103 -551 -105 -548 q -96 -556 -100 -554 l -82 -562 q -58 -579 -63 -571 q -39 -585 -48 -579 q -28 -585 -35 -585 q -18 -588 -21 -585 q -2 -593 -2 -592 q 0 -595 -2 -594 q 8 -596 4 -596 q 16 -596 12 -596 q 35 -594 32 -595 q 44 -592 39 -592 q 53 -593 51 -594 q 59 -595 55 -592 q 75 -592 71 -592 q 81 -591 78 -591 q 100 -579 99 -583 q 105 -573 101 -576 q 124 -569 116 -576 q 143 -557 132 -561 q 168 -529 157 -543 q 183 -518 179 -522 q 185 -512 187 -515 q 193 -503 191 -510 q 203 -493 196 -497 q 206 -484 203 -486 q 208 -476 208 -482 q 219 -465 215 -466 q 221 -461 223 -463 q 228 -453 226 -458 q 234 -444 230 -447 q 238 -432 234 -438 q 242 -420 241 -427 q 248 -404 248 -408 q 259 -386 255 -390 q 265 -377 263 -382 q 268 -356 268 -356 q 278 -331 278 -340 q 282 -314 279 -322 q 286 -298 283 -306 q 290 -279 288 -284 q 290 -265 293 -274 q 295 -251 294 -260 q 299 -238 295 -242 q 305 -214 297 -225 q 304 -202 302 -208 q 307 -189 306 -196 q 308 -178 309 -184 q 309 -166 307 -172 q 314 -155 310 -162 q 310 -142 317 -149 q 316 -116 317 -131 q 321 -90 314 -101 q 318 -80 316 -85 q 321 -71 321 -75 q 321 -50 320 -56 q 322 -37 322 -44 l 322 1 q 322 21 322 16 q 325 33 322 27 q 325 53 324 48 q 325 66 326 58 q 326 77 325 75 q 326 82 328 78 q 324 109 325 103 q 325 123 322 116 q 322 140 322 137 q 324 146 322 143 q 321 162 320 160 q 321 166 322 164 q 320 185 317 181 q 321 196 322 189 q 321 204 322 199 q 322 214 320 210 q 317 239 320 233 q 313 250 314 245 q 297 251 299 253 q 294 246 295 249 q 278 237 282 241 q 268 236 274 233 q 253 221 257 231 q 232 214 242 215 q 219 206 222 214 q 210 202 215 204 q 200 198 206 200 q 189 191 192 192 q 184 188 187 191 q 177 187 180 187 q 169 185 173 187 q 159 183 161 183 q 154 183 157 184 q 145 181 150 183 q 135 180 139 180 q 125 183 130 180 q 115 181 120 185 q 95 185 97 185 q 89 185 93 184 q 76 191 82 188 q 66 199 70 195 q 45 212 50 203 q 31 227 40 222 q 28 238 31 234 q 25 246 25 241 q 21 259 23 253 q 17 272 20 265 q 17 288 18 284 q 18 298 16 293 q 12 314 16 311 q 16 329 14 325 q 17 336 17 333 q 18 349 18 343 q 18 362 17 355 q 27 377 27 374 q 29 383 27 381 q 39 402 37 397 q 44 408 40 406 q 46 417 44 413 q 50 424 47 420 q 54 429 51 427 q 59 436 56 432 q 65 447 66 447 q 67 450 65 447 q 85 469 81 465 q 94 480 93 478 q 94 482 94 481 q 110 495 105 486 q 124 507 115 503 q 147 524 138 515 q 164 532 164 531 q 165 534 164 533 q 180 543 177 543 q 191 549 185 546 q 200 557 196 552 q 219 565 212 564 q 229 571 225 567 q 248 575 242 569 q 269 581 255 581 q 290 587 278 587 q 313 584 302 587 q 337 587 328 583 q 354 584 347 591 l 359 587 m 303 495 q 284 510 286 508 q 269 514 271 515 q 265 514 267 514 q 238 518 250 514 q 216 513 221 512 q 208 512 211 514 q 196 505 198 505 q 193 504 195 505 q 174 499 183 497 q 169 491 173 492 q 164 482 165 489 q 147 469 153 472 q 132 448 141 455 q 124 430 134 435 q 119 408 119 417 q 115 397 116 400 q 112 390 113 394 q 113 383 115 387 q 111 374 111 378 q 109 362 108 363 q 109 358 109 360 q 111 344 109 349 q 112 332 112 339 q 113 312 111 317 q 115 303 115 307 q 126 287 122 299 q 138 275 137 282 q 145 270 142 272 q 153 265 149 268 q 162 261 158 264 q 170 257 166 259 q 187 256 183 255 q 212 253 200 255 q 231 255 225 252 q 241 261 238 260 q 246 263 244 261 q 263 278 261 275 q 267 284 264 280 q 286 298 275 290 q 288 311 286 305 q 293 324 290 317 q 303 333 301 332 q 303 337 306 335 q 312 358 310 351 q 316 371 314 364 q 314 379 311 375 q 316 387 317 382 q 311 417 310 408 q 307 432 313 425 q 311 451 310 444 q 311 463 313 457 q 307 482 309 480 q 309 489 306 485 l 303 495 "},"e":{"x_min":13.5625,"x_max":467.96875,"ha":496,"o":"m 382 71 q 373 67 375 69 q 363 66 370 65 q 352 59 359 61 q 343 50 345 56 q 311 37 322 43 q 278 23 287 27 q 261 14 269 18 q 243 13 250 17 q 230 5 236 9 q 206 5 218 4 q 187 6 193 6 q 170 9 173 9 q 166 12 166 9 q 158 12 161 10 q 151 13 155 13 q 134 22 138 21 q 127 25 130 23 q 121 28 127 27 q 112 27 115 29 l 93 39 q 77 55 81 55 q 66 71 66 66 q 58 75 61 73 q 50 80 55 78 q 48 92 50 90 q 46 101 47 94 q 37 119 37 119 q 33 128 36 124 q 29 134 31 131 q 30 140 29 137 q 29 149 31 143 q 24 165 24 157 q 20 181 23 174 q 19 192 18 187 q 18 200 20 198 q 14 213 14 211 q 17 217 14 215 q 16 226 13 219 q 13 236 18 233 q 17 249 18 241 q 18 264 16 257 q 25 284 23 274 q 31 301 29 298 q 35 307 33 305 q 39 322 37 320 q 40 326 40 324 q 51 350 44 343 q 59 368 58 358 q 67 376 65 370 q 74 385 69 382 q 83 396 78 394 q 89 404 88 398 q 101 409 97 405 q 107 419 104 413 q 120 425 115 420 q 132 431 124 430 q 144 445 135 442 q 158 455 153 448 q 172 463 169 455 q 195 472 189 466 q 207 480 200 477 q 219 483 217 481 q 227 486 222 485 q 240 494 240 497 q 244 493 241 491 q 254 497 249 495 q 265 501 259 500 q 281 503 278 503 q 288 505 284 504 q 314 507 307 508 q 332 501 321 504 q 349 500 343 499 q 356 495 352 497 q 363 488 360 493 q 379 474 377 478 q 387 467 382 470 q 400 442 397 451 q 409 424 404 434 q 406 413 405 413 q 408 409 408 412 q 406 402 408 406 q 405 393 405 397 q 405 375 406 382 q 404 362 404 368 q 380 337 390 343 q 364 321 370 332 q 353 314 352 317 q 351 310 354 311 q 339 301 340 303 q 337 297 337 299 q 317 287 326 290 q 302 278 306 283 q 293 271 298 274 q 282 267 288 268 q 272 259 276 265 q 253 246 257 256 q 233 247 237 246 q 226 248 229 248 q 211 241 211 240 q 210 241 211 242 q 200 241 206 240 q 188 244 195 242 q 180 243 185 245 q 172 241 174 241 q 158 244 164 240 q 142 246 153 249 q 134 252 138 249 q 126 252 131 255 q 124 242 124 250 q 128 237 123 234 q 123 221 123 230 q 130 207 123 212 q 133 181 126 192 q 142 155 141 169 q 158 139 149 145 q 170 122 166 132 q 191 109 181 116 q 212 94 202 103 q 225 90 221 92 q 236 88 230 88 q 253 78 246 78 q 272 71 269 73 q 278 70 275 70 q 293 67 290 67 q 312 71 309 71 q 320 74 316 71 q 336 84 330 82 q 345 90 341 86 q 357 101 356 99 q 360 104 358 103 q 370 119 370 118 q 377 124 375 120 q 382 131 379 128 q 392 141 390 141 q 397 143 394 142 q 406 159 404 157 q 412 164 408 161 q 435 179 431 174 q 451 181 446 176 q 463 184 457 187 q 466 170 466 172 q 467 168 466 169 q 459 163 466 164 q 454 155 453 162 q 445 134 447 139 q 438 124 443 128 q 423 109 435 112 q 412 96 415 101 q 398 85 400 93 l 382 71 m 176 317 q 189 313 181 316 q 200 307 198 310 q 215 308 208 309 q 227 306 222 307 q 249 306 245 303 q 259 309 253 309 q 274 309 274 307 q 278 313 275 311 q 302 329 295 326 q 304 337 302 333 q 307 344 306 340 q 306 356 307 349 q 305 367 305 362 q 302 384 305 381 q 302 392 299 387 q 290 405 295 402 q 286 415 286 408 q 278 421 280 420 q 275 427 275 423 q 241 438 253 439 q 226 437 226 436 q 225 438 226 438 q 208 433 211 432 q 200 431 204 434 q 185 414 189 417 q 177 404 180 411 q 159 383 165 389 q 155 373 153 378 q 155 351 151 355 q 155 341 158 347 q 166 330 161 336 q 176 317 172 324 "},"J":{"x_min":-118.390625,"x_max":982.453125,"ha":734,"o":"m 529 417 q 534 408 531 412 q 534 397 537 404 q 537 380 535 383 q 537 373 538 377 q 539 358 539 362 q 538 349 538 354 q 540 336 541 337 q 539 333 539 335 q 542 314 539 318 q 542 306 545 310 q 548 291 546 294 q 552 286 550 288 q 551 269 548 274 q 556 257 554 265 q 556 238 557 242 q 558 230 556 234 q 558 215 558 218 q 558 208 557 211 q 562 188 558 192 q 564 168 565 172 q 568 162 564 165 q 569 145 571 145 q 567 142 567 145 q 569 133 569 139 q 571 124 568 127 q 572 113 571 116 q 576 108 573 109 q 577 96 577 97 q 576 92 576 94 q 579 76 577 77 q 580 73 581 75 q 598 78 591 74 q 611 88 604 81 q 626 94 621 89 q 636 96 633 97 q 644 99 638 96 q 653 95 648 96 q 663 92 657 94 q 661 79 660 82 q 660 73 661 75 q 645 59 648 66 q 634 51 642 52 q 623 37 625 44 q 614 29 621 31 q 606 20 611 23 q 596 13 600 17 q 592 2 595 6 q 591 -10 588 -2 q 594 -20 592 -17 q 596 -25 596 -23 q 598 -40 598 -39 q 600 -44 599 -42 q 603 -62 600 -48 q 609 -87 607 -80 q 611 -104 610 -94 q 611 -113 611 -109 q 614 -119 611 -118 q 620 -134 619 -132 q 622 -137 621 -135 q 638 -142 634 -138 q 653 -148 648 -147 q 663 -151 659 -149 q 682 -162 676 -157 q 699 -169 689 -168 q 727 -188 714 -184 q 736 -199 735 -198 q 739 -203 737 -200 q 751 -212 750 -211 q 751 -218 752 -214 q 762 -227 762 -225 q 765 -231 762 -229 q 781 -248 774 -238 q 800 -264 789 -257 q 811 -280 804 -274 q 815 -295 813 -291 q 816 -303 817 -298 q 822 -317 822 -311 q 826 -325 823 -322 q 828 -333 828 -328 q 830 -341 828 -337 q 834 -352 835 -349 q 836 -355 834 -354 q 836 -368 835 -360 q 836 -382 836 -375 q 838 -399 838 -390 q 835 -415 838 -408 q 832 -423 834 -421 q 826 -428 830 -425 q 819 -446 820 -442 q 811 -450 817 -450 q 800 -467 803 -465 q 797 -473 798 -469 q 781 -486 788 -482 q 771 -499 774 -489 q 756 -509 763 -503 q 740 -519 750 -515 q 724 -529 729 -529 q 717 -535 718 -530 q 698 -536 699 -538 q 694 -533 697 -534 q 696 -524 693 -526 q 698 -516 699 -523 q 709 -508 708 -510 q 713 -505 710 -507 q 722 -492 722 -497 q 729 -485 722 -486 q 737 -461 733 -465 q 741 -441 740 -446 q 744 -431 743 -436 q 744 -421 744 -424 q 746 -413 743 -419 q 743 -394 743 -398 q 741 -382 743 -389 q 738 -372 740 -374 q 737 -367 736 -370 q 733 -354 732 -356 q 731 -348 733 -351 q 713 -329 720 -332 q 708 -316 712 -320 q 702 -306 705 -313 q 689 -291 691 -294 q 682 -286 686 -288 q 669 -274 674 -276 q 663 -265 664 -272 q 651 -257 655 -259 q 648 -250 648 -256 q 632 -245 634 -248 q 629 -242 630 -242 q 617 -233 619 -236 q 611 -234 614 -231 q 609 -250 610 -246 q 604 -256 609 -255 q 604 -272 603 -271 q 604 -275 606 -274 q 603 -282 604 -279 q 599 -291 602 -284 q 594 -309 595 -305 q 588 -320 592 -313 q 576 -349 587 -339 q 568 -377 571 -362 q 558 -390 558 -389 q 552 -401 556 -397 q 546 -412 548 -405 q 536 -421 539 -415 q 527 -431 533 -427 q 519 -446 522 -442 q 511 -454 516 -451 q 495 -474 501 -465 q 482 -486 482 -484 q 463 -505 469 -500 q 453 -515 458 -511 q 446 -522 450 -519 q 440 -530 443 -524 q 434 -533 438 -533 q 428 -539 430 -534 q 417 -542 421 -538 q 408 -552 413 -546 q 390 -562 394 -561 q 381 -569 382 -567 q 377 -572 379 -571 q 357 -582 364 -579 q 347 -592 349 -585 q 329 -601 337 -596 q 314 -613 321 -606 q 299 -621 305 -615 q 286 -627 291 -626 q 280 -633 282 -628 q 257 -640 264 -638 q 248 -647 250 -641 q 240 -647 242 -645 q 233 -649 237 -649 q 219 -655 222 -652 q 212 -661 215 -659 q 193 -665 200 -663 q 181 -670 187 -667 q 164 -674 166 -671 q 153 -678 161 -676 q 141 -682 146 -679 q 87 -685 116 -686 q 31 -680 58 -683 q 18 -674 20 -676 q 13 -672 16 -672 q -2 -666 -1 -667 q -8 -664 -4 -664 q -25 -654 -20 -656 q -33 -651 -31 -652 q -48 -642 -46 -644 q -51 -636 -50 -640 q -68 -626 -66 -629 q -75 -622 -70 -622 q -84 -611 -78 -615 q -92 -598 -90 -607 q -97 -589 -96 -592 q -96 -581 -99 -585 q -106 -563 -104 -571 q -109 -552 -108 -556 q -114 -534 -112 -538 q -113 -526 -116 -530 q -116 -506 -112 -514 q -115 -495 -120 -499 q -115 -478 -118 -481 q -116 -472 -113 -476 q -105 -449 -108 -455 q -105 -438 -103 -443 q -94 -419 -97 -434 q -88 -413 -89 -417 q -81 -408 -88 -409 q -75 -396 -78 -398 q -71 -387 -73 -393 q -63 -372 -66 -375 q -58 -362 -59 -368 q -46 -345 -50 -352 q -35 -333 -37 -335 q -31 -329 -33 -332 q -16 -316 -17 -317 q -9 -301 -9 -309 q 5 -293 -2 -294 q 29 -268 23 -279 q 39 -265 36 -269 q 46 -256 42 -260 q 62 -244 59 -248 q 67 -238 65 -241 q 84 -229 75 -237 q 99 -221 96 -227 q 109 -215 104 -218 q 118 -207 115 -212 q 132 -202 126 -207 q 143 -191 138 -196 q 162 -186 158 -188 q 172 -181 166 -184 q 181 -177 176 -179 q 188 -170 185 -176 q 201 -169 195 -173 q 214 -162 207 -165 q 223 -160 218 -160 q 230 -157 227 -160 q 242 -155 242 -157 q 245 -151 242 -153 q 265 -146 259 -146 q 278 -143 271 -146 q 290 -138 287 -138 q 297 -138 294 -138 q 321 -130 314 -132 q 335 -127 328 -128 q 352 -126 343 -126 q 370 -124 362 -127 q 390 -121 386 -120 q 398 -120 394 -122 q 412 -118 409 -118 q 417 -118 415 -119 q 434 -115 432 -115 q 438 -116 436 -116 q 453 -115 444 -116 q 467 -119 461 -115 l 482 -118 q 494 -119 489 -118 q 503 -118 499 -120 q 499 -99 500 -103 q 497 -90 497 -94 q 498 -80 497 -85 q 497 -71 499 -75 q 493 -52 496 -61 q 488 -32 489 -43 l 470 -36 q 451 -43 454 -42 q 442 -47 447 -44 q 421 -51 431 -51 q 398 -59 404 -59 q 386 -62 392 -59 q 375 -65 379 -63 q 364 -67 370 -66 q 356 -68 360 -69 q 347 -70 351 -67 q 334 -67 337 -66 q 328 -67 330 -67 q 310 -65 318 -66 q 295 -66 302 -63 q 280 -66 291 -69 q 265 -61 269 -61 q 256 -62 260 -62 q 238 -52 241 -52 q 230 -51 234 -52 q 216 -45 217 -44 q 212 -44 215 -46 q 197 -39 200 -39 q 193 -35 193 -39 q 178 -29 181 -31 q 176 -20 174 -27 q 168 -16 172 -18 q 161 -14 165 -14 q 148 -3 150 -5 q 143 0 146 -1 q 127 9 131 9 q 122 21 127 17 q 116 33 118 24 q 107 42 108 40 q 104 46 105 43 q 93 56 94 54 q 90 63 92 59 q 81 74 82 73 q 81 78 80 75 q 69 99 74 89 q 56 119 63 108 q 46 147 51 137 q 44 168 42 157 q 40 192 40 181 l 37 210 q 35 222 35 221 q 36 226 36 223 q 34 240 33 238 q 35 242 35 241 q 36 269 37 257 q 42 286 35 282 q 40 294 39 290 q 42 301 42 298 q 41 322 42 311 q 44 340 40 332 q 46 360 42 352 q 51 379 50 367 q 59 400 59 396 q 59 406 58 404 q 66 420 66 417 q 70 429 69 424 q 74 440 71 434 q 82 461 81 455 q 88 470 82 467 q 92 485 92 482 q 94 489 92 488 q 98 500 93 497 q 103 510 103 503 q 113 521 109 514 q 126 533 118 529 q 138 560 135 546 q 151 572 146 568 q 160 585 157 576 q 177 606 165 600 q 183 621 180 615 q 188 636 187 626 q 202 647 198 647 q 206 655 207 648 q 227 672 221 668 q 236 686 233 676 q 257 704 249 698 q 267 712 267 710 q 268 717 267 714 q 290 739 283 733 q 299 752 297 744 l 311 766 q 318 772 316 769 q 328 777 321 775 q 335 788 335 786 q 339 789 336 789 q 344 798 341 794 q 349 808 347 801 q 366 815 364 812 q 371 819 367 819 q 377 826 374 823 q 385 831 381 828 q 397 841 394 841 q 405 848 401 843 q 416 855 409 853 q 440 874 432 869 q 454 883 447 878 q 461 889 457 887 q 469 897 466 892 q 478 925 469 916 q 480 938 477 933 q 486 950 484 944 q 493 972 492 968 q 499 982 495 976 l 501 996 q 507 1005 507 1001 q 511 1011 508 1009 q 518 1025 515 1022 q 525 1039 524 1036 q 529 1043 526 1041 q 534 1056 534 1052 q 538 1059 534 1059 q 545 1071 543 1067 q 550 1078 546 1075 q 566 1102 558 1096 q 576 1120 573 1108 q 585 1122 581 1117 q 591 1131 588 1127 l 606 1146 q 617 1154 617 1152 q 618 1157 617 1155 q 640 1174 634 1173 q 647 1184 645 1182 q 652 1185 648 1185 q 662 1195 657 1190 q 674 1201 667 1199 q 689 1214 683 1209 q 701 1223 694 1218 q 714 1230 712 1231 q 716 1233 716 1230 q 731 1239 729 1239 q 735 1238 733 1238 q 755 1253 750 1249 q 771 1257 760 1257 q 793 1265 775 1262 q 828 1275 817 1272 q 851 1276 839 1279 q 870 1279 870 1272 q 891 1277 889 1275 q 912 1270 900 1270 q 931 1261 925 1270 q 956 1254 946 1258 q 972 1239 965 1249 q 979 1223 979 1228 q 980 1205 984 1212 q 973 1189 976 1199 q 967 1183 969 1186 q 963 1177 965 1180 q 945 1151 950 1159 q 935 1136 935 1139 q 921 1128 921 1131 q 904 1115 907 1120 q 891 1109 900 1109 q 876 1090 877 1097 q 858 1086 864 1090 q 846 1075 849 1077 q 842 1071 843 1074 q 812 1056 816 1060 q 802 1051 804 1053 q 794 1047 800 1048 q 779 1034 782 1037 q 774 1028 777 1030 q 766 1024 769 1026 q 758 1022 763 1022 q 748 1013 748 1011 q 746 1011 747 1014 q 731 1003 733 1005 q 727 998 729 1001 q 702 990 709 995 q 686 980 695 984 q 671 971 675 973 q 660 968 667 968 q 640 950 647 954 q 623 945 633 946 q 606 933 613 935 q 592 925 599 929 q 580 914 585 921 q 573 912 573 916 q 565 908 572 908 q 553 891 560 897 q 548 869 546 884 q 540 826 542 842 q 541 794 538 809 q 536 777 535 781 q 537 769 537 774 l 529 752 q 530 746 529 751 q 530 737 531 741 q 529 718 530 721 q 526 710 527 716 q 528 697 527 698 q 529 694 529 697 q 522 679 523 679 q 527 664 526 668 q 529 657 529 660 q 526 636 526 645 q 523 621 527 626 q 527 598 526 606 q 527 581 529 590 q 525 568 524 571 q 523 562 526 565 q 524 551 523 552 q 524 548 526 550 q 524 532 523 538 q 522 519 526 526 q 527 504 529 505 q 526 500 526 503 q 529 477 530 484 q 529 463 527 470 q 531 442 533 448 q 531 428 530 435 l 529 417 m 853 1192 q 841 1193 846 1189 q 828 1200 835 1197 q 822 1201 826 1201 q 813 1201 817 1200 q 799 1204 804 1201 q 789 1207 794 1207 q 775 1203 779 1204 q 767 1203 771 1203 l 743 1197 q 732 1190 732 1189 q 729 1190 732 1190 q 719 1182 727 1184 q 709 1176 712 1181 q 689 1159 695 1165 q 676 1146 682 1152 q 662 1131 664 1133 q 660 1125 660 1129 q 648 1113 651 1116 q 645 1106 645 1110 q 633 1091 634 1091 q 629 1087 632 1090 q 621 1070 622 1079 q 613 1062 621 1062 q 608 1046 610 1048 q 603 1041 606 1044 q 596 1024 598 1029 q 596 1014 594 1018 q 588 1002 591 1005 q 581 995 584 999 q 581 986 580 990 q 584 979 583 983 q 602 977 600 975 q 606 982 603 980 q 619 988 615 983 q 634 992 623 994 q 648 1002 649 999 q 649 1005 647 1005 q 675 1021 663 1018 q 685 1028 682 1026 q 690 1028 687 1030 q 710 1040 694 1041 l 729 1049 q 735 1055 732 1052 q 746 1058 739 1058 l 765 1067 q 782 1084 778 1079 q 794 1089 786 1089 q 800 1095 796 1094 q 808 1098 804 1096 q 815 1105 812 1101 q 824 1109 817 1109 q 841 1120 836 1119 q 850 1124 846 1121 q 856 1135 853 1131 q 864 1143 859 1139 q 870 1171 872 1167 q 863 1184 870 1182 q 853 1192 855 1185 m 423 813 q 415 805 417 809 q 411 798 413 801 q 400 790 401 793 q 397 784 400 786 q 382 767 385 777 q 368 752 373 759 q 356 744 363 747 q 345 733 349 740 q 335 727 337 732 q 326 718 333 721 q 319 709 321 710 q 314 708 317 708 q 300 693 302 695 q 294 689 298 690 q 282 671 286 672 q 276 667 279 670 q 269 654 272 656 q 264 651 267 652 q 257 636 257 640 q 253 633 256 633 q 251 625 253 628 q 249 617 249 622 q 229 596 236 600 q 222 581 222 592 q 212 575 215 577 q 210 568 210 572 q 202 560 204 565 q 192 553 199 556 q 191 541 195 546 q 184 531 187 535 q 180 518 181 518 q 176 515 179 518 q 172 506 176 510 q 168 499 169 503 q 164 487 166 488 q 164 484 162 486 q 163 476 162 478 q 162 469 164 474 q 158 458 161 461 q 153 453 154 455 q 147 440 149 442 q 146 432 146 438 q 138 415 139 417 q 134 404 134 405 q 134 400 135 402 q 132 384 132 386 q 132 378 131 382 q 130 369 128 374 q 128 362 131 364 q 128 348 128 351 q 130 343 127 345 q 124 329 123 336 q 126 313 126 322 q 126 293 124 298 q 127 284 127 288 q 126 272 126 275 q 127 267 127 269 q 131 252 128 259 q 135 241 134 246 q 135 223 137 227 q 141 208 139 210 q 146 193 146 195 q 153 177 150 180 q 158 168 157 170 q 161 162 158 165 q 166 156 164 160 q 166 147 168 153 q 174 133 172 134 q 177 131 176 132 q 185 120 183 122 q 189 115 188 118 q 206 100 200 105 q 218 92 211 94 q 223 82 219 85 q 229 73 227 80 q 236 67 233 70 q 246 63 240 63 q 257 54 255 55 q 261 51 259 54 q 279 44 274 44 q 290 38 287 37 q 295 39 293 39 q 309 32 309 32 q 322 28 321 27 q 326 29 324 29 q 344 23 343 23 q 360 19 358 21 q 366 16 363 17 q 395 18 383 17 q 413 14 406 18 q 438 21 424 21 q 454 23 448 20 q 472 29 469 24 q 477 41 476 36 q 478 48 478 46 q 473 63 474 62 q 471 77 470 70 q 472 92 472 85 q 466 109 466 107 q 466 115 466 112 q 465 126 466 123 q 463 132 463 130 q 462 147 462 137 q 461 162 461 161 q 459 196 457 177 q 453 217 453 204 q 450 240 453 229 q 446 265 448 257 q 444 282 444 278 q 442 288 442 284 q 442 297 443 293 q 438 314 438 310 q 439 320 439 317 q 438 329 439 325 q 436 339 436 333 q 438 355 438 355 q 436 375 435 371 q 438 383 438 379 l 430 401 q 431 426 431 413 q 428 447 431 439 q 427 466 427 459 q 425 480 428 473 q 427 495 431 495 q 425 500 424 496 q 427 522 428 511 q 427 543 427 533 q 427 558 427 552 q 425 569 428 564 q 428 595 430 585 q 427 615 427 604 q 427 625 427 621 q 428 634 428 629 q 428 649 427 644 q 430 657 430 653 q 429 668 428 666 q 431 674 431 671 q 434 691 432 686 q 432 701 436 695 q 436 720 438 718 q 432 728 435 722 q 436 746 438 744 q 435 751 435 748 q 437 765 436 762 q 438 770 438 767 q 438 786 436 785 q 439 790 439 788 q 438 805 439 798 q 445 820 443 819 q 442 822 447 822 q 432 817 438 819 q 423 813 425 816 m 499 -191 q 486 -189 489 -191 q 482 -187 484 -187 q 471 -190 476 -192 q 462 -191 466 -188 q 454 -187 459 -187 q 446 -184 448 -187 q 430 -186 430 -185 q 427 -187 430 -187 q 415 -185 416 -185 q 412 -187 415 -184 q 386 -185 400 -184 q 359 -187 373 -187 q 344 -187 345 -187 q 323 -191 330 -189 q 311 -189 316 -192 q 288 -200 303 -196 q 261 -200 274 -203 q 244 -209 248 -210 q 237 -210 240 -208 q 222 -217 225 -215 q 217 -219 219 -218 q 207 -220 212 -221 q 195 -222 202 -219 l 180 -227 q 167 -235 172 -230 q 153 -237 162 -240 q 132 -248 137 -242 q 120 -250 128 -253 q 115 -257 118 -255 q 111 -267 112 -260 q 92 -275 97 -271 q 81 -279 88 -279 q 74 -293 74 -288 q 56 -306 58 -302 q 47 -311 54 -310 q 37 -326 37 -325 q 35 -329 36 -328 q 26 -339 28 -337 q 21 -340 24 -341 q 15 -352 16 -351 q 14 -356 14 -354 q 9 -364 9 -358 q 4 -371 9 -370 q -1 -387 0 -386 q -1 -394 -2 -389 q -17 -413 -13 -400 q -27 -440 -21 -427 q -27 -459 -24 -457 q -31 -465 -31 -461 q -25 -487 -29 -477 q -21 -511 -20 -497 q -13 -526 -17 -523 q -12 -539 -9 -530 q -4 -548 -6 -542 q 4 -554 -2 -553 q 6 -563 4 -561 q 12 -569 9 -565 q 23 -576 20 -571 q 37 -581 27 -581 q 59 -591 52 -594 q 82 -602 75 -600 q 94 -606 88 -603 q 105 -611 100 -609 q 115 -615 109 -614 q 135 -616 132 -614 q 142 -619 138 -618 q 162 -614 158 -614 q 178 -614 177 -617 q 183 -613 179 -611 q 198 -611 189 -615 q 214 -611 207 -607 q 231 -604 227 -606 q 238 -602 236 -603 q 251 -595 249 -598 q 257 -595 253 -592 q 267 -588 265 -587 q 272 -588 269 -590 q 290 -577 286 -583 q 310 -569 306 -571 q 317 -564 314 -568 q 332 -557 326 -558 q 341 -553 337 -556 q 352 -542 351 -542 q 363 -530 363 -530 q 381 -518 377 -519 q 390 -514 386 -516 q 394 -501 392 -501 q 400 -500 396 -500 q 406 -492 402 -496 q 412 -484 409 -488 q 415 -475 411 -480 q 424 -470 419 -470 q 436 -457 428 -462 q 446 -438 444 -446 q 455 -430 448 -431 q 470 -405 459 -416 q 480 -382 476 -387 q 484 -366 484 -377 q 491 -351 493 -352 q 489 -347 488 -349 q 495 -337 495 -343 q 495 -324 496 -330 q 503 -311 501 -316 q 505 -301 504 -306 q 507 -267 510 -287 q 514 -238 505 -248 q 509 -219 507 -231 q 511 -192 511 -206 l 499 -191 "},"|":{"x_min":82.75,"x_max":214.859375,"ha":298,"o":"m 204 184 q 207 165 207 170 q 206 154 206 157 q 207 149 206 151 q 205 128 204 137 q 207 109 206 120 q 202 96 204 103 q 199 80 200 89 q 200 68 198 71 q 200 56 203 65 q 202 46 198 56 q 204 33 206 36 q 203 10 204 23 q 208 -10 202 -2 q 208 -40 206 -37 q 208 -68 204 -59 q 206 -82 211 -77 q 210 -101 208 -93 q 214 -116 211 -108 q 213 -138 211 -124 q 214 -154 215 -151 q 210 -175 206 -169 q 208 -180 215 -181 q 213 -199 211 -188 q 212 -222 215 -210 q 212 -234 215 -229 q 212 -241 208 -240 q 210 -257 212 -252 q 211 -263 207 -261 q 210 -273 208 -267 q 210 -286 211 -279 q 210 -297 210 -293 q 208 -309 210 -302 q 204 -320 202 -311 q 199 -330 206 -329 q 193 -342 196 -337 q 187 -356 189 -347 q 174 -359 177 -356 q 169 -367 172 -362 q 147 -386 153 -366 q 131 -400 137 -385 q 124 -401 127 -397 q 113 -404 120 -405 q 112 -386 115 -393 q 108 -364 109 -379 q 104 -355 107 -358 q 103 -341 101 -352 q 109 -319 111 -324 q 112 -311 108 -314 q 112 -303 113 -306 q 111 -294 111 -299 q 113 -273 115 -276 q 112 -265 112 -269 q 113 -255 112 -259 q 115 -245 115 -250 q 114 -198 116 -222 q 116 -151 112 -174 q 114 -123 115 -132 q 112 -107 113 -113 q 113 -82 112 -94 q 111 -61 115 -69 q 113 -52 113 -58 q 113 -43 112 -46 q 111 -14 111 -31 q 109 17 112 2 q 108 27 109 23 q 108 36 107 32 q 109 45 107 40 q 109 55 111 50 q 109 87 107 77 q 105 103 111 97 q 106 114 108 108 q 108 123 104 120 q 107 145 107 134 q 107 169 107 157 q 107 180 108 174 q 105 192 105 185 l 105 230 q 107 240 105 236 q 107 250 108 245 q 107 278 107 264 q 103 303 107 293 q 105 333 108 318 q 105 360 103 347 q 105 399 100 383 q 108 435 111 415 q 109 463 108 458 q 108 477 109 467 q 108 494 109 485 q 108 507 107 503 q 107 516 109 514 q 107 523 105 518 q 106 545 108 539 q 108 554 104 552 q 107 577 107 567 q 107 600 107 587 q 107 613 108 607 q 105 625 105 618 l 105 661 q 107 672 105 667 q 107 683 108 678 q 107 710 107 694 q 103 736 107 725 q 105 765 108 751 q 105 792 103 778 q 100 840 100 815 q 97 884 100 865 q 94 891 96 888 q 89 897 92 893 q 86 913 90 908 q 82 926 82 918 q 88 935 84 935 q 93 938 92 934 q 93 947 94 945 q 92 956 92 949 q 98 957 96 954 q 101 963 100 960 q 105 967 103 965 q 111 967 107 969 q 131 978 124 984 q 151 1001 146 992 q 174 1010 164 1009 q 192 1010 185 1011 q 197 1002 193 1003 q 203 996 200 1001 q 205 984 206 991 q 207 971 204 978 q 206 962 206 964 q 204 956 207 960 q 208 937 208 941 q 207 931 207 934 q 210 903 211 912 q 210 883 210 893 q 210 855 212 862 q 210 844 208 849 q 207 832 211 839 q 211 805 211 822 q 212 793 212 800 q 212 779 212 786 q 210 757 212 767 q 206 736 207 747 q 208 729 206 731 q 210 721 210 727 q 209 705 211 713 q 210 690 207 697 q 209 680 208 685 q 208 671 210 676 q 208 657 210 663 q 208 647 207 652 l 212 632 q 210 614 210 617 q 212 598 215 604 q 211 584 210 592 q 209 568 204 575 q 208 562 214 561 q 211 539 208 543 q 208 530 208 533 q 204 523 207 527 q 208 507 208 511 q 207 500 207 503 q 207 472 208 481 q 207 451 206 462 q 210 432 211 436 q 207 423 208 427 q 206 411 204 416 q 204 402 207 406 q 208 374 206 390 q 209 361 208 367 q 210 348 210 355 q 206 326 208 337 q 203 303 204 314 q 206 273 207 282 q 207 257 204 264 q 203 248 206 252 q 200 238 200 245 q 201 227 203 231 q 200 217 199 222 l 204 184 "},"^":{"x_min":56.203125,"x_max":606.046875,"ha":654,"o":"m 78 514 q 67 517 70 511 q 61 527 63 523 q 56 544 54 542 q 58 553 59 546 q 63 558 59 557 q 66 567 66 560 q 73 577 71 575 q 75 584 75 580 q 86 600 84 596 q 90 609 88 604 q 99 615 97 613 q 101 619 100 617 q 114 630 112 626 q 118 637 116 633 q 129 645 127 644 q 131 649 131 647 q 146 663 141 661 q 153 674 151 666 l 169 685 q 181 701 179 699 q 184 706 183 704 q 195 714 192 710 q 203 720 198 717 q 206 729 203 727 q 211 736 210 731 q 223 750 221 748 q 227 754 226 751 q 238 764 237 762 q 242 769 240 766 q 250 780 250 778 q 252 784 250 782 q 261 792 260 790 q 263 796 261 793 q 271 809 268 807 q 276 815 274 812 q 279 824 278 820 q 283 831 280 827 q 295 837 293 835 q 297 845 297 839 q 307 862 303 861 q 309 870 311 864 q 324 878 321 881 q 335 888 332 884 q 345 891 339 892 q 356 884 352 889 q 358 872 359 878 q 367 857 366 857 q 370 855 368 857 q 379 842 379 847 q 390 830 389 832 q 394 828 392 828 q 408 811 406 816 q 417 804 411 805 q 429 782 424 790 q 442 770 434 774 q 447 761 444 765 q 453 754 450 758 q 464 744 461 747 q 467 735 467 741 q 476 728 473 732 q 481 717 478 724 q 494 708 493 709 q 495 705 495 708 q 503 695 500 701 q 512 687 507 690 q 522 674 520 675 q 524 672 523 674 q 533 659 530 664 q 539 656 537 655 q 561 630 556 638 q 575 614 567 621 q 581 604 579 609 q 585 598 583 600 q 593 591 588 595 q 600 583 598 587 q 604 558 609 567 q 592 541 599 549 q 590 529 592 534 q 587 518 587 524 q 577 505 579 505 q 573 501 575 504 q 570 486 569 488 q 569 482 571 484 q 553 481 556 478 q 539 491 541 492 q 538 496 537 491 q 533 501 535 499 q 530 510 530 504 q 511 534 516 524 q 499 553 505 543 q 487 566 491 560 q 477 573 484 572 q 461 590 467 588 q 450 602 451 600 q 448 609 448 604 q 435 624 436 621 q 431 630 434 628 q 411 645 419 642 q 400 663 402 653 q 392 680 398 674 q 379 699 382 695 q 373 709 377 704 l 356 714 q 348 731 349 727 q 344 740 347 735 q 330 751 330 750 q 329 755 330 752 q 322 762 326 759 q 316 769 318 765 q 297 773 302 775 q 294 765 293 771 q 284 754 286 755 q 282 752 283 754 q 272 738 274 740 q 271 733 271 736 q 264 727 267 731 q 256 718 261 722 q 251 711 253 714 q 246 704 249 708 q 227 682 231 690 q 215 668 222 674 q 208 657 211 657 q 207 652 206 657 q 193 645 196 652 q 187 630 189 638 q 169 613 170 619 q 161 606 168 606 l 149 585 q 126 564 130 576 q 116 555 116 557 q 115 550 116 553 q 99 541 101 545 q 94 535 96 538 q 86 520 90 523 q 78 514 81 518 "},"q":{"x_min":8.140625,"x_max":664.390625,"ha":525,"o":"m 219 548 q 249 557 233 557 q 274 559 268 558 q 288 557 280 560 q 301 559 293 561 q 316 557 309 557 q 328 552 328 553 q 332 552 329 550 q 344 541 343 542 q 345 538 345 541 q 361 545 359 538 q 363 556 363 552 q 362 571 364 569 q 363 576 360 573 q 377 585 373 581 q 387 591 381 590 l 405 602 q 418 613 417 610 q 421 617 419 615 q 446 620 440 621 q 457 623 453 619 q 467 612 467 617 q 469 602 467 607 q 461 587 461 591 q 461 580 462 583 q 456 570 459 575 q 454 558 453 565 q 448 546 446 548 q 450 539 451 545 q 448 526 446 526 q 448 523 450 526 q 439 498 439 503 q 440 482 439 493 q 434 461 436 467 q 438 450 432 455 q 434 432 435 436 q 435 423 432 427 q 429 415 431 416 q 425 411 427 413 q 424 392 427 394 q 427 377 428 378 q 424 373 425 375 q 425 356 425 362 q 424 347 425 351 q 423 328 421 332 q 423 320 424 324 q 417 293 417 303 q 411 269 417 275 q 411 252 413 257 q 412 245 408 248 q 409 218 412 229 q 406 196 406 207 q 406 172 411 181 q 406 154 402 164 q 404 116 409 134 q 402 105 401 107 q 402 101 402 104 q 402 84 401 85 q 404 80 404 82 q 402 44 404 59 q 402 17 401 28 q 402 3 398 5 q 404 -5 405 1 q 400 -20 401 -20 q 400 -21 400 -20 q 404 -39 405 -37 q 402 -42 402 -40 q 406 -51 404 -47 q 405 -62 408 -55 q 408 -71 408 -65 q 411 -80 409 -77 q 410 -99 406 -96 q 408 -104 413 -101 q 413 -120 412 -120 q 413 -122 413 -120 q 415 -134 413 -132 q 416 -139 416 -137 q 413 -155 411 -154 q 416 -160 415 -157 q 417 -168 415 -164 q 419 -177 419 -172 q 419 -186 420 -181 q 421 -193 419 -191 q 420 -204 419 -203 q 421 -208 421 -206 q 425 -231 421 -225 q 424 -246 428 -237 q 427 -259 427 -256 q 430 -265 428 -263 q 435 -282 430 -271 q 437 -299 438 -295 q 439 -307 436 -303 l 444 -322 q 454 -349 451 -340 q 464 -364 461 -360 q 472 -371 467 -367 q 479 -384 476 -381 q 485 -393 482 -387 q 512 -404 508 -398 q 528 -406 519 -405 q 543 -406 537 -408 q 563 -406 556 -408 q 579 -402 571 -404 q 599 -396 588 -396 q 613 -385 613 -387 q 618 -385 613 -382 q 629 -374 632 -377 q 629 -368 626 -371 q 645 -360 644 -364 q 651 -354 647 -355 q 661 -360 657 -355 q 663 -371 666 -366 q 649 -381 652 -381 q 645 -386 645 -381 q 636 -388 638 -385 q 629 -393 634 -392 q 615 -406 618 -404 q 604 -406 611 -409 q 591 -413 591 -416 q 583 -420 587 -417 q 571 -421 579 -423 q 560 -429 567 -427 q 546 -434 553 -432 q 533 -439 539 -436 q 523 -447 526 -442 q 501 -452 507 -450 q 488 -450 495 -454 q 476 -454 481 -453 q 466 -457 472 -455 q 452 -454 453 -451 q 448 -457 451 -457 q 437 -454 443 -454 q 425 -453 431 -454 q 419 -448 423 -451 q 411 -447 416 -446 q 397 -436 400 -436 q 394 -431 394 -435 q 381 -423 385 -430 q 374 -409 377 -416 q 365 -400 368 -401 q 362 -396 362 -398 q 352 -376 355 -383 q 345 -363 349 -368 q 346 -349 348 -349 q 343 -345 344 -348 q 341 -335 344 -339 q 336 -329 339 -332 q 333 -306 332 -307 q 328 -286 329 -290 q 326 -270 325 -275 q 325 -259 326 -265 q 322 -240 321 -244 q 317 -234 322 -237 q 317 -213 320 -225 q 314 -187 314 -202 q 314 -174 316 -176 q 313 -170 313 -173 q 314 -157 314 -164 q 313 -146 314 -150 q 309 -124 309 -131 q 309 -109 310 -116 q 306 -96 307 -103 q 303 -82 305 -89 q 303 -66 306 -75 q 300 -47 301 -59 q 303 -27 299 -35 q 299 -11 298 -20 q 301 5 301 -2 q 300 26 301 21 q 299 35 299 31 q 301 44 299 39 q 302 52 302 48 q 301 64 301 63 q 302 67 302 65 q 302 94 301 86 q 303 108 303 101 q 303 128 303 124 q 302 134 303 131 q 304 154 302 147 q 302 168 306 161 q 305 175 305 170 q 305 185 305 180 q 310 207 305 199 q 309 219 306 214 q 310 233 311 223 q 303 229 306 231 q 295 226 299 227 q 285 218 290 222 q 274 212 280 214 q 261 202 265 203 q 255 195 256 202 q 242 191 248 195 q 233 184 237 187 q 213 170 219 172 q 204 164 207 168 q 166 154 188 160 q 151 143 160 147 q 128 139 142 139 q 115 134 116 137 q 111 132 113 132 q 86 133 100 131 q 63 138 71 135 q 48 153 59 149 q 38 168 42 162 q 27 177 35 174 q 23 188 27 184 q 16 198 18 192 q 14 207 13 203 q 10 214 14 211 q 10 237 12 231 q 12 246 9 242 q 8 268 8 261 q 8 286 9 275 q 8 304 9 302 q 8 309 8 306 q 10 324 8 317 q 9 339 13 332 q 14 349 13 343 q 20 360 16 356 q 21 375 21 374 q 29 392 28 392 q 33 394 31 393 q 35 405 35 400 q 39 415 36 411 q 48 432 48 430 q 50 436 48 434 q 69 458 55 451 q 81 470 77 470 q 92 481 92 477 q 109 497 105 482 q 142 513 134 505 q 161 524 150 520 q 181 533 177 534 q 188 535 185 533 q 201 541 198 539 q 207 543 204 542 l 219 548 m 310 440 q 304 448 306 443 q 295 454 302 453 q 282 470 286 466 q 269 476 278 474 q 253 489 264 482 q 230 493 242 496 q 220 494 226 496 q 207 496 214 492 q 191 491 199 489 q 177 491 184 493 q 164 481 165 484 q 160 476 162 478 q 147 457 153 462 q 138 446 141 453 q 137 438 137 443 q 135 430 138 434 q 126 415 128 417 q 123 411 124 413 q 122 401 126 405 q 118 390 118 397 q 111 367 112 373 q 108 355 109 362 q 107 332 109 340 q 107 309 107 316 q 108 298 108 303 q 108 286 107 287 q 109 283 109 286 q 111 271 113 275 q 109 267 109 268 q 119 238 119 249 q 130 227 127 229 q 135 222 132 225 q 145 208 141 208 q 153 204 149 207 q 166 196 161 196 q 179 197 173 195 q 192 200 185 199 q 218 222 210 211 q 237 241 226 233 q 248 256 238 252 q 259 276 252 268 q 269 295 267 283 q 282 311 280 310 q 293 325 288 321 q 294 333 294 329 q 297 341 294 337 q 303 349 299 345 q 306 359 306 352 l 307 377 q 317 393 316 387 q 320 409 320 404 q 323 428 321 425 q 325 435 325 431 l 310 440 "},"b":{"x_min":55.609375,"x_max":663.296875,"ha":629,"o":"m 111 652 q 111 660 111 657 q 111 670 112 663 q 117 682 113 675 q 118 695 120 689 q 125 708 123 705 q 130 713 127 710 q 134 727 132 724 q 137 732 135 729 q 146 754 143 750 q 149 765 149 759 l 157 778 q 169 794 166 792 q 172 801 172 796 q 181 811 176 805 q 184 823 185 816 q 201 838 198 834 q 208 845 204 843 q 216 853 214 851 q 221 858 218 855 q 238 877 223 870 q 248 887 242 883 q 256 897 253 891 q 274 908 271 906 q 286 918 279 915 q 298 929 293 922 q 306 931 302 930 q 313 938 310 933 q 328 945 324 941 q 337 952 332 949 q 366 966 356 964 q 383 975 375 968 q 398 978 394 978 q 404 980 401 978 q 419 987 416 984 q 431 990 428 988 q 438 994 434 992 q 446 996 442 996 q 455 996 451 995 q 487 1005 476 1003 q 512 1007 499 1007 q 535 1005 523 1007 q 558 1006 548 1003 q 579 998 576 1002 q 591 995 583 994 q 600 990 595 991 q 611 986 604 988 q 623 976 621 979 q 629 972 626 973 q 648 961 640 961 q 660 956 656 961 q 663 935 659 942 q 645 921 652 931 q 628 912 632 916 q 622 903 625 908 q 604 897 607 899 q 598 892 602 895 q 590 886 592 887 q 584 883 587 885 q 565 878 572 876 q 558 884 560 880 q 548 885 556 888 q 543 897 546 893 q 538 903 541 900 q 522 913 524 914 q 518 914 520 912 q 495 921 501 921 q 480 927 486 927 q 466 927 473 926 q 440 928 447 930 q 428 927 434 926 q 401 923 409 922 q 390 919 393 923 q 380 919 385 919 q 368 918 375 919 q 355 911 359 911 q 347 910 351 911 q 332 902 332 903 q 329 900 332 902 q 305 878 305 889 q 293 868 295 874 q 283 862 286 866 q 274 855 280 858 q 264 838 265 842 q 257 834 263 835 q 244 807 248 820 q 234 790 240 794 q 230 779 229 786 q 223 767 225 770 q 219 760 222 763 q 212 738 215 743 q 211 729 208 733 q 206 710 206 722 q 196 695 199 698 q 195 686 193 693 q 191 652 193 663 q 188 629 188 641 q 180 613 179 615 q 181 609 181 611 q 178 594 177 595 q 176 590 179 592 l 166 550 q 160 517 164 527 q 158 497 157 507 q 153 478 153 484 q 150 469 154 473 q 151 423 149 444 q 151 386 146 396 q 148 370 145 379 q 147 355 151 360 q 150 341 150 349 q 150 325 150 333 q 147 312 147 314 q 149 307 147 310 q 151 288 153 294 q 150 275 150 282 q 153 255 151 259 q 154 248 155 252 q 151 236 149 237 q 155 231 154 234 q 149 217 155 219 q 154 181 151 191 q 154 165 157 172 q 160 143 160 150 q 164 132 161 137 q 161 116 160 120 q 160 109 162 112 q 168 92 169 96 q 169 82 168 88 q 174 70 174 73 q 176 69 173 67 q 185 87 180 78 q 192 107 189 96 q 201 116 198 115 q 207 120 204 118 q 218 145 215 134 q 229 161 221 155 q 238 179 236 174 q 246 187 240 184 q 253 200 252 195 q 261 208 255 206 q 267 221 263 215 q 279 233 272 227 q 295 245 287 244 q 304 254 303 250 q 307 261 305 257 q 316 263 313 259 q 322 269 318 267 q 335 278 329 274 q 344 287 341 282 q 360 294 358 291 q 367 299 363 297 q 383 305 375 303 q 394 311 390 307 q 408 313 401 309 q 421 321 415 317 q 446 324 428 324 q 476 322 463 324 q 487 313 485 314 q 493 309 489 311 q 507 295 505 297 q 512 290 510 293 q 518 276 515 280 q 527 268 520 271 q 530 259 529 264 q 535 252 531 255 q 539 240 535 244 q 542 227 542 236 q 548 197 545 208 q 548 174 550 185 q 545 156 546 158 q 543 151 543 154 q 543 138 545 139 q 542 134 542 137 q 542 127 541 131 q 543 119 543 123 q 537 95 537 101 q 537 82 538 89 q 527 63 530 67 q 526 52 524 59 q 519 42 523 46 q 516 27 515 37 q 506 8 510 20 q 495 -10 503 -4 q 486 -31 488 -29 q 482 -35 485 -32 q 476 -42 480 -37 q 467 -51 472 -46 q 455 -65 459 -65 q 445 -84 447 -80 q 438 -90 443 -88 q 432 -99 436 -96 q 425 -108 427 -101 q 417 -115 420 -111 q 409 -124 413 -120 q 393 -136 396 -134 q 387 -141 390 -138 q 378 -153 379 -151 q 364 -162 368 -157 q 355 -172 359 -166 q 324 -192 332 -176 q 313 -203 316 -193 q 299 -210 305 -206 q 287 -217 294 -214 q 267 -225 272 -227 q 257 -227 263 -223 q 241 -248 241 -242 q 231 -252 234 -249 q 226 -261 229 -256 q 210 -264 214 -261 q 206 -271 207 -267 q 189 -274 195 -271 q 174 -279 183 -276 q 162 -287 166 -286 q 153 -288 158 -288 q 137 -290 141 -288 q 128 -293 132 -293 q 116 -279 120 -279 q 113 -272 112 -279 q 124 -250 115 -250 q 130 -242 127 -245 q 135 -231 132 -238 q 132 -217 132 -225 q 130 -203 132 -210 q 126 -191 128 -196 q 126 -179 123 -185 q 115 -135 122 -147 q 109 -107 109 -123 q 105 -91 107 -94 q 104 -85 103 -88 q 97 -67 101 -71 q 95 -54 94 -61 q 92 -43 96 -48 q 91 -27 94 -35 q 85 -12 88 -18 l 81 4 q 79 23 80 20 q 81 27 78 25 q 80 47 75 39 q 72 75 74 69 q 67 90 70 82 q 67 113 67 103 q 63 130 67 123 q 64 155 63 147 q 62 170 65 164 q 59 204 62 189 q 57 229 56 225 q 58 241 58 234 q 59 250 58 245 q 56 261 59 255 q 56 297 54 280 q 55 322 59 313 q 58 333 58 326 q 58 344 58 339 q 59 362 59 359 q 58 368 58 366 q 60 380 58 375 q 62 390 62 385 q 63 408 62 404 q 66 419 65 413 q 68 448 66 439 q 71 465 70 457 l 75 491 q 76 503 77 499 q 80 512 75 508 q 79 519 77 516 q 82 527 81 522 q 85 539 85 533 q 90 550 85 545 q 90 560 88 557 q 94 569 93 564 q 96 585 97 577 q 100 598 96 592 q 101 613 100 613 q 104 615 103 613 l 111 652 m 386 -74 q 396 -63 394 -65 q 398 -58 397 -61 q 402 -48 401 -54 q 405 -40 404 -43 q 423 5 421 -16 q 429 11 428 5 q 428 20 431 17 q 439 44 435 36 q 442 56 440 56 q 443 59 443 56 q 442 74 442 74 q 443 75 443 74 q 445 87 446 85 q 444 90 444 89 q 448 101 447 96 q 446 112 448 105 q 451 132 451 119 q 447 150 448 143 q 448 165 446 157 q 443 179 444 170 q 440 195 442 187 q 431 207 431 206 q 424 222 425 215 q 417 225 419 223 q 411 229 415 227 q 396 242 400 240 q 390 246 393 245 q 377 246 383 248 q 362 248 370 245 q 350 241 351 240 q 347 242 349 242 q 342 233 344 238 q 335 227 340 229 q 320 211 326 215 q 303 186 309 195 q 298 166 298 177 q 286 150 288 151 q 282 146 284 149 q 278 130 283 134 q 269 120 272 127 q 267 105 268 108 q 268 97 265 103 q 262 86 261 88 q 263 81 263 84 q 252 58 253 66 q 248 44 252 50 q 246 33 248 35 q 245 27 245 31 q 243 14 244 17 q 240 10 242 12 q 229 -36 233 -13 q 228 -48 230 -46 q 226 -55 226 -51 q 227 -73 227 -67 q 226 -92 226 -81 q 226 -111 226 -104 q 227 -127 226 -126 q 227 -131 227 -128 q 230 -151 229 -146 q 231 -158 231 -155 l 234 -183 q 242 -193 238 -188 q 245 -208 246 -198 q 255 -205 252 -208 q 261 -198 257 -202 q 274 -189 268 -195 q 286 -179 279 -184 q 299 -172 295 -177 q 313 -165 303 -166 q 325 -149 321 -153 q 333 -141 329 -145 l 344 -127 q 351 -121 348 -124 q 356 -115 354 -118 q 362 -108 359 -111 q 367 -101 364 -105 q 378 -92 377 -93 q 382 -92 379 -90 q 386 -84 383 -86 q 386 -74 389 -81 "},"D":{"x_min":42.046875,"x_max":1261.484375,"ha":1352,"o":"m 709 991 q 731 992 724 991 q 744 991 737 994 q 770 993 763 994 q 788 992 777 992 q 804 986 803 995 q 822 984 817 986 q 832 984 826 982 q 854 969 847 978 q 868 965 866 964 q 870 964 869 965 q 885 961 881 961 q 892 964 889 961 q 919 954 912 957 q 933 948 926 950 q 941 943 937 945 q 948 937 945 941 q 965 925 957 926 q 976 916 972 923 q 997 908 992 914 q 1011 900 1002 903 q 1016 892 1014 896 q 1022 887 1018 888 q 1035 871 1032 873 q 1040 865 1039 869 q 1053 857 1049 864 q 1062 845 1056 850 q 1075 835 1074 838 q 1079 828 1077 832 q 1091 816 1083 816 q 1098 802 1094 803 q 1105 798 1102 801 q 1111 789 1108 792 q 1117 779 1115 786 q 1121 774 1119 777 q 1121 765 1123 771 q 1131 748 1128 751 q 1135 741 1133 746 q 1140 731 1139 733 q 1143 727 1142 729 l 1151 712 q 1159 699 1157 699 q 1162 697 1161 699 q 1169 677 1166 683 q 1174 660 1173 671 l 1180 644 q 1193 622 1188 628 q 1196 612 1193 615 q 1201 606 1199 609 q 1209 590 1204 590 q 1216 572 1216 577 q 1222 552 1222 562 q 1226 536 1227 538 q 1227 531 1226 534 q 1232 520 1230 522 q 1234 518 1234 519 q 1239 496 1238 501 q 1242 488 1239 491 q 1246 482 1245 485 q 1249 464 1246 469 q 1252 455 1252 459 q 1250 448 1252 453 q 1249 440 1249 444 q 1249 424 1250 428 q 1250 416 1249 420 q 1252 396 1253 400 q 1253 387 1252 392 q 1254 379 1253 383 q 1256 370 1256 375 q 1254 355 1253 358 q 1257 349 1256 352 q 1258 339 1256 341 q 1258 335 1261 337 q 1260 311 1262 320 q 1258 293 1258 302 q 1259 275 1260 276 q 1258 272 1258 274 q 1259 263 1258 268 q 1257 255 1260 257 q 1259 227 1258 236 q 1258 210 1260 218 q 1256 202 1257 206 q 1254 192 1254 199 q 1252 179 1252 180 q 1253 176 1253 177 q 1250 166 1249 168 q 1252 161 1252 164 q 1247 147 1247 147 q 1245 143 1246 146 q 1242 125 1243 130 q 1238 116 1241 120 q 1235 109 1235 113 q 1234 101 1235 104 q 1229 92 1231 97 q 1224 82 1227 88 q 1218 69 1220 71 q 1219 66 1216 66 q 1213 53 1216 54 q 1211 46 1209 52 q 1204 31 1204 42 q 1196 16 1200 18 q 1195 12 1192 14 q 1184 1 1185 4 q 1181 -1 1184 -1 q 1178 -12 1182 -9 q 1173 -21 1173 -14 q 1163 -31 1165 -29 q 1161 -35 1162 -33 l 1148 -47 q 1142 -59 1143 -56 q 1139 -66 1140 -62 q 1125 -75 1125 -73 q 1117 -92 1120 -89 q 1110 -99 1113 -94 q 1095 -118 1101 -113 q 1086 -128 1089 -122 q 1077 -133 1079 -130 q 1068 -138 1075 -137 q 1049 -155 1055 -150 q 1038 -164 1039 -161 q 1033 -168 1037 -168 q 1022 -177 1026 -176 q 1015 -184 1018 -179 q 997 -191 999 -188 q 992 -198 995 -195 q 977 -203 980 -200 q 971 -208 973 -206 q 955 -214 960 -208 q 941 -222 950 -221 q 929 -229 937 -227 q 918 -237 922 -231 q 910 -238 914 -237 q 902 -238 907 -240 q 893 -244 896 -241 q 883 -246 889 -246 q 868 -255 872 -250 q 858 -259 865 -259 q 849 -265 850 -265 q 843 -265 847 -264 q 836 -269 841 -267 q 830 -274 831 -271 q 812 -275 819 -275 q 799 -282 803 -280 q 793 -284 796 -283 q 775 -290 777 -288 q 771 -293 774 -291 q 740 -302 748 -293 q 723 -301 732 -299 q 708 -302 714 -302 q 699 -306 705 -305 q 689 -310 694 -307 q 674 -309 675 -309 q 653 -312 659 -311 q 644 -314 648 -313 q 615 -315 622 -314 q 598 -309 607 -316 q 586 -312 591 -316 q 573 -313 581 -309 q 549 -307 557 -306 q 533 -306 541 -307 q 524 -303 529 -305 q 515 -301 520 -301 q 505 -300 510 -299 q 496 -301 500 -301 q 486 -297 491 -299 q 480 -295 482 -295 q 465 -297 474 -297 q 449 -293 453 -295 q 442 -291 446 -291 q 424 -291 434 -288 q 417 -295 420 -291 q 411 -301 413 -298 q 404 -305 408 -303 q 397 -309 401 -307 q 387 -317 392 -311 q 374 -324 383 -322 q 363 -335 366 -329 q 354 -335 360 -341 q 342 -345 348 -341 q 332 -355 336 -348 q 315 -358 322 -352 q 299 -367 307 -364 q 288 -374 288 -374 q 284 -377 287 -374 q 269 -385 269 -383 q 265 -389 268 -386 q 254 -392 255 -394 q 250 -390 253 -390 q 236 -397 240 -393 q 223 -398 225 -397 q 219 -400 222 -400 q 203 -401 212 -401 q 183 -402 193 -401 q 170 -402 170 -404 q 168 -401 169 -401 q 156 -401 162 -400 q 147 -398 150 -402 q 127 -394 130 -397 q 122 -392 124 -392 l 101 -386 q 94 -381 100 -381 q 89 -374 89 -381 q 69 -365 73 -371 q 61 -362 66 -359 q 52 -349 54 -351 q 48 -344 50 -347 l 43 -310 q 49 -292 46 -294 q 51 -286 52 -290 q 62 -271 55 -271 q 67 -265 65 -268 q 74 -259 70 -261 q 96 -234 92 -245 q 106 -221 104 -223 q 111 -217 108 -219 q 132 -211 131 -212 q 149 -200 138 -203 q 165 -189 160 -198 q 186 -185 179 -185 q 198 -180 193 -184 q 219 -176 212 -183 q 233 -179 226 -181 q 248 -177 241 -177 q 265 -179 260 -180 q 272 -179 269 -179 q 286 -182 282 -183 q 294 -183 291 -181 q 310 -186 307 -187 q 316 -185 313 -185 q 330 -187 326 -188 q 336 -187 333 -187 q 347 -189 341 -187 q 358 -192 352 -192 q 368 -193 364 -193 q 377 -196 373 -193 q 404 -199 389 -192 q 431 -203 419 -206 q 438 -192 436 -193 q 438 -188 439 -191 l 443 -168 q 449 -151 450 -155 q 451 -142 448 -147 q 455 -125 454 -135 q 459 -107 455 -115 q 460 -86 457 -96 q 463 -65 463 -75 q 461 -49 462 -56 q 461 -32 459 -42 l 457 -4 q 456 4 457 2 q 455 12 455 6 q 456 27 457 18 q 451 42 455 36 q 454 49 454 47 q 453 58 454 51 q 451 72 450 67 q 447 80 453 77 q 450 99 450 92 q 448 113 450 105 q 444 137 446 132 q 443 151 444 146 q 440 160 442 155 q 439 177 440 174 q 436 181 438 179 q 434 197 432 196 q 435 199 435 198 q 429 215 428 211 q 428 222 430 219 q 425 231 427 229 q 425 241 423 234 q 424 257 427 250 q 420 268 421 263 q 419 282 419 275 q 419 297 420 290 q 416 307 417 303 q 415 316 415 311 q 416 323 415 320 q 416 330 417 326 q 413 344 415 343 q 412 348 412 345 q 412 359 411 354 q 412 368 413 364 q 409 383 406 375 q 406 404 408 400 q 405 413 405 408 q 406 426 405 416 q 408 442 408 436 q 407 457 408 447 q 406 474 406 466 q 408 495 405 489 q 411 510 411 501 q 408 531 411 526 q 411 546 412 537 q 412 564 411 556 q 415 580 417 579 q 415 584 413 581 q 420 600 419 591 q 424 618 421 609 q 426 633 424 630 q 430 638 428 636 q 436 653 435 649 q 439 657 436 656 q 444 684 440 674 q 448 708 447 694 q 459 720 455 714 q 467 731 462 727 q 478 746 478 744 q 481 751 478 748 q 499 767 493 758 q 507 774 503 770 q 512 786 511 778 q 529 799 526 796 q 535 804 531 803 q 552 817 546 813 q 562 826 557 822 q 577 836 576 835 q 579 841 579 838 q 613 861 598 846 q 624 864 621 859 q 636 868 628 868 q 654 874 645 876 q 670 880 663 873 q 689 880 686 877 q 694 878 691 883 q 712 881 705 880 q 721 878 718 881 q 733 872 733 877 q 736 864 733 866 q 732 855 735 858 q 731 846 729 853 l 716 838 q 704 828 705 827 q 702 827 702 828 q 691 815 693 816 q 686 812 689 815 q 677 809 679 812 q 671 805 675 807 q 658 811 660 809 q 653 812 656 812 q 640 810 642 809 q 634 811 637 811 q 618 803 621 805 q 604 800 604 801 q 598 800 603 800 q 582 784 591 792 q 567 767 573 775 q 556 748 556 751 q 550 744 552 747 q 545 737 548 740 q 539 718 542 722 q 535 708 537 714 q 529 692 530 695 q 527 686 527 689 q 526 668 526 670 q 526 664 527 667 q 519 648 522 651 q 515 628 516 636 q 512 611 514 619 l 511 592 q 507 574 507 577 q 505 568 508 571 q 507 553 505 558 q 504 548 508 548 q 504 535 501 535 q 505 531 507 534 q 504 521 504 527 q 501 512 504 515 q 503 497 504 500 q 501 491 501 495 q 501 471 503 474 q 500 465 500 467 q 503 438 504 447 q 507 423 501 430 q 507 411 505 416 q 510 402 508 406 q 512 385 514 386 q 511 374 510 375 q 512 370 512 373 q 512 354 510 362 q 510 339 514 345 q 512 316 508 318 q 516 311 515 314 q 518 302 515 306 q 515 295 520 298 q 518 275 522 276 q 522 267 519 271 q 523 256 526 263 q 529 244 526 252 q 527 231 533 236 q 534 214 533 215 q 537 208 535 212 q 536 192 533 199 q 539 179 539 185 q 544 160 542 166 q 548 146 546 154 q 548 134 548 139 q 550 123 548 128 q 548 112 546 113 q 552 108 550 111 q 550 94 548 96 q 553 89 552 92 q 554 78 554 84 q 554 67 553 73 q 557 52 558 52 q 556 51 556 52 q 557 36 556 42 q 556 28 557 32 q 558 21 554 24 q 556 2 556 9 q 560 -16 557 -5 q 558 -33 558 -24 q 558 -55 557 -48 q 554 -66 558 -62 q 555 -76 557 -71 q 552 -88 553 -81 q 549 -100 549 -94 q 546 -111 549 -105 q 543 -129 545 -126 q 541 -135 541 -132 q 534 -157 537 -150 q 527 -170 531 -164 q 522 -188 520 -187 q 524 -192 524 -189 q 515 -202 519 -200 q 511 -211 511 -204 q 529 -227 520 -227 q 545 -231 538 -227 q 574 -236 560 -229 q 603 -240 588 -242 q 613 -243 607 -242 q 621 -248 618 -244 q 640 -249 630 -249 q 660 -250 649 -249 q 674 -252 671 -253 q 680 -252 678 -252 q 699 -252 690 -252 q 716 -252 708 -253 q 736 -250 732 -252 q 743 -249 740 -249 q 754 -249 752 -250 q 758 -248 755 -248 q 765 -247 762 -246 q 773 -246 769 -248 q 790 -241 788 -241 q 803 -239 797 -240 q 812 -233 808 -238 q 828 -229 826 -230 q 834 -227 831 -227 q 858 -219 854 -223 q 876 -212 873 -215 q 885 -210 878 -210 q 892 -206 889 -208 q 902 -203 895 -203 q 912 -196 910 -199 q 916 -191 914 -193 q 927 -188 923 -191 q 938 -184 931 -185 q 949 -174 948 -176 q 953 -174 950 -173 q 960 -169 956 -172 q 965 -162 964 -166 q 981 -153 979 -154 q 982 -149 983 -151 q 997 -137 995 -138 q 1002 -134 999 -137 q 1015 -124 1014 -124 q 1018 -123 1015 -123 q 1028 -108 1022 -111 q 1035 -94 1033 -96 q 1040 -90 1037 -92 q 1047 -77 1047 -80 q 1051 -75 1047 -74 q 1057 -64 1055 -67 q 1063 -58 1059 -61 q 1075 -42 1067 -47 q 1083 -21 1083 -36 q 1098 -2 1094 -5 q 1104 5 1101 1 q 1113 25 1108 24 q 1115 35 1110 32 q 1120 46 1120 39 q 1129 59 1125 54 q 1135 69 1132 65 q 1140 92 1135 86 q 1146 109 1146 109 q 1149 128 1148 124 q 1150 139 1150 132 q 1154 160 1154 155 q 1158 168 1154 165 l 1158 200 q 1159 209 1158 204 q 1157 217 1161 214 q 1155 233 1154 231 q 1158 238 1155 236 q 1157 252 1158 248 q 1157 259 1155 256 q 1157 269 1157 263 q 1158 280 1157 275 q 1157 289 1158 286 q 1159 297 1157 293 q 1157 307 1158 302 q 1158 317 1155 313 q 1154 333 1152 332 q 1157 336 1155 333 q 1151 354 1151 343 q 1144 370 1151 364 q 1142 404 1154 392 q 1145 417 1144 413 q 1144 425 1146 421 q 1141 438 1140 436 q 1140 442 1142 439 q 1137 451 1140 447 q 1136 462 1133 455 q 1129 489 1132 478 q 1123 503 1123 500 q 1121 508 1124 505 q 1121 522 1123 520 q 1117 526 1119 523 q 1110 542 1112 537 q 1102 550 1108 548 q 1094 565 1100 560 q 1084 591 1091 580 q 1079 617 1077 602 q 1070 630 1072 626 q 1066 636 1068 633 q 1056 656 1059 652 q 1049 664 1052 660 q 1040 683 1044 678 q 1032 699 1039 702 q 1030 707 1033 705 q 1028 714 1028 709 q 1024 722 1026 718 q 1021 733 1021 727 q 1009 748 1011 743 q 996 766 999 760 q 988 773 990 773 q 986 777 987 774 q 979 785 983 782 q 972 793 975 788 q 961 803 963 803 q 960 807 959 804 q 952 811 954 808 q 945 815 949 813 q 937 824 940 822 q 931 830 934 827 q 925 835 929 832 q 919 842 922 838 q 908 848 910 849 q 904 849 907 847 q 873 873 889 866 q 856 880 859 880 q 853 884 853 880 q 839 887 845 884 q 828 893 834 891 q 813 900 816 893 q 794 906 797 904 q 789 907 792 907 q 767 915 770 914 q 755 915 765 916 q 737 919 750 923 q 731 923 735 922 q 724 926 727 925 q 707 925 710 926 q 701 925 704 925 q 693 927 697 926 q 683 929 689 929 q 668 928 670 929 q 664 927 667 927 q 645 934 649 933 q 638 934 641 935 q 611 927 617 929 q 601 927 607 926 q 592 927 595 929 q 564 923 571 922 q 550 919 557 923 q 530 915 538 921 l 511 914 q 494 908 497 907 q 488 907 491 908 q 478 902 481 903 q 474 897 474 902 q 459 893 459 895 q 457 892 458 892 q 436 884 443 885 q 423 880 428 883 q 408 874 412 874 q 398 872 404 874 q 379 862 383 862 q 371 861 375 862 q 361 853 366 858 q 349 846 356 849 q 336 836 339 838 q 330 834 333 835 q 316 819 317 822 q 307 816 311 819 q 299 809 302 813 q 282 800 284 803 q 276 797 279 798 q 260 785 263 786 q 257 779 257 784 l 241 767 q 225 751 227 754 q 213 736 217 737 q 210 731 210 735 q 198 712 200 717 q 192 701 195 706 q 176 676 181 680 q 173 660 173 664 q 161 643 161 647 q 158 638 161 640 q 154 615 154 623 q 151 596 154 606 q 147 572 146 579 q 144 555 142 557 q 146 548 146 553 q 142 532 141 533 q 142 529 143 531 q 138 503 139 508 q 139 461 142 477 q 143 443 139 451 q 147 427 145 427 q 149 412 150 413 q 147 408 147 411 q 151 393 147 400 q 154 379 154 386 q 161 363 158 367 q 164 352 164 359 q 171 340 173 341 q 169 336 169 339 q 178 322 176 324 q 183 317 180 320 q 198 298 192 306 q 227 276 214 280 q 238 266 236 267 q 240 263 241 265 q 257 255 255 255 q 259 253 259 256 q 268 252 264 253 q 275 250 272 250 q 292 249 287 248 q 299 253 297 250 q 315 249 306 250 q 330 250 324 248 q 326 235 324 236 q 325 231 328 234 q 310 222 313 222 q 306 218 307 222 q 290 208 298 214 q 276 204 276 208 q 274 198 276 200 q 252 199 256 200 q 249 193 249 198 q 235 195 240 193 q 227 196 230 196 q 210 197 212 198 q 207 196 208 196 q 196 202 200 198 q 187 210 191 206 q 157 212 166 203 q 143 214 147 212 q 135 215 139 215 q 125 227 127 225 q 119 227 123 229 q 112 234 116 231 q 107 244 108 237 q 98 252 100 246 q 89 259 96 257 q 77 272 88 267 q 71 286 78 282 q 66 298 63 291 q 62 308 63 302 q 58 322 61 314 q 56 330 56 326 q 55 339 56 335 l 50 359 q 48 369 50 363 q 44 382 46 375 q 43 396 44 394 q 42 401 42 398 q 42 417 43 412 q 44 424 42 421 q 42 434 42 428 q 43 447 43 440 q 43 459 42 458 q 44 462 44 459 q 44 474 46 470 q 47 481 43 478 q 46 499 44 492 q 44 510 47 507 q 51 526 50 526 q 52 529 52 526 q 52 542 54 535 q 52 557 51 549 q 56 567 54 562 q 59 577 58 572 q 60 592 61 591 q 61 595 59 592 q 66 605 66 602 q 67 611 66 609 q 74 625 74 622 q 75 630 74 628 q 94 657 85 652 q 102 672 100 667 q 107 685 104 678 q 124 706 118 701 q 131 720 130 710 q 137 729 134 728 q 139 733 139 729 q 154 743 149 735 q 164 755 164 751 q 166 762 165 759 q 180 770 176 765 q 191 782 191 778 q 196 786 192 786 q 203 795 203 793 q 204 800 203 797 q 221 808 218 805 q 225 812 223 811 q 236 815 234 815 q 240 819 237 816 l 261 838 q 273 844 269 838 q 284 850 276 850 q 292 859 287 857 q 299 866 297 861 q 325 878 318 874 q 335 889 332 881 q 351 896 348 897 q 355 899 354 895 q 377 912 370 910 q 392 918 385 915 q 406 927 404 927 q 417 932 415 931 q 421 937 420 933 q 434 938 430 935 q 446 944 439 941 q 459 949 454 949 q 466 956 463 949 q 484 959 482 960 q 488 960 485 957 q 499 964 497 965 q 503 963 500 963 q 518 968 510 967 q 533 975 527 969 q 544 976 539 973 q 554 982 549 979 q 569 983 562 979 q 581 984 576 987 q 594 989 591 988 q 600 990 598 990 q 611 990 607 988 q 617 992 614 992 q 628 993 625 994 q 632 992 630 992 q 642 995 636 994 q 655 996 648 996 q 666 996 664 995 q 671 996 668 996 q 687 997 683 995 q 694 998 691 999 q 702 996 698 998 q 709 991 706 994 m 344 -265 q 325 -266 329 -265 q 317 -265 321 -267 q 299 -263 305 -261 q 286 -261 293 -264 q 264 -261 268 -257 q 246 -255 249 -253 q 240 -255 242 -256 q 227 -252 227 -253 q 225 -252 226 -252 q 212 -252 214 -253 q 208 -250 211 -250 q 176 -249 187 -252 q 141 -264 151 -256 q 139 -274 139 -271 q 141 -284 138 -278 q 149 -292 143 -290 q 154 -302 155 -295 q 162 -306 160 -303 q 170 -310 165 -309 q 183 -317 180 -317 q 189 -317 187 -317 q 210 -325 207 -324 q 220 -326 215 -326 q 229 -326 225 -325 q 242 -328 242 -332 q 246 -326 242 -325 q 254 -326 249 -325 q 263 -328 259 -326 q 299 -318 287 -324 q 321 -306 310 -313 q 334 -297 333 -295 q 337 -299 335 -299 q 343 -295 340 -297 q 348 -288 345 -293 q 362 -282 358 -286 q 358 -274 366 -278 q 344 -265 349 -271 "},"z":{"x_min":-42.046875,"x_max":762.515625,"ha":568,"o":"m 743 -66 q 732 -76 733 -74 q 728 -81 731 -78 q 721 -90 725 -86 q 713 -97 717 -93 q 695 -111 699 -109 q 687 -118 690 -112 q 674 -120 675 -120 q 670 -120 672 -119 q 651 -128 655 -128 q 645 -132 647 -127 q 631 -138 633 -134 q 626 -142 629 -142 q 609 -151 609 -151 q 592 -155 600 -155 q 581 -160 587 -158 q 568 -164 575 -161 q 546 -166 552 -165 q 538 -169 541 -166 q 530 -167 531 -168 q 523 -169 529 -166 q 507 -162 511 -160 q 497 -164 504 -165 q 480 -160 484 -158 q 473 -165 476 -162 q 458 -159 465 -162 q 440 -155 451 -155 q 427 -151 428 -149 q 423 -151 427 -153 q 408 -143 415 -146 q 400 -134 402 -139 q 381 -130 383 -132 q 374 -127 378 -128 q 364 -121 364 -120 q 359 -119 363 -122 q 349 -113 352 -112 q 343 -112 345 -113 l 328 -104 q 317 -92 321 -97 q 309 -88 311 -92 q 299 -85 306 -85 q 286 -76 295 -78 q 272 -66 276 -74 q 255 -59 261 -59 q 248 -52 249 -59 q 236 -47 238 -52 q 225 -42 233 -42 q 200 -24 203 -31 q 188 -22 189 -24 q 184 -17 187 -20 q 168 -14 173 -13 q 161 -12 164 -14 q 151 -6 154 -8 q 143 -1 149 -4 q 127 6 130 5 q 123 10 124 8 q 112 12 115 12 q 107 16 109 13 q 90 22 92 24 q 84 21 88 20 q 52 28 61 29 q 37 27 44 27 q 16 28 23 31 q 5 25 10 25 q -18 27 -9 27 q -36 25 -27 27 q -40 37 -39 36 q -42 40 -42 37 q -33 56 -37 51 q -21 65 -28 62 l -8 75 q 11 84 5 84 q 17 93 17 85 q 33 95 27 90 q 48 100 40 100 q 59 99 54 100 q 69 97 65 97 q 86 98 81 99 q 94 97 90 97 q 116 105 113 104 q 128 114 126 113 q 134 118 131 115 q 164 138 154 131 q 172 146 169 142 q 177 153 174 150 q 189 161 185 155 q 200 169 193 166 q 210 179 208 177 q 215 181 212 180 q 225 190 222 185 q 236 198 229 195 q 244 208 240 204 q 255 217 249 212 q 265 225 264 222 q 269 227 265 227 q 280 238 278 236 q 283 242 282 241 q 288 247 286 245 q 293 255 291 249 q 303 263 301 256 q 313 271 306 269 q 328 290 324 287 q 337 298 333 293 l 348 310 q 360 326 358 324 q 364 330 362 329 q 377 345 375 343 q 382 349 378 348 q 392 365 390 363 q 396 373 394 367 q 403 379 401 374 q 408 389 405 383 q 419 400 417 398 q 423 402 420 402 q 429 415 425 409 q 440 424 434 421 q 443 433 440 430 q 448 439 446 436 q 462 457 457 455 q 450 470 459 473 q 430 466 440 467 q 417 466 423 465 q 406 465 412 467 q 383 466 396 466 q 362 463 368 461 q 348 463 355 466 q 333 467 335 469 q 328 465 330 466 q 311 465 311 467 q 309 463 311 463 q 298 465 303 466 q 286 466 293 465 q 248 469 257 473 q 241 474 245 472 q 234 476 237 476 q 215 473 219 472 q 204 474 210 474 q 181 471 187 470 q 170 472 176 472 q 162 470 166 472 q 155 470 158 467 q 145 467 147 467 q 137 467 142 466 q 120 461 126 466 q 109 453 115 455 q 94 436 96 443 q 90 423 92 430 q 81 421 84 427 q 73 416 78 416 q 56 403 59 408 q 47 397 54 398 q 36 397 40 400 q 32 387 32 394 l 18 381 q 10 379 14 378 q 2 377 5 379 q -2 381 0 379 q -8 387 -5 383 q -4 396 -5 393 q -5 405 -2 398 q 3 413 1 412 q 6 415 5 413 q 10 426 9 425 q 10 430 10 427 q 18 434 14 431 q 25 439 21 436 q 36 450 35 448 q 40 453 37 451 q 52 464 52 463 q 52 467 51 465 q 65 474 62 470 q 70 481 67 478 q 86 489 82 488 q 89 495 89 489 q 104 504 100 497 q 120 508 119 507 q 122 511 120 510 q 137 516 137 514 q 149 517 149 518 q 151 516 150 516 q 172 527 168 524 q 187 529 187 530 q 188 529 187 529 q 198 531 191 529 q 207 533 204 533 q 217 532 214 531 q 222 530 219 533 q 246 537 230 535 q 265 538 260 539 q 275 538 269 537 q 288 538 286 539 q 293 537 290 537 q 307 537 306 538 q 311 535 309 535 q 324 536 322 537 q 328 535 325 535 q 340 531 335 534 q 352 527 345 527 q 360 526 356 526 q 367 527 364 527 q 375 524 371 526 q 382 522 378 522 q 398 522 397 520 q 401 523 398 524 q 419 520 417 518 q 425 519 421 522 q 461 524 450 520 q 480 524 472 527 q 493 523 492 524 q 496 523 493 522 q 505 525 500 523 q 516 527 510 527 q 537 536 531 534 q 546 534 542 538 q 573 539 565 538 q 591 538 581 541 q 594 522 594 531 q 581 510 583 511 q 576 507 579 508 q 562 491 564 495 q 557 484 560 486 q 546 474 549 474 q 542 470 543 473 q 533 452 537 454 q 529 444 530 450 q 515 428 518 431 q 511 420 512 425 q 496 406 500 416 q 479 383 481 394 q 465 374 477 373 q 453 358 455 360 q 444 355 450 356 q 444 345 446 348 q 440 340 443 343 q 436 335 438 337 q 435 326 434 332 q 419 317 421 320 q 415 313 417 314 q 406 300 412 303 q 398 288 401 297 q 377 277 379 283 q 368 268 375 271 q 358 255 359 257 q 352 250 356 252 q 347 240 348 242 q 344 237 347 238 q 330 228 330 230 q 329 223 330 226 q 314 213 317 212 q 310 211 311 214 q 301 198 307 204 q 288 187 293 189 q 281 181 283 183 q 276 177 279 180 q 267 165 268 172 q 251 156 252 158 q 248 153 250 154 l 233 142 q 221 131 229 139 q 200 120 208 127 q 181 107 192 112 q 168 97 169 99 q 175 93 170 93 q 185 90 180 93 q 201 82 195 82 q 210 77 207 81 q 233 69 223 69 q 240 63 236 65 q 248 61 244 62 q 254 55 250 58 q 264 52 257 52 q 276 45 274 48 q 284 44 279 42 q 293 39 288 42 q 305 35 298 36 q 320 24 306 29 q 326 19 322 21 q 336 17 330 17 q 344 10 339 12 q 352 2 349 9 q 374 -8 364 -1 q 393 -23 383 -14 q 409 -35 409 -27 q 425 -46 420 -44 q 438 -50 431 -48 q 448 -58 447 -55 q 454 -59 448 -61 q 463 -67 462 -65 q 472 -69 465 -70 q 482 -75 474 -74 q 493 -84 489 -77 q 514 -96 511 -84 q 536 -104 529 -103 q 550 -109 543 -105 q 562 -109 557 -107 q 573 -113 567 -112 q 584 -113 579 -113 q 592 -118 590 -113 q 608 -115 599 -113 q 622 -113 617 -118 q 641 -109 636 -112 q 651 -108 647 -105 q 659 -96 655 -101 q 671 -89 663 -92 q 676 -79 674 -84 q 683 -71 678 -74 q 697 -63 691 -63 q 706 -58 704 -62 q 715 -54 714 -58 q 718 -47 716 -50 q 743 -23 739 -36 q 754 -23 751 -20 q 762 -29 758 -27 q 761 -37 759 -35 q 760 -47 763 -40 q 748 -55 746 -54 q 747 -59 750 -56 l 743 -66 "},"w":{"x_min":-89.53125,"x_max":994.71875,"ha":684,"o":"m 623 406 q 619 398 621 402 q 615 389 618 393 q 611 380 613 385 q 604 371 609 375 q 604 363 606 366 q 603 356 603 360 q 598 347 599 354 q 594 333 596 340 q 588 315 587 318 q 588 309 588 311 q 584 290 587 303 q 579 267 579 272 q 575 259 580 261 q 565 231 573 244 q 564 211 568 221 q 557 191 560 202 q 558 183 557 188 q 557 173 560 179 q 554 162 553 164 q 553 158 554 161 q 549 146 548 146 q 550 143 550 146 q 549 128 552 128 q 545 124 546 127 q 543 108 545 108 q 539 107 541 108 q 542 95 542 100 q 539 84 542 90 q 548 65 546 67 q 553 61 550 63 q 543 50 549 54 q 535 39 538 46 q 524 33 529 37 q 514 27 520 29 l 485 12 q 478 6 481 9 q 470 1 474 4 q 463 -2 467 -1 q 455 -6 458 -4 q 447 -1 448 -6 q 439 2 446 4 q 440 16 442 9 q 435 31 438 24 q 427 51 430 44 q 424 66 424 58 q 413 77 415 73 q 411 88 412 81 q 400 105 405 99 q 393 118 396 111 q 392 126 392 122 q 389 132 393 130 q 378 157 383 149 q 368 180 373 172 q 362 198 364 188 q 355 214 358 211 q 351 221 352 217 q 345 237 344 234 q 343 242 345 240 q 335 264 339 256 q 328 279 332 272 q 329 288 330 283 q 325 298 328 293 q 318 311 321 310 q 314 314 316 311 l 303 302 q 300 288 298 290 q 301 284 302 287 q 294 269 297 278 q 284 255 291 261 q 276 238 278 241 q 274 220 272 222 q 275 219 275 218 q 270 210 272 211 q 268 206 268 208 q 264 191 267 196 q 256 184 261 187 q 253 172 255 177 q 246 165 252 168 q 238 149 241 151 q 229 134 231 139 q 223 123 227 128 q 221 111 225 115 q 217 100 218 107 q 208 92 207 93 q 206 89 208 92 q 196 80 200 82 q 191 73 192 78 q 178 68 179 67 q 174 69 177 69 q 160 55 164 59 q 134 40 143 44 q 122 46 127 43 q 111 52 118 50 q 113 67 115 67 q 111 67 112 66 q 104 85 105 81 q 101 101 100 100 q 103 103 103 101 q 97 124 97 120 q 96 135 97 128 q 93 155 96 149 q 93 168 90 161 q 89 179 90 172 q 90 191 88 185 q 86 203 82 204 q 88 206 90 202 q 78 237 78 226 q 75 259 78 248 q 74 266 75 263 q 71 275 73 269 q 70 289 71 288 q 69 293 69 290 q 65 312 65 309 q 63 317 66 316 q 58 337 63 332 q 50 374 48 356 q 45 389 46 386 q 43 397 44 393 q 35 416 36 411 q 31 425 35 421 q 20 446 24 438 q 9 461 16 454 q -6 470 -2 463 q -27 473 -17 472 q -48 472 -36 474 q -59 462 -56 463 q -65 463 -62 461 q -81 460 -75 461 q -89 462 -86 459 q -82 482 -85 480 q -78 488 -80 484 q -71 493 -73 489 q -63 497 -69 496 q -54 510 -54 510 q -44 516 -47 514 q -39 520 -40 518 q -25 524 -27 523 q -21 527 -23 524 q -13 530 -17 529 q -8 537 -9 531 q 7 541 6 539 q 9 543 8 542 q 23 544 16 545 q 36 546 29 543 q 55 546 50 550 q 67 545 61 542 q 74 538 71 542 q 84 535 77 534 q 90 525 88 524 q 96 526 92 526 q 101 520 99 522 q 107 515 104 518 q 118 499 112 500 q 120 489 118 492 q 124 484 122 486 l 128 462 q 135 443 132 446 q 137 435 137 439 q 139 427 137 431 q 150 400 142 408 q 155 384 154 386 q 157 381 157 382 q 161 358 160 363 q 164 347 162 354 q 164 328 164 330 q 166 322 165 325 q 166 307 164 310 q 169 302 168 305 q 167 292 166 298 q 165 284 168 287 q 174 271 172 280 q 180 255 176 263 q 180 235 176 240 q 181 226 184 230 q 185 210 185 211 q 188 208 185 208 q 193 215 193 210 q 196 222 192 219 q 200 236 199 230 q 206 244 200 241 q 210 260 207 257 q 214 265 212 263 q 223 286 219 278 q 223 303 226 295 q 232 314 231 309 q 237 320 233 320 q 239 330 237 326 q 241 341 241 335 q 256 360 246 358 q 261 377 260 370 q 267 387 263 383 q 272 405 272 398 q 278 415 272 412 q 284 430 276 427 q 287 444 284 443 q 293 447 290 444 q 298 455 295 453 q 305 463 301 458 q 315 470 313 469 q 320 474 317 472 q 336 482 332 476 q 349 485 345 480 q 360 491 352 491 q 366 496 364 493 q 373 500 368 499 q 384 492 379 496 q 392 481 389 488 q 392 467 390 472 q 392 459 393 463 q 400 431 396 442 q 402 418 400 424 q 405 406 404 412 q 407 392 405 394 q 406 382 409 389 q 418 359 417 367 q 425 347 419 351 q 429 330 431 330 q 427 326 427 329 q 436 309 432 311 q 436 303 439 306 q 444 282 442 286 q 447 275 446 279 q 451 254 450 256 q 455 249 453 252 q 463 236 462 238 q 466 231 463 233 q 482 245 484 233 q 487 252 486 248 q 491 261 488 256 q 491 284 495 275 q 499 301 497 291 q 507 317 500 310 q 522 356 508 341 q 523 370 518 364 q 531 381 529 375 q 539 403 537 400 q 543 411 541 406 q 548 423 548 420 q 550 430 548 427 q 555 440 554 436 q 556 447 556 443 q 568 467 562 450 q 577 481 572 476 q 580 493 583 486 q 589 501 590 497 q 592 503 588 505 q 594 511 590 508 q 599 516 599 514 q 606 530 606 527 q 613 534 606 533 q 626 562 622 552 q 636 577 629 572 q 644 596 644 592 q 651 602 645 600 q 658 616 657 613 q 663 619 659 619 q 670 630 668 628 q 675 634 671 633 q 687 653 678 647 q 698 671 695 659 q 707 675 705 672 q 712 679 709 678 q 731 695 725 691 q 744 707 741 704 q 748 713 746 710 q 771 728 763 725 q 796 741 790 740 q 825 756 817 750 q 842 765 832 762 q 865 769 859 766 q 874 774 870 771 q 885 775 883 773 q 895 778 888 778 q 906 778 904 777 q 910 779 907 779 q 922 781 921 779 q 925 784 923 784 q 933 782 929 784 q 940 785 937 781 q 962 779 959 782 q 968 773 965 775 q 980 769 976 773 q 990 762 984 765 q 993 747 996 750 q 994 740 990 744 q 986 725 990 735 q 975 718 983 716 q 952 706 956 710 q 945 697 948 702 q 935 696 938 698 q 930 693 933 694 q 924 695 927 695 q 915 695 921 694 q 893 718 899 708 q 876 723 883 724 q 866 728 869 722 q 845 721 850 725 q 817 715 820 722 q 804 706 813 708 q 794 698 798 702 q 784 691 790 694 q 774 678 775 680 q 770 676 773 676 q 758 652 765 656 q 751 642 752 645 q 747 638 750 640 q 741 629 747 630 q 737 618 735 628 q 729 604 731 606 q 727 600 728 603 q 722 590 727 592 q 718 580 717 588 q 711 571 712 577 q 704 562 710 565 q 699 553 704 556 q 695 542 695 550 q 679 524 687 529 q 670 510 679 514 q 661 491 661 496 q 660 482 661 486 l 652 467 q 645 457 645 465 q 640 446 645 448 q 635 430 638 435 q 629 419 632 425 l 623 406 "},"$":{"x_min":-13.5625,"x_max":582.734375,"ha":639,"o":"m 356 1024 q 354 1001 356 1006 q 354 991 351 996 q 354 972 345 980 q 350 946 349 954 q 354 931 351 938 q 354 904 348 919 q 345 865 352 877 q 349 847 347 850 q 354 841 351 843 q 365 843 360 843 q 374 846 370 843 q 392 838 389 841 q 398 836 394 835 q 411 824 411 828 q 431 816 428 816 q 444 810 442 811 q 447 807 446 809 q 461 800 457 804 q 472 794 465 797 q 481 784 478 784 q 488 784 484 785 q 496 779 493 782 q 501 775 499 777 q 511 760 508 763 q 520 754 518 755 q 527 752 523 752 q 533 741 534 743 q 534 737 533 740 q 539 732 535 733 q 546 727 543 731 q 556 718 556 722 q 560 712 557 714 q 558 697 558 704 q 560 685 557 691 q 559 668 557 671 q 562 661 561 666 q 558 647 558 648 q 558 638 558 645 q 541 621 546 625 q 539 604 542 607 q 533 595 535 600 q 523 575 526 580 q 507 561 512 569 q 491 553 495 552 q 473 539 477 541 q 467 530 469 537 q 458 526 461 526 q 453 527 455 527 q 439 529 439 529 q 438 530 439 530 q 434 545 430 542 q 436 553 439 549 q 452 569 450 565 q 455 577 454 572 q 463 591 463 577 q 470 603 467 600 q 473 610 472 606 q 476 627 476 625 q 478 633 477 629 q 480 651 480 648 q 478 659 481 653 q 476 673 477 671 q 473 678 474 675 q 468 686 470 680 q 462 694 466 691 q 456 704 458 702 q 451 709 454 706 q 438 722 442 716 q 423 729 434 728 q 413 742 415 740 q 408 746 411 744 q 397 756 398 755 q 394 759 396 756 q 383 762 386 758 q 377 769 381 766 q 363 770 368 767 q 354 775 358 773 q 337 776 339 778 q 332 775 336 774 q 326 779 329 775 q 320 786 322 784 q 308 790 314 789 q 298 793 302 792 q 277 793 287 794 q 257 790 267 792 q 244 785 248 788 q 236 785 241 782 q 226 776 233 778 q 217 769 219 774 q 204 764 207 766 q 196 760 202 762 q 184 752 187 756 q 179 746 181 748 q 173 733 174 736 q 169 727 172 729 q 170 716 169 720 q 173 708 172 712 q 172 699 173 704 q 170 691 170 695 q 172 676 173 680 q 173 668 172 672 q 175 653 176 653 q 177 649 174 652 q 174 636 173 637 q 177 633 176 636 q 183 628 180 630 q 188 622 185 625 q 202 609 203 613 q 204 609 200 606 q 208 591 206 594 q 214 587 211 588 q 217 580 215 583 q 221 573 219 577 q 233 562 231 564 q 234 558 234 561 q 248 545 241 552 q 257 531 255 539 q 271 518 268 520 q 278 509 275 508 q 282 505 280 510 q 297 499 293 503 q 303 491 301 496 q 310 480 309 481 q 311 476 311 478 q 333 463 328 466 q 341 453 339 459 q 366 424 359 438 q 383 410 377 419 q 401 394 390 401 q 409 381 408 383 q 413 378 411 379 q 431 356 425 364 q 441 349 439 349 q 442 345 443 348 q 454 335 448 340 q 466 322 459 329 q 476 307 469 309 q 484 297 484 299 q 486 293 484 294 q 493 284 491 286 q 497 280 496 283 q 503 272 500 275 q 508 264 507 269 q 516 250 514 260 q 526 239 523 245 q 534 226 530 233 q 544 204 542 211 q 556 195 546 196 q 557 183 553 188 q 560 170 561 179 q 565 162 564 168 q 569 154 567 157 q 571 138 569 138 q 573 135 572 138 q 577 123 577 126 q 577 118 576 120 q 581 100 581 101 q 580 96 580 99 q 582 85 583 86 q 581 81 581 84 q 582 71 581 75 q 577 65 583 67 q 577 48 583 54 q 573 31 572 42 q 563 12 567 17 q 557 5 560 8 q 553 -1 558 1 q 548 -10 548 -4 q 541 -16 542 -12 q 534 -21 541 -20 q 527 -35 530 -35 q 526 -40 524 -36 q 518 -46 520 -42 q 512 -52 516 -50 q 501 -62 501 -62 q 497 -65 500 -62 q 477 -80 482 -78 q 472 -86 474 -82 q 465 -92 469 -89 q 457 -96 462 -94 q 450 -101 453 -99 q 430 -116 440 -111 q 416 -129 417 -128 q 413 -132 415 -130 q 403 -137 406 -132 q 393 -143 400 -141 q 381 -156 383 -153 q 371 -161 378 -160 q 360 -168 366 -165 q 349 -176 355 -170 q 335 -179 339 -179 q 329 -183 332 -180 q 330 -206 328 -198 q 326 -213 326 -210 q 329 -222 326 -217 q 322 -236 322 -236 q 321 -253 322 -252 q 317 -275 325 -265 q 316 -288 316 -284 q 317 -295 317 -293 q 314 -314 316 -309 q 309 -322 311 -318 q 308 -333 310 -329 q 303 -343 306 -337 q 289 -345 291 -341 q 284 -351 287 -348 q 269 -352 272 -352 q 252 -349 256 -347 q 242 -349 249 -352 q 242 -333 244 -335 q 244 -319 245 -324 q 244 -309 242 -314 q 245 -297 248 -298 q 244 -294 242 -297 q 245 -282 242 -287 q 249 -271 248 -276 q 248 -254 248 -256 q 246 -249 248 -252 q 248 -238 249 -242 q 253 -230 248 -233 q 247 -215 245 -215 q 246 -212 249 -215 q 226 -214 231 -211 q 214 -213 214 -212 q 211 -214 214 -214 l 193 -214 q 176 -210 181 -210 q 166 -207 170 -210 q 159 -208 162 -207 q 151 -208 155 -208 q 144 -206 149 -208 q 132 -207 139 -204 q 120 -203 122 -206 q 116 -200 119 -200 l 101 -195 l 84 -187 q 69 -180 70 -181 q 66 -179 69 -179 q 48 -168 52 -170 q 39 -159 40 -161 q 33 -158 37 -157 q 28 -151 31 -154 q 23 -143 25 -149 q 10 -130 13 -130 q 4 -116 5 -116 q -2 -101 -1 -104 q -6 -90 -6 -94 q -8 -81 -5 -86 q -10 -73 -9 -77 q -12 -62 -12 -69 q -12 -48 -13 -55 q -13 -35 -12 -42 q -8 -27 -10 -31 q -8 -18 -6 -24 q -10 -4 -12 -5 q -9 0 -9 -2 q -8 23 -9 20 q -2 35 -2 32 q -2 42 -1 39 l 2 63 q 8 71 6 66 q 16 80 9 77 q 20 92 18 89 q 25 96 21 94 q 30 104 27 101 q 36 112 33 107 q 46 122 44 120 q 47 126 47 123 q 63 138 61 135 q 71 147 67 142 q 80 154 74 151 q 95 169 92 166 q 103 174 99 172 q 119 187 113 181 q 132 196 124 193 q 147 206 146 204 q 150 210 149 208 q 165 215 158 211 q 177 221 176 219 q 179 222 177 222 q 193 226 192 225 q 196 227 195 227 q 210 227 204 229 q 221 225 215 226 q 240 222 234 225 q 257 221 244 223 q 269 215 265 218 q 272 200 274 211 q 289 188 286 191 q 291 179 293 185 q 299 166 299 168 q 301 162 298 164 q 303 142 299 154 q 297 123 299 123 q 288 115 291 115 q 282 113 286 115 q 274 99 275 100 q 274 96 274 99 q 267 92 271 94 q 257 92 263 89 q 239 84 240 88 q 234 81 238 81 q 226 104 229 99 q 223 116 223 109 q 220 134 223 131 q 217 142 217 137 q 200 150 211 147 q 189 158 191 158 q 187 161 188 158 q 172 165 180 162 q 157 165 165 168 q 147 160 150 161 q 142 157 143 160 q 130 153 134 155 q 126 143 126 150 q 112 131 113 132 q 105 122 104 123 q 105 116 105 120 q 92 100 96 104 q 89 88 88 96 q 78 73 80 75 q 74 70 77 71 q 76 56 75 56 q 77 52 77 55 q 75 37 73 43 q 74 15 75 21 q 73 4 73 9 q 75 -6 75 -4 q 74 -10 74 -8 q 75 -29 73 -21 q 78 -42 77 -37 q 89 -64 86 -58 q 96 -74 92 -70 q 107 -85 103 -85 q 116 -98 115 -100 q 119 -99 118 -96 q 134 -108 128 -105 q 142 -113 139 -109 q 153 -118 145 -118 q 163 -126 155 -124 q 173 -132 170 -127 q 191 -137 184 -137 q 200 -142 198 -138 q 219 -144 211 -141 q 233 -143 226 -147 q 256 -136 246 -138 q 275 -135 265 -134 q 283 -138 279 -137 q 293 -139 287 -139 q 325 -135 317 -139 q 343 -134 333 -131 q 356 -125 351 -124 q 363 -120 362 -126 q 379 -113 377 -116 q 387 -108 382 -111 q 399 -97 397 -101 q 408 -92 401 -93 q 419 -79 419 -81 q 421 -74 419 -77 q 437 -65 436 -66 q 439 -61 438 -63 q 449 -52 448 -54 q 450 -48 450 -51 q 458 -43 457 -48 q 465 -35 459 -37 q 479 -10 474 -16 q 485 6 484 -4 q 488 17 488 16 q 491 21 488 18 q 491 37 491 35 q 488 40 491 39 q 491 52 493 52 q 488 55 489 52 q 486 70 485 70 q 486 73 488 70 q 482 90 482 90 q 474 113 477 109 q 472 124 473 120 q 469 132 470 127 q 464 141 466 135 q 459 151 462 147 q 453 161 454 157 q 450 168 451 165 q 441 182 440 180 q 439 183 442 184 q 426 204 431 202 q 423 212 421 206 q 410 227 415 222 q 402 238 405 231 q 392 250 394 248 q 387 256 389 252 q 375 270 379 268 q 368 278 371 272 q 359 286 362 286 q 358 291 356 287 q 347 302 351 293 q 337 312 339 311 q 333 316 335 313 l 322 330 q 311 341 313 339 q 306 345 309 343 q 294 359 299 349 q 288 364 291 362 q 283 371 284 366 q 278 377 280 374 q 269 379 275 379 q 257 392 260 392 q 250 402 253 401 q 245 406 248 404 q 236 420 236 419 q 227 426 229 425 q 223 430 226 427 q 210 446 214 443 q 203 451 207 448 q 187 467 196 461 q 179 482 180 482 q 174 484 177 482 q 164 497 166 496 q 158 507 162 504 q 151 516 153 510 q 137 531 146 519 q 130 540 131 538 q 128 545 130 542 q 123 554 126 550 q 119 564 120 558 q 112 581 115 579 q 108 596 108 594 q 107 600 108 598 q 103 612 103 607 q 101 622 103 617 q 101 630 101 626 q 100 640 100 633 q 98 659 97 653 q 100 672 99 666 q 100 685 99 682 q 101 691 101 689 q 103 704 104 702 q 103 708 103 705 q 111 725 109 722 q 115 728 113 727 q 123 743 118 737 q 132 756 128 748 q 149 771 146 766 q 158 779 151 777 q 167 790 164 789 q 170 796 170 792 q 188 807 185 804 q 195 812 191 809 q 218 823 204 819 q 236 826 231 823 q 244 835 241 828 q 250 838 248 836 q 257 842 253 841 q 275 849 272 842 q 282 847 278 846 q 290 847 286 847 q 294 855 297 850 q 297 864 291 861 q 295 882 294 874 q 291 897 297 889 q 292 907 294 903 q 294 915 290 911 q 290 931 288 923 q 275 946 278 942 q 265 952 272 950 q 271 967 271 964 q 275 973 272 971 q 279 994 279 980 q 295 1002 293 999 q 301 1007 298 1005 q 311 1015 314 1014 q 311 1020 309 1017 q 324 1020 322 1021 q 328 1018 325 1020 q 337 1025 335 1025 q 341 1028 339 1025 q 349 1026 347 1029 q 356 1024 351 1024 "},"™":{"x_min":-42.671875,"x_max":820.84375,"ha":795,"o":"m 812 733 q 796 714 801 717 q 785 699 789 704 q 769 691 769 691 q 760 685 763 689 q 754 679 758 682 l 739 674 q 731 669 735 671 q 724 663 727 667 q 705 657 709 657 q 697 655 701 657 q 685 651 689 651 q 676 649 680 652 q 670 653 674 655 q 660 655 666 652 q 645 663 649 663 q 641 668 641 663 q 630 680 633 679 q 622 683 626 682 q 619 693 623 690 q 621 698 615 695 q 609 717 615 710 q 606 733 610 728 q 599 743 602 737 q 596 759 600 759 q 593 771 599 766 q 588 786 587 775 q 588 798 590 790 q 580 807 587 805 q 564 809 567 815 q 558 798 561 804 q 559 792 561 796 q 558 784 557 788 q 553 774 554 777 q 554 769 552 771 q 550 758 552 762 q 545 750 549 754 q 537 744 542 746 q 530 737 531 743 q 516 729 519 733 q 511 721 514 725 q 513 714 518 717 q 505 705 508 710 q 495 702 499 705 q 485 702 492 699 q 480 695 482 698 q 476 690 478 693 q 461 692 461 690 q 459 697 462 694 q 457 710 454 709 q 459 716 459 712 q 457 733 457 725 q 453 747 458 740 q 450 767 455 763 q 450 780 451 774 q 448 793 448 786 q 445 800 447 796 q 446 809 443 805 q 438 825 438 819 q 436 838 438 831 q 426 845 428 843 q 424 851 424 847 q 411 852 413 853 q 409 846 408 851 q 398 834 400 836 q 396 828 397 831 q 383 816 386 817 q 379 809 381 815 q 367 792 364 807 q 356 776 360 785 q 351 754 351 767 l 341 737 q 334 721 335 721 q 332 718 333 721 q 325 708 328 710 q 321 702 322 706 q 312 700 314 704 q 306 695 310 697 q 301 683 306 687 q 294 674 297 679 q 284 670 286 675 q 280 657 283 664 q 267 653 269 656 q 264 647 265 651 q 247 655 249 651 q 242 661 245 659 q 223 654 225 657 q 215 652 222 651 q 205 647 208 649 q 199 644 202 644 q 174 645 181 645 q 161 644 168 645 q 148 651 149 653 q 143 649 147 648 q 127 661 131 661 q 105 669 109 667 q 97 676 100 671 q 90 687 92 685 q 85 693 89 690 q 82 701 85 698 q 78 709 80 705 q 77 721 78 721 q 77 724 77 721 q 77 733 78 729 q 74 741 75 736 q 73 767 73 760 q 74 779 74 774 q 77 788 75 784 q 78 794 78 792 q 80 815 81 811 q 78 823 78 819 q 82 839 82 836 q 81 845 81 842 q 81 853 80 850 q 81 864 82 857 q 59 865 67 861 l 36 859 q 14 857 20 855 q 2 855 8 858 q -8 845 -5 846 q -14 847 -10 845 q -29 845 -21 842 q -40 849 -36 847 q -36 866 -46 861 q -25 881 -27 870 q -17 887 -20 884 q -8 891 -14 889 q 14 895 8 892 q 24 903 20 899 q 37 902 33 903 q 50 902 42 902 l 81 912 q 86 926 88 915 q 88 949 85 937 q 89 956 88 952 q 88 965 90 961 q 92 983 92 980 q 93 992 93 986 q 103 999 103 996 q 105 1003 104 1001 q 121 1013 112 1009 q 135 1024 130 1017 q 149 1030 145 1025 q 158 1040 153 1036 q 172 1041 165 1040 q 185 1039 180 1041 q 183 1022 181 1032 q 180 1009 183 1011 q 174 1003 177 1006 q 170 980 173 988 q 162 961 168 972 q 173 935 166 942 q 191 933 183 935 q 210 933 200 930 q 222 925 221 927 q 226 922 223 922 q 241 915 238 918 q 246 910 244 912 q 257 906 255 906 q 264 904 260 906 q 271 896 267 900 q 276 889 275 892 q 280 880 279 881 q 280 873 282 878 q 286 864 283 866 q 290 861 290 862 q 297 839 297 845 q 301 832 297 834 q 301 819 302 820 q 299 815 299 817 q 307 801 305 809 q 314 786 309 793 q 324 791 320 789 q 328 800 328 793 q 340 816 336 805 q 347 824 345 819 q 355 831 349 828 q 364 846 360 841 q 371 859 368 851 q 383 868 379 862 q 397 877 387 874 q 411 892 406 891 q 417 900 415 893 q 426 902 424 899 q 435 906 428 904 q 447 912 446 910 q 451 918 448 915 q 465 918 461 918 q 477 919 469 918 q 489 908 488 911 q 495 906 489 904 q 500 891 495 899 q 505 870 499 881 q 510 860 510 865 q 511 853 510 855 q 518 833 516 836 q 520 823 520 830 q 531 828 529 823 q 535 841 534 834 q 556 854 549 849 q 568 868 562 859 q 577 871 573 869 q 587 874 580 873 q 602 887 600 887 q 606 889 603 887 q 615 889 611 887 q 621 889 618 891 q 637 878 634 881 q 637 872 640 876 q 647 855 642 858 q 649 847 652 851 q 653 840 652 845 q 656 834 653 836 q 658 814 659 817 q 660 804 657 811 q 660 790 657 794 q 660 778 663 785 q 670 765 671 767 q 670 765 670 763 q 677 753 676 755 q 679 750 678 751 q 693 730 689 733 q 704 725 697 727 q 723 712 718 714 q 732 712 728 709 q 752 714 750 713 q 756 713 754 716 q 767 720 763 716 q 777 728 770 725 q 788 750 785 743 q 797 759 790 756 q 812 771 811 769 q 817 773 813 773 q 819 754 817 756 q 819 752 822 752 l 812 733 m 155 835 q 158 830 158 832 q 160 820 158 827 q 153 806 151 808 q 154 800 155 804 q 151 790 151 796 q 147 777 150 784 q 153 771 154 775 q 151 762 151 767 q 163 747 161 751 q 165 740 165 743 q 174 730 173 739 q 184 718 176 721 q 196 710 191 713 q 210 709 200 708 q 245 702 230 699 q 243 727 248 714 q 241 751 238 740 q 234 767 234 766 q 229 781 233 775 q 229 792 226 786 q 218 809 222 804 q 217 820 214 813 q 203 834 206 820 q 195 836 198 834 q 190 840 192 838 q 186 844 188 842 q 179 845 184 846 q 171 852 174 849 q 161 857 168 855 q 159 846 161 850 q 155 835 157 842 "},"\\":{"x_min":-39.609375,"x_max":721.625,"ha":619,"o":"m 476 -77 q 484 -86 482 -80 q 493 -93 485 -93 q 514 -118 510 -111 q 529 -131 518 -124 q 545 -153 535 -141 q 560 -169 554 -166 q 573 -188 560 -183 q 576 -206 579 -199 q 588 -210 588 -208 q 590 -212 588 -211 q 598 -221 598 -217 q 602 -229 599 -225 q 619 -233 618 -230 q 622 -238 619 -236 q 634 -248 629 -245 q 642 -257 640 -252 q 650 -260 645 -260 q 659 -263 655 -260 q 670 -272 668 -272 q 675 -275 672 -272 q 683 -278 678 -278 q 691 -280 689 -278 q 704 -290 695 -282 q 713 -301 712 -298 l 721 -326 q 712 -337 714 -326 q 702 -349 709 -348 q 687 -355 689 -354 q 683 -358 686 -356 q 661 -354 668 -356 q 649 -354 655 -351 q 638 -347 642 -349 q 626 -343 633 -345 q 606 -340 614 -340 q 589 -328 596 -336 q 572 -316 581 -321 q 564 -303 568 -302 q 556 -302 561 -305 q 551 -293 549 -298 q 546 -284 553 -288 q 533 -275 535 -282 q 526 -274 530 -276 q 518 -271 522 -271 q 514 -265 515 -268 q 511 -257 514 -261 q 503 -252 508 -255 q 495 -248 497 -250 q 478 -228 482 -231 q 476 -218 474 -225 q 465 -209 466 -214 q 458 -203 465 -204 q 453 -187 455 -189 q 450 -187 451 -184 q 436 -165 439 -174 q 425 -155 425 -157 q 424 -150 424 -153 q 411 -137 415 -141 q 409 -130 406 -134 q 394 -117 400 -126 q 383 -99 389 -108 q 375 -85 379 -92 q 367 -73 371 -78 q 358 -58 360 -61 q 349 -43 349 -47 q 348 -36 349 -39 q 341 -26 341 -31 q 339 -20 341 -21 q 336 -14 337 -20 q 333 -5 335 -8 l 325 10 q 310 31 310 24 q 302 42 310 37 q 295 60 297 56 q 294 66 294 63 q 280 88 286 73 q 276 98 278 92 q 274 111 274 104 q 260 128 264 122 q 252 141 256 135 q 240 173 241 162 q 227 195 238 184 q 217 218 227 207 q 208 242 218 231 q 199 268 198 253 q 191 281 192 278 q 189 288 189 284 q 180 307 179 299 q 168 328 172 324 q 166 339 165 333 q 158 358 158 348 q 147 378 157 368 q 145 399 147 392 q 141 413 143 406 q 130 431 135 428 q 126 442 131 438 q 123 453 122 446 q 118 461 118 455 q 115 472 118 467 q 108 486 107 485 q 108 489 109 488 q 101 506 103 504 q 96 511 99 508 q 95 518 99 515 q 94 526 92 522 q 78 565 88 552 q 69 594 69 579 q 63 602 65 598 q 59 614 62 607 q 52 632 52 628 q 48 644 51 637 q 42 659 43 657 q 43 663 42 660 q 37 675 40 670 q 36 687 35 680 q 29 698 32 689 q 22 718 25 708 q 15 737 18 728 q 9 748 12 746 l 1 793 q -2 813 2 798 q -13 830 -6 827 q -14 841 -13 832 q -18 859 -16 850 q -24 876 -21 869 q -29 887 -27 884 q -30 904 -27 900 q -36 910 -33 907 q -32 925 -29 923 q -35 929 -35 926 q -39 950 -40 944 q -36 975 -39 969 q -32 990 -33 980 q -21 991 -25 990 q -14 999 -16 992 q 0 993 -4 998 q 10 986 4 988 q 13 970 12 972 q 16 965 14 968 q 21 950 21 952 q 23 943 23 948 q 24 935 23 938 q 33 921 32 922 q 39 918 35 919 q 39 908 37 912 q 37 895 40 903 q 48 878 43 888 q 51 868 52 869 q 56 857 55 859 q 58 854 58 855 q 71 818 63 835 q 77 792 80 801 q 84 773 85 777 q 88 766 82 769 q 92 748 92 751 q 94 741 92 744 q 101 722 100 727 q 103 714 103 717 q 112 689 112 698 q 122 674 112 680 q 122 666 123 670 q 124 659 122 661 q 132 636 131 640 q 138 629 134 632 q 139 616 137 617 q 142 613 141 615 q 150 592 151 596 q 151 583 149 587 q 158 570 157 572 q 158 565 158 568 q 170 551 164 558 q 179 537 176 543 q 185 514 181 523 q 184 495 189 505 l 192 478 q 196 466 196 467 q 195 463 196 465 q 206 448 203 451 q 208 442 210 446 q 215 421 215 427 q 217 411 215 416 q 232 398 227 408 q 238 381 237 389 q 244 369 244 373 q 245 363 245 366 q 254 348 249 354 q 261 336 259 343 q 256 316 259 322 q 259 307 255 311 q 268 301 263 303 q 272 286 265 291 q 287 276 279 282 q 297 252 295 259 q 303 238 299 245 q 307 224 303 225 q 313 221 310 223 q 319 208 318 211 q 326 200 320 204 q 333 184 332 188 q 336 176 333 180 q 342 164 343 166 q 341 161 341 162 q 351 144 351 150 q 352 134 352 138 q 361 122 359 126 q 362 116 363 119 q 371 103 368 109 q 382 92 374 97 q 389 73 387 81 q 392 58 392 65 q 398 52 397 55 q 398 44 398 48 q 411 35 411 35 q 413 33 411 36 q 420 20 416 27 q 423 6 424 13 q 430 0 427 1 q 436 -4 434 -1 q 440 -13 438 -10 q 444 -18 443 -16 q 447 -27 447 -23 q 448 -36 447 -32 q 459 -44 458 -39 q 467 -52 461 -50 q 470 -65 469 -67 q 474 -66 472 -63 l 476 -77 "},"~":{"x_min":41.125,"x_max":691.78125,"ha":734,"o":"m 137 305 q 123 290 124 294 q 118 286 122 287 q 111 267 116 269 q 104 261 107 265 q 104 240 103 250 q 96 230 99 231 q 94 223 93 229 q 82 219 89 221 q 71 211 74 218 q 56 215 61 210 q 43 222 51 219 q 41 244 43 233 q 54 257 39 255 q 61 275 52 272 q 69 293 63 287 q 82 311 80 311 q 90 327 86 325 q 93 336 93 329 q 103 343 101 340 q 105 351 104 345 q 118 362 118 362 q 120 363 119 363 l 132 379 q 140 389 139 389 q 147 390 141 389 q 161 406 154 396 q 179 417 170 411 q 191 425 185 421 q 203 436 196 430 q 223 440 219 438 q 233 442 227 442 q 259 444 255 439 q 267 444 263 443 q 274 446 271 446 q 288 443 287 443 q 299 443 294 443 q 310 442 303 443 q 318 439 314 440 q 325 436 322 438 q 332 432 328 434 q 339 430 336 431 q 358 432 354 431 q 367 427 363 434 q 377 428 371 430 q 386 425 382 427 q 401 425 400 427 q 405 424 402 424 q 425 421 412 427 q 438 419 430 419 q 448 413 446 419 q 463 410 458 411 q 474 408 469 409 q 482 402 477 404 q 491 394 488 400 q 505 392 500 394 q 519 389 511 389 q 530 378 523 382 q 546 379 538 379 q 558 373 554 378 q 565 373 561 374 q 573 374 569 373 q 588 377 584 378 q 596 377 592 377 q 612 382 611 381 q 614 385 613 383 q 622 386 618 386 q 628 392 626 386 q 649 407 645 401 q 663 409 652 413 q 680 420 675 419 q 691 419 686 421 q 686 406 690 411 q 682 392 682 401 q 668 375 672 378 q 661 366 663 371 q 654 360 657 363 q 645 355 651 358 q 628 329 634 335 q 615 317 621 324 q 602 312 606 317 q 596 303 599 307 q 583 299 588 302 q 573 291 577 295 q 556 286 560 288 q 545 286 552 283 q 531 276 533 276 q 527 278 529 276 q 518 275 524 275 q 505 275 512 275 q 477 280 491 276 q 458 291 463 284 q 434 293 440 291 q 425 299 428 295 q 417 299 420 297 q 411 303 413 302 q 390 307 394 307 q 379 309 386 307 q 363 316 368 316 q 355 320 358 316 q 325 323 337 316 q 294 332 313 330 q 279 335 284 337 q 260 338 271 340 q 242 344 249 336 q 225 341 230 340 q 217 343 221 343 q 202 341 203 340 q 199 341 200 341 q 183 337 184 339 q 180 336 181 336 q 165 335 168 335 q 151 322 153 328 q 141 314 149 316 l 137 305 "},"-":{"x_min":35.265625,"x_max":649.578125,"ha":688,"o":"m 459 341 q 470 339 466 339 q 477 340 473 340 q 484 338 481 340 q 493 339 486 336 q 508 341 503 340 q 519 340 514 341 q 534 339 533 337 q 538 341 535 340 q 550 340 545 341 q 560 343 554 339 q 571 351 569 352 q 575 352 573 349 q 592 352 591 349 q 598 355 594 355 q 622 351 614 351 q 636 348 630 351 q 648 345 647 347 q 648 339 649 343 q 647 320 651 322 q 647 311 644 318 q 637 307 640 309 q 633 302 634 305 q 615 297 615 297 q 599 291 602 293 q 596 293 596 290 q 579 284 583 288 q 555 280 560 283 q 541 276 550 276 q 516 284 534 290 q 497 289 505 287 q 484 288 489 291 q 470 295 470 298 q 466 293 469 293 q 447 295 447 298 q 442 291 447 291 q 424 290 424 294 q 406 290 415 291 q 400 288 404 290 q 390 287 397 287 q 383 290 386 288 q 374 291 379 291 q 356 293 360 293 q 341 292 345 291 q 332 293 336 294 q 321 290 328 293 q 309 291 314 287 q 293 288 301 287 q 275 288 286 290 q 248 288 255 290 q 237 286 242 286 q 215 286 227 286 q 191 287 203 287 q 178 286 181 286 q 172 284 174 287 q 152 284 158 286 q 139 283 146 283 q 125 285 128 287 q 119 284 122 283 q 88 282 96 284 q 72 281 77 280 q 65 279 67 282 q 41 293 46 288 q 35 309 36 298 q 39 315 37 311 q 43 322 40 318 q 59 329 56 325 q 75 330 67 326 l 92 340 q 118 349 113 347 q 137 359 135 359 q 145 355 142 358 q 151 351 147 352 l 168 351 q 185 348 176 349 q 203 345 193 347 q 214 345 210 344 q 223 344 218 347 q 240 342 237 343 q 246 344 244 341 q 263 343 257 344 q 276 341 269 341 q 289 339 286 341 q 295 340 293 337 q 323 344 313 341 q 347 344 333 347 q 364 341 358 340 q 377 340 370 343 q 394 342 393 341 q 397 343 394 343 l 413 340 l 459 341 "},"Q":{"x_min":75.96875,"x_max":1477.171875,"ha":1177,"o":"m 805 -134 q 786 -136 792 -135 q 777 -143 779 -137 q 762 -154 765 -151 q 747 -158 747 -160 q 746 -158 747 -157 q 731 -165 731 -166 q 713 -172 722 -172 q 698 -179 702 -177 q 689 -184 694 -181 q 675 -191 678 -191 q 672 -193 672 -191 q 663 -193 666 -192 q 656 -196 660 -195 q 644 -204 648 -203 q 637 -210 640 -206 q 626 -210 630 -206 q 615 -212 622 -214 q 597 -218 602 -218 q 591 -223 592 -218 q 607 -229 604 -230 q 611 -229 609 -229 q 624 -233 623 -234 q 626 -233 625 -231 q 640 -239 638 -240 q 644 -240 641 -238 q 660 -246 652 -242 q 675 -250 667 -249 q 686 -261 683 -252 q 699 -265 698 -265 q 704 -265 701 -264 q 711 -269 706 -267 q 721 -275 716 -272 q 737 -282 736 -280 q 752 -284 750 -283 q 770 -291 765 -290 q 784 -295 775 -293 q 793 -301 792 -302 q 797 -302 794 -299 q 812 -309 808 -306 q 819 -313 816 -311 q 845 -322 835 -316 q 869 -332 854 -329 q 876 -339 873 -337 q 883 -341 880 -340 q 894 -343 889 -341 q 903 -348 899 -345 q 915 -352 914 -351 q 919 -355 916 -354 q 936 -362 933 -360 q 946 -363 940 -363 q 971 -375 964 -371 q 988 -379 979 -379 q 1003 -387 999 -386 q 1009 -387 1006 -387 q 1033 -402 1024 -400 q 1048 -412 1043 -405 q 1060 -416 1056 -413 q 1074 -417 1064 -419 q 1080 -422 1077 -420 q 1086 -427 1083 -424 q 1106 -434 1100 -428 q 1125 -440 1112 -440 q 1141 -448 1139 -447 q 1146 -448 1143 -448 q 1157 -453 1150 -453 q 1173 -457 1163 -454 q 1185 -461 1180 -459 q 1197 -465 1190 -463 q 1214 -467 1200 -465 q 1221 -469 1218 -469 q 1230 -470 1224 -469 q 1247 -472 1243 -473 q 1256 -472 1252 -472 q 1266 -472 1262 -472 q 1275 -473 1269 -473 q 1303 -472 1291 -472 q 1316 -468 1313 -467 q 1322 -467 1319 -469 q 1330 -467 1325 -466 q 1340 -466 1334 -467 q 1366 -441 1359 -450 q 1380 -421 1374 -432 q 1380 -404 1382 -413 q 1382 -386 1379 -394 q 1384 -373 1386 -375 q 1386 -367 1383 -370 q 1380 -346 1382 -354 q 1384 -335 1379 -339 q 1367 -316 1374 -318 q 1355 -294 1360 -298 q 1346 -283 1349 -290 q 1332 -267 1341 -279 q 1319 -261 1323 -264 q 1314 -252 1315 -259 q 1306 -250 1310 -253 q 1299 -244 1303 -246 q 1275 -238 1285 -241 q 1257 -238 1265 -234 q 1232 -230 1237 -226 q 1220 -237 1227 -234 q 1212 -252 1214 -250 q 1207 -255 1211 -255 q 1203 -273 1203 -269 q 1201 -279 1203 -276 q 1175 -281 1181 -278 q 1158 -284 1169 -284 q 1155 -277 1158 -282 q 1157 -269 1152 -272 q 1167 -230 1155 -236 q 1188 -215 1181 -219 q 1201 -203 1195 -210 q 1216 -193 1209 -195 q 1227 -184 1223 -191 q 1246 -177 1237 -184 q 1264 -172 1262 -174 q 1268 -174 1266 -170 q 1279 -170 1272 -172 q 1289 -166 1285 -169 q 1305 -170 1296 -168 q 1321 -176 1314 -173 l 1340 -181 q 1351 -182 1345 -183 q 1363 -184 1356 -181 q 1386 -200 1380 -195 q 1399 -208 1391 -206 q 1418 -221 1413 -214 q 1431 -234 1424 -229 q 1451 -261 1444 -255 q 1460 -279 1458 -268 q 1467 -290 1467 -286 q 1469 -299 1467 -294 q 1471 -307 1470 -302 q 1474 -317 1473 -313 q 1474 -339 1471 -330 q 1477 -356 1477 -348 q 1475 -368 1474 -366 q 1477 -371 1477 -370 q 1471 -383 1471 -379 q 1470 -392 1471 -387 q 1465 -404 1467 -398 q 1460 -415 1463 -409 q 1454 -430 1452 -427 q 1443 -444 1447 -440 q 1433 -458 1435 -458 q 1429 -459 1431 -458 q 1418 -470 1421 -469 q 1418 -474 1416 -470 q 1403 -479 1407 -474 q 1397 -491 1399 -484 q 1384 -493 1390 -493 q 1372 -496 1378 -493 q 1360 -507 1363 -505 q 1352 -507 1357 -510 q 1321 -514 1332 -515 q 1300 -515 1311 -514 q 1287 -522 1288 -519 q 1283 -524 1285 -524 q 1263 -523 1266 -522 q 1256 -524 1260 -524 q 1241 -525 1249 -526 q 1224 -524 1233 -524 q 1208 -527 1219 -524 q 1201 -523 1203 -526 q 1193 -520 1199 -520 q 1169 -523 1177 -524 q 1154 -515 1161 -522 q 1140 -520 1144 -519 q 1133 -519 1136 -520 q 1119 -518 1121 -516 q 1109 -518 1116 -519 q 1096 -513 1097 -512 q 1091 -512 1094 -514 q 1066 -503 1074 -504 q 1053 -495 1058 -501 q 1032 -492 1036 -491 q 1028 -491 1029 -493 q 1004 -482 1010 -486 q 991 -476 998 -478 q 980 -463 984 -465 q 975 -462 976 -462 q 963 -461 965 -463 q 957 -461 960 -459 q 951 -455 954 -457 q 945 -448 948 -453 q 929 -446 937 -448 q 895 -435 907 -436 q 876 -425 878 -425 q 870 -421 873 -424 q 858 -419 862 -419 q 851 -417 854 -419 q 843 -413 847 -415 q 835 -411 839 -411 q 809 -399 820 -401 q 792 -393 798 -397 q 777 -386 778 -383 q 774 -387 777 -389 q 760 -382 765 -382 q 754 -379 756 -382 q 744 -373 748 -377 q 735 -370 740 -368 q 722 -364 725 -363 q 716 -364 718 -366 q 704 -358 705 -358 q 701 -358 702 -359 q 691 -353 694 -354 q 686 -351 689 -352 q 678 -351 682 -351 q 671 -351 675 -352 q 648 -342 656 -344 q 633 -335 640 -340 q 626 -332 629 -333 q 618 -330 623 -330 q 599 -320 611 -324 q 580 -309 587 -316 q 562 -305 571 -309 q 542 -299 553 -302 q 525 -290 530 -293 q 514 -290 520 -287 q 495 -286 499 -287 q 486 -282 492 -286 q 460 -275 472 -279 q 438 -264 448 -271 q 425 -264 431 -264 q 411 -263 419 -264 q 397 -259 398 -259 q 393 -257 396 -260 q 381 -259 382 -261 q 377 -257 379 -257 q 364 -258 364 -259 q 362 -257 363 -257 q 345 -258 345 -259 q 343 -256 345 -257 q 324 -253 326 -256 q 312 -252 317 -252 q 303 -249 307 -252 q 288 -248 293 -248 q 282 -248 284 -248 q 257 -246 263 -246 q 248 -248 252 -245 q 231 -246 237 -245 q 212 -249 223 -249 q 206 -250 210 -250 q 198 -250 202 -249 q 184 -252 187 -253 q 179 -252 181 -252 q 164 -250 169 -250 q 154 -242 158 -249 q 154 -234 153 -237 q 155 -227 155 -231 q 167 -223 166 -225 q 169 -218 168 -221 q 176 -212 174 -217 q 184 -206 177 -207 q 191 -195 187 -199 q 196 -184 195 -191 q 217 -177 214 -180 q 227 -172 221 -173 q 244 -176 241 -179 l 269 -174 q 276 -174 272 -174 q 284 -173 280 -173 q 299 -173 297 -174 q 305 -172 302 -172 q 317 -172 316 -173 q 321 -170 318 -170 q 333 -174 326 -172 q 344 -173 339 -176 q 350 -173 347 -172 q 359 -176 354 -174 q 375 -180 373 -179 q 381 -181 378 -181 q 396 -184 394 -184 q 411 -185 402 -185 q 427 -187 420 -185 q 440 -188 434 -189 q 451 -187 446 -187 q 469 -189 461 -187 q 485 -191 477 -191 q 493 -190 488 -191 q 503 -189 497 -189 q 510 -189 505 -188 q 518 -188 514 -189 q 542 -183 537 -183 q 554 -179 548 -183 q 573 -177 568 -179 q 585 -176 579 -174 q 596 -172 591 -172 q 609 -170 602 -172 q 619 -165 614 -168 q 632 -164 625 -162 q 651 -157 637 -160 q 659 -152 656 -153 q 667 -151 663 -151 q 674 -147 671 -149 q 682 -142 676 -145 q 695 -136 695 -135 q 697 -135 695 -137 q 712 -126 709 -130 q 721 -123 716 -123 q 735 -117 728 -119 q 744 -108 741 -115 q 753 -105 750 -108 q 762 -101 756 -103 q 771 -94 770 -99 q 777 -93 771 -90 q 789 -81 782 -81 q 793 -75 790 -77 q 796 -67 796 -74 q 813 -54 811 -55 q 817 -47 816 -52 q 831 -33 830 -39 q 837 -29 836 -33 q 845 -24 838 -24 q 855 -8 853 -14 q 864 -1 857 -2 q 874 16 865 12 q 877 25 874 23 q 880 35 880 28 q 889 47 885 44 q 891 56 892 50 q 897 63 893 59 q 900 69 902 66 q 914 86 911 81 q 919 96 916 90 q 925 107 926 103 q 929 112 925 111 q 931 127 929 122 q 938 138 934 132 l 941 153 q 946 162 942 158 q 950 172 949 166 q 954 187 956 185 q 956 191 953 188 q 960 197 957 193 q 963 206 963 200 q 973 233 971 222 q 982 250 976 244 q 986 264 986 263 q 986 269 987 265 q 990 287 987 282 q 994 295 992 293 q 994 309 991 303 q 999 321 996 316 q 1003 353 1003 337 q 1005 383 1002 368 q 1005 402 1007 397 q 1006 411 1003 406 q 1007 427 1003 423 q 1005 438 1005 431 q 1002 448 1005 446 q 1003 458 1005 453 q 999 467 1002 463 q 996 497 999 488 q 997 514 999 512 q 995 519 995 516 q 994 533 992 526 q 991 546 995 541 q 991 563 992 561 q 988 568 990 565 q 984 585 983 580 q 983 596 986 590 q 983 613 980 613 q 973 636 976 630 q 969 649 969 641 q 960 668 961 666 q 956 674 959 671 q 952 687 953 683 q 946 693 950 691 q 940 710 945 699 q 931 727 931 727 q 928 734 929 729 q 923 741 927 739 q 918 756 922 755 q 918 765 915 758 q 907 779 911 767 q 897 792 902 789 q 891 800 892 794 q 880 807 883 805 q 880 812 877 808 q 868 832 872 828 q 864 843 864 835 q 832 869 847 859 q 826 880 828 880 q 823 881 823 880 q 814 893 813 892 q 813 895 815 895 q 805 903 809 900 q 797 912 800 906 q 787 920 789 919 q 786 923 785 921 q 773 929 775 929 q 770 930 771 929 q 763 939 765 933 q 755 948 760 945 q 741 954 744 953 q 733 957 737 956 q 716 966 717 964 q 712 971 714 968 q 699 976 705 973 q 685 979 694 979 q 671 986 675 986 q 663 987 667 986 q 649 992 652 990 q 644 996 647 995 q 635 998 640 998 q 625 999 630 998 q 609 1005 614 1005 q 600 1009 604 1005 q 573 1006 579 1010 q 560 1010 571 1013 q 543 1014 550 1007 q 524 1009 530 1011 q 512 1006 519 1006 q 496 1005 499 1002 q 466 992 474 998 q 446 980 451 988 q 425 972 431 978 q 420 960 420 967 q 402 950 408 963 q 392 944 393 946 q 387 944 392 941 q 370 926 378 934 q 354 908 360 912 q 343 899 348 903 q 336 883 335 884 q 327 875 329 881 q 321 866 325 869 q 314 857 316 859 q 310 855 313 855 q 305 845 309 849 q 299 836 302 841 q 292 822 294 826 q 287 815 291 817 q 277 797 280 801 q 274 785 274 793 q 260 771 264 775 q 257 763 256 766 q 252 747 250 748 q 252 743 253 746 q 245 729 245 729 q 241 722 242 725 q 237 712 240 718 q 229 694 230 695 q 225 684 225 686 q 225 679 226 682 q 219 661 219 664 q 217 653 219 657 q 213 634 214 637 q 211 629 212 632 q 202 607 202 614 q 196 596 203 599 q 198 583 199 590 q 193 571 196 577 q 190 556 189 560 q 189 550 191 553 q 179 531 183 535 q 176 519 176 526 q 173 503 174 507 q 174 497 172 500 q 172 491 173 495 q 169 480 172 486 q 166 470 165 472 q 166 465 166 467 q 165 456 166 461 q 164 446 164 451 q 162 434 162 442 q 165 423 162 425 q 165 412 166 420 q 160 401 164 404 q 168 381 168 386 q 170 373 168 377 q 166 353 168 364 q 172 330 165 341 q 172 314 172 316 q 174 310 172 311 q 177 294 177 295 q 176 290 176 293 q 179 272 177 276 q 177 263 181 268 q 183 250 181 253 q 188 242 185 246 q 191 226 187 233 q 192 212 195 219 q 198 201 195 207 q 198 189 200 195 q 206 173 204 183 q 214 158 207 164 q 222 141 217 143 q 223 132 222 135 q 223 123 225 128 q 235 109 233 112 q 240 103 237 105 l 246 82 q 271 52 264 66 q 290 37 282 42 q 299 23 298 33 q 311 14 307 20 q 326 5 316 8 q 340 -8 339 -9 q 345 -9 341 -6 q 353 -18 352 -18 q 356 -20 354 -17 q 375 -30 373 -29 q 381 -33 378 -31 q 409 -48 401 -43 q 423 -56 417 -54 q 439 -59 430 -59 q 455 -63 448 -59 q 470 -63 463 -62 q 485 -66 476 -65 q 526 -55 512 -66 q 540 -50 537 -54 q 550 -44 543 -46 q 562 -33 562 -37 q 568 -31 562 -29 q 579 -14 577 -16 q 581 -9 580 -12 q 589 -5 585 -6 q 595 0 592 -4 q 603 18 600 14 q 609 25 606 21 q 611 36 611 31 q 617 44 611 42 q 619 56 617 51 q 623 67 622 61 q 623 85 621 80 q 624 103 626 99 q 622 115 622 108 q 621 137 623 131 q 619 153 621 149 q 615 161 617 157 q 613 170 614 166 q 610 177 613 174 q 608 191 609 188 q 602 193 607 193 q 601 207 602 203 q 598 217 600 211 q 590 233 594 229 q 590 241 587 237 q 579 258 579 255 q 575 261 579 261 q 566 278 571 274 q 560 288 561 282 q 541 306 548 302 q 533 317 535 310 q 533 326 531 322 q 535 335 535 330 q 540 341 538 337 q 543 348 542 344 q 560 356 556 354 q 567 363 564 358 q 581 375 580 373 q 584 378 581 377 q 593 382 588 381 q 602 387 598 383 q 622 385 614 379 q 634 370 629 373 q 637 360 638 367 q 643 355 640 358 q 647 347 647 352 q 655 333 652 336 q 660 322 659 329 q 668 314 666 318 q 675 307 670 310 q 682 295 678 301 q 683 283 686 290 l 693 268 q 697 242 698 249 q 699 230 697 236 q 708 210 705 214 q 713 200 710 207 q 714 181 712 185 q 717 170 716 176 q 720 149 720 151 q 716 129 717 132 q 716 122 716 126 q 716 113 714 116 q 717 107 717 109 q 717 92 717 94 q 714 84 713 92 q 710 77 716 75 q 707 67 710 70 q 701 59 704 65 q 699 52 698 56 q 697 43 699 47 q 690 33 693 35 q 690 27 687 32 q 678 18 682 24 q 672 5 675 12 q 656 -10 657 -1 q 644 -18 645 -16 q 642 -23 644 -20 q 632 -31 633 -29 q 629 -31 632 -32 q 614 -55 615 -47 q 607 -59 611 -58 q 602 -65 602 -59 q 589 -74 590 -71 q 585 -74 588 -77 q 568 -94 568 -81 q 552 -101 554 -100 q 553 -107 550 -103 q 538 -109 539 -109 q 535 -111 537 -109 q 526 -117 527 -116 q 523 -120 524 -118 q 504 -130 507 -126 q 494 -131 499 -128 q 485 -137 489 -134 q 472 -141 473 -141 q 469 -142 470 -142 q 458 -142 463 -143 q 448 -146 453 -141 q 440 -145 444 -146 q 431 -147 435 -145 q 415 -141 417 -139 q 409 -143 412 -142 q 385 -138 393 -141 q 370 -134 377 -135 q 362 -134 364 -134 q 355 -134 359 -135 q 346 -127 349 -131 q 339 -120 343 -123 q 331 -120 333 -123 q 324 -116 329 -116 q 306 -107 310 -109 q 295 -104 302 -104 q 290 -94 294 -96 q 284 -90 287 -93 q 268 -77 271 -78 q 263 -74 265 -77 q 247 -61 248 -65 q 240 -56 246 -56 q 234 -47 237 -50 q 229 -42 231 -44 q 212 -31 214 -32 q 206 -27 210 -29 q 202 -18 206 -21 q 196 -10 198 -16 q 184 -1 184 -1 q 177 4 179 1 q 169 9 174 8 q 166 21 170 17 q 161 33 161 25 q 153 48 153 46 q 151 51 154 51 q 145 67 149 65 q 138 74 141 69 q 132 93 132 93 q 126 111 126 103 q 124 124 123 122 q 123 128 126 126 q 120 138 123 135 q 120 143 118 141 q 113 156 113 149 q 108 170 112 164 q 105 189 107 183 q 100 203 104 196 q 97 221 101 208 q 93 231 93 227 q 90 238 93 236 q 92 255 93 253 q 90 259 92 256 q 89 274 90 274 q 88 278 88 275 q 85 301 92 287 q 88 324 78 314 q 82 342 81 339 q 80 351 82 345 q 82 363 84 355 q 77 378 81 371 q 77 392 75 386 q 75 405 78 398 q 81 425 84 423 q 84 437 84 430 q 92 447 85 444 q 91 460 89 454 q 96 469 93 466 q 97 482 96 482 q 99 485 99 482 q 99 499 99 497 q 99 504 100 501 q 104 520 101 514 q 108 534 107 527 q 110 549 109 549 q 111 552 111 549 q 113 559 113 554 q 112 568 112 564 q 122 598 120 587 q 127 621 124 609 q 134 637 132 634 q 135 645 135 640 q 141 651 138 648 q 147 656 143 653 q 145 674 143 671 q 150 678 147 676 q 153 688 153 683 q 155 698 153 693 q 166 724 166 712 q 175 741 173 737 q 180 749 177 746 q 185 756 183 752 q 187 766 187 759 q 192 774 189 770 q 196 786 195 778 q 204 794 202 789 q 210 803 206 800 q 221 818 219 815 q 225 822 222 822 q 241 850 229 842 q 255 871 246 864 q 272 887 264 878 q 283 908 280 895 q 296 916 291 914 q 303 925 301 918 q 310 929 309 925 q 317 934 311 934 l 328 952 q 339 961 340 957 q 341 965 339 964 q 355 975 352 969 q 374 984 368 979 q 386 994 383 991 q 394 996 389 998 q 408 1009 404 1007 q 417 1018 413 1011 q 433 1024 431 1022 q 438 1029 435 1026 q 455 1036 450 1033 q 465 1041 459 1039 q 484 1049 478 1045 q 500 1053 489 1053 q 518 1062 507 1060 q 537 1071 529 1064 q 553 1071 553 1068 q 554 1075 553 1074 q 567 1077 561 1075 q 580 1079 573 1078 q 644 1079 618 1082 q 695 1066 670 1075 q 705 1062 701 1064 q 713 1059 709 1060 q 735 1055 725 1056 q 751 1047 744 1053 q 765 1043 760 1044 q 773 1039 769 1041 q 786 1032 785 1030 q 789 1030 788 1033 q 803 1024 796 1026 q 816 1017 809 1021 q 829 1007 828 1009 q 831 1005 830 1006 q 849 996 846 999 q 866 981 862 984 q 874 976 869 978 q 888 963 878 968 q 892 957 889 960 q 897 949 895 954 q 910 938 908 940 q 918 929 914 931 q 925 922 922 927 q 932 912 931 912 q 935 908 933 911 q 945 895 945 897 q 946 892 945 893 q 955 884 953 885 q 959 880 957 883 q 973 861 968 869 q 986 849 986 850 q 987 847 986 849 q 999 830 998 834 q 1003 824 999 827 q 1015 800 1013 807 q 1025 788 1018 793 q 1028 773 1028 777 q 1033 767 1028 769 q 1038 754 1037 758 q 1043 750 1039 751 q 1052 731 1045 736 q 1056 714 1052 717 q 1062 708 1059 710 q 1066 693 1064 695 q 1068 687 1068 690 q 1079 663 1074 671 q 1080 652 1078 656 q 1085 642 1082 648 q 1083 633 1082 637 q 1087 625 1085 629 q 1087 616 1086 619 q 1091 610 1089 613 q 1092 588 1091 592 q 1094 576 1093 583 q 1096 561 1097 564 q 1094 556 1094 558 q 1100 535 1098 539 q 1102 525 1101 531 q 1105 514 1104 519 q 1105 499 1104 504 q 1106 486 1106 493 q 1106 469 1108 470 q 1105 465 1105 467 q 1108 451 1106 458 q 1105 436 1109 443 q 1107 425 1108 431 q 1109 417 1106 420 l 1102 396 q 1102 381 1104 382 q 1101 377 1101 379 q 1101 365 1102 366 q 1100 362 1100 364 q 1097 347 1098 349 q 1098 339 1096 344 q 1091 323 1093 329 q 1086 314 1090 317 q 1087 301 1090 307 q 1086 288 1083 295 q 1079 269 1079 276 q 1073 257 1072 259 q 1074 252 1074 255 q 1062 236 1063 236 q 1058 217 1063 225 q 1051 200 1053 208 q 1043 177 1047 181 q 1040 165 1040 173 q 1033 151 1033 151 q 1026 134 1026 137 q 1024 128 1026 131 q 1014 113 1017 118 q 1010 104 1011 109 q 1003 95 1005 97 q 999 90 1001 93 q 984 70 991 74 q 978 55 979 61 q 972 47 978 50 q 967 33 968 36 q 963 27 965 29 q 941 -5 945 10 q 926 -18 929 -16 q 923 -24 923 -20 q 912 -36 914 -35 q 908 -42 910 -37 q 892 -56 896 -54 q 885 -65 888 -58 q 878 -71 880 -66 q 872 -75 877 -75 q 859 -93 862 -85 q 853 -96 857 -96 q 847 -103 849 -97 q 838 -103 841 -100 q 834 -109 836 -107 q 822 -116 827 -112 q 808 -122 816 -120 l 805 -134 "},"M":{"x_min":-191.265625,"x_max":1634.96875,"ha":1053,"o":"m 987 1138 q 982 1127 986 1132 q 982 1117 979 1123 q 973 1110 976 1112 q 967 1104 969 1108 q 964 1091 965 1091 q 961 1087 963 1090 q 960 1080 961 1083 q 957 1072 959 1077 q 940 1041 945 1049 q 933 1020 935 1032 q 922 989 926 998 q 918 968 918 980 q 911 954 911 965 q 911 937 911 944 q 903 913 904 922 q 902 893 902 904 q 897 872 895 874 q 889 832 887 861 q 881 815 884 817 q 883 809 878 812 q 889 823 891 822 q 889 827 887 824 q 907 853 903 841 q 921 873 911 865 q 931 897 921 887 l 940 912 q 946 926 946 925 q 946 930 945 927 q 954 939 952 937 q 959 944 956 941 q 972 973 967 963 q 983 994 978 984 q 990 1005 988 1001 q 992 1010 992 1009 q 1000 1024 999 1022 q 1003 1026 1001 1026 q 1005 1037 1003 1033 q 1010 1045 1007 1041 l 1017 1062 q 1020 1082 1018 1078 q 1020 1089 1022 1086 q 1024 1112 1022 1102 q 1020 1119 1021 1115 q 1018 1127 1020 1123 l 1005 1138 q 996 1136 999 1135 q 987 1138 994 1138 m 668 335 q 665 320 667 321 q 660 316 663 318 q 651 302 653 305 q 652 294 649 299 q 647 281 649 287 q 642 267 644 275 q 634 252 634 252 q 628 240 630 242 q 628 233 626 238 l 621 219 q 610 198 614 212 q 603 191 604 195 q 598 185 602 187 q 591 170 592 173 q 584 152 587 155 q 583 142 581 149 q 575 126 577 131 q 572 116 573 120 q 570 101 569 103 q 569 97 571 100 q 562 83 564 85 q 560 75 560 81 q 554 67 550 67 q 557 61 557 66 q 538 43 543 44 q 522 12 526 25 q 518 1 520 2 q 515 -1 516 0 q 510 -14 511 -13 q 508 -17 510 -14 q 508 -33 511 -33 q 503 -36 505 -33 q 490 -47 489 -46 q 488 -48 491 -48 q 486 -58 488 -55 q 485 -66 484 -61 q 478 -69 482 -69 q 470 -74 473 -70 q 462 -90 466 -90 q 459 -96 458 -90 q 446 -103 448 -99 q 427 -96 431 -99 q 421 -90 424 -93 q 423 -77 425 -78 q 421 -74 420 -77 q 427 -46 425 -55 q 425 -25 428 -37 q 427 -8 428 -10 q 427 -4 427 -6 q 431 31 431 17 q 436 55 431 44 q 435 67 435 63 q 438 73 435 71 q 436 88 434 80 q 439 103 439 96 q 439 118 438 115 q 440 123 440 120 q 440 132 442 127 q 442 139 438 137 q 440 161 438 147 q 442 183 443 174 q 442 202 442 198 q 440 210 443 206 q 444 255 444 231 q 444 267 444 261 q 443 278 443 272 q 444 289 443 284 q 446 301 446 294 q 447 337 446 324 q 450 360 448 349 q 451 376 451 373 q 454 382 451 379 q 455 399 453 390 q 457 419 457 408 q 456 431 455 430 q 457 435 457 432 q 459 453 458 444 q 462 472 459 462 q 463 483 462 477 q 466 496 465 489 q 466 512 466 504 q 465 529 466 520 q 468 540 467 533 q 466 554 469 548 q 467 571 469 564 q 470 587 466 579 q 461 577 462 579 q 457 575 459 576 q 452 560 451 562 q 448 558 453 557 q 448 547 451 552 q 443 538 446 542 q 440 518 443 524 q 431 508 438 511 q 426 490 431 497 q 421 472 421 482 q 413 459 416 467 q 411 444 411 450 q 403 428 404 434 q 400 417 402 423 q 394 408 393 409 q 393 404 396 406 q 389 394 390 401 q 389 381 389 386 q 377 364 381 366 q 374 356 373 363 q 369 345 371 347 q 366 341 367 343 q 360 326 362 328 q 356 313 355 317 q 354 306 356 309 q 349 300 351 303 q 344 293 347 297 q 340 280 340 282 q 339 276 340 279 q 331 265 333 267 q 326 261 329 263 q 314 237 321 240 q 307 222 310 225 q 299 205 305 211 q 290 187 293 199 q 281 170 284 174 q 276 160 278 166 q 270 155 272 158 q 264 150 268 151 q 259 134 263 139 q 249 122 255 128 q 246 111 248 113 q 242 105 245 108 q 233 90 233 93 q 228 84 230 88 q 225 77 226 81 q 218 71 221 75 q 210 65 215 67 q 204 52 208 56 q 199 37 200 47 q 192 31 195 35 q 185 25 189 28 q 179 10 181 12 q 174 6 177 8 q 161 -14 166 -10 q 153 -25 155 -18 q 142 -40 147 -36 q 128 -52 130 -50 q 124 -55 127 -54 q 122 -64 124 -61 q 117 -70 120 -67 q 111 -76 113 -73 q 111 -84 109 -80 q 103 -91 107 -88 q 97 -100 100 -94 q 91 -107 94 -103 q 85 -113 88 -111 q 69 -131 71 -128 q 55 -141 66 -135 q 47 -155 50 -149 q 38 -164 39 -162 q 35 -165 37 -165 q 31 -172 35 -170 q 25 -177 27 -173 q 17 -180 18 -176 q 13 -188 16 -184 q 2 -193 4 -189 q -4 -200 0 -198 q -17 -210 -16 -210 q -32 -217 -31 -215 q -36 -219 -33 -218 q -52 -227 -44 -223 q -66 -238 -61 -231 q -101 -253 -93 -248 q -120 -256 -109 -250 q -147 -260 -135 -252 q -174 -267 -158 -268 q -188 -259 -183 -263 q -191 -241 -191 -244 q -188 -237 -191 -238 q -182 -219 -184 -221 q -177 -215 -180 -217 q -175 -189 -177 -208 q -174 -164 -173 -169 q -164 -154 -165 -158 q -158 -149 -162 -150 q -149 -135 -154 -138 q -122 -128 -132 -127 q -105 -131 -112 -130 q -92 -127 -99 -127 q -75 -127 -85 -127 q -65 -123 -67 -124 q -56 -123 -62 -122 q -47 -116 -54 -118 q -37 -108 -40 -115 q -17 -96 -20 -103 q 6 -88 2 -93 q 17 -81 10 -82 q 39 -65 31 -70 q 50 -52 47 -61 q 70 -33 67 -46 q 84 -22 77 -27 q 94 -6 92 -17 q 103 0 99 -4 q 107 9 107 2 q 120 19 118 10 q 130 32 122 28 q 134 42 134 40 q 138 46 135 44 q 151 63 151 58 q 158 66 151 67 q 172 90 169 84 q 183 101 176 97 q 190 117 188 113 q 195 123 192 120 q 198 128 198 127 q 200 132 199 130 q 202 135 200 134 q 206 137 203 137 q 212 151 210 150 q 212 158 214 153 q 225 166 222 164 q 226 174 227 168 q 233 180 230 177 q 238 185 236 183 q 240 198 237 193 q 245 210 244 202 q 261 229 252 219 q 265 242 264 240 q 269 244 267 244 q 274 256 274 255 q 275 259 274 257 q 284 275 283 271 q 287 283 286 279 q 293 301 298 301 q 303 319 301 316 q 309 326 306 322 q 314 345 313 343 q 314 351 314 347 q 324 366 318 363 q 328 381 329 370 q 337 396 333 396 q 338 404 336 401 q 339 411 340 406 q 349 434 344 430 q 352 448 355 439 q 360 460 359 457 q 363 467 362 463 q 378 501 375 486 q 389 524 381 516 q 392 538 386 531 q 392 552 398 545 l 401 567 q 411 586 408 583 q 415 596 415 590 l 420 611 q 427 621 427 614 q 432 632 427 629 q 440 654 439 648 q 444 663 440 660 q 446 670 444 668 q 446 678 447 672 q 453 687 450 682 q 453 699 455 693 q 459 709 459 702 q 465 716 458 716 q 466 728 463 724 q 472 736 469 732 q 480 763 476 752 q 482 779 484 773 q 488 795 489 792 q 486 801 486 798 q 491 813 489 812 q 495 816 493 813 q 498 838 495 830 q 499 854 501 847 q 503 863 503 857 q 507 872 503 869 q 508 888 507 883 q 518 911 515 903 q 519 929 519 925 q 522 940 519 933 q 513 940 518 942 q 503 937 508 938 q 480 941 485 941 q 472 941 476 941 q 455 944 459 941 q 446 944 451 946 q 430 947 436 946 q 420 949 424 948 q 397 960 401 953 q 376 961 385 957 q 356 965 367 964 q 333 974 339 975 q 321 979 326 973 q 291 983 303 978 q 267 991 279 988 q 259 991 264 992 q 252 994 255 990 q 225 994 237 996 q 207 998 212 991 q 194 996 200 995 q 185 992 188 996 q 170 993 179 994 q 160 995 162 992 q 151 990 155 992 q 138 990 146 988 q 123 983 123 984 q 122 982 123 982 q 111 978 113 980 q 105 975 108 976 q 88 959 92 964 q 78 952 85 953 q 69 937 77 942 q 63 921 63 929 q 55 911 62 914 q 51 895 58 902 q 52 883 54 888 q 50 870 50 877 q 54 853 54 859 q 60 832 56 835 q 61 826 63 830 q 71 807 67 809 q 77 801 74 804 l 82 786 q 93 769 90 773 q 99 762 96 765 q 109 753 109 758 q 115 748 109 748 q 111 733 108 744 q 104 729 107 731 q 96 725 101 727 q 66 693 84 704 q 59 695 63 695 q 50 697 54 695 q 41 706 42 704 q 36 706 40 708 l 25 717 q 12 728 16 725 q 5 733 9 731 q -1 744 2 740 q -9 755 -5 748 q -12 765 -9 763 q -14 773 -16 766 q -21 781 -18 778 q -24 786 -23 784 l -27 801 q -28 810 -25 807 q -31 816 -31 813 q -29 824 -31 819 q -29 835 -27 830 q -23 850 -25 841 q -21 873 -21 866 q -23 887 -20 880 q -26 897 -25 893 q -27 903 -27 900 q -14 923 -13 918 q -9 930 -14 929 q 3 948 1 944 q 8 959 5 952 q 25 968 16 964 q 30 975 27 973 q 35 983 33 978 q 47 995 47 986 q 66 1010 66 1003 q 81 1022 78 1022 q 92 1030 92 1029 q 96 1032 93 1032 q 115 1048 109 1040 q 133 1055 131 1052 q 138 1056 135 1058 q 150 1062 145 1062 q 158 1066 155 1063 q 179 1072 174 1068 q 194 1074 192 1072 q 199 1077 196 1077 q 216 1079 212 1078 q 222 1081 219 1081 q 233 1081 227 1082 q 244 1081 238 1081 q 252 1081 248 1081 q 263 1078 257 1082 q 285 1079 276 1081 q 309 1077 294 1078 q 326 1063 321 1067 q 341 1059 330 1059 q 354 1055 351 1055 q 360 1053 358 1056 q 383 1051 377 1056 q 400 1049 389 1047 q 411 1043 411 1041 q 415 1044 412 1045 q 428 1039 420 1040 q 443 1037 436 1039 q 451 1028 448 1030 q 457 1026 453 1026 q 479 1028 472 1028 q 484 1021 486 1028 q 496 1024 496 1026 q 499 1021 496 1022 q 511 1020 507 1022 q 518 1020 515 1018 q 529 1007 523 1017 q 541 1011 539 1010 q 546 1007 543 1013 q 557 1009 553 1010 q 567 1006 561 1009 q 586 1013 576 1013 q 606 1015 596 1013 q 617 1026 615 1025 q 619 1029 618 1026 q 634 1026 630 1026 q 640 1029 637 1026 q 638 1021 642 1025 q 637 1009 634 1017 q 628 1001 633 1003 q 623 987 622 998 q 610 977 611 979 q 603 975 609 975 l 595 957 q 588 953 590 957 q 584 946 587 949 q 583 933 583 938 q 580 930 584 929 q 579 914 580 918 q 575 910 577 911 q 575 902 576 907 q 576 895 573 897 q 572 877 572 887 l 569 858 q 565 839 565 845 q 565 830 565 834 q 564 817 565 819 q 562 815 562 816 q 558 786 561 794 q 560 770 556 777 q 554 745 556 752 q 548 735 553 737 q 550 727 550 731 q 553 717 549 722 q 545 698 548 702 q 546 690 543 694 q 543 678 541 685 q 546 667 545 672 q 541 630 543 644 q 542 618 545 621 q 539 611 539 615 q 541 590 535 600 q 537 575 539 579 q 533 569 534 572 q 535 560 533 564 q 537 550 537 556 q 535 539 537 543 q 533 527 533 534 q 531 491 533 507 q 526 481 524 484 q 529 476 527 478 q 526 461 526 465 q 526 455 527 458 q 524 444 523 446 q 524 440 526 443 l 520 420 q 522 406 523 409 q 523 401 520 404 q 520 389 518 390 q 520 385 522 387 q 519 365 518 375 q 520 347 520 355 q 519 335 520 340 q 518 324 518 329 q 517 304 519 307 q 515 297 515 301 q 516 288 515 293 q 515 280 518 284 q 514 263 512 267 q 511 256 515 260 q 515 243 518 244 q 512 238 512 242 q 515 206 515 219 q 512 176 515 193 q 508 162 507 164 q 510 158 510 161 q 507 141 507 151 q 504 124 508 131 q 504 114 507 119 q 503 100 501 109 q 503 89 504 89 q 505 82 503 89 q 515 86 514 82 q 516 94 516 90 q 520 105 519 100 q 526 113 522 109 q 531 130 529 124 q 537 141 533 137 q 549 172 545 160 q 560 193 553 185 q 563 210 562 207 q 567 215 564 212 q 573 229 572 229 q 576 231 575 230 q 580 243 579 241 q 580 250 581 245 q 589 263 587 261 q 588 271 591 265 q 596 278 596 271 q 598 290 596 284 q 608 297 606 295 q 609 303 610 299 q 622 320 621 320 q 632 336 623 328 q 637 355 637 355 q 642 362 638 358 q 642 373 645 367 q 649 379 647 374 q 649 387 651 385 q 660 409 657 394 q 668 417 667 412 q 674 425 668 423 q 679 444 680 439 q 685 457 678 450 q 696 477 691 472 q 701 493 701 482 q 714 514 709 503 q 720 528 720 524 q 727 534 721 531 q 732 549 728 543 q 737 564 736 554 q 748 579 743 573 q 756 596 755 591 q 760 604 756 602 q 771 625 767 618 q 779 638 775 632 q 789 655 785 647 q 794 668 792 660 q 798 685 796 675 q 803 701 801 701 q 804 704 804 702 q 805 720 805 716 q 807 731 805 724 q 811 753 808 741 q 816 778 815 765 q 819 790 817 785 q 822 803 820 796 q 823 813 823 808 q 824 826 823 819 q 830 851 830 843 q 834 864 834 861 q 836 870 834 868 q 838 887 838 876 q 845 911 843 906 q 851 927 849 925 q 854 940 851 937 q 855 948 857 942 q 861 969 861 964 q 864 978 861 975 l 870 991 q 878 1005 874 998 q 884 1020 881 1013 q 893 1041 891 1036 q 900 1049 895 1047 q 907 1077 903 1071 q 912 1091 911 1083 q 921 1100 919 1098 q 922 1105 922 1101 q 940 1135 934 1117 l 950 1150 q 968 1165 964 1161 q 980 1178 978 1176 q 982 1188 982 1181 q 992 1192 988 1188 q 1003 1199 996 1197 q 1022 1209 1020 1207 q 1026 1214 1024 1211 q 1039 1207 1033 1211 q 1049 1200 1045 1204 q 1070 1190 1064 1193 q 1081 1184 1075 1188 q 1081 1171 1078 1177 q 1081 1159 1083 1166 q 1083 1148 1085 1148 q 1082 1144 1081 1147 q 1083 1133 1085 1138 q 1079 1121 1081 1128 q 1073 1094 1079 1100 q 1067 1078 1067 1089 q 1062 1063 1066 1066 q 1060 1055 1058 1060 q 1047 1039 1053 1045 q 1039 1026 1043 1032 q 1033 1009 1036 1020 q 1025 997 1024 998 q 1026 994 1026 996 q 1013 980 1017 983 q 1010 971 1009 976 q 1000 959 1003 960 q 999 952 996 957 q 994 945 994 950 q 990 940 995 940 q 983 916 986 922 q 976 903 980 910 q 969 890 973 896 q 963 877 965 884 q 954 859 960 864 q 952 849 949 855 q 941 836 945 842 q 928 816 931 820 q 925 805 925 812 q 918 800 922 803 q 912 794 915 798 q 910 779 912 785 q 904 772 906 775 q 900 766 903 769 q 889 754 891 755 q 881 740 884 747 q 873 727 877 733 q 869 708 870 710 q 866 704 868 706 q 859 687 859 687 q 862 682 859 686 q 855 666 857 670 q 851 660 853 663 q 851 649 851 653 q 849 641 851 644 q 850 632 849 637 q 851 623 851 628 q 848 596 847 604 q 849 580 849 587 q 849 562 847 573 q 850 548 851 552 q 849 542 849 545 q 849 524 851 531 q 847 514 846 518 q 851 493 853 504 q 850 472 849 482 q 852 457 853 459 q 853 453 851 455 q 854 439 853 446 q 857 423 855 432 q 855 408 855 412 q 857 401 854 404 q 861 377 855 382 q 864 359 861 362 q 862 335 858 347 q 866 320 866 322 q 866 314 865 317 q 869 306 868 310 q 872 298 870 302 q 873 279 870 284 q 873 264 876 267 q 878 238 876 245 q 883 223 880 230 q 888 203 887 214 q 892 185 892 189 q 893 174 892 180 q 900 161 900 162 q 899 157 899 160 q 904 145 904 146 q 903 141 903 143 q 908 124 910 126 q 907 120 907 123 q 910 112 910 116 q 912 101 910 108 q 915 91 916 94 q 915 82 914 88 q 916 73 911 74 q 923 69 921 71 q 927 59 925 63 q 929 47 929 54 q 937 27 934 37 q 944 5 940 16 q 944 -5 942 -2 q 949 -10 946 -8 q 952 -22 949 -17 q 959 -33 956 -27 q 956 -48 952 -44 q 965 -55 961 -52 q 976 -78 971 -73 q 980 -92 978 -88 q 984 -104 983 -97 q 990 -121 990 -119 q 992 -123 990 -123 q 998 -135 998 -132 q 1002 -137 998 -138 q 1005 -151 1002 -146 q 1011 -161 1007 -155 q 1015 -173 1014 -170 q 1018 -177 1015 -176 q 1026 -203 1018 -193 q 1032 -217 1029 -212 q 1041 -223 1034 -222 q 1047 -240 1048 -240 q 1045 -242 1045 -241 q 1053 -252 1049 -248 q 1059 -263 1056 -256 q 1066 -268 1062 -265 q 1072 -274 1070 -271 q 1078 -291 1072 -283 l 1083 -306 q 1096 -322 1093 -321 q 1101 -325 1098 -322 l 1109 -340 q 1120 -354 1117 -352 q 1121 -361 1117 -356 q 1127 -368 1124 -366 q 1133 -377 1129 -375 q 1138 -385 1136 -379 q 1153 -396 1148 -393 q 1161 -405 1158 -400 q 1167 -410 1166 -406 q 1173 -415 1169 -413 q 1188 -438 1182 -431 q 1201 -447 1193 -444 q 1208 -457 1204 -454 q 1215 -466 1212 -459 q 1222 -466 1220 -465 q 1230 -467 1224 -467 q 1244 -477 1233 -476 q 1261 -485 1256 -478 q 1279 -489 1270 -485 q 1296 -496 1285 -493 q 1315 -497 1307 -499 q 1335 -503 1321 -504 q 1361 -499 1349 -501 q 1382 -495 1379 -497 q 1390 -493 1386 -493 q 1405 -486 1402 -489 q 1413 -482 1409 -484 q 1423 -482 1418 -481 q 1432 -480 1428 -482 q 1449 -471 1444 -473 q 1460 -466 1454 -469 q 1475 -457 1473 -457 q 1478 -457 1477 -458 q 1491 -442 1490 -446 q 1494 -436 1492 -439 q 1501 -431 1500 -435 q 1508 -425 1502 -427 q 1514 -412 1512 -413 q 1519 -408 1516 -411 q 1528 -393 1527 -397 q 1535 -386 1530 -389 q 1536 -374 1532 -379 q 1539 -360 1540 -368 q 1550 -326 1543 -335 q 1551 -303 1549 -314 q 1546 -284 1546 -288 q 1544 -268 1544 -272 q 1542 -252 1539 -260 q 1537 -246 1539 -249 q 1532 -237 1535 -242 q 1521 -220 1524 -225 q 1515 -211 1517 -215 q 1506 -195 1505 -196 q 1505 -192 1507 -193 q 1495 -184 1497 -184 q 1492 -183 1493 -184 q 1477 -171 1479 -173 q 1470 -169 1475 -169 q 1461 -160 1466 -164 q 1447 -157 1456 -157 q 1428 -147 1433 -149 q 1397 -141 1409 -138 q 1384 -140 1390 -141 q 1372 -142 1378 -139 q 1360 -149 1365 -145 q 1348 -154 1355 -154 q 1342 -160 1345 -157 q 1336 -166 1340 -164 q 1330 -185 1330 -180 q 1322 -195 1323 -188 q 1317 -208 1321 -202 q 1314 -222 1317 -221 q 1311 -226 1311 -223 q 1310 -244 1313 -244 q 1307 -248 1307 -245 q 1307 -259 1310 -255 q 1308 -268 1304 -263 q 1302 -278 1302 -271 q 1291 -284 1302 -284 q 1280 -298 1288 -295 q 1273 -311 1280 -305 q 1262 -318 1264 -316 q 1261 -325 1260 -321 q 1239 -314 1238 -328 q 1237 -287 1239 -301 q 1241 -271 1243 -282 q 1247 -255 1239 -260 q 1247 -245 1247 -250 q 1250 -236 1247 -240 q 1256 -224 1256 -225 q 1258 -221 1257 -223 q 1264 -204 1264 -204 q 1268 -196 1266 -199 q 1273 -188 1270 -193 q 1277 -179 1277 -183 q 1280 -173 1277 -176 q 1294 -158 1289 -160 q 1301 -147 1295 -150 q 1310 -135 1307 -143 q 1323 -123 1322 -126 q 1326 -120 1323 -120 q 1332 -113 1329 -118 q 1341 -105 1336 -108 q 1347 -99 1345 -101 q 1353 -96 1349 -96 q 1360 -86 1357 -88 q 1365 -85 1363 -84 q 1383 -70 1380 -74 q 1398 -66 1387 -69 q 1418 -60 1413 -59 q 1428 -61 1424 -61 q 1443 -59 1443 -59 q 1445 -58 1444 -58 q 1460 -57 1456 -58 q 1469 -56 1464 -56 q 1488 -60 1482 -56 q 1501 -62 1494 -63 q 1515 -71 1515 -70 q 1517 -74 1516 -71 q 1527 -76 1524 -73 q 1535 -82 1530 -80 q 1553 -84 1539 -84 q 1570 -103 1565 -100 q 1577 -113 1576 -107 q 1587 -122 1585 -119 q 1588 -127 1588 -124 q 1603 -141 1600 -141 q 1603 -147 1606 -142 q 1610 -156 1607 -153 q 1618 -166 1614 -160 q 1627 -186 1626 -181 q 1631 -193 1627 -191 q 1631 -207 1630 -200 q 1633 -221 1631 -214 q 1634 -235 1635 -233 q 1633 -240 1633 -237 q 1633 -253 1631 -246 q 1631 -267 1635 -260 q 1631 -282 1633 -278 q 1626 -291 1629 -287 q 1618 -313 1620 -310 q 1610 -330 1612 -326 q 1606 -339 1608 -335 q 1605 -346 1604 -341 q 1603 -354 1606 -351 q 1594 -364 1595 -363 q 1589 -367 1593 -366 q 1577 -389 1589 -382 q 1569 -406 1569 -401 q 1551 -424 1553 -419 q 1543 -431 1550 -430 q 1532 -446 1532 -443 q 1527 -450 1531 -448 q 1509 -467 1515 -459 q 1498 -481 1504 -474 q 1479 -492 1483 -488 q 1470 -499 1475 -496 q 1455 -510 1459 -507 q 1448 -515 1451 -512 q 1424 -534 1426 -529 q 1394 -548 1402 -542 q 1375 -556 1386 -553 q 1356 -560 1360 -557 q 1344 -567 1352 -564 q 1333 -571 1336 -569 q 1327 -572 1330 -572 q 1313 -575 1313 -576 q 1311 -573 1313 -573 q 1296 -580 1303 -575 q 1274 -581 1285 -580 q 1252 -580 1262 -583 q 1237 -578 1239 -577 q 1233 -577 1235 -579 q 1209 -572 1215 -573 q 1195 -567 1199 -567 q 1188 -565 1192 -568 q 1171 -554 1173 -557 q 1166 -552 1170 -552 q 1157 -541 1161 -543 q 1146 -539 1152 -539 q 1140 -531 1143 -535 q 1129 -526 1136 -527 q 1111 -507 1115 -511 q 1101 -500 1108 -503 q 1088 -483 1090 -485 q 1083 -480 1086 -481 q 1070 -464 1075 -470 q 1059 -454 1066 -458 q 1053 -442 1055 -444 q 1048 -440 1052 -440 q 1034 -421 1040 -423 q 1026 -406 1028 -408 q 1024 -400 1024 -404 l 1014 -387 q 1006 -368 1006 -378 q 995 -353 996 -355 q 991 -347 994 -351 q 987 -335 988 -343 q 982 -321 986 -326 q 973 -305 976 -309 q 969 -294 971 -299 q 963 -286 968 -288 q 955 -267 961 -275 q 950 -245 949 -260 q 938 -233 940 -236 q 927 -206 929 -211 q 923 -194 925 -196 q 921 -189 921 -192 q 915 -174 915 -174 q 908 -157 911 -164 q 903 -143 906 -150 q 900 -134 902 -138 q 895 -126 899 -130 q 891 -115 891 -119 q 889 -108 891 -112 q 883 -95 883 -97 q 883 -90 884 -93 q 878 -77 878 -81 q 877 -70 878 -73 q 870 -55 870 -58 q 869 -50 870 -52 q 864 -36 866 -43 q 861 -21 861 -29 q 854 0 854 -9 l 847 14 q 846 32 846 20 q 843 39 845 36 q 841 48 842 42 q 838 59 841 52 q 835 73 835 65 q 831 88 834 78 q 824 117 828 108 q 822 134 819 126 q 814 167 817 157 q 812 188 811 177 q 807 205 811 204 q 805 210 804 206 q 805 227 807 218 q 801 251 803 242 q 801 267 800 260 q 796 292 798 280 q 792 314 794 303 q 788 331 789 326 q 786 341 786 336 q 786 358 788 352 q 784 371 784 364 q 779 408 781 387 q 779 446 777 428 q 778 453 779 450 q 777 461 777 457 q 775 480 775 476 q 774 491 774 485 q 773 505 773 501 q 774 516 773 511 q 771 526 775 522 q 752 497 759 516 q 744 474 746 478 q 736 464 737 466 q 732 461 735 462 q 727 443 731 450 q 718 425 722 436 q 706 398 712 405 q 697 383 704 387 q 693 368 691 379 q 684 356 682 359 q 683 354 686 354 q 668 335 680 344 "},"C":{"x_min":13.5625,"x_max":1190.421875,"ha":1149,"o":"m 841 1033 q 857 1030 854 1029 q 864 1030 861 1032 q 892 1024 881 1024 q 901 1020 896 1020 q 910 1018 906 1020 q 923 1010 922 1010 q 945 1004 937 1006 q 960 998 953 1002 q 969 992 965 995 q 980 990 973 990 q 1015 969 1001 978 q 1021 964 1018 967 q 1030 961 1024 961 q 1043 950 1033 953 q 1053 939 1052 937 q 1058 938 1055 941 q 1067 926 1063 933 q 1082 919 1071 919 q 1104 903 1093 908 q 1115 892 1108 893 q 1127 881 1119 883 q 1129 873 1129 878 q 1136 869 1129 868 q 1138 855 1133 857 q 1142 847 1143 854 q 1152 836 1147 842 q 1159 820 1157 830 q 1171 803 1171 808 q 1173 793 1171 797 q 1180 774 1180 779 q 1180 765 1180 769 q 1182 748 1181 750 q 1181 743 1184 746 q 1190 724 1189 729 q 1188 710 1190 718 q 1183 693 1182 698 q 1178 685 1184 687 q 1179 675 1180 682 q 1176 664 1178 668 q 1175 644 1176 649 q 1169 636 1174 638 q 1162 609 1162 618 q 1152 590 1157 592 q 1147 580 1147 587 q 1140 563 1144 564 q 1133 560 1136 562 q 1123 548 1124 548 q 1119 533 1119 537 q 1113 531 1119 530 q 1104 523 1109 527 q 1096 514 1100 519 q 1088 504 1090 505 q 1087 499 1086 503 q 1072 489 1078 492 q 1066 480 1067 486 q 1051 466 1052 474 l 1037 458 q 1020 447 1025 447 q 1009 444 1015 447 q 994 435 1003 438 q 982 423 986 432 q 969 417 971 424 q 956 412 967 411 q 940 403 942 405 q 931 402 937 401 q 919 400 921 398 q 915 401 918 401 q 907 398 910 400 q 900 394 904 396 q 884 397 891 393 q 877 394 881 394 q 870 390 873 393 q 842 394 853 394 q 827 397 831 393 q 814 396 815 394 q 811 400 813 398 q 793 401 803 401 q 783 408 789 405 q 770 413 777 411 q 755 432 758 427 q 747 439 752 436 l 737 457 q 732 470 733 469 q 729 473 731 470 q 728 491 727 481 q 727 510 729 501 q 731 521 732 519 q 731 526 731 523 q 739 539 736 539 q 740 546 737 545 q 743 554 743 548 q 752 564 750 562 q 756 571 754 567 q 765 572 762 568 q 771 580 769 576 l 786 588 q 803 596 801 596 q 805 595 804 595 q 814 598 811 596 q 822 596 817 599 q 825 588 824 594 q 827 580 826 583 q 815 568 816 568 q 817 550 816 554 q 819 539 819 545 q 825 514 819 522 q 835 499 831 507 q 843 491 842 492 q 845 486 843 489 q 856 483 851 486 q 869 481 861 480 q 882 472 880 472 q 888 470 884 472 q 900 467 897 466 q 904 466 902 467 q 917 461 912 462 q 927 459 922 459 q 951 465 945 466 q 964 466 957 463 q 971 470 968 469 q 979 473 975 470 q 992 477 986 476 q 1002 485 999 478 q 1022 494 1018 489 q 1032 501 1025 499 q 1041 518 1037 510 q 1053 531 1044 527 q 1055 543 1052 542 q 1060 548 1058 545 q 1063 562 1062 560 q 1067 568 1064 564 q 1074 582 1072 581 q 1075 584 1075 583 q 1076 595 1074 594 q 1075 599 1078 596 q 1079 606 1078 602 q 1082 613 1079 610 q 1082 624 1081 621 q 1086 634 1083 628 q 1087 647 1083 647 q 1089 652 1090 648 q 1087 659 1090 659 q 1087 667 1085 660 q 1091 680 1090 676 q 1090 689 1091 685 q 1089 701 1087 699 q 1089 706 1090 702 q 1074 748 1086 741 q 1068 765 1072 762 q 1062 770 1064 769 q 1051 792 1056 789 q 1045 803 1047 796 q 1037 816 1040 813 q 1024 826 1026 826 q 1022 831 1021 827 q 1004 850 1013 842 q 984 865 995 858 q 973 878 975 876 q 964 880 971 880 q 950 891 953 888 q 940 895 946 893 q 929 906 930 907 q 925 904 927 904 q 911 911 921 911 q 885 923 904 923 q 870 930 881 930 q 862 935 868 933 q 854 942 857 937 q 840 944 843 944 q 835 946 836 944 l 815 949 q 790 956 801 952 q 777 958 779 956 q 769 959 774 960 q 740 956 748 956 q 725 957 732 957 q 695 960 708 954 q 676 956 685 959 q 659 956 667 953 q 644 950 644 952 q 641 949 644 949 q 630 948 633 949 q 622 945 628 946 q 595 940 613 942 q 575 935 581 935 q 563 932 568 931 q 556 930 558 933 q 537 921 542 922 q 530 915 533 919 q 502 906 512 914 q 477 893 492 899 q 461 885 462 887 q 458 883 461 884 q 444 876 446 880 q 430 868 432 869 q 423 868 428 866 q 416 863 420 865 q 408 858 412 861 q 394 847 396 849 q 379 841 379 841 q 368 828 370 836 q 360 824 363 827 q 354 819 358 822 q 329 803 335 807 q 319 794 322 798 q 310 789 316 790 q 299 776 302 778 q 291 771 297 774 q 280 760 283 762 q 278 762 278 759 q 264 750 267 751 q 256 747 261 748 q 242 734 246 740 q 231 725 238 728 q 229 716 230 720 q 226 709 227 713 q 214 701 214 705 q 210 698 215 697 q 203 690 207 694 q 195 680 199 686 q 191 674 192 678 q 189 663 189 670 q 169 644 180 651 q 166 634 166 637 q 160 629 165 632 q 150 604 160 613 q 147 590 151 595 q 146 576 143 585 q 138 558 141 562 q 135 548 135 554 q 127 536 127 539 q 124 530 127 533 q 118 514 116 515 q 119 510 120 512 q 115 498 115 503 q 115 486 116 493 q 109 468 108 472 q 111 458 111 465 q 109 447 108 448 q 109 443 109 446 q 108 427 107 431 q 108 419 109 423 l 104 398 q 106 384 107 386 q 105 379 105 382 q 106 370 105 374 q 107 362 107 366 q 105 350 104 354 q 103 345 107 347 q 103 329 107 335 q 108 318 108 324 q 107 304 108 311 q 104 289 105 297 q 107 275 103 282 q 107 259 108 260 q 107 256 107 259 q 111 244 109 250 q 115 233 112 237 q 114 221 112 227 q 118 208 116 214 q 118 201 118 206 q 116 193 119 196 q 122 185 119 189 q 128 177 124 180 q 129 166 127 170 q 131 158 131 162 q 134 150 132 154 q 137 138 137 146 q 146 120 141 122 q 149 104 149 108 q 155 89 157 90 q 153 84 153 88 q 166 67 161 70 q 176 56 172 63 q 181 40 174 46 q 183 25 187 35 q 193 13 193 16 q 196 12 193 10 q 198 -2 195 2 q 214 -12 210 -10 q 222 -31 219 -28 l 229 -44 q 234 -50 231 -48 q 240 -55 237 -52 q 242 -65 238 -63 q 242 -70 245 -66 q 271 -93 256 -85 q 284 -106 279 -104 q 291 -115 290 -108 q 306 -128 302 -126 q 331 -149 326 -141 q 344 -161 336 -157 q 353 -172 351 -172 q 359 -173 355 -173 q 368 -185 363 -180 q 378 -198 374 -191 q 389 -205 383 -206 q 393 -208 394 -204 q 411 -219 404 -217 q 425 -225 419 -221 q 436 -232 431 -231 q 440 -236 440 -233 q 463 -248 459 -244 q 477 -252 467 -253 q 496 -259 492 -256 q 505 -263 500 -261 q 515 -269 512 -268 q 522 -274 518 -271 q 534 -275 533 -272 q 538 -278 535 -278 q 561 -283 557 -282 q 580 -288 580 -288 q 595 -293 592 -293 q 604 -295 599 -295 q 614 -298 610 -294 q 632 -303 632 -297 q 638 -301 634 -299 q 647 -302 642 -302 q 660 -301 653 -302 q 675 -302 667 -301 q 695 -303 690 -305 q 704 -305 699 -302 q 722 -302 717 -302 q 733 -301 728 -302 q 748 -302 746 -303 q 754 -299 751 -301 q 770 -298 762 -297 q 788 -298 778 -299 q 805 -293 803 -295 q 820 -294 819 -294 q 836 -292 832 -291 q 843 -291 839 -293 q 862 -286 857 -288 q 884 -280 880 -282 q 895 -279 888 -278 q 906 -274 900 -276 q 919 -269 912 -272 q 937 -263 935 -264 q 941 -261 938 -261 q 952 -254 950 -256 q 957 -250 954 -252 q 980 -239 973 -242 q 994 -231 987 -236 q 1020 -210 1011 -221 q 1033 -196 1033 -199 q 1037 -193 1033 -192 q 1047 -183 1045 -185 q 1052 -181 1048 -181 q 1062 -167 1059 -170 q 1071 -161 1064 -164 q 1088 -149 1082 -151 q 1102 -149 1094 -147 q 1103 -162 1110 -155 q 1093 -177 1096 -169 q 1083 -185 1086 -184 q 1078 -192 1079 -187 q 1055 -215 1059 -199 q 1046 -221 1048 -217 q 1040 -230 1044 -226 q 1026 -240 1029 -240 q 1024 -246 1024 -241 q 1007 -255 1009 -252 q 1003 -261 1006 -259 q 991 -272 991 -268 l 968 -286 q 961 -291 965 -288 q 953 -299 956 -294 q 935 -305 938 -305 q 929 -306 933 -306 q 921 -310 923 -306 q 916 -317 919 -314 l 899 -325 q 891 -329 895 -328 q 884 -333 887 -330 q 868 -341 872 -340 q 861 -344 864 -341 q 847 -345 849 -345 q 842 -347 845 -345 q 822 -358 826 -358 q 815 -360 819 -358 q 800 -364 804 -363 q 781 -365 784 -366 q 777 -364 778 -364 q 769 -370 771 -367 q 762 -377 766 -373 q 749 -375 755 -374 q 735 -378 743 -377 q 720 -376 728 -378 q 706 -377 713 -374 q 697 -380 701 -377 q 689 -386 693 -383 q 661 -387 674 -381 q 653 -385 659 -385 q 641 -387 647 -385 q 627 -384 630 -383 q 619 -385 623 -385 q 604 -382 606 -379 q 600 -385 603 -385 q 591 -383 594 -383 q 583 -386 588 -383 q 564 -381 576 -379 q 546 -377 553 -383 q 534 -377 538 -378 q 529 -371 530 -377 q 502 -370 511 -371 q 486 -362 493 -368 q 467 -357 472 -360 q 454 -354 463 -354 q 448 -347 451 -351 q 442 -340 444 -343 q 425 -339 431 -341 q 411 -336 420 -336 q 397 -328 404 -329 q 383 -321 390 -326 q 366 -311 368 -311 q 363 -309 364 -310 q 354 -303 359 -306 q 343 -299 349 -301 q 337 -292 340 -295 q 328 -287 335 -288 q 315 -277 317 -275 q 310 -278 313 -279 q 301 -270 307 -272 q 293 -263 295 -268 q 282 -255 283 -257 q 279 -249 280 -253 q 266 -240 271 -246 q 252 -231 261 -234 q 243 -219 245 -222 q 238 -212 241 -215 q 223 -198 229 -202 q 214 -188 217 -195 q 202 -179 204 -181 q 196 -174 199 -177 q 187 -165 188 -166 q 185 -162 187 -164 q 172 -151 174 -153 q 172 -147 170 -150 q 162 -136 165 -143 q 153 -126 160 -128 q 149 -118 153 -122 q 143 -111 146 -113 q 139 -104 141 -108 q 135 -97 138 -100 q 126 -88 127 -90 q 124 -84 126 -85 q 117 -73 119 -75 q 112 -69 115 -71 q 107 -56 109 -62 q 99 -46 104 -51 q 88 -21 96 -29 q 77 -4 82 -6 q 78 2 80 0 q 73 10 75 5 q 65 35 69 31 q 58 43 62 39 q 50 61 58 52 q 44 78 52 74 l 42 96 q 37 115 37 108 q 32 127 36 123 q 29 143 29 139 q 27 153 29 147 q 23 162 23 160 q 23 168 24 165 l 20 188 q 18 203 17 203 q 16 212 18 206 q 14 221 14 218 q 15 230 14 223 q 16 244 16 237 q 14 251 16 248 q 13 259 13 255 q 14 277 14 272 q 16 288 13 282 q 14 305 12 295 q 16 326 16 314 q 16 341 14 337 q 17 351 17 345 l 17 367 q 18 391 16 386 q 17 401 20 396 q 21 412 21 404 q 23 428 21 420 q 29 451 28 442 q 32 466 29 459 q 35 474 33 470 q 37 482 37 478 q 43 501 43 496 q 49 517 48 514 q 50 523 50 520 q 56 542 54 539 q 59 548 58 545 q 61 562 62 561 q 61 565 59 562 q 70 577 63 573 q 74 585 71 583 q 77 595 77 588 l 85 610 q 94 617 93 611 q 97 630 96 623 q 109 638 105 637 q 111 647 112 640 q 123 660 118 653 q 131 679 128 667 q 141 686 139 682 q 149 689 142 690 q 158 704 155 698 q 172 717 164 712 q 183 733 180 722 q 200 746 193 744 q 212 756 210 755 q 217 763 215 759 q 222 771 219 767 q 238 788 231 773 q 250 794 246 789 q 263 803 255 800 q 269 810 264 808 q 275 817 274 812 q 296 828 294 824 q 305 832 298 832 q 314 844 313 841 q 321 847 314 847 q 328 857 326 855 q 332 858 329 858 q 343 867 339 862 q 356 874 348 872 q 368 883 363 878 q 382 889 374 887 q 394 901 393 900 q 396 904 394 902 q 416 918 409 911 q 433 927 428 926 q 438 933 438 927 q 459 937 451 930 q 481 946 466 945 q 497 959 488 953 q 508 963 504 963 q 515 968 512 964 q 528 973 524 969 q 539 976 531 978 q 567 988 552 983 q 592 999 581 992 q 611 1003 603 999 q 627 1007 621 1007 q 638 1009 633 1006 q 649 1013 644 1010 q 659 1015 653 1017 q 680 1018 676 1020 q 687 1021 685 1020 q 694 1025 690 1022 q 712 1026 704 1022 q 727 1026 720 1029 q 739 1029 736 1028 q 744 1028 743 1030 q 750 1030 747 1030 q 759 1032 754 1029 q 769 1028 762 1028 q 782 1028 775 1029 q 796 1026 796 1024 q 798 1029 796 1028 q 811 1029 807 1032 q 823 1029 816 1026 l 841 1033 "},"[":{"x_min":61.046875,"x_max":331.140625,"ha":290,"o":"m 177 179 q 170 155 172 160 q 175 141 177 142 q 172 138 173 141 q 172 126 173 128 q 173 120 170 123 q 173 105 170 116 q 176 87 177 92 q 177 78 174 82 q 177 60 177 67 q 176 40 176 52 q 174 29 173 32 q 176 23 174 25 q 177 8 179 14 q 177 -5 176 1 q 177 -31 172 -13 q 177 -46 174 -40 q 176 -55 179 -51 q 177 -63 174 -58 q 177 -74 179 -69 q 176 -88 177 -86 q 174 -90 174 -89 q 179 -120 174 -115 q 177 -128 176 -123 q 177 -137 177 -132 q 177 -158 179 -153 q 177 -170 176 -164 q 178 -191 177 -180 q 179 -215 179 -202 l 179 -233 q 179 -244 177 -242 q 180 -248 180 -245 q 181 -259 179 -255 q 181 -265 183 -263 q 179 -288 179 -286 q 177 -303 180 -301 q 177 -318 179 -317 q 176 -322 176 -320 q 177 -349 176 -340 q 177 -366 179 -359 q 177 -394 177 -383 q 183 -410 184 -408 q 181 -415 181 -412 q 192 -420 185 -420 q 200 -417 199 -420 q 212 -417 207 -419 q 223 -416 217 -416 q 247 -411 238 -411 q 259 -405 256 -412 q 283 -404 278 -404 q 293 -402 288 -404 q 303 -404 302 -405 q 307 -404 305 -402 q 322 -408 321 -406 q 330 -426 332 -423 q 330 -435 329 -430 q 319 -441 322 -442 q 313 -442 316 -440 q 299 -446 301 -448 q 294 -442 297 -444 q 276 -444 279 -444 q 268 -443 272 -443 q 254 -444 260 -443 q 240 -443 248 -446 q 222 -450 225 -448 q 210 -452 212 -453 q 204 -451 207 -451 q 187 -452 189 -453 q 181 -451 184 -451 q 165 -450 168 -450 q 154 -451 160 -450 q 142 -453 149 -453 q 132 -451 138 -451 q 119 -453 126 -450 q 90 -451 100 -453 q 73 -447 81 -448 q 64 -429 65 -434 q 61 -423 63 -425 q 70 -402 69 -405 q 71 -388 70 -389 q 71 -386 71 -387 l 70 -371 q 69 -355 70 -358 q 71 -351 69 -352 q 69 -337 66 -344 q 73 -324 73 -330 q 71 -302 70 -307 q 70 -293 73 -297 q 71 -278 73 -279 q 70 -275 70 -276 q 70 -267 69 -271 q 71 -259 71 -264 l 70 -223 q 74 -196 70 -211 q 71 -176 70 -181 q 69 -163 69 -170 q 73 -149 70 -155 q 71 -134 71 -138 q 74 -130 71 -131 q 69 -118 71 -126 q 73 -108 67 -111 q 71 -95 70 -97 q 71 -90 71 -93 q 71 -80 73 -85 q 74 -73 69 -75 q 71 -58 71 -59 q 73 -55 71 -56 q 71 -44 71 -50 q 73 -33 70 -37 q 71 -20 71 -20 q 70 -18 70 -20 q 74 1 69 -6 q 71 11 70 9 q 73 16 73 13 q 71 28 71 23 q 75 37 71 33 q 73 58 70 55 q 75 63 75 61 q 73 71 75 67 q 71 78 71 74 q 73 104 69 99 q 71 115 70 109 q 66 123 71 120 q 71 136 71 132 q 74 142 71 139 q 72 157 73 155 q 71 160 71 158 q 73 175 73 172 q 74 181 74 179 q 75 194 75 188 q 74 207 74 200 q 78 219 75 214 q 77 230 80 223 q 80 240 80 237 q 81 245 81 242 q 82 259 82 256 q 84 265 81 263 q 82 281 84 279 q 80 287 81 283 q 86 299 84 297 q 89 305 88 302 q 86 314 85 310 q 82 320 86 317 q 85 327 88 322 q 88 335 82 332 q 86 347 86 344 q 89 354 85 351 q 86 384 89 375 q 90 398 84 393 q 89 423 90 416 q 90 436 88 431 q 95 454 97 453 q 93 458 93 455 q 92 467 94 465 q 93 473 90 470 q 90 484 89 482 q 92 488 90 486 q 91 503 88 503 q 92 508 94 504 q 85 520 84 518 q 84 523 86 522 q 87 536 85 535 q 88 538 89 537 l 84 553 q 84 568 85 565 q 84 573 84 571 q 87 593 89 587 q 88 606 85 599 q 88 615 88 611 q 90 622 89 618 q 90 636 90 636 q 89 638 90 637 q 88 647 89 644 q 88 657 88 651 q 90 678 89 672 q 89 687 90 685 q 92 705 96 702 q 92 712 89 708 q 88 733 88 727 q 92 747 89 740 q 85 759 88 756 q 82 765 82 762 q 83 779 82 777 q 84 784 84 781 q 86 796 88 793 q 88 801 84 798 q 85 817 88 817 q 82 819 82 817 q 84 847 88 835 q 88 866 81 859 l 86 881 q 83 902 82 897 q 82 911 84 907 q 81 919 82 915 q 84 926 80 923 q 79 941 78 941 q 80 942 80 941 q 80 955 78 950 q 80 965 81 960 q 79 973 80 969 q 78 982 78 978 q 79 988 78 986 q 77 996 80 991 q 71 1026 74 1020 q 71 1048 75 1037 q 63 1067 67 1059 q 63 1083 61 1083 q 67 1083 65 1082 q 90 1089 81 1089 q 112 1089 107 1090 q 119 1090 118 1087 q 138 1085 132 1085 q 154 1081 143 1082 q 168 1080 166 1081 q 172 1079 169 1079 l 206 1079 q 231 1081 225 1079 q 244 1081 237 1082 q 266 1085 259 1085 q 282 1086 274 1085 q 292 1087 287 1086 q 299 1081 297 1087 q 307 1078 305 1081 q 314 1074 309 1075 q 316 1066 316 1070 q 317 1059 316 1062 q 304 1051 305 1052 q 301 1048 303 1049 q 286 1047 288 1049 q 282 1044 284 1045 q 265 1051 268 1047 q 243 1051 250 1052 q 231 1048 236 1051 q 207 1053 215 1051 q 195 1058 199 1055 q 185 1045 187 1055 q 188 1029 183 1036 q 185 1013 183 1017 q 185 1006 188 1009 q 188 990 187 991 q 189 987 189 988 q 189 965 188 969 q 192 956 191 960 q 192 943 192 946 q 195 938 192 940 q 190 923 189 929 q 191 914 191 918 q 192 906 191 910 q 187 899 193 902 q 188 868 188 880 q 190 854 191 854 q 189 851 189 854 q 189 839 191 842 q 188 834 188 836 q 188 824 187 828 q 189 813 189 819 q 187 802 188 803 q 185 798 187 801 q 187 781 185 789 q 191 771 188 774 l 185 748 q 184 712 191 728 q 187 699 188 701 q 184 695 185 698 q 186 685 185 690 q 191 675 187 679 q 187 663 189 664 q 187 659 184 661 q 181 634 181 647 q 182 609 183 614 q 183 599 181 604 q 189 582 188 585 q 189 576 189 579 q 188 564 187 565 q 191 561 189 564 q 187 537 188 546 q 188 520 185 529 q 184 506 185 505 q 181 505 183 507 q 187 486 187 491 q 185 478 188 482 q 183 467 183 473 q 186 454 187 454 q 185 453 185 454 q 188 435 184 439 q 186 420 187 420 q 184 417 185 420 q 185 403 184 405 q 183 401 185 401 q 186 387 187 392 q 185 379 185 383 q 187 363 188 363 q 185 362 185 363 q 188 345 188 348 q 185 332 188 339 q 184 317 183 325 q 181 303 183 305 q 180 297 180 301 q 179 286 176 288 q 183 279 181 283 q 182 264 181 269 q 181 250 183 259 q 181 231 181 234 q 180 225 180 227 q 180 210 180 212 q 183 204 180 207 l 177 179 "},"L":{"x_min":-173.625,"x_max":1034.96875,"ha":829,"o":"m 74 417 q 94 431 82 425 q 122 436 113 439 q 138 430 130 434 q 141 421 142 425 q 142 411 139 416 q 138 400 135 406 q 141 386 141 393 q 150 363 143 366 q 165 344 150 348 q 177 334 168 336 q 191 326 185 332 q 204 324 203 324 q 206 321 206 324 q 222 317 218 317 q 256 302 246 305 q 280 299 274 301 q 293 295 286 297 q 311 295 306 294 q 324 295 317 295 q 347 295 337 295 q 364 297 356 295 q 390 299 382 301 q 406 299 398 297 q 416 305 415 305 q 420 306 417 305 q 437 311 427 309 q 454 317 447 313 q 455 330 455 329 q 453 335 455 332 q 455 351 454 341 q 455 367 455 360 q 454 397 458 389 q 457 411 458 409 q 455 415 455 412 q 458 433 459 430 q 455 439 457 436 q 457 461 457 450 q 461 482 458 472 q 459 499 458 496 q 462 504 459 501 q 459 524 457 514 q 465 543 462 534 q 467 569 465 561 q 472 584 469 577 q 472 605 472 600 q 473 615 472 610 q 476 627 477 625 q 474 632 474 629 q 477 642 478 640 q 476 647 476 644 q 478 656 476 651 q 480 667 480 661 q 482 685 478 679 q 481 698 485 691 q 493 721 482 714 q 495 744 493 737 q 499 756 499 752 q 500 763 499 760 q 507 789 504 784 q 507 800 510 794 q 513 811 510 804 q 512 823 516 817 q 525 850 524 842 q 530 865 526 858 q 539 895 539 878 q 545 912 542 908 q 543 922 549 916 q 554 939 554 934 q 556 948 554 944 q 562 961 562 959 q 562 965 561 963 q 576 983 568 978 q 577 990 575 988 q 577 999 579 992 q 591 1011 588 1009 q 595 1015 594 1013 q 604 1029 604 1028 q 616 1044 617 1041 q 619 1052 615 1047 q 637 1071 630 1060 q 647 1075 644 1072 q 653 1082 651 1078 q 660 1096 656 1093 q 671 1099 671 1097 q 674 1102 671 1101 q 688 1109 685 1108 q 695 1113 691 1110 q 714 1125 710 1123 q 721 1129 717 1127 q 728 1133 725 1131 q 735 1136 731 1135 q 770 1151 756 1144 q 781 1155 779 1155 q 785 1155 784 1154 q 804 1162 800 1158 q 818 1160 813 1159 q 831 1162 823 1161 q 838 1163 835 1163 q 849 1162 841 1162 q 857 1161 853 1161 q 864 1162 861 1162 q 879 1157 877 1158 q 892 1152 881 1157 q 908 1152 906 1152 q 916 1152 910 1151 q 923 1147 919 1150 q 931 1142 927 1144 q 948 1127 945 1135 q 967 1116 952 1120 q 970 1109 967 1112 q 976 1104 973 1106 q 990 1094 990 1096 q 992 1090 990 1093 q 1002 1078 999 1078 q 1007 1077 1005 1078 q 1015 1059 1010 1066 q 1018 1041 1020 1052 q 1027 1028 1026 1032 q 1032 1022 1028 1024 q 1032 1001 1034 1009 q 1034 986 1029 992 q 1032 977 1032 980 q 1030 971 1032 975 q 1032 951 1034 953 q 1026 945 1029 949 q 1034 918 1029 926 q 1030 908 1032 912 q 1030 900 1028 904 q 1024 883 1026 892 q 1024 865 1021 874 q 1016 855 1017 862 q 1009 843 1015 847 q 1008 834 1010 836 q 1007 826 1006 831 q 1001 805 1002 809 q 995 797 999 800 q 992 781 990 785 q 994 774 995 777 q 979 739 982 756 q 969 727 969 728 q 969 721 969 727 q 965 714 967 717 q 960 706 963 710 q 956 699 957 704 q 948 694 954 695 q 938 679 946 687 q 937 667 937 671 q 933 664 937 663 q 929 644 931 647 q 927 638 927 642 q 916 623 919 634 q 902 609 907 618 q 889 595 897 600 q 877 576 884 577 q 871 569 874 572 q 869 558 868 565 q 862 555 864 558 q 858 548 861 552 q 852 541 855 545 q 843 535 849 537 q 838 524 842 526 q 831 520 834 523 q 827 511 831 514 q 822 501 823 508 q 803 492 811 497 q 786 480 794 486 q 771 461 778 465 q 762 450 765 457 q 739 435 746 438 q 729 423 732 432 q 712 416 713 419 q 709 411 712 413 q 696 404 701 408 q 686 394 691 400 q 675 389 679 393 q 668 383 671 386 q 652 373 653 381 q 638 367 642 371 q 628 359 633 363 q 600 344 609 358 q 580 333 587 340 q 560 323 567 328 q 542 316 553 318 q 543 299 545 303 q 539 291 541 295 q 539 279 538 284 q 537 268 539 274 q 533 253 537 253 q 530 250 530 253 q 532 233 534 237 q 527 227 530 230 q 530 218 527 222 q 530 208 533 214 q 528 196 526 200 q 526 187 530 191 q 524 163 527 168 q 520 153 522 158 q 522 140 526 143 q 519 134 519 137 q 516 116 515 123 q 514 103 516 109 q 505 82 510 86 q 501 62 501 66 q 503 58 500 58 q 496 49 496 55 q 491 39 496 43 q 489 27 491 29 q 485 23 488 25 q 484 11 486 12 q 478 9 481 10 q 472 -8 474 -6 q 466 -12 469 -9 q 465 -27 469 -20 q 465 -42 461 -33 q 459 -50 459 -44 q 453 -59 458 -56 q 450 -75 455 -70 q 442 -88 444 -81 q 442 -93 448 -89 q 438 -104 436 -97 q 443 -120 439 -120 q 451 -131 451 -130 q 451 -134 450 -132 q 459 -141 455 -137 q 466 -150 463 -145 q 477 -164 477 -164 q 489 -177 488 -177 q 501 -185 493 -181 q 515 -192 510 -188 q 526 -208 515 -206 q 531 -219 526 -215 q 541 -225 537 -222 q 550 -237 545 -231 q 554 -242 552 -238 q 557 -250 556 -245 q 570 -262 564 -256 q 579 -276 576 -268 q 598 -294 594 -291 q 602 -301 600 -297 q 610 -305 603 -305 q 612 -311 609 -309 q 618 -320 615 -314 q 626 -330 622 -325 q 638 -337 629 -335 q 649 -351 645 -349 q 655 -364 655 -363 q 657 -367 656 -366 q 669 -379 667 -377 q 675 -381 671 -382 q 685 -390 683 -387 q 691 -392 686 -393 q 710 -409 701 -409 q 724 -422 718 -419 q 739 -427 729 -425 q 759 -436 740 -436 q 769 -446 762 -443 q 784 -453 777 -448 q 800 -457 800 -453 q 809 -458 805 -455 q 816 -461 812 -461 q 830 -463 823 -463 q 843 -465 836 -462 q 878 -463 866 -463 q 900 -457 891 -463 q 916 -455 908 -457 q 927 -446 923 -453 q 942 -444 937 -444 q 950 -440 946 -443 q 983 -417 975 -428 q 992 -417 990 -419 q 998 -415 995 -415 q 996 -427 998 -428 q 991 -430 994 -427 q 973 -444 979 -440 q 957 -448 967 -447 q 952 -456 954 -453 q 945 -461 950 -459 q 943 -470 946 -467 q 937 -476 940 -472 q 921 -481 923 -476 q 897 -484 903 -484 q 887 -488 891 -485 q 880 -495 884 -491 q 852 -499 861 -501 q 832 -500 843 -496 q 820 -500 826 -497 q 808 -504 815 -503 q 794 -501 794 -503 q 790 -496 793 -499 q 775 -499 777 -497 q 767 -501 773 -501 q 746 -496 751 -500 q 737 -499 741 -492 q 716 -491 724 -496 q 690 -490 704 -493 q 671 -477 676 -486 q 661 -477 664 -478 q 653 -474 657 -476 l 633 -470 q 624 -462 630 -465 q 613 -457 618 -459 q 603 -447 606 -448 q 602 -443 600 -446 q 590 -437 594 -442 q 579 -431 585 -432 q 558 -412 561 -417 q 548 -400 554 -406 q 542 -394 545 -397 q 534 -390 539 -392 q 526 -374 529 -374 q 522 -371 524 -374 q 511 -356 516 -360 q 503 -344 505 -348 q 497 -337 500 -340 q 489 -329 492 -335 q 478 -321 485 -324 l 472 -295 q 461 -291 463 -298 q 451 -282 459 -284 q 440 -267 448 -271 q 430 -252 432 -263 q 419 -240 423 -246 q 406 -230 415 -234 q 400 -221 406 -223 q 390 -214 393 -219 q 383 -201 387 -208 q 373 -191 379 -193 q 361 -201 364 -193 q 348 -210 358 -208 q 320 -231 329 -221 q 303 -249 310 -242 q 278 -259 286 -257 q 270 -265 272 -261 q 259 -269 268 -269 q 248 -280 245 -279 q 248 -282 250 -280 q 237 -285 241 -284 q 226 -287 233 -286 q 210 -297 212 -295 q 206 -299 208 -298 q 189 -300 195 -297 q 179 -307 184 -303 q 168 -308 172 -306 q 161 -313 164 -310 q 141 -324 145 -321 q 128 -326 137 -326 q 107 -327 108 -330 q 97 -329 105 -324 q 81 -328 90 -326 q 67 -325 71 -329 q 44 -330 59 -330 q 20 -333 29 -329 l 2 -329 q -7 -323 0 -324 q -17 -317 -14 -322 q -31 -316 -28 -317 q -39 -311 -35 -314 q -61 -305 -55 -306 q -73 -303 -66 -303 q -88 -293 -84 -295 q -97 -288 -92 -291 q -120 -277 -113 -282 q -126 -265 -126 -272 q -141 -255 -138 -257 q -146 -249 -143 -253 q -150 -238 -149 -241 q -154 -233 -151 -236 q -162 -217 -161 -218 q -165 -214 -164 -217 q -168 -200 -166 -200 q -169 -198 -169 -199 q -168 -180 -169 -181 q -166 -176 -166 -179 q -173 -149 -161 -157 q -160 -134 -165 -138 q -160 -124 -162 -127 q -158 -113 -158 -120 q -149 -92 -154 -100 l -139 -75 q -121 -54 -128 -59 q -111 -40 -113 -50 q -99 -27 -101 -29 q -94 -24 -97 -24 q -84 -16 -84 -20 q -80 -14 -84 -13 q -69 -7 -70 -9 q -63 -5 -67 -5 q -45 6 -50 2 q -33 13 -40 10 q -18 23 -23 20 q -9 29 -13 27 l 6 37 q 15 42 12 40 q 24 46 18 43 q 40 50 37 50 q 46 51 43 50 q 59 56 56 56 q 62 58 62 55 q 71 56 65 56 q 84 56 78 56 q 109 54 103 59 q 120 52 115 50 q 141 48 138 54 q 162 48 153 51 q 184 46 172 44 q 203 37 199 39 q 210 35 207 36 q 219 29 215 32 q 227 24 222 25 q 236 18 233 21 q 245 16 240 16 q 263 8 260 10 q 274 4 267 5 q 285 -2 280 -1 q 294 -2 290 -2 q 329 -23 310 -18 q 338 -41 330 -33 q 356 -51 345 -48 q 373 -52 370 -59 q 379 -39 377 -44 q 384 -29 382 -32 q 386 -24 386 -27 q 393 -4 392 -6 q 394 4 394 -2 q 400 9 397 4 q 405 16 402 14 q 405 33 402 23 q 409 50 408 43 q 415 77 415 70 q 420 89 415 84 q 420 107 417 94 q 423 118 424 116 q 424 122 423 119 q 430 142 431 134 q 437 172 438 162 q 440 195 436 183 q 439 211 438 207 q 438 218 440 215 q 443 242 440 234 q 446 259 446 249 q 435 257 442 261 q 421 256 428 253 q 404 250 409 250 q 394 249 398 250 q 379 246 387 248 q 370 242 371 245 q 355 240 362 241 q 344 236 348 238 q 314 238 321 238 q 294 237 307 237 q 273 233 275 231 q 267 237 271 236 q 249 231 252 234 l 231 238 q 221 239 226 238 q 212 237 215 240 q 196 242 203 242 q 183 246 189 241 q 171 247 176 245 q 160 248 166 249 l 137 255 l 123 263 q 97 276 101 269 q 80 282 82 282 q 77 283 78 282 q 68 295 70 294 q 65 298 66 297 q 59 314 61 314 q 56 314 58 313 q 50 326 52 325 q 46 329 47 326 q 45 347 48 340 q 48 364 42 354 q 44 376 43 368 q 46 390 46 383 q 56 395 55 390 q 65 402 58 400 l 74 417 m 919 820 q 922 832 919 827 q 923 847 925 836 q 937 885 930 869 q 934 896 933 892 q 938 907 935 900 q 938 924 938 918 q 937 935 938 930 q 935 949 933 945 q 937 959 937 953 q 933 974 935 972 q 931 979 931 976 q 929 1010 926 996 q 923 1021 925 1014 q 919 1034 921 1028 q 914 1045 918 1040 q 904 1052 911 1051 q 888 1068 892 1067 q 881 1074 884 1070 q 871 1079 876 1079 q 864 1081 866 1078 q 847 1089 849 1087 q 842 1089 846 1090 q 811 1102 824 1100 q 794 1103 794 1100 q 789 1105 793 1106 q 776 1098 782 1098 q 767 1093 770 1097 q 758 1093 762 1096 q 748 1091 755 1090 q 737 1083 743 1087 q 721 1077 732 1078 q 718 1070 724 1070 q 712 1064 713 1070 q 695 1049 701 1052 q 694 1042 697 1045 q 689 1035 691 1039 q 685 1029 686 1032 q 687 1022 683 1026 q 672 1009 676 1018 q 660 992 668 999 q 652 965 653 973 q 647 949 651 957 q 646 937 649 941 q 645 926 642 933 q 634 904 637 919 q 630 897 633 902 q 626 891 628 893 q 628 875 625 874 q 629 873 630 876 q 620 858 625 861 q 614 849 615 855 q 611 829 611 835 q 603 820 610 823 q 603 802 603 809 q 600 790 603 794 q 596 778 598 785 q 598 765 595 771 q 591 754 590 756 q 592 748 592 751 q 587 733 590 736 q 587 717 585 727 q 582 709 584 712 q 580 704 580 706 q 579 678 579 687 q 577 659 580 668 q 574 651 576 655 q 572 642 572 647 q 573 626 575 633 q 571 617 571 619 q 570 600 569 604 q 571 592 571 595 q 566 579 568 580 q 565 575 564 577 q 561 557 562 561 q 562 540 560 542 q 564 535 564 538 q 562 523 561 526 q 564 518 564 520 q 558 502 557 507 q 560 491 560 497 q 558 476 560 484 q 557 459 557 467 q 557 446 556 453 q 554 432 558 439 q 555 415 557 416 q 552 411 553 413 q 554 399 552 401 q 557 394 556 397 q 554 377 556 379 q 554 371 552 374 q 573 379 564 370 q 583 385 579 382 q 592 389 587 387 q 601 398 599 397 q 606 401 603 400 l 621 405 q 627 411 623 409 q 632 417 630 413 q 638 421 636 419 q 645 425 640 424 q 659 439 655 435 q 670 446 663 443 q 682 459 678 455 q 694 465 687 462 q 706 478 704 478 q 712 480 709 478 q 725 491 724 489 q 727 495 725 493 q 741 505 736 505 q 750 516 747 514 q 755 520 752 518 q 756 530 754 527 q 759 538 758 533 q 773 554 767 550 q 777 565 778 557 q 784 572 784 568 q 788 580 785 576 q 811 604 801 598 q 821 623 813 617 q 830 640 828 629 q 845 659 842 647 q 855 682 849 671 q 864 696 864 694 q 868 698 865 698 q 874 718 874 712 q 874 721 874 724 q 887 746 885 739 q 892 755 889 752 q 900 765 897 762 q 899 774 902 769 q 903 780 900 777 q 908 786 906 784 q 912 801 911 800 q 915 805 914 803 q 919 820 918 817 m 298 -162 l 310 -146 q 317 -139 310 -139 q 321 -131 324 -138 q 303 -119 305 -120 q 300 -117 302 -118 q 297 -115 298 -116 q 293 -109 295 -115 q 274 -97 282 -104 q 256 -82 265 -90 q 249 -76 252 -75 q 242 -74 246 -77 q 232 -67 238 -70 q 222 -58 226 -63 q 203 -47 210 -51 q 174 -36 185 -39 q 155 -21 157 -24 q 133 -18 143 -20 q 115 -16 123 -17 q 94 -11 99 -10 q 82 -12 89 -12 q 65 -10 73 -10 q 50 -9 56 -9 q 33 -12 42 -9 q 17 -12 24 -14 q 10 -14 13 -13 q 4 -18 8 -16 q -10 -23 -10 -21 q -13 -25 -10 -24 q -27 -37 -23 -33 q -36 -43 -32 -40 q -49 -58 -47 -55 q -54 -62 -51 -61 q -62 -80 -59 -77 q -63 -92 -62 -92 q -65 -96 -65 -93 q -65 -105 -66 -100 q -65 -116 -65 -111 q -69 -135 -69 -135 q -67 -153 -63 -151 q -69 -158 -70 -154 q -64 -168 -66 -162 q -65 -177 -62 -173 q -47 -200 -47 -191 q -35 -208 -40 -204 q -23 -215 -29 -212 q -5 -226 -8 -225 q -1 -230 -2 -227 q 31 -244 20 -240 q 56 -246 42 -249 l 71 -244 q 80 -244 74 -245 q 90 -242 85 -242 q 111 -241 103 -244 q 134 -240 127 -240 q 149 -240 141 -241 q 181 -230 172 -234 q 199 -225 198 -226 q 203 -222 200 -223 q 226 -212 222 -217 q 236 -206 230 -208 q 247 -199 246 -202 q 250 -195 248 -196 q 267 -189 261 -193 q 279 -181 272 -185 l 298 -162 "},"!":{"x_min":69.171875,"x_max":207.53125,"ha":297,"o":"m 207 1020 q 196 1009 199 1010 q 196 1001 193 1007 q 192 972 193 984 q 185 949 191 960 q 188 943 187 946 q 189 933 189 940 q 190 917 191 919 q 189 912 189 915 q 189 904 189 908 q 188 893 188 899 q 190 882 191 884 q 189 877 189 880 q 191 857 192 861 q 189 850 191 853 q 192 833 191 843 q 191 816 193 823 q 192 794 198 805 q 193 782 195 790 q 195 766 192 774 q 193 750 193 754 q 196 743 193 746 q 193 735 193 739 q 188 729 192 731 q 193 711 191 720 q 189 694 195 702 q 189 681 191 682 q 188 678 188 680 q 189 670 189 675 q 192 663 189 666 q 190 647 189 652 q 188 640 191 642 q 188 623 189 625 q 187 621 187 622 q 185 609 187 613 q 185 600 183 604 q 177 581 183 583 q 174 554 174 567 q 172 533 174 542 q 166 512 161 516 q 166 502 168 505 q 161 496 164 499 q 159 480 158 485 q 155 473 160 476 q 160 463 157 466 q 165 454 162 459 q 160 436 160 443 q 155 425 157 428 q 155 420 153 423 q 155 398 153 409 q 156 390 155 394 q 160 383 157 386 q 159 365 158 374 q 158 345 160 356 l 155 330 q 153 317 153 321 q 154 309 154 313 q 148 284 154 291 q 143 271 142 278 q 132 256 134 259 q 126 250 130 253 q 115 248 116 244 q 111 255 113 252 q 116 269 119 268 q 115 272 113 269 q 119 288 119 287 q 122 293 119 290 q 120 303 119 297 q 122 316 122 309 q 119 333 122 325 q 119 347 116 340 q 113 375 118 368 q 112 392 109 381 q 109 415 111 409 q 105 428 107 421 q 101 446 103 444 q 103 456 104 451 q 104 463 101 461 q 99 484 101 478 q 96 501 96 491 q 96 519 96 514 q 96 531 96 524 q 97 540 96 535 q 99 550 99 545 q 96 575 96 569 q 99 587 97 580 q 99 600 99 595 q 100 611 100 606 q 100 633 97 630 q 97 657 94 642 q 97 666 99 661 q 96 676 96 671 q 96 685 96 680 q 97 693 97 689 q 96 709 97 699 q 97 729 96 718 q 97 744 93 740 q 95 760 97 755 q 96 769 93 766 q 94 781 94 777 q 93 789 93 786 q 93 808 94 803 q 92 819 92 813 l 93 842 q 92 858 93 854 q 94 869 92 862 q 91 883 92 883 q 90 884 90 883 q 90 893 89 889 q 92 900 90 896 l 92 923 q 92 940 93 937 q 89 946 90 942 q 82 961 78 960 q 88 963 85 961 q 100 975 97 972 q 105 980 103 978 q 105 994 105 991 q 107 998 104 996 q 123 1000 116 998 q 137 1003 130 1002 q 139 1010 134 1009 q 141 1018 143 1011 q 147 1022 146 1018 q 155 1024 149 1025 q 166 1038 164 1037 q 172 1040 169 1039 q 195 1026 189 1030 q 207 1020 200 1022 m 154 119 q 160 103 154 107 q 158 93 157 96 q 160 82 160 90 q 174 73 170 75 q 181 63 179 70 q 189 56 185 59 q 198 50 192 52 q 200 35 202 43 q 195 21 198 28 q 183 12 185 17 q 177 -2 179 -1 q 173 -4 176 -4 q 160 -21 168 -14 q 142 -33 153 -27 q 128 -28 134 -32 q 116 -23 123 -24 q 109 -13 113 -16 q 101 -4 104 -10 q 93 5 92 4 q 92 9 94 6 q 82 21 85 13 q 70 31 80 29 q 71 38 73 35 q 69 46 69 42 q 75 60 74 58 q 77 65 75 62 q 85 72 85 70 q 88 75 85 74 q 103 93 101 88 q 111 101 104 99 q 116 111 112 108 q 123 120 120 113 q 131 123 127 122 q 139 124 135 124 q 154 119 151 116 "}," ":{"x_min":0,"x_max":0,"ha":416},"{":{"x_min":41.703125,"x_max":648.234375,"ha":537,"o":"m 634 1083 q 640 1077 637 1079 q 647 1071 644 1074 q 646 1058 649 1062 q 641 1049 642 1055 q 629 1047 633 1049 q 622 1039 625 1044 q 612 1036 615 1040 q 598 1033 609 1032 q 580 1031 584 1032 q 569 1029 576 1030 q 554 1036 554 1037 q 550 1034 553 1034 q 531 1033 533 1037 q 524 1031 527 1032 q 516 1032 522 1030 q 506 1024 507 1026 q 504 1020 505 1022 q 494 1007 497 1010 q 493 999 491 1005 q 481 987 486 988 q 478 979 476 986 q 468 967 467 969 q 467 963 469 965 q 454 946 458 948 q 451 928 451 931 q 451 919 450 925 q 446 903 448 904 q 444 900 444 902 q 443 887 444 889 q 439 881 442 884 q 438 868 440 872 q 435 854 436 864 q 425 823 432 830 q 427 807 428 815 q 431 792 427 798 q 428 777 428 785 q 428 760 428 769 q 428 746 425 751 q 429 728 428 732 q 428 718 431 724 q 426 702 425 704 q 427 699 427 701 q 425 687 424 690 q 427 679 427 683 q 427 663 427 664 q 428 660 428 661 q 425 643 425 645 q 421 638 424 641 q 425 618 427 630 q 423 600 425 603 q 420 569 420 577 q 419 554 419 556 q 420 550 420 553 q 417 533 420 538 q 416 511 415 520 q 409 502 408 505 q 405 497 411 499 q 404 486 405 486 q 406 481 404 485 q 400 470 401 478 q 402 455 400 462 q 396 444 397 444 q 393 440 394 443 q 389 433 390 438 q 385 424 387 428 q 379 415 382 420 q 377 401 377 409 q 364 384 367 390 q 360 368 362 378 q 352 360 354 367 q 344 351 351 354 q 339 336 340 337 q 335 335 337 335 q 326 324 330 329 q 317 310 321 318 q 306 304 310 307 q 295 298 302 301 q 280 288 282 290 q 255 278 260 280 q 241 275 250 275 q 233 269 236 267 q 227 268 230 271 q 238 258 230 261 q 252 250 245 255 q 264 244 257 248 q 278 237 271 240 q 288 231 287 233 q 291 230 288 229 l 299 211 l 306 198 q 318 185 313 188 q 328 177 324 181 q 335 166 335 168 q 336 162 335 165 q 348 149 341 151 q 349 137 345 142 q 355 126 352 132 q 356 119 356 123 q 358 111 356 115 q 364 96 364 97 q 366 93 363 94 q 370 70 368 80 q 375 46 373 50 q 373 36 377 42 q 377 16 378 18 q 378 -2 377 4 q 383 -17 379 -9 q 387 -33 386 -25 q 386 -46 389 -40 q 386 -62 385 -61 q 387 -66 387 -63 q 382 -82 382 -74 q 381 -96 382 -89 q 383 -109 382 -107 q 381 -116 383 -112 q 385 -132 386 -127 q 387 -141 385 -138 q 385 -153 383 -150 q 387 -160 386 -157 q 386 -174 385 -173 q 387 -177 387 -176 q 387 -187 386 -185 q 387 -192 387 -189 q 387 -201 389 -196 q 386 -210 386 -206 q 390 -225 389 -225 q 390 -227 392 -225 q 391 -240 389 -237 q 392 -248 393 -244 q 393 -264 394 -260 q 393 -276 392 -268 l 398 -298 q 409 -333 401 -325 q 419 -362 415 -351 q 435 -379 424 -373 q 443 -391 440 -390 q 446 -396 446 -392 q 459 -405 457 -402 q 463 -411 461 -408 q 474 -411 470 -408 q 486 -415 478 -415 q 503 -417 499 -417 q 510 -413 508 -417 q 524 -411 523 -409 q 527 -412 524 -413 q 550 -412 543 -409 q 537 -427 541 -424 q 531 -432 534 -431 l 515 -438 q 506 -439 510 -436 q 497 -440 503 -442 q 484 -446 484 -444 q 481 -448 484 -448 q 466 -451 467 -453 q 462 -448 465 -450 q 442 -451 455 -448 q 425 -447 432 -446 q 412 -446 419 -448 q 400 -444 402 -447 q 390 -443 397 -440 q 381 -434 386 -439 q 367 -431 377 -428 q 356 -426 356 -424 q 352 -427 356 -428 q 336 -413 344 -417 q 322 -401 329 -405 q 311 -383 316 -386 q 305 -378 307 -381 q 295 -349 298 -363 q 294 -337 293 -340 q 291 -329 295 -333 q 291 -316 293 -318 q 290 -310 290 -313 q 290 -302 288 -306 q 287 -295 291 -298 q 286 -284 286 -288 q 283 -276 287 -280 q 284 -242 284 -260 q 283 -207 283 -223 q 284 -187 282 -193 q 283 -173 286 -180 q 286 -155 287 -160 q 284 -146 284 -151 q 286 -127 282 -132 q 283 -106 283 -116 q 282 -85 283 -96 q 281 -75 282 -81 q 280 -63 280 -70 q 280 -52 280 -58 q 279 -39 279 -46 q 278 -27 278 -33 q 276 -13 278 -20 q 274 -6 276 -9 q 271 2 272 -2 q 271 15 272 12 q 269 21 269 18 q 269 45 269 32 q 261 67 268 58 q 254 83 256 80 q 249 92 252 86 q 246 112 253 104 q 236 130 238 120 q 220 158 226 151 q 210 174 214 165 q 183 195 195 195 q 170 208 174 204 q 160 210 166 211 q 141 217 143 218 q 137 217 139 217 q 99 219 113 218 q 70 219 85 219 q 52 220 58 215 q 42 229 47 225 q 42 238 43 234 q 44 245 40 242 q 50 251 47 249 q 55 257 52 253 q 77 272 69 271 q 90 278 85 274 q 107 281 105 280 q 112 279 109 282 q 132 280 122 284 q 148 286 142 284 q 155 291 154 287 q 170 290 170 288 q 172 291 169 291 q 210 299 189 293 q 228 316 225 310 q 238 324 231 321 q 245 339 244 336 q 250 344 246 343 q 261 362 256 358 q 268 371 265 367 q 275 383 271 378 q 279 397 279 389 q 287 411 284 406 q 293 419 290 415 q 298 437 295 435 q 301 440 301 439 q 308 465 303 458 q 311 482 313 472 q 318 496 316 495 q 320 500 320 497 q 321 514 320 512 q 322 519 322 516 q 324 529 324 527 q 324 537 325 531 q 326 552 325 548 q 328 559 326 556 q 326 568 329 562 q 330 594 329 588 q 332 610 332 599 q 333 631 333 622 q 330 645 332 640 q 333 680 330 668 q 333 704 335 693 q 333 718 336 713 q 335 736 333 735 q 336 739 336 737 q 334 754 333 750 q 335 762 335 758 q 336 774 335 773 q 337 778 337 775 q 337 792 337 785 q 336 805 336 798 q 343 832 337 817 q 339 844 340 836 q 343 854 339 851 q 345 869 343 865 q 348 876 347 873 q 356 907 352 899 q 358 921 358 918 q 360 926 359 923 q 366 944 364 941 q 366 952 367 946 q 373 963 368 959 q 377 976 378 967 q 383 985 381 979 q 389 995 385 991 q 398 1013 398 1010 q 401 1020 398 1017 q 414 1030 411 1029 q 417 1037 417 1032 q 433 1047 428 1047 q 438 1053 438 1048 q 455 1062 454 1060 q 461 1063 457 1063 q 480 1074 474 1074 q 507 1081 500 1078 q 526 1082 515 1085 q 541 1085 541 1085 q 543 1086 541 1086 q 557 1086 556 1085 q 561 1089 558 1087 q 604 1085 588 1091 q 634 1083 619 1079 "},"X":{"x_min":-199.390625,"x_max":1223.515625,"ha":779,"o":"m 237 1062 q 242 1047 241 1052 q 250 1041 244 1043 q 263 1014 257 1020 q 271 999 269 1009 q 279 984 276 988 q 280 973 282 980 l 287 960 q 288 950 288 954 q 291 944 288 946 q 295 929 294 929 q 299 920 298 922 q 302 915 301 918 q 306 893 305 899 q 312 875 311 881 q 314 862 313 869 q 320 847 320 854 q 324 834 322 834 q 326 831 325 834 q 333 813 332 817 q 332 803 335 809 q 343 775 339 788 q 342 760 344 762 q 340 756 340 759 q 343 748 341 751 q 348 743 345 746 q 354 720 349 728 q 359 701 358 712 q 364 670 366 686 q 368 651 370 655 q 368 644 367 648 q 373 636 370 640 q 374 629 377 633 l 381 615 q 385 598 386 602 q 381 590 383 594 q 389 567 386 573 q 396 556 393 561 q 397 545 396 548 q 400 539 398 542 q 405 515 394 522 q 405 497 402 507 q 405 477 408 486 q 419 452 412 461 q 419 432 425 443 q 423 423 421 428 q 427 415 424 417 q 426 405 425 411 q 430 397 427 400 q 430 387 427 392 q 431 374 434 383 q 440 360 439 360 q 449 330 444 340 q 451 310 454 321 q 455 300 454 305 q 459 288 457 295 q 470 307 469 302 q 474 314 472 311 q 483 337 481 330 q 489 347 485 343 q 500 367 491 358 q 507 387 500 382 q 514 406 514 393 q 524 425 520 421 q 527 435 527 428 q 533 447 531 446 q 538 451 535 448 q 543 466 541 465 q 545 470 545 467 q 552 485 552 481 q 558 493 554 489 q 560 504 561 497 q 565 511 564 507 q 569 519 567 515 q 574 527 572 523 q 576 538 576 531 q 583 552 584 552 q 581 556 581 553 q 590 565 588 558 q 598 576 592 572 q 602 591 598 585 q 609 606 606 596 q 626 634 622 623 q 636 651 629 644 q 639 661 636 657 q 642 675 642 666 q 655 691 649 682 q 667 709 660 699 q 678 727 675 727 q 689 746 678 737 q 696 760 697 759 q 697 762 695 760 q 710 775 706 773 q 725 796 721 789 q 731 809 728 803 q 737 814 736 811 q 746 819 739 817 q 758 837 754 832 q 769 846 763 842 l 778 861 q 787 867 785 865 q 793 872 789 869 q 799 881 796 877 q 807 889 803 885 q 819 904 816 902 q 828 916 827 912 q 840 925 838 922 q 846 930 843 927 q 859 944 858 942 q 864 946 861 946 q 874 962 872 959 q 884 965 877 965 q 890 971 888 968 q 895 978 892 975 q 914 988 911 987 q 919 994 918 988 q 934 1001 933 999 q 938 1003 935 1003 q 952 1013 949 1010 q 957 1020 954 1017 q 966 1024 963 1021 q 973 1030 969 1028 q 984 1037 983 1036 q 987 1039 984 1039 q 999 1047 994 1043 q 1011 1053 1005 1051 l 1028 1060 q 1041 1068 1037 1067 q 1047 1075 1045 1068 q 1062 1077 1059 1077 q 1068 1075 1066 1078 q 1078 1083 1077 1081 q 1081 1086 1079 1086 q 1092 1089 1091 1090 q 1096 1089 1093 1089 q 1117 1092 1109 1093 q 1135 1096 1125 1091 q 1143 1093 1138 1093 q 1152 1091 1148 1094 q 1163 1093 1162 1093 q 1170 1094 1163 1094 l 1193 1094 q 1213 1088 1209 1091 q 1223 1085 1216 1085 q 1219 1070 1220 1078 q 1211 1060 1218 1062 q 1201 1047 1203 1048 q 1196 1045 1199 1045 q 1173 1014 1176 1032 q 1163 1015 1167 1015 q 1154 1018 1159 1015 q 1142 1018 1147 1015 q 1132 1018 1136 1021 q 1110 1023 1117 1024 q 1098 1025 1102 1022 q 1091 1023 1096 1022 q 1083 1024 1087 1024 q 1069 1021 1072 1022 q 1062 1020 1066 1020 q 1055 1017 1056 1020 q 1047 1015 1053 1014 q 1029 1010 1030 1011 q 1025 1007 1028 1009 q 1005 1001 1011 1006 q 987 990 998 995 q 969 979 972 984 q 959 973 965 973 q 950 963 952 961 q 946 964 949 965 q 937 956 940 957 q 931 952 934 956 q 922 939 921 940 q 922 935 923 938 q 916 930 918 933 q 907 929 914 927 q 898 916 902 918 q 895 910 895 914 q 882 900 885 903 q 876 893 878 897 q 866 883 869 885 q 861 878 864 880 q 853 868 857 870 q 847 859 849 866 q 839 853 843 857 q 832 843 835 849 q 813 824 816 830 q 803 815 805 817 q 801 807 800 813 q 793 799 796 804 q 785 792 790 794 q 779 781 781 785 q 774 778 778 778 q 760 752 763 759 q 750 740 756 746 q 748 731 750 735 q 747 721 747 728 q 739 714 743 718 q 736 701 735 709 q 723 689 721 690 q 725 685 725 687 q 717 671 720 682 q 712 661 714 666 q 709 649 709 656 q 694 619 694 637 q 682 608 687 611 q 680 598 678 604 q 675 589 678 594 q 671 577 672 584 q 659 561 660 562 q 656 557 659 560 q 651 539 653 545 q 645 529 648 534 q 640 518 642 523 q 638 505 638 512 q 630 497 633 497 q 628 489 626 496 q 604 453 617 461 q 600 432 600 440 q 592 420 599 423 q 588 407 588 411 q 583 404 587 404 q 579 394 581 396 q 579 386 576 393 q 571 376 572 382 q 572 368 571 370 q 563 356 568 358 q 560 347 558 355 q 550 330 553 333 q 550 322 548 326 q 545 314 548 317 q 543 305 542 311 q 535 291 537 293 q 534 287 533 290 q 527 280 529 284 q 523 271 526 275 q 508 255 510 260 q 503 228 512 237 q 493 204 495 219 q 489 182 489 188 q 491 169 488 176 q 499 152 499 155 q 501 143 499 149 q 507 124 500 128 q 510 113 505 118 q 511 103 514 108 q 512 89 512 92 q 514 81 511 86 q 518 64 516 67 q 518 58 520 61 q 529 40 529 44 q 533 29 530 35 q 538 5 537 6 q 546 -12 545 -6 q 553 -20 548 -17 q 558 -43 553 -35 q 565 -65 564 -51 q 563 -77 560 -77 q 568 -82 567 -78 q 576 -100 565 -97 q 577 -110 573 -108 q 577 -116 580 -112 q 585 -135 581 -134 q 584 -141 590 -137 q 592 -156 590 -154 q 592 -164 595 -158 q 599 -172 594 -170 q 602 -181 604 -174 q 607 -193 609 -189 q 604 -200 606 -198 q 617 -212 610 -208 l 621 -229 q 636 -255 629 -248 q 640 -273 638 -271 q 645 -278 642 -275 q 652 -295 642 -293 q 653 -303 651 -301 q 655 -310 655 -306 q 661 -320 657 -314 q 668 -332 666 -326 q 674 -346 672 -341 q 680 -352 675 -351 q 682 -366 680 -366 q 685 -367 683 -366 q 688 -374 685 -373 q 690 -382 691 -375 q 688 -394 683 -393 q 695 -398 693 -396 q 704 -413 702 -411 q 706 -421 706 -416 q 716 -438 714 -435 q 716 -440 718 -440 q 727 -457 725 -453 q 732 -462 728 -461 q 737 -477 733 -474 q 744 -485 741 -480 q 755 -499 752 -495 q 765 -510 763 -508 q 770 -514 767 -511 q 786 -530 774 -526 q 794 -543 788 -541 q 799 -550 797 -546 q 807 -554 801 -554 q 820 -571 817 -567 q 828 -577 823 -575 q 856 -596 847 -592 q 876 -606 865 -600 q 888 -613 885 -613 q 891 -615 891 -613 q 926 -619 911 -622 q 934 -624 930 -622 q 944 -623 938 -626 q 961 -626 956 -628 q 972 -623 967 -625 q 982 -623 980 -625 q 987 -621 984 -622 q 1006 -619 999 -619 q 1013 -617 1009 -618 q 1021 -615 1018 -617 q 1041 -606 1037 -609 q 1047 -600 1044 -603 q 1059 -591 1058 -592 q 1067 -575 1064 -576 q 1072 -572 1070 -575 q 1077 -556 1075 -558 q 1078 -550 1078 -554 q 1084 -535 1082 -537 q 1085 -530 1086 -533 q 1083 -518 1082 -519 q 1083 -514 1085 -516 q 1081 -502 1081 -504 q 1078 -497 1081 -500 q 1082 -482 1081 -484 q 1081 -477 1083 -481 q 1074 -467 1078 -473 q 1075 -455 1070 -462 q 1067 -444 1070 -450 q 1058 -435 1064 -438 q 1048 -423 1052 -423 q 1044 -419 1044 -424 q 1033 -419 1037 -421 q 1024 -416 1029 -416 q 1013 -419 1018 -416 q 1003 -419 1009 -421 q 986 -427 991 -428 q 975 -425 980 -425 q 959 -421 960 -424 q 957 -415 957 -417 q 968 -408 967 -409 q 972 -405 969 -408 q 982 -396 982 -398 q 987 -393 983 -393 q 998 -381 996 -386 q 1003 -374 999 -377 q 1020 -366 1020 -370 q 1040 -355 1039 -358 q 1050 -356 1044 -358 q 1060 -358 1056 -355 q 1069 -356 1064 -356 q 1078 -352 1074 -355 q 1100 -358 1096 -358 q 1106 -360 1104 -358 q 1119 -364 1115 -363 q 1124 -370 1124 -364 q 1142 -381 1135 -373 q 1154 -396 1148 -389 q 1159 -411 1157 -408 q 1165 -416 1162 -413 q 1171 -434 1171 -430 q 1174 -439 1171 -438 q 1174 -449 1171 -444 q 1180 -455 1176 -454 q 1178 -478 1180 -473 q 1176 -486 1176 -482 q 1175 -495 1174 -489 q 1173 -504 1176 -501 q 1167 -519 1169 -516 q 1163 -520 1166 -522 q 1165 -531 1166 -527 q 1162 -541 1163 -535 q 1153 -552 1158 -550 q 1148 -560 1148 -553 q 1139 -568 1142 -562 q 1129 -576 1136 -573 q 1115 -587 1117 -583 q 1110 -592 1113 -591 q 1090 -610 1094 -604 q 1066 -626 1078 -619 q 1044 -638 1055 -632 q 1023 -649 1029 -644 q 1006 -653 1017 -653 q 988 -660 995 -660 q 969 -674 972 -671 q 942 -682 954 -672 q 925 -687 927 -682 q 909 -685 919 -683 q 888 -686 899 -687 q 874 -684 876 -683 q 868 -683 872 -685 q 853 -686 858 -682 q 834 -679 846 -680 q 812 -679 822 -678 q 795 -666 801 -666 q 786 -659 789 -666 q 755 -651 773 -651 q 748 -642 751 -647 q 739 -636 744 -638 q 735 -628 737 -630 q 732 -618 732 -625 q 716 -609 722 -613 q 708 -599 710 -606 q 695 -590 697 -591 q 693 -585 693 -588 q 687 -579 690 -583 q 682 -569 683 -576 q 670 -558 671 -560 q 667 -556 670 -557 q 656 -542 661 -546 l 651 -526 q 636 -511 637 -516 q 629 -505 636 -505 q 628 -494 629 -496 q 625 -488 626 -492 q 617 -473 619 -476 q 611 -457 611 -461 q 603 -443 603 -448 q 598 -431 599 -432 q 598 -424 596 -430 q 593 -415 595 -416 q 590 -411 591 -413 q 587 -401 590 -404 q 584 -396 584 -398 q 581 -386 583 -390 q 576 -377 579 -382 q 571 -358 572 -360 q 569 -354 569 -356 q 558 -327 561 -337 q 550 -309 554 -317 q 541 -288 542 -293 q 538 -279 539 -283 q 532 -266 531 -271 q 529 -259 533 -261 q 523 -244 524 -245 q 520 -240 522 -242 q 516 -228 518 -229 q 514 -225 515 -227 q 512 -216 512 -221 q 511 -207 512 -211 q 497 -185 504 -188 q 499 -179 500 -181 q 499 -170 497 -176 l 489 -154 l 484 -137 q 481 -130 481 -134 q 478 -120 481 -126 q 474 -106 476 -108 q 473 -101 473 -104 q 467 -82 469 -86 q 463 -73 465 -78 q 461 -58 462 -61 q 458 -54 461 -55 q 451 -35 455 -40 q 451 -25 454 -28 q 447 -14 447 -21 q 442 5 442 -4 q 436 19 435 18 q 436 21 436 20 q 429 38 431 32 q 424 48 428 44 q 413 54 415 59 q 406 46 412 48 q 396 24 398 32 q 386 13 393 16 q 381 -2 382 -1 q 372 -10 373 -8 q 368 -13 371 -12 q 360 -27 362 -27 q 358 -29 359 -27 q 347 -42 348 -40 q 345 -48 345 -44 q 337 -56 340 -51 q 328 -63 333 -61 q 319 -77 321 -77 q 317 -81 317 -78 q 306 -92 307 -90 q 302 -97 305 -94 q 290 -111 293 -109 q 288 -116 288 -112 q 280 -124 283 -119 q 269 -130 276 -128 q 259 -149 263 -137 q 250 -158 252 -157 q 249 -161 249 -158 q 229 -178 234 -172 q 217 -187 223 -184 q 206 -198 208 -198 q 191 -211 193 -210 q 177 -226 177 -222 q 173 -233 176 -230 q 159 -238 161 -237 q 155 -244 157 -240 q 142 -249 143 -248 q 138 -252 141 -250 q 124 -263 131 -257 q 111 -272 118 -268 q 99 -283 100 -282 q 85 -290 89 -290 q 70 -297 74 -294 q 63 -303 66 -301 q 47 -309 50 -307 q 43 -314 44 -310 q 27 -317 36 -316 q 14 -322 18 -318 q 5 -324 10 -322 q -4 -324 0 -325 q -27 -330 -18 -332 q -43 -329 -35 -329 q -58 -326 -54 -332 q -73 -324 -71 -325 q -77 -320 -74 -322 q -92 -314 -86 -317 q -100 -311 -96 -311 q -107 -310 -104 -311 q -128 -297 -122 -302 q -141 -290 -134 -293 q -148 -278 -149 -279 q -147 -276 -147 -278 q -171 -251 -165 -259 q -184 -234 -177 -244 q -190 -218 -188 -219 q -193 -214 -192 -217 l -196 -199 q -198 -191 -198 -198 q -199 -180 -199 -184 q -198 -164 -199 -165 q -196 -161 -198 -164 q -191 -134 -195 -146 q -184 -109 -187 -123 q -183 -96 -185 -99 q -180 -92 -180 -94 q -176 -74 -176 -78 q -174 -67 -176 -70 q -169 -60 -170 -62 q -165 -55 -168 -58 q -160 -42 -161 -47 q -155 -36 -160 -37 q -146 -12 -149 -20 q -141 -4 -143 -8 q -135 4 -138 0 q -126 17 -131 10 q -113 31 -120 24 l -104 47 q -85 60 -86 56 q -80 63 -84 63 q -73 71 -77 69 q -66 78 -69 73 q -56 84 -59 80 q -46 92 -52 89 q -34 100 -35 97 q -29 103 -33 103 q -11 111 -13 109 q -6 115 -9 113 q 3 115 -1 112 q 14 120 8 119 q 30 120 28 120 q 35 119 32 119 q 49 119 42 119 q 65 116 56 119 q 81 104 81 108 q 101 88 94 92 q 111 65 101 74 q 120 36 109 46 q 121 23 119 24 q 123 18 123 21 q 116 0 123 9 q 116 -7 119 -5 q 115 -16 113 -9 q 105 -33 109 -28 q 93 -35 100 -37 q 90 -43 92 -40 q 85 -50 88 -46 q 56 -65 67 -63 q 48 -52 47 -54 q 47 -48 48 -51 q 47 -29 44 -36 q 42 -18 42 -20 q 42 -13 43 -16 q 35 0 37 -2 q 33 6 32 2 q 17 25 25 20 q 11 32 14 28 q 4 37 8 36 q -8 39 -8 37 q -12 40 -9 40 q -19 40 -14 40 q -29 42 -24 39 q -44 36 -40 37 q -54 32 -48 35 q -61 19 -58 20 q -69 16 -65 18 q -74 4 -70 5 q -77 -2 -78 4 q -84 -7 -82 -4 q -92 -13 -86 -10 q -100 -43 -96 -39 q -98 -56 -97 -48 q -103 -66 -99 -63 q -109 -100 -105 -90 q -112 -118 -115 -115 q -113 -126 -109 -122 q -110 -132 -112 -130 q -109 -141 -108 -134 q -101 -162 -104 -157 q -97 -174 -99 -168 q -88 -188 -89 -188 q -80 -193 -84 -191 q -73 -198 -77 -196 q -59 -217 -63 -211 q -51 -227 -55 -223 q -35 -230 -43 -229 q -20 -234 -28 -231 q 9 -243 0 -240 q 25 -245 18 -246 q 53 -241 47 -244 q 66 -236 59 -238 l 81 -236 q 96 -229 94 -230 q 116 -218 109 -219 q 127 -207 124 -210 q 134 -207 130 -204 q 149 -196 146 -200 q 158 -189 151 -191 q 170 -174 168 -180 q 179 -166 172 -169 q 187 -154 185 -158 q 195 -150 188 -150 q 212 -130 202 -137 q 225 -109 222 -123 q 232 -103 230 -107 q 241 -97 234 -99 q 260 -71 255 -78 q 272 -59 265 -65 q 282 -46 279 -44 q 290 -29 290 -32 q 294 -27 291 -27 l 301 -9 q 320 14 310 8 q 326 29 325 23 q 333 37 328 35 l 339 56 q 349 67 348 62 q 354 74 349 71 q 358 85 355 81 q 363 93 360 89 q 377 122 371 107 q 387 138 385 135 q 387 147 389 141 q 392 168 392 162 q 389 177 392 173 q 385 192 386 189 q 382 202 383 196 q 379 214 381 208 q 376 225 378 223 q 374 229 374 226 q 372 242 371 236 q 367 253 373 249 q 362 278 367 268 q 359 303 358 288 q 352 322 352 316 q 349 332 352 329 q 349 343 351 341 q 347 348 347 345 q 343 367 343 364 q 341 378 341 373 q 340 387 341 383 q 337 400 336 398 q 337 404 337 401 q 333 414 336 409 q 329 425 330 419 q 328 440 329 435 q 323 450 325 443 q 322 461 321 457 q 315 478 314 474 q 313 484 316 482 q 314 490 314 488 q 311 499 313 492 q 309 507 309 503 q 307 515 309 511 q 303 528 302 524 q 301 534 303 531 q 301 545 301 542 q 299 553 301 549 q 293 572 293 569 q 293 577 294 575 q 286 603 287 599 q 281 614 283 611 q 279 619 279 617 q 278 627 278 622 q 278 634 278 632 q 275 647 275 644 q 274 652 275 649 q 269 661 271 657 q 268 674 268 666 q 259 699 264 693 q 255 713 255 706 q 252 719 255 716 q 249 728 250 722 q 246 744 248 743 q 245 747 245 744 q 242 765 242 760 q 244 773 241 769 q 236 781 237 774 q 230 790 236 788 q 229 802 233 797 q 227 813 226 807 q 223 822 226 819 q 221 834 219 826 q 217 843 219 839 q 211 849 214 846 q 210 856 211 854 q 210 864 208 858 q 202 886 203 881 q 198 897 200 891 q 196 905 196 900 q 195 914 196 910 q 188 927 191 926 q 188 931 185 929 q 182 947 185 944 q 177 953 179 950 q 168 975 172 971 q 161 987 164 980 l 151 1001 q 144 1005 149 1003 q 139 1014 139 1007 q 128 1018 132 1014 q 118 1020 124 1021 q 101 1032 107 1028 q 81 1037 94 1037 q 61 1043 67 1044 q 52 1041 55 1041 q 38 1037 39 1039 q 35 1036 37 1036 q 21 1030 28 1033 q 9 1024 14 1028 q -6 1008 -4 1011 q -12 1001 -9 1005 q -23 983 -23 986 q -25 979 -23 980 q -32 959 -35 961 q -27 953 -29 956 q -33 933 -31 938 q -35 923 -35 929 q -34 900 -33 908 q -32 885 -35 892 q -25 872 -24 873 q -25 868 -27 870 q -18 849 -18 855 q -14 838 -17 843 q -12 822 -16 827 q -5 811 -8 817 q 8 803 5 808 q 30 802 18 800 q 40 817 42 804 q 55 830 56 826 q 74 835 71 836 q 80 832 77 834 q 80 821 80 826 q 80 811 81 816 q 75 803 80 808 q 67 796 70 798 q 54 778 56 784 q 46 771 52 773 q 40 762 42 767 q 31 755 37 756 q 18 743 20 746 q 3 735 6 736 q 0 731 0 735 q -8 731 -4 733 q -17 728 -12 728 q -35 729 -33 728 q -40 729 -37 731 q -54 729 -50 729 q -61 729 -58 728 l -77 739 q -82 747 -78 744 q -89 752 -85 750 q -94 765 -94 760 q -97 767 -94 769 q -99 786 -100 782 q -100 792 -99 789 q -104 809 -103 808 q -107 812 -105 809 q -111 832 -109 826 q -113 846 -113 839 q -114 862 -115 858 q -115 870 -113 866 q -113 890 -115 885 q -113 902 -111 895 q -109 908 -109 903 q -107 916 -109 914 q -101 934 -103 927 q -93 948 -99 941 q -88 962 -89 959 q -82 967 -88 965 q -76 981 -74 980 q -77 984 -78 982 q -56 1005 -63 1001 q -48 1022 -50 1010 q -34 1032 -36 1030 q -29 1037 -32 1034 q -18 1047 -18 1045 q -12 1049 -17 1049 q 0 1068 1 1059 l 14 1074 q 31 1087 28 1086 q 36 1090 33 1089 q 51 1097 47 1093 q 62 1102 55 1101 q 75 1108 67 1106 q 89 1112 82 1109 q 104 1119 101 1115 q 113 1118 109 1116 q 124 1117 118 1120 l 139 1116 q 158 1108 154 1112 q 170 1104 165 1109 q 180 1101 174 1100 q 189 1094 183 1096 q 196 1086 195 1093 q 211 1083 207 1085 q 218 1079 215 1082 q 237 1062 222 1066 "},"P":{"x_min":0,"x_max":1132.140625,"ha":1062,"o":"m 524 916 q 525 897 526 903 q 523 888 524 892 l 503 869 q 491 864 493 865 q 488 859 489 862 q 479 854 481 854 q 474 853 477 854 q 465 845 466 846 q 463 841 465 843 q 456 835 458 838 q 448 830 454 832 q 440 817 442 819 q 436 813 439 816 q 429 804 431 807 q 430 797 428 801 q 423 790 427 793 q 421 778 420 786 q 413 764 412 767 q 411 754 413 760 q 404 736 405 739 q 402 721 401 728 q 401 709 402 714 q 397 683 402 691 q 396 664 392 675 q 393 643 392 651 q 394 629 394 636 q 394 608 392 617 q 394 594 396 599 q 393 577 392 579 q 392 569 394 575 q 394 552 393 557 q 396 545 396 548 q 395 533 396 534 q 394 530 394 533 q 397 510 394 514 q 400 504 400 507 q 403 484 404 488 q 402 478 402 481 q 404 461 405 462 q 404 458 404 461 q 406 447 408 448 q 405 443 405 446 q 408 433 409 435 q 408 428 408 431 q 411 417 412 419 q 411 412 411 415 q 413 398 415 400 q 413 392 412 397 q 416 384 415 389 q 419 377 417 379 q 417 360 413 363 q 416 351 420 358 q 423 328 421 335 q 430 317 425 321 q 435 301 431 306 q 440 284 439 295 q 453 257 448 265 q 455 241 458 249 q 457 227 459 226 q 455 225 455 227 q 466 206 463 210 q 470 196 469 203 q 472 185 473 191 q 477 177 472 180 q 482 157 481 161 q 485 150 482 153 q 484 137 482 137 q 488 134 486 137 q 499 111 496 116 q 508 96 504 100 q 514 76 511 81 q 520 66 516 71 q 520 56 522 61 q 524 50 519 52 q 525 39 526 40 q 527 35 524 37 q 530 27 529 32 q 534 20 531 23 q 536 6 534 9 q 538 -4 538 2 q 545 -21 542 -8 q 547 -33 548 -29 q 550 -37 546 -36 q 552 -52 553 -51 q 553 -56 552 -54 q 558 -77 558 -67 q 564 -99 565 -93 q 569 -107 564 -104 q 569 -135 569 -124 q 569 -161 569 -146 q 571 -177 569 -169 q 567 -188 572 -184 q 569 -206 572 -195 q 564 -224 564 -221 q 561 -227 564 -227 q 558 -245 564 -238 q 548 -259 553 -256 q 545 -267 545 -263 q 541 -274 545 -271 q 535 -288 537 -286 q 529 -291 533 -290 q 516 -310 523 -302 q 504 -329 510 -318 q 491 -340 495 -337 q 485 -345 488 -343 q 460 -366 469 -362 q 447 -382 451 -371 q 437 -385 440 -382 q 427 -390 434 -389 q 423 -398 425 -396 q 417 -405 420 -401 q 405 -408 411 -405 q 396 -416 400 -412 q 376 -426 381 -420 q 362 -432 371 -432 q 339 -441 344 -438 q 326 -444 335 -444 q 297 -449 306 -446 q 279 -454 288 -453 q 263 -454 268 -454 q 255 -457 257 -454 q 244 -457 249 -455 q 231 -457 238 -458 q 219 -457 221 -455 q 217 -457 218 -458 q 184 -453 193 -457 q 164 -448 174 -448 q 150 -437 151 -439 q 143 -436 149 -435 q 128 -428 127 -431 q 126 -425 128 -425 q 113 -421 115 -424 q 109 -415 112 -417 q 94 -409 97 -411 q 90 -402 90 -408 q 78 -392 81 -393 q 77 -389 74 -392 q 54 -374 58 -382 q 42 -363 50 -366 q 32 -347 36 -347 q 25 -329 28 -335 q 17 -317 21 -324 q 13 -302 16 -305 q 10 -293 10 -299 q 4 -276 4 -280 q 1 -271 4 -272 q 2 -252 2 -255 q 0 -246 1 -249 q 1 -230 2 -238 q 0 -212 0 -222 q 0 -185 0 -198 q 10 -165 1 -172 q 15 -141 12 -146 q 20 -127 18 -135 q 30 -117 27 -119 q 35 -112 33 -115 q 43 -99 39 -103 q 50 -90 46 -93 q 58 -80 54 -86 q 70 -66 67 -67 q 80 -50 77 -51 q 85 -47 82 -50 q 110 -24 99 -31 q 132 -9 122 -17 q 143 0 138 -4 q 155 6 149 4 q 164 12 158 12 q 172 18 169 13 q 190 25 183 20 q 211 32 198 31 q 229 35 222 33 q 241 37 236 36 q 263 33 250 31 q 284 23 279 29 q 301 16 290 17 q 314 4 311 4 q 324 -7 325 -6 q 325 -10 324 -8 q 339 -29 337 -23 q 347 -37 341 -35 q 348 -53 348 -47 q 351 -66 348 -59 q 342 -84 345 -84 q 339 -90 339 -85 q 328 -92 332 -90 q 316 -96 324 -94 q 291 -113 299 -109 q 276 -120 283 -116 q 264 -108 264 -111 q 261 -103 264 -105 l 249 -90 q 238 -78 245 -84 q 229 -68 230 -67 q 226 -67 227 -69 q 204 -56 211 -61 q 188 -48 196 -51 q 160 -50 168 -50 q 149 -58 151 -51 q 138 -61 139 -59 q 135 -65 137 -62 q 127 -69 130 -66 q 120 -74 124 -73 q 119 -82 120 -80 q 119 -89 118 -84 q 100 -112 109 -103 q 96 -122 99 -120 q 92 -126 94 -124 q 93 -143 96 -131 q 94 -158 93 -153 q 93 -177 90 -172 q 93 -195 93 -188 q 96 -210 93 -202 q 96 -223 94 -222 q 99 -225 99 -223 q 102 -244 100 -241 q 105 -253 104 -248 q 109 -265 108 -260 q 116 -276 111 -269 q 126 -288 124 -288 q 141 -305 138 -299 q 149 -313 145 -310 q 162 -323 161 -322 q 162 -326 164 -324 q 182 -339 179 -335 q 193 -343 185 -343 q 204 -351 196 -349 q 217 -358 212 -352 q 227 -360 223 -358 q 237 -366 231 -363 q 250 -366 249 -364 q 253 -367 250 -367 q 276 -368 269 -371 q 311 -373 297 -373 q 337 -368 326 -373 q 349 -368 348 -367 q 355 -367 351 -368 q 366 -362 359 -364 q 379 -362 373 -359 q 386 -358 383 -360 q 393 -354 389 -356 q 411 -349 411 -349 q 421 -338 419 -339 q 427 -335 424 -337 q 437 -324 436 -328 q 442 -320 438 -321 q 448 -306 446 -307 q 453 -303 450 -305 q 455 -295 453 -299 q 459 -286 457 -290 q 463 -274 463 -280 q 467 -263 463 -267 q 466 -252 465 -257 q 469 -244 467 -246 q 467 -232 465 -234 q 469 -227 470 -230 q 470 -217 469 -222 q 467 -208 472 -212 q 470 -190 470 -193 q 472 -185 469 -187 q 466 -160 466 -166 q 463 -151 466 -154 q 463 -138 466 -138 q 459 -134 459 -138 q 458 -119 462 -126 q 457 -104 454 -112 q 449 -82 450 -85 q 448 -70 448 -80 q 440 -43 442 -50 q 432 -23 432 -31 q 427 -10 431 -14 q 425 2 427 -2 q 421 13 423 6 q 421 24 424 24 q 415 27 417 24 q 414 44 412 43 q 417 47 416 46 q 412 59 415 61 q 406 59 409 56 q 398 82 396 75 q 392 101 394 97 q 390 112 389 105 q 378 134 382 126 q 377 155 374 142 l 370 173 q 360 185 362 183 q 360 195 359 188 q 354 208 354 206 q 355 211 354 210 q 348 227 351 218 q 348 244 345 236 q 343 251 344 246 q 336 257 341 256 q 337 272 337 264 q 330 284 336 280 q 328 299 326 299 q 328 301 329 299 q 322 321 321 318 q 320 326 322 324 q 320 336 322 330 q 317 345 317 341 q 318 361 320 360 q 316 364 317 362 q 315 377 314 370 q 314 390 316 383 q 311 402 313 401 q 309 405 309 402 q 308 415 307 409 q 309 424 309 420 q 299 476 307 454 q 301 489 303 489 q 299 491 299 488 q 300 507 299 507 q 301 511 301 508 q 299 527 301 519 q 301 542 297 535 q 301 561 295 553 q 295 581 297 576 q 298 591 294 587 q 296 600 295 595 q 297 610 297 604 q 298 638 295 629 q 299 656 301 648 q 305 691 302 678 q 313 714 309 704 q 312 727 309 727 q 316 729 316 727 q 324 743 322 741 q 329 746 326 744 q 331 755 328 752 q 335 765 335 758 q 342 773 341 767 q 349 782 343 779 q 361 805 356 801 q 368 816 366 809 l 382 828 q 394 838 392 835 q 400 846 397 842 q 411 856 404 851 q 423 868 419 861 q 432 874 430 872 q 436 878 435 876 q 448 886 447 887 q 450 887 448 885 q 457 895 454 889 q 463 903 459 900 q 481 916 476 910 q 489 919 485 918 q 500 922 493 921 q 516 920 514 922 q 524 916 519 918 m 562 469 q 560 449 564 457 q 556 430 556 442 q 550 418 548 419 q 553 415 553 417 q 550 405 552 409 q 548 397 548 401 q 554 385 550 390 q 556 371 557 379 q 561 361 558 363 q 564 355 564 359 q 574 345 571 351 q 587 337 577 339 q 599 326 598 326 q 619 320 615 322 q 629 320 623 317 q 649 313 644 318 q 661 305 655 307 q 691 311 683 309 q 705 309 698 314 l 721 310 q 729 307 727 309 q 737 309 732 306 q 755 315 752 314 q 760 320 758 316 q 776 318 767 314 q 793 320 785 321 q 819 329 812 325 q 836 333 826 333 q 845 337 841 336 q 853 340 849 337 q 866 344 864 344 q 869 345 868 344 q 880 352 876 348 q 891 356 884 355 q 930 379 916 368 q 941 390 938 385 q 951 399 949 396 q 959 406 953 402 q 969 417 967 416 q 973 420 971 419 q 991 451 984 434 l 999 465 q 1006 481 1003 481 q 1010 484 1009 481 q 1019 508 1013 497 q 1022 531 1025 519 q 1028 546 1026 545 q 1029 550 1029 548 q 1029 564 1028 557 q 1030 575 1030 571 q 1033 586 1034 584 q 1032 590 1032 588 q 1032 598 1032 594 q 1030 609 1033 602 q 1031 621 1030 618 q 1029 630 1032 625 q 1027 655 1028 645 q 1022 671 1026 666 q 1022 684 1025 678 q 1022 693 1020 690 q 1018 706 1020 702 q 1018 713 1015 710 q 1012 731 1014 728 q 1009 736 1010 733 q 1004 754 1003 751 q 1002 760 1005 758 q 996 773 996 769 q 995 779 996 777 q 988 797 991 793 q 983 804 984 801 q 975 819 980 813 q 967 840 971 836 q 963 851 963 845 q 948 864 949 859 q 944 870 946 868 q 935 879 937 878 q 933 883 934 880 q 926 895 929 895 q 926 900 923 896 q 908 911 912 910 q 897 925 900 925 q 893 926 895 925 q 882 939 888 934 q 865 946 876 944 q 851 961 853 957 q 845 964 850 965 q 833 973 834 972 q 830 973 832 975 l 811 991 q 797 994 800 994 q 792 998 794 995 l 778 1007 q 750 1018 754 1011 q 740 1019 743 1017 q 732 1021 737 1021 q 712 1028 717 1025 q 699 1029 708 1032 q 687 1038 687 1037 q 685 1039 687 1039 q 669 1040 672 1041 q 661 1041 666 1039 q 649 1043 657 1044 q 634 1044 641 1043 q 623 1047 626 1048 q 618 1047 621 1047 q 611 1049 615 1048 q 603 1048 607 1051 q 586 1052 588 1051 q 581 1053 584 1053 q 565 1055 568 1056 q 556 1053 562 1053 q 531 1055 541 1055 q 518 1055 519 1055 q 515 1056 516 1056 q 501 1054 504 1053 q 495 1052 497 1055 q 475 1052 482 1053 q 463 1053 467 1051 q 447 1049 457 1049 q 436 1045 440 1045 q 435 1040 432 1045 q 424 1042 428 1041 q 415 1040 420 1043 q 396 1030 400 1032 q 381 1026 382 1025 q 378 1026 379 1026 q 348 1010 358 1020 q 326 1004 335 1009 q 306 998 318 999 q 296 988 298 991 q 291 983 294 986 q 264 969 268 973 q 248 961 250 968 q 238 952 245 954 q 221 929 226 937 q 210 912 215 921 q 201 904 203 906 q 200 895 199 902 q 189 878 191 880 q 185 873 188 876 q 181 866 183 870 q 176 859 179 862 q 170 849 173 854 q 166 836 168 845 q 160 822 162 826 q 161 816 157 817 q 148 788 151 794 q 138 774 145 781 l 138 759 q 132 743 132 750 q 126 721 126 732 q 128 705 130 709 q 126 695 127 701 q 126 679 126 683 q 128 668 127 675 q 130 655 130 660 q 134 642 131 649 q 138 631 135 637 q 146 622 141 625 q 151 604 149 606 q 154 600 153 603 q 159 590 157 591 q 162 585 161 588 q 180 555 173 562 q 193 541 187 548 q 210 535 207 535 q 215 531 214 534 q 238 526 229 531 q 257 516 246 520 q 253 499 260 504 q 242 485 246 495 q 226 469 227 480 q 218 466 219 470 q 214 458 217 462 q 191 449 200 451 q 172 444 183 447 q 163 450 170 451 q 153 446 155 448 q 142 451 149 448 q 130 451 135 454 q 115 463 122 462 q 108 472 112 469 q 99 477 104 474 q 90 493 90 488 q 82 499 89 499 l 75 515 q 68 531 71 527 q 62 539 65 534 q 59 548 59 542 q 58 557 59 553 q 52 569 52 565 q 51 575 52 572 l 47 592 q 41 605 40 604 q 42 609 42 606 q 36 632 42 630 q 38 644 36 644 q 42 647 40 644 q 40 659 39 651 q 39 671 40 668 l 46 687 q 51 712 51 704 q 54 729 51 720 q 61 750 58 746 q 63 758 63 754 q 75 785 71 778 q 80 801 78 792 q 89 811 88 809 q 90 813 90 812 q 97 830 97 828 q 103 845 101 845 q 111 857 109 855 q 115 858 112 858 q 122 874 122 870 q 124 880 122 877 q 130 885 127 883 q 135 891 132 888 q 143 907 139 903 q 154 923 153 921 q 158 926 155 926 q 166 939 164 940 q 170 941 169 938 q 181 954 179 952 q 187 959 184 956 q 200 971 199 968 q 206 975 202 973 q 220 986 217 984 q 227 990 223 988 q 242 1003 234 996 q 257 1017 250 1009 q 278 1028 274 1026 q 290 1032 283 1029 q 295 1037 293 1034 q 301 1043 298 1039 q 320 1053 317 1052 q 331 1058 329 1056 q 336 1062 333 1060 q 354 1071 348 1066 q 368 1077 360 1077 q 383 1082 375 1081 q 394 1090 390 1083 q 408 1091 408 1089 q 409 1094 408 1093 q 425 1098 425 1100 q 428 1096 425 1096 q 462 1110 453 1104 q 478 1112 477 1110 q 489 1115 484 1115 q 495 1119 493 1115 q 509 1117 510 1115 q 511 1119 508 1119 q 524 1122 523 1123 q 527 1123 524 1121 q 540 1127 534 1128 q 553 1129 546 1127 q 569 1132 565 1133 q 579 1131 573 1131 q 586 1132 583 1131 q 594 1133 590 1133 q 619 1129 607 1132 q 647 1127 632 1125 q 669 1121 663 1121 q 680 1120 675 1121 q 693 1117 689 1116 q 699 1116 697 1117 q 710 1112 708 1112 q 714 1108 713 1112 q 723 1109 718 1110 q 732 1106 728 1108 q 745 1104 744 1105 q 748 1102 746 1102 q 773 1098 763 1098 q 790 1093 778 1093 l 808 1086 q 815 1082 811 1085 q 823 1082 819 1079 q 842 1077 826 1077 q 864 1064 858 1071 q 883 1060 869 1058 q 888 1054 885 1058 q 892 1044 891 1051 q 911 1043 906 1044 q 918 1033 915 1034 q 929 1032 921 1032 q 942 1020 935 1026 q 960 1011 949 1014 q 969 999 963 1003 q 982 987 976 994 q 992 977 988 980 q 998 968 996 975 q 1008 960 1005 965 q 1018 950 1011 954 q 1026 938 1026 940 q 1028 935 1026 937 q 1042 917 1039 921 q 1048 910 1045 914 q 1052 902 1051 907 q 1059 895 1053 897 q 1070 868 1070 876 q 1077 858 1070 861 q 1083 843 1079 847 q 1090 834 1086 839 q 1092 826 1091 830 q 1094 819 1093 823 q 1102 807 1102 809 q 1104 804 1101 804 q 1106 786 1106 792 q 1110 778 1110 782 q 1113 771 1110 774 q 1116 761 1115 769 q 1115 748 1117 754 q 1118 734 1117 743 q 1124 720 1119 725 q 1123 709 1123 712 q 1125 705 1123 706 q 1127 682 1123 694 q 1129 659 1132 670 q 1130 645 1133 645 q 1127 642 1127 645 q 1131 629 1132 630 q 1129 625 1129 628 q 1130 606 1129 611 q 1124 596 1131 600 q 1127 588 1129 594 q 1129 579 1124 583 q 1123 550 1123 568 q 1117 541 1119 546 q 1112 534 1116 537 q 1107 516 1109 519 q 1102 508 1105 512 q 1090 482 1093 489 q 1081 472 1087 474 q 1074 460 1075 463 q 1067 457 1074 457 q 1062 444 1067 448 q 1059 432 1058 439 q 1045 422 1045 424 q 1044 419 1045 420 q 1033 410 1034 412 q 1029 405 1032 408 q 1001 382 1014 392 q 988 371 991 374 q 975 356 975 364 q 961 350 961 349 q 959 349 960 351 q 946 340 950 344 q 939 337 941 340 q 930 333 937 333 q 915 322 918 322 q 912 316 912 321 q 893 306 902 307 q 884 298 885 305 q 863 292 869 297 q 847 286 857 288 q 841 281 843 284 q 832 279 839 278 l 803 263 q 788 257 788 259 q 786 256 788 256 q 779 255 784 255 q 771 253 774 255 l 755 246 q 743 242 744 244 q 739 242 741 241 q 708 236 718 234 q 674 227 686 230 q 651 227 663 225 q 626 225 632 226 q 613 225 619 225 q 592 236 598 230 q 561 244 573 231 q 549 244 550 245 q 546 244 548 244 q 540 245 543 244 q 531 245 537 246 q 518 258 522 253 q 505 261 514 263 q 489 274 499 272 q 482 290 481 288 q 467 310 473 294 q 465 324 465 314 q 461 339 465 335 q 466 358 463 359 q 467 371 465 370 q 470 377 470 373 q 470 385 470 382 q 470 392 469 387 q 480 410 477 406 q 481 420 482 413 q 489 427 486 423 q 496 435 491 432 q 509 456 505 446 q 524 469 512 466 q 526 478 523 476 q 531 486 529 481 q 545 494 543 491 q 552 497 546 497 l 568 510 q 581 518 581 515 q 585 520 581 522 l 585 495 q 581 487 583 491 q 577 481 580 484 l 562 469 "},"%":{"x_min":-6.96875,"x_max":757.28125,"ha":785,"o":"m 179 32 q 170 6 173 12 q 168 -10 166 0 q 162 -21 164 -18 q 161 -29 161 -24 q 155 -48 154 -36 q 147 -63 146 -62 q 150 -66 149 -63 q 148 -81 150 -78 q 143 -89 146 -84 q 150 -101 151 -99 q 147 -105 149 -103 q 147 -119 147 -113 q 143 -128 147 -124 q 148 -135 146 -132 q 150 -143 150 -138 q 149 -155 149 -154 q 150 -160 150 -157 q 155 -177 157 -176 q 151 -179 153 -177 q 163 -198 160 -193 q 166 -208 166 -202 q 176 -223 172 -219 q 187 -237 187 -236 q 191 -241 188 -238 q 204 -254 202 -252 q 208 -256 206 -256 q 215 -265 214 -264 q 222 -267 217 -267 q 233 -272 229 -272 q 245 -274 238 -272 q 227 -286 230 -284 q 219 -290 223 -287 q 206 -287 214 -284 q 195 -293 199 -290 q 177 -288 180 -288 q 168 -290 173 -287 q 154 -281 154 -283 q 151 -278 154 -279 q 138 -278 139 -280 q 132 -278 137 -276 q 118 -273 119 -274 q 118 -269 118 -272 q 108 -256 112 -265 q 84 -244 97 -238 l 77 -223 q 65 -202 66 -208 q 59 -192 63 -195 q 59 -181 59 -185 q 56 -172 58 -177 q 52 -159 54 -160 q 51 -157 51 -158 q 51 -139 48 -149 q 52 -120 54 -130 q 55 -104 56 -109 q 61 -97 56 -99 q 65 -90 65 -96 q 65 -75 62 -78 q 65 -57 63 -59 q 67 -52 66 -55 l 67 -36 q 75 -16 74 -20 q 81 -10 75 -13 q 84 1 81 -1 q 84 8 88 4 q 94 18 93 16 q 93 21 96 21 q 99 36 97 33 q 103 42 100 39 q 106 53 105 52 q 109 55 107 54 q 111 71 111 67 q 116 74 112 74 q 119 91 115 82 q 127 108 123 100 q 132 118 130 113 q 138 128 135 123 q 146 142 146 137 q 153 155 150 154 q 157 160 157 157 q 168 177 164 173 q 173 184 172 181 q 182 202 183 199 q 185 204 181 204 q 189 216 184 212 q 193 226 193 219 q 204 239 202 237 q 208 242 206 241 q 211 252 208 248 q 217 263 214 257 q 223 270 219 265 q 230 278 226 275 q 238 293 234 288 q 244 305 241 298 q 261 328 253 322 q 272 347 269 335 q 283 363 280 351 q 297 380 294 368 q 310 397 301 392 q 318 408 316 406 q 324 413 321 411 q 333 428 326 425 q 342 446 340 443 q 348 453 344 450 q 358 467 351 462 q 367 482 364 472 q 383 493 379 488 q 390 503 387 499 l 400 518 q 405 525 404 520 q 412 531 406 530 q 415 539 411 537 q 421 545 419 542 q 431 560 430 558 q 442 577 442 572 q 454 588 453 587 q 455 592 455 590 q 472 612 466 599 q 489 632 478 625 q 494 640 491 637 q 500 648 497 642 q 510 660 505 657 q 516 670 514 663 q 524 680 523 678 q 527 680 524 682 q 541 695 531 691 q 545 704 541 702 q 552 713 550 706 q 537 715 545 718 q 522 712 529 712 q 514 712 519 712 q 504 708 508 712 q 486 704 488 709 q 476 705 477 705 q 472 704 474 705 q 457 698 458 699 q 454 695 457 697 q 435 691 440 694 q 420 687 424 691 q 411 685 417 685 q 401 680 404 685 q 395 683 398 685 q 385 680 392 682 q 370 678 377 679 q 360 672 363 678 q 346 674 351 675 q 336 672 341 672 q 324 672 325 674 q 320 671 322 671 q 307 670 311 670 q 299 663 302 670 q 304 628 302 638 q 305 604 306 617 q 300 586 302 590 q 299 580 298 583 q 288 566 293 568 q 283 562 284 565 q 271 548 274 550 q 267 542 269 545 q 252 538 255 538 q 250 534 249 538 q 243 532 245 534 q 236 530 241 530 q 217 518 227 519 q 203 509 212 511 q 189 500 193 507 q 169 493 173 496 q 160 489 165 489 q 142 484 143 485 q 138 482 141 482 q 122 480 131 480 q 107 481 113 481 q 98 479 103 480 q 90 482 93 478 q 73 481 74 480 q 70 485 73 482 q 44 493 55 493 q 31 504 33 493 q 21 507 24 505 q 13 511 18 510 q 6 526 8 524 q 2 529 5 527 q -1 545 0 537 q -6 561 -2 554 q -6 584 -4 571 q -5 613 -8 598 q 1 628 0 628 q 5 636 5 633 q 8 642 5 640 q 18 665 14 656 q 29 676 21 674 q 44 697 42 691 q 54 702 47 702 q 64 720 59 718 q 71 727 69 721 q 93 731 85 725 q 107 739 107 736 q 111 744 108 741 q 122 749 119 744 q 130 758 126 754 q 149 764 146 762 q 155 766 151 766 q 165 772 164 773 q 169 773 166 771 q 181 781 179 779 q 185 779 184 782 q 194 773 192 775 q 199 769 196 771 q 208 750 206 752 q 212 743 211 748 q 223 740 219 743 q 234 739 227 737 q 241 734 238 736 q 250 732 244 732 l 265 728 q 274 726 271 728 q 280 721 278 724 q 290 721 287 724 q 299 717 294 718 q 308 719 305 718 q 317 717 311 720 q 329 720 322 718 q 343 721 336 721 q 370 725 362 725 q 383 727 378 725 q 399 729 397 729 q 404 728 401 728 q 420 731 417 731 q 432 734 430 733 q 435 737 435 735 q 446 735 440 735 q 457 735 451 736 q 476 741 473 740 q 485 743 480 743 q 507 751 507 744 q 527 750 522 747 q 543 752 533 754 q 562 759 552 759 q 581 762 572 759 q 598 765 598 765 q 602 767 599 766 q 633 774 619 767 q 645 790 641 779 q 661 800 659 793 q 679 809 674 801 q 692 809 691 807 q 694 812 693 811 q 706 817 704 816 q 713 819 709 819 q 733 821 728 823 q 746 820 737 819 q 748 811 747 815 q 756 809 750 808 q 754 796 758 800 q 750 785 751 792 q 738 779 739 782 q 735 775 737 777 q 712 763 714 766 q 701 754 702 755 q 701 750 699 752 q 692 748 695 750 q 682 747 689 746 q 667 739 670 740 q 656 734 659 733 q 652 732 653 735 q 645 720 648 727 q 636 712 642 713 q 624 697 628 698 q 621 693 621 697 q 604 678 611 685 q 594 665 596 668 q 590 660 592 661 q 577 642 583 645 q 569 628 571 638 q 558 621 558 619 q 554 622 557 623 q 543 596 545 603 q 533 586 534 585 q 530 585 531 587 q 522 574 526 576 q 516 569 519 572 q 511 558 512 560 q 507 556 510 557 q 503 541 504 549 q 496 529 501 534 q 481 514 485 520 q 466 507 477 508 q 458 491 459 493 q 455 485 457 488 q 445 471 446 474 q 440 466 444 467 q 421 447 428 454 q 419 431 424 439 q 409 419 415 423 l 401 400 q 392 392 394 397 q 386 383 390 387 l 370 378 q 364 363 364 377 q 356 354 358 360 q 355 339 355 347 q 342 321 345 326 q 336 309 339 316 l 328 295 q 320 286 324 288 q 320 279 317 284 q 309 267 311 269 q 303 261 306 264 q 298 250 299 250 q 295 248 297 250 q 282 230 291 236 q 278 219 279 221 q 274 215 276 217 q 269 203 272 208 q 264 191 265 198 q 254 177 259 183 q 244 169 249 172 q 236 153 238 155 q 234 147 234 150 q 221 124 231 128 q 217 109 217 109 q 206 93 208 96 q 200 88 203 90 q 199 76 203 80 q 196 66 195 73 l 179 32 m 80 637 q 86 626 84 634 q 89 617 89 618 l 93 600 q 101 585 96 591 q 110 572 107 579 q 120 561 113 565 q 132 558 127 562 q 142 550 137 553 q 163 545 160 543 q 170 546 166 546 q 196 548 188 553 q 211 564 210 561 q 214 581 214 579 q 213 594 212 591 q 214 600 214 598 q 209 621 211 618 q 206 629 207 625 q 196 651 200 645 q 184 659 191 656 q 175 668 177 667 q 169 668 173 670 q 162 676 166 672 q 150 678 158 679 q 134 690 135 687 q 130 693 134 693 q 113 689 120 695 q 100 679 107 682 q 98 672 97 676 q 97 661 99 667 q 86 651 86 648 q 82 651 86 653 l 80 637 m 630 351 q 645 351 641 351 q 653 351 649 352 q 663 347 661 347 q 668 348 666 348 q 676 345 671 347 q 687 343 680 343 q 701 335 697 333 q 710 322 710 325 q 713 317 710 320 q 720 312 717 314 q 725 307 724 310 q 734 295 732 299 q 739 287 736 291 q 744 279 741 283 q 751 272 747 275 q 750 262 748 267 q 754 252 752 257 q 754 236 752 240 q 756 229 756 233 q 752 216 756 222 q 750 199 747 210 q 734 179 739 184 q 727 166 729 174 q 716 153 718 155 q 713 147 713 151 q 701 136 704 138 q 697 131 699 134 q 689 123 690 123 q 685 122 687 123 q 672 111 678 116 q 660 105 667 107 q 641 85 645 94 q 628 81 628 84 q 626 77 629 78 q 599 63 604 70 q 583 56 594 56 q 565 50 569 54 q 553 47 561 46 q 538 43 538 42 q 522 39 526 39 q 516 36 518 39 q 499 35 500 33 q 493 36 499 36 q 484 35 488 36 q 476 39 480 35 q 456 40 461 40 q 446 43 451 40 q 429 52 434 51 q 421 56 425 54 q 410 86 412 77 q 408 104 408 94 q 408 117 409 113 q 408 124 408 120 q 412 137 409 131 q 413 150 415 143 q 420 176 420 157 q 427 189 427 185 q 436 202 436 198 q 438 210 436 206 q 442 217 440 212 q 446 223 443 221 l 455 240 q 470 256 463 246 q 486 271 476 265 q 490 280 484 278 q 491 290 496 283 q 499 296 496 293 q 504 302 501 299 q 534 319 522 314 q 554 335 546 324 q 573 340 569 340 q 580 341 577 340 q 593 345 591 345 q 598 345 595 344 q 614 349 613 351 q 618 348 615 347 l 630 351 m 584 101 q 607 118 600 112 q 621 130 614 124 q 630 146 628 138 l 637 160 q 640 167 640 165 q 642 176 641 169 q 647 186 645 181 q 649 198 648 191 q 647 204 645 200 q 648 212 649 208 q 642 240 644 236 q 630 261 636 250 q 618 283 625 272 q 609 285 613 283 q 602 290 604 287 q 588 283 598 283 q 575 268 577 269 q 571 264 573 267 q 557 254 558 256 q 554 250 556 252 q 543 236 543 240 q 543 227 543 233 q 534 206 537 218 l 526 191 q 518 176 520 181 q 515 165 516 170 q 514 148 515 149 q 514 143 514 147 q 519 122 518 128 q 522 112 520 115 q 531 109 529 112 q 537 104 533 107 q 545 102 542 104 q 554 101 548 100 q 572 98 567 97 q 584 101 577 99 "},"#":{"x_min":49.5,"x_max":767.75,"ha":734,"o":"m 585 736 q 583 720 584 721 q 581 717 581 718 q 591 701 581 701 q 609 698 602 698 q 632 702 625 701 q 647 702 640 704 q 662 710 656 708 q 675 712 668 712 q 691 711 686 710 q 698 708 695 712 q 712 712 710 713 q 717 713 714 710 q 728 718 727 717 q 732 720 729 720 q 752 722 744 724 q 766 720 760 721 q 765 712 763 714 q 767 704 766 710 q 756 702 760 702 q 752 693 751 702 q 739 693 746 695 q 728 693 733 691 q 714 687 713 689 q 713 685 714 685 q 700 680 705 683 q 690 674 695 676 q 670 671 672 672 q 661 672 667 670 q 644 668 653 668 q 629 663 636 668 q 615 661 615 661 q 614 660 615 660 q 596 655 599 655 q 588 653 592 655 q 577 650 583 652 q 564 649 572 648 q 553 632 553 633 q 549 617 548 621 q 548 611 550 614 q 529 569 541 585 q 526 552 527 554 q 524 546 524 549 q 512 519 518 523 q 509 504 510 510 q 504 497 508 499 q 512 495 507 495 q 519 497 516 496 l 543 497 q 562 496 554 492 q 576 495 569 500 q 592 497 584 497 l 617 501 q 638 503 633 501 q 645 501 642 504 q 661 501 656 501 q 672 503 666 500 q 692 507 689 505 q 699 510 695 508 q 709 509 705 510 q 717 511 713 508 q 727 497 728 508 q 701 485 709 489 q 685 484 693 481 q 674 480 682 480 q 657 480 666 480 q 643 471 647 470 q 637 470 640 472 q 623 467 625 466 q 619 466 622 467 q 596 463 600 465 q 587 461 592 461 q 575 464 579 465 q 568 465 572 463 q 557 460 561 459 q 550 458 553 461 q 539 459 539 461 q 535 457 538 457 q 512 458 515 461 q 507 458 510 455 q 489 453 491 455 q 485 451 488 450 q 481 438 481 440 q 478 436 481 436 q 477 427 478 431 q 474 420 476 424 q 470 408 469 411 q 469 404 470 406 q 465 397 467 401 q 461 389 463 393 q 455 379 458 381 q 453 374 453 378 q 445 362 444 367 q 444 354 446 358 q 438 341 439 341 q 438 340 438 341 q 423 309 425 318 q 409 299 420 299 q 401 293 404 297 q 393 287 398 290 q 382 284 387 284 q 371 280 377 283 q 352 279 356 282 q 343 282 347 276 q 345 291 344 286 q 351 301 347 297 q 351 314 351 310 q 352 322 351 318 q 362 341 360 336 q 368 348 363 345 q 380 375 379 363 q 385 394 381 387 q 392 417 389 408 q 398 435 396 427 q 404 453 401 447 l 382 458 q 364 464 371 466 q 349 462 356 462 q 329 459 330 465 q 313 455 316 459 q 299 457 306 457 q 287 457 293 458 q 271 439 276 442 q 267 428 267 436 q 261 421 263 424 q 257 416 259 419 q 248 404 250 413 q 240 393 246 396 q 225 377 229 382 q 213 360 217 363 q 207 352 210 358 q 183 343 192 343 q 173 336 174 343 q 159 335 161 333 q 153 339 157 336 q 155 346 155 341 q 154 356 154 351 q 160 363 158 359 q 168 367 161 367 q 168 376 169 373 q 173 382 166 379 q 175 394 177 393 q 173 397 173 394 q 179 408 176 404 q 183 419 181 412 q 194 437 193 431 q 199 446 195 443 q 178 446 183 446 q 169 446 173 447 l 151 443 q 131 442 131 442 q 126 437 128 440 q 120 431 123 434 q 101 423 105 428 q 90 421 93 424 q 77 417 88 419 q 65 416 70 415 q 52 420 59 417 q 53 436 51 434 q 58 443 55 439 q 75 457 70 454 q 96 469 92 466 q 105 474 101 472 q 130 486 123 485 q 143 495 137 488 q 160 496 154 491 q 174 500 169 500 q 184 500 180 500 q 201 503 200 503 q 204 504 202 504 q 217 506 215 505 q 225 505 219 507 q 233 524 230 520 q 240 531 236 529 q 246 552 246 549 q 246 558 245 556 q 253 576 252 571 q 259 590 256 590 q 261 592 261 590 q 272 615 265 614 q 274 630 271 626 q 282 641 276 634 q 252 653 267 656 q 225 653 237 649 q 214 651 221 652 q 204 652 207 649 q 181 644 185 648 q 165 642 176 640 q 137 629 149 637 l 118 622 q 110 614 115 617 q 104 604 105 611 q 86 605 90 607 q 80 600 82 603 q 73 594 77 598 q 61 592 69 591 q 50 612 51 609 q 50 621 48 615 q 72 638 69 632 q 82 647 75 644 q 93 653 93 652 q 94 656 93 655 q 110 664 104 659 q 124 672 116 670 l 142 678 q 149 682 145 680 q 157 687 153 685 q 172 697 172 693 q 183 699 181 697 q 187 702 184 701 q 200 705 193 699 q 212 705 206 710 q 228 710 227 709 q 230 712 229 712 q 244 712 241 710 q 250 714 246 713 q 278 717 264 714 q 290 717 287 714 q 299 718 293 720 q 305 729 305 722 q 310 739 305 735 q 312 760 311 758 q 316 765 313 762 q 322 786 322 782 q 326 793 322 790 q 332 820 330 809 q 334 838 332 835 q 332 845 336 842 q 331 855 333 851 q 335 865 329 859 q 360 876 355 865 q 368 876 363 873 q 379 880 374 878 q 404 895 402 888 q 413 896 409 892 q 420 904 417 900 q 439 892 431 900 q 440 874 443 881 q 430 854 431 857 q 429 840 430 847 q 424 830 428 832 q 416 813 424 817 q 413 797 413 797 q 411 781 411 786 q 411 770 412 775 q 404 756 404 758 q 405 752 405 755 q 400 741 400 746 q 398 733 400 737 q 396 727 397 731 q 396 718 394 722 q 404 714 400 716 q 411 714 408 712 q 427 710 427 712 q 428 709 427 709 q 440 707 434 706 q 450 705 447 708 q 473 706 458 709 q 486 705 481 705 q 497 712 491 705 q 508 746 495 735 q 510 754 508 751 q 511 763 511 758 q 518 777 518 769 q 522 794 519 786 q 529 803 524 803 q 530 811 533 804 q 541 828 541 824 q 546 832 542 831 q 550 847 543 842 q 562 854 556 851 q 582 868 579 865 q 592 873 585 872 q 610 882 604 878 q 621 888 615 885 q 634 887 628 885 q 642 881 640 888 q 642 873 644 876 q 641 865 641 870 q 632 849 636 851 q 630 841 629 847 q 614 818 617 824 q 606 805 611 812 q 607 795 609 800 q 602 785 604 790 q 596 770 598 771 q 588 750 590 752 q 588 740 587 747 l 585 736 m 348 511 q 364 510 359 512 q 373 505 370 507 q 384 509 377 508 q 393 504 392 510 q 407 501 404 503 q 415 497 411 500 q 423 512 423 511 q 424 515 424 512 q 429 526 427 526 q 431 529 431 527 q 438 548 436 545 q 443 562 442 561 q 448 575 448 572 q 448 581 447 579 q 455 598 455 595 q 458 604 455 602 q 460 623 458 615 q 469 636 462 632 q 448 649 458 649 q 427 651 438 648 q 417 649 423 647 q 406 652 411 652 q 385 650 392 652 q 371 649 378 648 q 363 632 364 634 q 360 626 362 629 q 349 602 352 611 q 344 588 347 594 q 337 575 340 580 q 329 560 332 564 q 323 541 324 545 q 321 535 322 538 q 309 523 311 524 q 305 519 306 522 q 320 511 311 508 q 335 511 328 514 l 348 511 "},"_":{"x_min":-0.453125,"x_max":873.546875,"ha":875,"o":"m 439 -154 q 470 -149 454 -149 q 507 -149 486 -150 q 519 -151 514 -150 q 529 -150 524 -151 q 540 -151 537 -151 q 546 -150 543 -151 q 557 -150 552 -149 q 568 -149 562 -151 q 582 -152 581 -154 q 585 -149 583 -150 q 598 -151 596 -151 q 602 -149 599 -150 q 609 -150 604 -149 q 617 -151 613 -151 q 628 -151 622 -151 q 637 -153 633 -150 q 653 -151 644 -149 q 668 -150 663 -154 q 680 -151 675 -153 q 693 -150 686 -150 q 717 -151 708 -153 q 733 -153 727 -149 q 752 -149 740 -149 q 777 -149 763 -149 q 798 -141 792 -142 q 811 -139 804 -141 q 822 -128 820 -130 q 836 -128 834 -130 q 841 -127 838 -127 q 847 -132 845 -128 q 854 -138 850 -135 l 870 -138 q 872 -154 874 -153 q 873 -160 870 -155 q 864 -168 866 -166 q 858 -168 861 -170 q 843 -177 845 -173 q 835 -180 842 -181 q 819 -187 826 -187 q 805 -189 812 -187 q 792 -203 794 -195 q 779 -206 785 -203 q 767 -210 773 -208 q 754 -210 758 -208 q 744 -211 750 -211 q 736 -209 740 -211 q 725 -208 732 -207 q 709 -212 713 -211 q 702 -210 705 -212 q 686 -205 691 -204 q 676 -206 680 -206 q 662 -206 666 -207 q 656 -204 659 -204 q 628 -206 640 -206 q 602 -204 607 -206 q 590 -204 596 -203 q 570 -204 575 -206 q 558 -200 565 -203 q 545 -202 548 -200 q 541 -204 543 -204 q 524 -199 526 -200 q 519 -195 522 -198 q 506 -197 508 -195 q 501 -200 504 -199 q 494 -200 496 -199 q 485 -200 492 -200 q 472 -205 473 -207 q 469 -200 472 -203 q 448 -204 454 -203 q 440 -200 443 -204 q 434 -203 436 -200 q 427 -207 431 -206 q 412 -204 416 -204 q 405 -207 408 -204 q 389 -208 394 -206 q 367 -207 371 -206 q 358 -206 363 -208 q 341 -211 345 -210 q 329 -212 336 -212 q 305 -210 317 -212 q 286 -218 294 -208 q 278 -217 282 -215 q 268 -221 274 -219 q 256 -222 263 -222 q 244 -223 249 -222 q 229 -223 236 -223 q 215 -226 222 -222 q 203 -225 210 -223 q 191 -229 196 -226 q 174 -227 183 -225 q 158 -230 166 -230 q 138 -231 143 -229 q 119 -229 124 -229 q 109 -230 113 -229 l 92 -233 q 74 -231 78 -230 q 67 -233 70 -233 q 43 -234 48 -231 q 31 -234 37 -237 q 10 -235 16 -236 q 0 -231 4 -234 q 1 -216 -1 -221 q 2 -200 4 -211 q 20 -188 14 -196 q 33 -186 32 -188 q 37 -183 35 -184 q 56 -172 52 -174 q 62 -169 59 -169 q 78 -160 73 -164 q 88 -151 82 -157 q 102 -153 97 -150 q 111 -160 107 -157 q 124 -160 118 -161 q 137 -161 130 -158 q 155 -162 150 -164 q 165 -162 160 -161 q 187 -164 177 -164 q 208 -164 196 -164 q 230 -163 219 -164 q 252 -164 241 -162 q 264 -166 259 -165 q 275 -169 269 -168 q 288 -168 280 -169 q 299 -169 297 -166 q 315 -167 302 -170 q 329 -162 328 -164 q 335 -163 330 -162 q 345 -164 340 -164 q 354 -165 349 -165 q 358 -162 358 -165 q 364 -163 359 -162 q 377 -164 370 -164 q 389 -166 383 -165 q 396 -166 396 -166 l 439 -154 "},"+":{"x_min":35,"x_max":609.046875,"ha":643,"o":"m 392 480 q 390 457 393 461 q 385 450 387 454 q 386 443 385 446 q 386 435 387 440 q 386 409 387 415 q 384 390 383 394 q 385 379 385 386 q 385 360 387 366 q 382 349 382 355 q 388 335 386 333 q 393 336 390 336 q 415 336 409 335 q 428 335 421 337 q 440 334 438 333 q 444 335 442 335 q 454 335 448 336 q 463 335 459 335 q 495 331 478 335 q 523 330 512 328 q 536 328 531 329 q 545 330 541 328 q 577 329 565 326 q 594 329 588 332 q 601 316 602 318 q 603 313 600 314 q 604 299 600 301 q 609 293 609 298 q 589 286 595 287 q 580 279 583 286 q 564 278 568 279 q 557 278 560 278 q 548 278 552 279 q 542 275 545 276 q 522 271 527 272 q 514 267 516 269 l 496 269 l 476 271 q 461 272 467 271 q 446 274 454 274 q 431 276 438 274 q 415 280 427 276 q 398 282 402 284 q 383 279 383 282 q 382 269 383 276 q 383 252 381 256 q 385 246 385 249 q 389 223 387 234 q 397 200 390 211 q 394 184 394 184 q 377 176 381 179 q 367 174 374 173 q 355 166 356 166 q 351 168 354 165 q 342 163 345 166 q 332 160 339 160 q 326 154 329 155 q 320 149 322 153 q 307 150 313 151 q 295 149 302 149 q 282 154 286 151 q 276 157 279 157 q 276 169 274 164 q 272 176 279 174 q 279 196 280 192 q 283 221 286 207 q 287 245 280 234 q 286 257 283 256 q 288 261 288 257 q 282 273 280 272 q 284 278 284 274 q 271 282 272 284 q 268 280 271 280 q 257 282 264 280 q 245 283 250 283 q 230 280 237 283 q 217 282 223 278 q 200 282 204 282 q 193 283 196 282 q 178 281 180 283 q 165 275 176 279 q 146 275 150 274 q 138 275 142 276 q 123 274 127 275 q 115 272 119 272 q 103 274 107 274 q 97 276 100 274 q 79 271 81 271 q 74 274 77 272 q 63 271 69 272 q 51 271 58 269 q 38 286 44 280 q 36 302 32 291 q 52 313 48 303 q 64 320 59 316 q 77 324 69 324 q 96 335 92 332 q 111 336 101 339 q 133 341 127 339 q 143 337 139 343 q 168 337 164 339 q 177 335 173 336 q 184 333 180 333 q 196 332 188 332 q 210 335 206 335 q 214 330 214 335 q 231 332 229 330 q 241 330 234 333 q 263 337 248 339 q 286 343 279 335 q 284 354 286 351 q 284 366 282 358 q 282 373 284 370 q 283 382 280 375 q 280 404 279 398 q 279 415 280 409 q 274 425 278 421 q 268 435 271 430 q 272 454 267 451 q 287 463 284 461 q 293 467 290 466 q 305 472 305 473 q 307 470 305 470 q 320 479 318 477 q 329 478 322 481 q 349 484 343 484 q 366 489 363 488 q 373 489 368 489 q 386 482 382 482 q 392 480 390 482 "},")":{"x_min":-111.234375,"x_max":265.859375,"ha":377,"o":"m -104 1011 q -90 1020 -93 1020 q -85 1021 -88 1020 q -69 1030 -71 1028 q -62 1033 -66 1032 q -46 1044 -54 1039 q -32 1056 -39 1049 q -21 1057 -23 1053 q -16 1063 -18 1060 q -4 1068 -6 1066 q 0 1074 -2 1071 q 23 1082 17 1077 q 43 1082 33 1079 q 59 1081 52 1085 q 79 1080 73 1082 q 99 1078 85 1078 q 118 1068 115 1074 q 130 1064 122 1063 q 137 1058 132 1060 q 149 1055 141 1055 q 171 1037 168 1044 q 183 1028 174 1030 q 189 1017 185 1021 q 195 1002 193 1013 q 204 993 204 994 q 204 990 203 992 q 211 980 211 982 q 212 976 211 979 q 222 940 221 953 q 226 911 223 926 q 229 898 227 906 q 233 884 231 891 q 231 870 230 873 q 233 865 233 868 q 233 850 233 850 q 236 847 234 850 q 238 836 236 845 q 237 824 240 827 q 237 811 238 813 q 236 807 236 809 q 238 784 240 789 q 242 774 237 778 q 241 752 241 762 q 242 735 241 736 q 245 732 244 735 q 246 714 244 718 q 248 706 248 710 q 248 691 249 691 q 248 689 248 691 q 250 668 249 674 q 248 657 252 663 q 253 634 253 648 q 252 623 252 628 q 250 615 253 618 q 255 609 252 611 q 259 602 257 607 q 261 581 259 585 q 263 571 263 576 q 259 550 256 556 q 263 538 261 545 q 261 525 263 531 q 265 512 259 519 q 265 436 260 474 q 260 418 256 430 q 257 398 264 406 q 263 381 261 393 q 265 359 265 370 q 264 351 265 355 q 263 344 263 347 q 263 324 265 329 q 261 311 261 318 q 261 290 259 301 q 255 274 263 280 q 257 264 260 268 q 256 253 255 260 q 256 235 259 238 q 253 227 253 231 q 255 212 252 212 q 256 210 257 212 q 252 193 250 195 q 256 189 255 192 q 256 182 257 187 q 259 174 255 177 q 255 149 250 164 q 250 122 259 134 q 252 113 253 118 q 250 103 250 108 q 252 92 250 99 q 252 78 253 86 q 250 45 249 56 q 245 27 250 33 q 244 0 244 9 q 244 -16 245 -8 q 241 -42 240 -36 q 236 -51 242 -47 q 238 -67 238 -59 q 231 -82 238 -75 q 231 -115 231 -100 q 227 -146 231 -130 q 223 -163 222 -160 q 222 -170 223 -166 q 215 -184 218 -181 q 212 -198 214 -198 q 211 -199 211 -198 q 208 -213 210 -206 q 204 -227 206 -221 q 197 -237 199 -236 q 196 -244 195 -238 q 188 -261 192 -256 q 185 -274 184 -265 q 178 -283 179 -276 q 168 -290 177 -290 q 158 -310 161 -305 q 147 -320 154 -316 q 142 -329 146 -325 q 135 -337 138 -333 q 121 -345 120 -343 q 119 -349 122 -348 q 107 -354 112 -349 q 96 -363 101 -359 q 88 -377 90 -377 q 88 -379 85 -377 q 68 -384 73 -382 q 59 -389 63 -386 q 46 -400 51 -397 q 35 -408 37 -406 q 25 -411 32 -411 q 10 -421 13 -417 q 0 -425 8 -425 q -12 -432 -10 -432 q -17 -432 -14 -431 q -29 -436 -27 -436 q -35 -436 -32 -435 q -44 -441 -39 -438 q -56 -444 -50 -444 q -65 -441 -62 -443 q -71 -438 -67 -439 q -81 -438 -77 -436 q -92 -438 -85 -439 q -102 -427 -97 -428 q -108 -420 -107 -425 q -100 -405 -101 -406 q -78 -396 -85 -397 q -58 -377 -58 -382 q -40 -368 -40 -371 q -37 -363 -40 -366 q -21 -360 -27 -363 q -9 -351 -14 -356 q 1 -349 -4 -349 q 10 -347 6 -349 q 18 -348 14 -347 q 25 -349 21 -349 q 37 -347 36 -345 q 40 -348 39 -348 q 54 -339 52 -341 q 58 -333 56 -336 q 67 -326 65 -330 q 77 -321 69 -321 q 78 -307 74 -310 q 81 -297 82 -303 q 88 -291 88 -295 q 96 -286 89 -287 q 101 -265 94 -269 q 106 -247 107 -249 q 105 -244 105 -245 q 111 -228 112 -230 q 111 -223 111 -226 q 117 -208 118 -211 q 116 -199 116 -204 q 119 -184 120 -188 q 119 -176 118 -180 q 124 -157 124 -161 q 124 -150 123 -153 q 126 -126 126 -131 q 128 -113 127 -120 q 135 -99 139 -103 q 131 -89 131 -94 q 134 -73 135 -75 q 135 -70 134 -71 q 143 -50 139 -55 q 139 -35 137 -37 q 142 -29 141 -32 q 142 -12 143 -14 q 142 -9 141 -10 q 147 -3 143 -5 q 153 1 150 -1 q 142 13 151 6 q 141 27 142 20 q 142 40 141 33 q 145 63 143 59 q 149 71 147 67 l 150 107 q 149 124 147 119 q 151 137 151 130 q 149 152 149 149 q 146 158 150 155 q 153 174 155 173 q 150 177 150 174 q 150 202 150 196 q 146 214 150 208 q 160 238 146 233 q 156 247 153 241 q 153 256 160 253 q 155 270 157 267 q 153 276 153 274 q 156 289 157 287 q 160 291 155 291 q 157 298 157 295 q 157 307 157 301 q 155 330 158 326 q 150 341 151 335 q 152 365 153 359 q 154 378 151 371 q 155 396 157 393 q 154 401 154 398 q 155 416 153 408 q 155 435 157 424 q 153 442 154 439 q 154 453 153 446 q 158 469 160 467 q 154 473 155 470 q 157 489 158 480 q 153 507 155 499 q 157 522 154 520 q 161 527 160 524 q 155 543 155 533 q 149 558 155 554 q 146 573 151 568 q 147 585 149 584 q 143 590 146 587 q 149 606 154 599 q 143 620 145 611 q 141 639 142 629 q 139 659 141 649 q 132 676 138 670 q 131 691 137 683 q 132 706 126 699 q 127 720 127 713 q 126 735 127 727 q 126 760 127 751 q 130 775 124 769 q 125 800 123 793 q 123 813 127 807 q 118 834 119 828 q 118 849 118 841 q 107 872 112 864 q 109 887 109 884 q 105 892 108 889 q 101 911 101 910 q 99 923 99 921 q 100 926 100 925 q 95 933 99 930 q 93 940 92 935 q 82 956 88 953 q 73 965 75 960 q 61 980 67 978 q 52 990 54 982 q 38 995 43 991 q 27 1005 33 999 q 3 1011 14 1007 q -21 1015 -8 1015 q -33 1015 -28 1017 q -46 1018 -39 1013 l -65 1009 l -80 1002 q -90 1001 -88 1001 q -94 999 -92 1001 q -107 997 -107 996 q -111 999 -108 998 l -104 1011 "},"'":{"x_min":62.390625,"x_max":166.84375,"ha":229,"o":"m 84 721 q 88 731 89 728 q 88 736 88 733 q 87 752 88 751 q 82 754 86 752 q 86 761 86 756 q 88 770 85 766 q 84 786 89 782 q 86 795 84 792 q 82 803 89 798 q 72 812 71 811 q 70 815 73 813 q 71 830 74 828 q 67 834 67 831 q 72 855 73 849 q 75 865 71 861 q 80 874 78 873 q 89 874 82 876 q 107 874 104 876 q 112 874 109 877 q 122 873 115 872 q 126 866 124 868 q 132 862 128 864 q 139 847 139 847 q 147 835 146 838 q 143 832 147 832 q 155 819 150 822 q 162 799 158 804 q 166 788 165 794 q 155 779 158 785 q 155 769 153 774 q 150 752 153 759 q 150 743 147 746 q 143 731 139 732 q 143 728 146 731 q 142 711 137 712 q 147 708 147 710 q 149 679 147 686 q 151 674 150 676 q 151 664 153 671 q 148 651 147 652 q 149 647 149 649 q 145 626 147 630 q 143 619 143 622 q 149 611 146 617 q 147 600 153 604 q 151 587 153 594 q 150 573 149 580 q 151 552 149 557 q 154 542 154 546 q 153 524 154 534 q 151 505 153 515 q 153 495 154 499 q 155 489 151 492 q 157 465 157 473 q 155 453 153 455 q 155 447 158 450 q 158 420 155 428 q 160 410 161 413 q 162 404 158 406 q 144 385 151 389 q 124 379 137 381 q 118 383 122 382 q 109 386 113 383 q 101 400 107 397 q 88 416 94 417 q 82 429 84 427 q 77 435 81 432 q 71 448 73 447 q 69 450 70 448 q 63 463 63 462 q 62 463 63 463 q 72 479 73 476 q 73 485 71 482 q 75 501 73 493 q 80 515 78 508 q 79 523 80 519 q 81 531 78 527 q 83 545 82 542 q 81 550 84 548 q 82 564 81 560 q 84 575 84 568 q 88 585 85 583 q 88 590 90 587 q 80 613 84 604 q 81 632 77 621 q 86 644 88 640 q 88 655 84 649 q 83 668 84 667 q 82 672 82 670 q 82 691 84 689 l 84 721 "},"}":{"x_min":-111.234375,"x_max":448.984375,"ha":490,"o":"m 393 283 q 403 282 401 282 q 408 279 405 282 q 436 276 427 278 q 448 269 446 275 q 438 252 440 256 q 428 250 436 249 q 413 248 415 246 q 393 243 398 245 q 382 244 387 241 q 375 239 381 240 q 371 231 368 238 q 352 227 356 229 q 343 222 347 225 q 327 208 329 212 q 320 203 325 204 q 314 190 314 191 q 310 188 313 189 q 302 170 305 177 q 297 162 299 166 q 294 153 295 158 q 288 130 293 137 q 286 116 283 124 q 282 109 282 113 q 279 99 282 105 q 278 86 279 88 q 278 84 278 85 q 278 73 279 75 q 275 69 276 71 q 274 61 274 65 q 271 54 274 56 q 271 20 269 32 q 272 -4 274 8 q 267 -28 267 -23 q 268 -39 268 -33 q 271 -67 269 -61 q 267 -78 264 -70 q 268 -97 269 -86 q 266 -113 265 -111 q 267 -118 267 -115 q 267 -136 265 -131 q 268 -146 268 -141 q 263 -164 268 -158 q 266 -183 265 -180 q 267 -187 267 -185 q 259 -212 261 -207 q 255 -222 257 -218 q 255 -235 257 -229 q 256 -249 253 -241 q 250 -269 250 -261 q 249 -286 250 -278 q 240 -312 241 -303 q 233 -324 240 -321 q 231 -333 233 -330 q 229 -343 229 -336 q 220 -350 222 -344 q 211 -358 218 -356 q 200 -375 202 -370 q 191 -379 198 -379 q 183 -389 187 -387 q 176 -387 179 -390 q 162 -397 165 -393 q 158 -406 158 -401 q 151 -406 154 -405 q 143 -405 149 -408 q 130 -413 130 -413 l 113 -417 q 106 -421 109 -419 q 99 -425 103 -423 q 92 -427 94 -425 q 84 -425 89 -428 q 78 -429 80 -427 q 69 -431 75 -431 q 54 -438 58 -435 q 47 -438 51 -440 q 25 -443 29 -440 q 13 -446 21 -446 q 0 -448 2 -448 q -4 -447 -1 -448 q -23 -451 -16 -447 q -36 -451 -29 -454 q -70 -454 -56 -453 q -96 -450 -84 -455 q -107 -442 -105 -443 q -111 -443 -108 -442 q -105 -438 -109 -438 q -97 -435 -100 -438 q -78 -428 -82 -431 q -69 -423 -73 -425 q -61 -425 -65 -424 q -52 -427 -56 -427 q -39 -427 -46 -428 q -24 -427 -32 -427 q 2 -421 -2 -423 q 23 -415 18 -416 q 33 -411 27 -413 q 49 -405 46 -405 q 55 -404 52 -405 q 67 -396 65 -397 q 69 -393 70 -396 q 85 -387 80 -389 q 90 -378 90 -385 q 99 -373 97 -378 q 105 -363 101 -368 q 114 -351 113 -352 q 113 -347 115 -351 q 120 -332 122 -335 q 129 -316 127 -325 q 138 -301 131 -307 q 141 -280 141 -288 q 146 -268 141 -272 q 145 -256 143 -263 q 149 -244 146 -249 q 150 -229 149 -231 q 151 -223 151 -226 q 155 -204 157 -207 q 157 -199 154 -200 q 155 -183 155 -187 q 155 -172 154 -179 q 157 -161 158 -165 q 160 -154 155 -157 l 158 -132 q 160 -120 158 -122 q 161 -116 161 -119 q 158 -103 157 -107 q 158 -96 158 -99 q 160 -86 160 -92 q 160 -77 160 -81 q 158 -52 161 -61 q 160 -37 160 -40 q 164 -33 161 -35 q 161 -21 158 -28 q 158 -9 164 -13 q 162 5 160 5 q 164 8 164 5 q 163 25 161 17 q 162 44 165 33 q 168 55 166 51 q 169 65 170 59 q 166 82 166 81 q 166 89 165 84 q 173 113 170 107 q 172 126 176 119 q 181 153 174 145 q 184 169 187 162 q 191 184 192 181 q 192 189 191 187 q 207 208 204 207 q 213 220 211 218 q 218 225 215 222 q 240 246 236 236 q 247 248 244 248 q 255 250 250 249 q 242 258 241 257 q 240 259 242 259 q 227 264 229 265 q 223 265 226 263 q 204 282 210 276 q 191 290 198 287 q 180 305 184 303 l 173 320 q 166 335 168 332 q 162 343 164 339 q 159 358 161 355 q 155 364 157 362 q 153 377 157 375 q 150 382 150 378 q 150 407 149 396 q 147 425 151 419 q 148 446 147 440 q 147 457 149 451 q 145 467 147 462 q 146 477 143 472 q 144 515 142 503 q 143 538 146 527 q 141 560 143 550 q 141 583 141 573 q 140 608 139 602 q 139 618 141 614 q 138 636 137 632 q 139 648 139 641 q 138 659 139 653 q 139 671 137 666 q 135 688 137 683 q 138 695 134 693 q 135 707 137 702 q 134 718 134 712 q 135 732 134 725 q 134 746 137 739 q 132 756 131 755 q 132 760 132 758 q 132 769 132 765 q 131 778 131 774 q 128 796 131 790 q 128 807 130 805 q 127 812 127 809 q 125 827 127 823 q 123 836 123 831 q 122 853 123 849 q 119 862 120 858 q 120 881 119 869 q 115 902 122 893 l 111 918 q 109 932 109 927 q 104 941 109 937 q 103 948 105 945 q 104 956 101 952 q 100 963 100 959 q 97 972 100 968 q 87 990 88 987 q 82 995 86 992 q 71 1004 71 1003 q 70 1006 71 1005 q 57 1022 59 1020 q 50 1024 55 1025 q 29 1034 47 1032 q 16 1041 17 1043 q 12 1041 14 1040 q 4 1044 8 1043 q -2 1044 1 1045 q -15 1045 -12 1045 q -23 1044 -18 1045 q -39 1045 -37 1047 q -43 1043 -40 1043 q -67 1047 -54 1045 q -93 1055 -81 1049 q -94 1075 -94 1060 q -80 1082 -82 1082 q -75 1085 -77 1082 q -63 1085 -65 1082 q -59 1090 -62 1087 q -37 1090 -48 1086 q -20 1091 -21 1091 q -18 1093 -18 1090 q 4 1091 -4 1091 q 20 1087 13 1090 q 35 1088 35 1090 q 39 1085 36 1086 q 51 1085 46 1085 q 63 1085 56 1086 q 81 1079 70 1087 q 94 1079 88 1082 q 104 1075 100 1077 q 118 1068 116 1068 q 130 1062 127 1066 q 138 1060 132 1059 q 143 1055 139 1056 q 150 1051 147 1053 q 164 1044 162 1045 q 170 1029 170 1030 q 189 1009 187 1017 q 198 999 191 1002 q 207 974 199 984 q 214 950 215 964 q 218 939 218 941 q 217 935 218 937 q 224 922 221 930 q 223 907 227 914 q 231 889 230 900 q 237 870 231 877 q 237 856 238 857 q 236 854 236 855 q 238 838 238 843 q 238 830 237 832 q 242 816 242 819 q 242 811 241 813 q 244 797 242 798 q 244 792 245 796 q 245 772 245 781 q 246 759 245 763 q 246 731 242 740 q 248 709 250 721 q 244 698 242 702 q 248 691 246 694 q 250 668 249 672 q 250 657 250 664 q 250 642 252 642 q 249 640 249 642 q 250 610 252 619 q 255 594 249 600 q 255 565 253 577 q 252 542 256 553 q 255 534 253 538 q 255 523 256 530 q 253 509 252 511 q 256 504 255 507 q 257 482 259 493 q 259 463 256 472 q 261 453 259 459 q 259 443 263 447 q 263 430 264 434 q 263 424 261 427 q 265 406 265 409 q 271 373 265 390 q 274 364 271 367 q 276 358 276 360 q 281 347 282 348 q 282 343 280 345 q 294 320 290 324 q 299 309 298 317 q 326 290 318 295 q 341 279 335 284 q 350 278 347 279 q 358 278 354 278 q 374 281 368 283 q 389 280 379 279 l 393 283 "},"a":{"x_min":14.234375,"x_max":527.65625,"ha":534,"o":"m 409 406 q 407 389 406 390 q 408 386 408 387 q 407 371 406 375 q 406 363 408 367 q 402 357 405 360 q 401 348 398 354 q 396 336 393 337 q 398 333 398 335 q 398 314 400 318 q 397 307 397 310 q 394 287 397 290 q 394 272 396 279 q 396 261 392 265 q 396 243 397 246 q 398 236 396 240 q 394 217 393 219 q 400 196 400 202 q 404 184 400 189 q 402 164 400 173 q 406 143 405 154 q 406 128 405 128 q 408 124 408 127 q 411 109 411 118 q 415 94 411 100 q 424 71 415 75 q 425 61 423 62 q 428 56 428 59 q 429 46 425 50 q 430 39 434 43 q 440 35 435 36 q 448 31 446 35 q 463 28 457 31 q 476 29 469 25 q 489 40 486 35 q 503 43 499 40 q 514 48 508 46 q 520 54 518 54 q 527 55 523 55 q 522 46 524 50 q 522 33 519 42 q 509 27 515 31 q 499 17 503 24 q 482 4 485 6 q 474 1 480 1 q 461 -16 461 -10 q 452 -19 457 -18 q 444 -23 447 -20 q 434 -32 436 -32 q 431 -36 432 -32 q 406 -40 412 -40 q 393 -39 400 -39 q 375 -31 379 -36 q 366 -31 371 -27 q 352 -23 363 -21 q 343 -10 345 -14 q 336 -2 341 -5 q 335 4 335 0 q 333 12 335 9 q 330 21 332 14 q 329 32 328 27 q 318 65 321 55 q 317 82 314 74 q 313 96 314 93 q 311 101 311 100 q 311 115 311 109 q 310 128 310 120 q 309 152 311 146 q 307 165 307 158 q 308 181 309 180 q 307 185 307 183 q 307 200 309 198 q 306 206 306 203 q 288 194 291 198 q 282 187 284 191 q 275 177 279 179 q 268 172 271 174 q 259 161 260 165 q 256 154 259 157 q 246 147 248 149 q 245 139 244 145 q 237 132 240 137 q 227 126 234 128 q 214 109 221 116 q 202 101 207 103 q 195 93 198 99 q 182 82 184 86 q 176 75 180 78 q 162 67 164 69 q 158 66 161 65 q 141 47 141 51 q 124 37 127 42 q 113 35 122 33 q 86 29 100 27 q 65 33 73 31 q 56 37 59 36 q 48 40 54 39 q 33 52 36 47 q 24 59 31 56 q 24 72 28 66 q 17 82 20 78 q 17 92 18 89 q 14 99 16 96 q 14 116 13 115 q 16 119 16 118 q 14 129 16 124 q 14 139 13 134 q 19 161 20 154 q 21 173 18 168 q 25 183 25 180 q 25 189 24 187 q 32 203 32 200 q 36 218 35 218 q 42 229 39 227 q 43 237 46 231 q 49 249 48 246 q 51 255 50 252 q 59 261 56 256 q 59 274 62 267 q 71 284 71 279 q 74 293 71 288 q 92 304 84 299 q 100 321 100 309 q 113 333 108 330 q 119 341 118 335 q 126 347 123 344 q 131 354 128 351 q 138 362 138 360 q 141 366 138 363 q 158 377 155 374 q 170 390 168 387 q 179 394 173 393 q 200 409 189 404 q 209 413 206 412 q 215 417 212 413 q 237 423 227 420 q 265 430 256 432 q 288 430 275 428 q 305 421 302 424 q 311 417 309 419 q 321 419 316 417 q 330 417 326 420 q 346 406 344 406 q 351 404 348 406 q 375 401 367 396 q 390 411 383 406 q 400 410 396 409 q 409 406 405 411 m 242 347 q 233 349 236 347 q 229 354 231 352 q 208 352 217 356 q 189 348 200 348 q 176 335 176 336 q 164 320 168 324 q 162 309 160 316 q 146 292 146 302 q 137 280 146 283 q 132 268 135 274 q 128 256 130 263 q 125 238 124 240 q 124 234 126 237 q 118 222 122 227 q 118 212 115 217 q 112 192 113 198 q 108 180 111 187 q 109 161 109 168 q 111 146 109 154 q 113 131 113 138 q 125 120 124 120 q 126 119 126 120 q 147 115 145 116 q 154 111 149 113 q 168 122 161 118 q 177 137 174 126 q 194 153 191 149 q 204 161 198 158 q 218 179 218 179 q 231 192 229 187 q 236 207 233 198 q 244 215 242 212 q 245 222 246 217 q 251 232 248 227 q 255 244 255 237 q 263 251 261 246 q 272 256 265 256 q 276 271 274 269 q 284 274 279 274 q 290 295 287 288 q 295 309 293 302 q 286 325 286 320 q 273 333 275 332 q 269 336 271 333 q 259 341 264 339 q 249 344 255 343 l 242 347 "},"T":{"x_min":-111.671875,"x_max":1158.40625,"ha":838,"o":"m 1158 1079 q 1155 1048 1157 1064 q 1149 1028 1150 1032 q 1148 1022 1148 1025 q 1144 1007 1146 1011 q 1144 1002 1142 1003 q 1140 993 1142 998 q 1138 982 1138 988 q 1121 962 1127 967 q 1110 953 1116 957 q 1103 942 1105 944 q 1098 937 1101 940 q 1072 914 1082 919 q 1053 897 1059 908 q 1041 889 1044 892 q 1034 884 1039 887 q 1027 881 1032 881 q 1020 877 1022 880 q 1011 869 1015 870 q 1002 868 1006 868 q 987 858 988 859 q 972 850 972 857 q 959 846 960 849 q 956 841 959 843 q 940 834 940 838 q 938 830 941 831 q 923 829 923 830 q 921 827 923 828 q 902 817 904 823 q 887 815 891 820 q 876 808 883 811 q 859 803 864 804 q 843 796 846 796 q 832 793 832 794 q 828 792 831 792 q 817 788 820 790 q 812 786 815 786 q 802 784 807 784 q 792 782 797 785 q 775 776 782 779 q 759 775 767 773 q 744 773 746 771 q 737 771 741 774 q 710 761 718 763 q 691 759 702 759 q 676 750 687 751 q 655 748 664 750 q 638 712 636 733 q 634 703 636 709 q 634 694 633 697 q 626 675 629 679 q 625 664 623 671 q 622 653 621 653 q 623 649 623 652 q 621 638 618 641 q 623 634 623 636 q 622 618 622 619 q 621 586 618 599 q 619 565 625 573 q 617 548 618 556 q 614 538 617 541 q 617 520 615 529 q 614 503 618 511 q 613 485 617 486 q 617 463 614 470 q 619 446 619 455 q 619 425 618 432 q 619 412 619 419 q 621 389 621 394 q 623 381 622 385 q 621 362 621 370 q 619 351 622 355 q 624 337 623 339 q 625 336 625 335 q 626 318 625 324 q 628 306 628 313 q 628 284 626 291 q 632 274 629 278 q 632 259 629 259 q 634 257 636 260 q 634 244 632 250 q 633 231 637 238 q 638 222 636 227 q 637 211 640 217 q 640 189 641 193 q 642 183 640 185 q 642 166 641 173 q 644 153 644 160 q 646 142 644 147 q 645 132 648 137 q 649 121 647 123 q 648 118 651 119 q 653 111 651 113 q 655 104 655 108 q 650 91 648 92 q 652 88 652 90 q 654 73 655 74 q 655 69 653 71 q 657 54 659 56 q 657 50 656 52 q 660 34 660 39 q 663 25 660 29 q 661 12 661 16 q 663 4 661 8 q 667 -6 664 -1 q 668 -21 670 -12 q 666 -35 666 -33 q 668 -40 667 -37 q 666 -53 661 -54 q 670 -55 670 -52 q 669 -69 668 -65 q 671 -84 670 -74 q 674 -99 671 -97 q 672 -119 671 -109 q 672 -139 674 -128 q 669 -154 670 -154 q 668 -157 668 -154 l 670 -181 q 663 -206 664 -200 q 661 -222 661 -210 q 654 -244 659 -233 q 647 -265 649 -255 q 632 -288 641 -282 q 621 -311 622 -295 q 602 -325 607 -316 q 592 -328 594 -324 q 584 -333 591 -333 q 571 -351 573 -341 q 553 -360 556 -358 q 545 -366 550 -363 q 534 -372 539 -368 q 526 -383 529 -375 q 508 -390 511 -389 q 503 -393 505 -392 q 482 -405 488 -401 q 467 -409 477 -409 q 459 -416 462 -412 q 447 -419 455 -420 q 432 -427 436 -427 q 421 -428 428 -427 q 409 -434 411 -432 q 405 -436 408 -436 q 369 -440 383 -442 q 344 -436 355 -439 q 333 -434 335 -432 q 328 -432 330 -435 q 301 -421 310 -424 q 287 -412 293 -419 q 274 -408 276 -415 q 261 -402 271 -402 q 253 -391 255 -394 q 246 -387 252 -387 q 237 -373 245 -381 q 222 -357 226 -362 q 215 -345 218 -352 q 208 -332 210 -335 q 208 -326 206 -329 q 198 -313 203 -316 q 196 -302 199 -307 q 185 -297 192 -297 q 187 -287 188 -293 q 184 -279 187 -282 q 181 -246 180 -253 q 184 -227 183 -238 q 185 -203 184 -210 q 188 -193 187 -196 q 190 -179 189 -183 q 195 -173 191 -176 q 193 -166 192 -170 q 192 -155 193 -162 q 199 -149 195 -151 q 203 -139 203 -146 q 206 -125 210 -126 q 200 -122 203 -124 q 206 -105 200 -111 q 214 -89 211 -99 q 231 -73 227 -81 q 245 -63 234 -65 q 255 -53 248 -55 q 264 -43 263 -51 q 287 -33 279 -37 q 302 -21 295 -28 q 311 -15 309 -17 q 317 -13 313 -13 q 328 -6 326 -5 q 332 -5 329 -6 q 349 7 345 6 q 356 10 354 8 q 389 24 375 12 q 406 26 404 27 q 412 24 409 25 q 446 14 436 20 q 470 5 457 8 q 478 -2 477 1 q 481 -6 478 -5 q 483 -16 481 -13 q 486 -23 485 -18 q 489 -37 486 -37 q 491 -39 491 -37 q 491 -47 491 -43 q 486 -54 492 -51 q 488 -77 488 -61 q 473 -92 477 -90 q 467 -99 469 -93 q 456 -105 459 -101 q 448 -111 453 -108 q 433 -123 435 -123 q 430 -124 431 -123 q 412 -129 416 -130 q 408 -122 408 -128 q 398 -113 401 -116 q 398 -107 396 -111 l 393 -89 q 383 -75 385 -75 q 379 -74 382 -75 q 360 -63 370 -63 q 349 -65 356 -62 q 333 -66 341 -69 q 319 -73 324 -71 q 311 -78 314 -75 q 297 -92 303 -85 q 290 -106 290 -103 q 287 -111 290 -109 q 286 -124 290 -118 q 286 -137 282 -130 q 278 -166 282 -158 q 278 -178 276 -173 q 276 -189 280 -183 q 279 -204 278 -202 q 280 -208 280 -206 q 281 -222 282 -222 q 280 -223 280 -222 q 284 -233 282 -229 q 284 -241 287 -237 q 290 -255 293 -250 q 291 -263 288 -259 q 303 -276 302 -272 q 310 -282 305 -280 q 316 -294 316 -291 q 320 -299 317 -297 q 328 -313 325 -302 q 347 -326 340 -322 q 356 -336 354 -329 q 368 -340 367 -341 q 373 -339 370 -339 q 386 -347 385 -348 q 390 -348 387 -347 q 405 -354 397 -354 q 417 -356 415 -358 q 424 -355 420 -355 q 444 -358 438 -360 q 463 -354 459 -355 q 482 -344 480 -348 q 508 -336 500 -341 q 518 -334 515 -337 q 527 -328 522 -330 q 539 -313 538 -314 q 542 -306 541 -311 q 557 -286 552 -294 q 564 -262 561 -265 q 565 -250 568 -259 q 568 -225 568 -234 q 573 -208 568 -215 q 573 -198 572 -204 q 573 -185 573 -192 q 575 -165 576 -170 q 579 -157 575 -160 q 576 -149 576 -153 q 575 -139 576 -146 q 574 -129 575 -132 q 576 -122 573 -126 q 575 -111 573 -116 q 575 -100 576 -107 q 573 -84 572 -86 q 573 -80 573 -82 q 573 -71 575 -75 q 572 -63 572 -66 q 573 -54 572 -59 q 571 -46 575 -50 q 571 -33 572 -35 q 568 -29 569 -32 q 568 -12 569 -21 q 565 5 567 -4 q 566 17 565 12 q 562 27 567 23 q 562 45 565 37 q 562 63 560 52 q 556 85 562 81 q 553 108 560 99 q 554 119 553 113 q 554 130 554 124 q 548 150 550 146 q 543 157 546 154 q 545 168 546 166 q 545 173 545 170 q 542 196 539 187 q 539 207 539 202 q 538 219 539 212 q 537 227 538 223 q 535 237 535 230 q 533 248 534 248 q 531 252 531 249 q 531 276 530 271 q 530 287 531 280 q 526 306 527 295 q 526 328 524 317 q 524 343 524 330 q 524 362 524 355 q 525 378 524 375 q 524 385 526 381 q 522 398 520 393 q 523 408 523 402 q 522 415 523 412 q 520 423 520 419 q 522 444 526 440 q 518 454 518 448 q 518 484 518 472 q 518 505 518 496 q 520 524 519 520 q 520 531 520 529 q 520 556 519 550 q 518 569 520 562 q 522 582 520 575 q 520 596 523 590 q 522 615 520 611 q 518 619 523 618 q 524 633 522 623 q 527 649 527 641 q 535 672 533 667 q 542 682 538 678 q 550 702 546 693 q 561 718 554 712 q 566 725 564 722 q 568 735 569 728 q 558 738 560 737 q 553 739 556 739 q 537 734 541 733 q 531 732 534 735 q 495 732 516 737 q 471 725 476 724 q 462 724 466 727 q 448 726 450 725 q 446 727 447 727 q 423 719 430 718 q 412 717 416 720 q 400 718 405 720 q 387 717 396 716 q 370 710 371 710 q 366 706 368 709 q 343 706 352 706 q 320 706 335 705 q 316 700 317 704 q 309 695 314 697 q 305 680 305 685 q 306 670 306 675 q 302 655 305 661 q 302 642 299 648 q 295 623 297 623 q 297 617 294 622 q 293 609 293 614 q 293 600 294 604 q 287 585 288 587 q 286 581 286 584 q 283 567 283 571 q 278 557 280 562 q 278 545 276 552 q 269 529 269 541 q 262 517 264 524 q 253 505 260 510 q 249 493 252 499 q 244 484 246 486 q 237 471 238 473 q 237 463 236 469 q 227 449 231 450 q 223 442 222 448 q 212 425 214 427 q 211 419 210 423 q 189 394 193 401 q 177 382 185 386 q 166 366 172 371 q 155 351 157 351 q 154 348 154 351 q 132 336 135 341 q 128 322 130 330 q 120 319 123 324 q 115 311 118 314 l 100 306 q 85 291 92 294 q 72 278 77 280 q 65 269 67 275 q 50 261 51 265 q 43 256 48 256 q 31 246 35 249 q 24 240 28 242 q 8 236 13 241 q -7 234 -1 234 q -20 231 -13 234 q -27 235 -24 233 q -33 238 -31 237 q -44 240 -39 241 q -55 241 -50 240 q -76 250 -73 248 q -82 256 -80 253 q -96 272 -84 267 q -100 285 -101 284 q -99 287 -99 286 q -105 304 -104 302 q -108 310 -107 306 q -109 318 -109 314 q -108 326 -108 321 q -111 335 -109 332 q -109 344 -112 337 q -105 366 -108 349 q -103 387 -107 382 q -101 400 -99 393 q -96 411 -99 405 q -96 424 -93 417 q -92 432 -94 428 q -90 443 -90 436 q -80 459 -81 453 q -71 479 -75 474 q -65 489 -67 484 q -60 501 -61 501 q -58 504 -59 501 q -50 516 -50 515 q -51 518 -51 516 q -33 538 -36 527 q -20 552 -24 550 q -16 561 -16 554 q -8 564 -9 558 q -1 569 -8 569 q 8 585 8 583 q 20 594 18 592 q 21 599 21 596 q 50 623 37 615 q 70 644 62 632 q 90 660 81 645 q 101 666 97 660 q 109 674 105 671 q 130 686 126 683 q 147 695 143 694 q 162 705 160 705 q 172 717 166 709 q 180 719 176 714 q 187 724 184 724 q 198 728 195 724 q 207 737 202 732 q 199 753 199 751 q 198 758 199 755 q 191 773 193 770 q 187 778 189 775 q 186 786 187 784 q 185 794 185 789 q 177 806 183 801 q 169 820 172 811 q 149 851 157 847 q 123 872 130 862 q 111 874 115 874 q 108 878 107 873 q 100 880 104 877 q 92 885 96 883 q 75 891 78 891 q 70 893 73 891 q 64 894 66 897 q 55 888 62 891 q 37 883 40 885 q 27 881 33 881 q 22 888 24 884 q 17 895 20 892 q 24 911 24 907 q 42 923 39 923 q 46 932 43 929 q 51 942 50 935 q 58 946 55 942 q 63 952 61 949 q 80 962 74 960 q 93 967 86 964 q 106 970 104 969 q 111 971 108 971 q 124 972 118 972 q 138 972 131 972 l 157 965 q 174 951 172 957 q 187 948 177 945 q 198 939 191 942 q 212 937 206 935 q 223 925 223 927 q 226 922 223 923 q 240 908 240 912 q 242 900 240 904 q 249 890 248 892 q 253 885 250 888 q 266 862 263 869 q 276 847 269 854 q 286 819 284 830 q 291 801 290 805 q 296 780 294 785 q 301 771 298 775 q 318 771 311 771 q 329 777 324 771 q 343 777 332 778 q 360 777 354 775 q 374 784 371 785 q 377 788 377 784 q 396 792 393 788 q 412 793 402 790 l 430 796 q 445 799 443 797 q 450 801 447 801 l 465 800 q 481 801 478 800 q 489 801 484 803 q 504 808 499 805 q 520 809 519 809 q 522 808 520 808 q 539 810 538 811 q 543 809 541 809 q 560 811 560 812 q 564 809 561 809 q 575 810 573 811 q 579 809 577 809 q 592 816 588 816 q 602 815 599 815 q 613 812 606 815 q 626 815 619 813 q 636 820 632 816 q 651 822 642 820 q 668 824 660 823 q 678 824 672 824 q 686 827 683 824 q 697 834 695 831 q 704 834 698 836 q 760 838 740 834 q 775 842 766 842 q 785 841 781 842 q 793 842 789 839 q 799 845 797 845 q 808 849 801 846 q 824 854 823 853 q 828 855 826 855 q 846 859 842 857 q 855 861 850 861 q 879 868 873 862 q 899 873 885 873 q 910 878 908 880 q 914 878 911 877 l 935 887 q 954 892 952 891 q 960 895 957 893 q 976 902 971 899 q 991 909 990 910 q 994 910 992 908 q 1014 919 1010 918 q 1036 935 1033 931 q 1054 950 1049 942 q 1066 963 1059 957 q 1078 978 1070 972 q 1081 990 1079 984 q 1083 1003 1082 995 q 1084 1019 1083 1017 q 1085 1022 1085 1021 q 1075 1047 1077 1039 q 1071 1071 1066 1063 q 1081 1083 1081 1082 q 1100 1090 1096 1093 q 1114 1104 1112 1101 q 1123 1108 1116 1106 q 1136 1104 1132 1106 q 1143 1104 1139 1102 q 1154 1087 1151 1089 q 1158 1079 1157 1085 m 207 670 q 199 665 202 668 q 192 660 196 661 q 179 654 184 660 q 165 651 173 648 q 159 645 162 648 q 149 644 155 642 q 134 636 139 637 q 118 623 120 628 q 108 619 116 618 q 101 613 105 615 q 94 609 97 611 q 78 596 86 600 q 67 585 70 587 q 61 583 63 584 q 47 568 47 569 q 37 552 40 556 q 32 545 35 549 q 18 535 23 537 q 14 526 14 533 q 7 516 9 519 q 6 507 5 514 q 0 495 2 501 q -9 485 -4 488 q -14 463 -12 470 q -18 451 -16 457 q -18 427 -18 435 q -21 411 -17 419 q -21 396 -18 404 q -21 382 -23 389 q -21 371 -21 375 q -18 363 -20 367 q -14 351 -14 354 q -13 345 -13 348 q -4 340 -9 343 q 2 335 0 337 q 20 326 16 326 q 25 326 24 326 q 39 324 37 322 q 43 324 40 325 q 63 328 61 326 q 70 333 67 329 q 78 335 73 336 q 86 343 80 341 q 92 354 93 344 q 107 366 105 364 q 111 370 109 367 q 120 386 119 381 q 128 394 122 392 q 132 405 127 402 q 137 417 138 408 q 147 427 142 421 q 151 444 151 434 q 162 460 160 458 q 166 463 165 462 q 174 484 172 478 q 179 497 177 489 q 189 523 185 518 q 191 542 192 529 q 203 562 196 558 q 202 574 200 569 q 200 585 203 579 q 205 592 204 587 q 210 598 206 596 q 210 608 208 602 q 214 618 212 614 q 210 637 211 637 q 212 640 210 637 q 211 660 212 656 q 211 670 210 664 l 207 670 "},"=":{"x_min":48.828125,"x_max":664.671875,"ha":715,"o":"m 473 233 q 483 230 480 229 q 491 231 486 231 q 499 229 496 231 q 507 230 501 227 q 522 231 516 231 q 533 231 527 231 q 548 230 546 229 q 553 233 550 231 q 564 231 560 233 q 573 234 568 230 q 585 242 583 244 q 588 244 587 241 q 606 242 604 240 q 613 246 607 245 q 636 242 628 242 q 649 240 644 242 q 661 236 660 238 q 661 230 663 233 q 661 215 667 221 q 651 198 653 199 q 647 193 648 196 l 629 188 q 614 183 617 184 q 611 184 611 181 q 596 179 596 180 q 592 176 595 177 q 569 170 573 173 q 556 168 564 168 q 545 177 553 174 q 530 176 537 179 q 512 180 519 177 q 499 180 504 183 q 483 186 484 188 q 480 184 482 184 q 461 186 461 189 q 455 183 461 183 q 439 181 439 185 q 420 181 428 183 q 414 179 417 180 q 404 179 411 177 q 396 181 400 179 q 389 183 393 183 q 375 183 378 181 q 370 184 373 184 q 354 183 359 183 q 345 184 349 184 q 335 181 341 184 q 324 183 329 179 q 307 180 314 179 q 288 180 299 181 q 262 179 268 181 q 250 177 256 177 q 229 177 241 177 q 206 179 217 177 q 191 178 195 177 q 185 176 188 179 q 154 174 168 174 q 139 175 142 177 q 132 176 135 173 q 101 173 109 176 q 86 172 92 172 q 78 170 81 173 q 54 185 59 180 q 48 199 50 189 q 52 206 51 202 q 56 212 54 210 q 73 219 70 215 q 80 219 75 219 q 90 221 85 219 l 105 231 q 131 241 124 237 q 147 250 146 249 q 151 250 149 250 q 159 246 157 249 q 165 242 161 244 l 181 242 q 199 239 189 241 q 217 237 208 237 q 227 236 223 236 q 237 236 231 237 q 254 233 250 234 q 261 236 257 233 q 278 233 272 234 q 290 233 283 233 q 303 230 299 231 q 309 231 306 229 q 337 236 328 233 q 360 236 347 238 q 377 231 371 230 q 390 231 383 233 q 407 233 406 233 q 411 234 408 234 q 427 231 427 231 l 473 233 m 473 461 q 483 459 480 458 q 491 459 486 459 q 499 458 496 459 q 507 458 501 457 q 522 460 516 459 q 533 459 527 461 q 553 461 548 458 q 564 459 560 461 q 573 462 568 458 q 585 470 583 472 q 588 472 587 469 q 606 472 604 469 q 613 474 607 474 q 636 471 628 470 q 649 467 644 472 q 661 464 660 466 q 661 458 663 462 q 661 440 666 442 q 660 431 657 438 q 651 427 653 428 q 647 423 648 425 q 631 417 632 416 q 629 417 630 417 q 614 411 617 412 q 611 413 611 411 q 592 405 595 406 q 569 399 573 402 q 556 396 564 396 q 545 405 553 402 q 530 405 537 408 q 512 409 519 406 q 499 409 504 412 q 483 415 484 417 q 480 413 482 412 q 461 415 461 419 q 455 412 461 411 q 439 411 439 412 q 420 411 428 412 q 414 408 417 409 q 404 408 411 406 q 396 409 400 408 q 389 412 393 411 q 370 413 378 411 q 354 413 359 412 q 345 413 349 413 q 335 410 341 412 q 324 412 329 408 q 307 408 314 406 q 288 409 299 411 q 262 408 268 409 q 250 406 256 406 q 229 406 241 406 q 206 408 217 406 q 191 407 195 406 q 185 405 188 408 q 154 404 168 404 q 139 404 142 406 q 132 405 135 402 l 101 402 q 86 401 92 400 q 78 398 81 402 q 54 413 59 408 q 48 428 50 419 q 52 435 51 431 q 56 442 54 439 q 73 448 70 444 q 90 450 77 447 l 105 459 q 131 469 123 466 q 147 478 146 477 q 151 480 149 478 q 159 475 157 477 q 165 470 161 473 q 173 471 169 470 q 181 470 177 472 q 199 468 189 470 q 217 465 208 466 q 227 465 223 465 q 237 463 231 466 q 254 461 250 462 q 261 463 257 461 q 278 463 272 463 q 290 461 283 462 q 303 459 299 461 q 309 459 306 457 q 337 463 328 461 q 360 463 347 466 q 377 461 371 459 q 390 459 383 462 q 411 462 406 462 l 427 459 l 473 461 "},"N":{"x_min":-249.59375,"x_max":1231.65625,"ha":850,"o":"m 436 326 q 427 347 431 343 q 421 358 423 355 q 420 364 420 362 l 416 379 q 409 396 409 392 q 392 406 396 404 q 377 438 385 421 q 366 474 368 455 q 352 496 356 492 q 345 516 345 512 q 344 522 345 520 q 336 536 336 531 q 335 542 336 541 q 330 552 333 545 q 326 560 328 558 q 314 579 321 565 q 303 594 306 594 q 302 588 301 594 q 305 577 303 583 q 309 566 307 571 q 310 560 310 561 l 313 545 q 316 526 314 529 q 318 505 320 510 q 317 499 317 501 q 322 472 322 482 q 326 438 325 447 q 324 421 326 428 q 328 404 328 406 q 329 400 329 402 q 329 379 328 383 l 332 362 l 332 347 l 333 328 q 335 302 336 307 l 337 287 q 337 265 336 269 q 339 259 339 261 q 339 241 337 244 q 339 228 339 231 q 341 221 340 225 l 340 206 q 342 189 343 193 q 341 177 341 184 q 342 166 343 168 q 341 162 341 165 q 341 143 341 149 q 341 130 341 137 q 342 118 343 120 q 341 111 341 115 l 340 94 q 341 72 341 78 q 340 59 340 66 q 341 42 340 43 q 341 39 341 40 q 339 13 340 20 q 336 4 339 6 q 333 -18 336 -13 q 333 -32 333 -32 q 332 -33 332 -32 q 330 -50 329 -50 q 330 -54 330 -51 l 326 -69 q 322 -86 321 -85 q 322 -89 322 -88 l 316 -104 l 310 -119 q 303 -143 310 -132 q 299 -154 301 -150 q 294 -165 297 -158 q 282 -185 284 -181 q 275 -200 276 -193 q 265 -214 268 -208 q 248 -231 253 -226 q 238 -248 242 -237 q 222 -261 225 -257 q 217 -267 219 -264 q 204 -278 212 -269 q 189 -288 192 -284 q 180 -294 185 -291 q 166 -302 172 -299 q 150 -316 153 -313 q 137 -326 139 -321 q 124 -331 128 -329 q 118 -335 120 -333 q 103 -340 111 -340 q 82 -347 86 -347 q 71 -348 78 -347 l 55 -354 q 37 -358 44 -356 q 23 -360 29 -360 q 4 -362 4 -362 q -15 -360 -2 -362 q -35 -356 -28 -359 l -50 -354 l -66 -351 q -90 -344 -84 -345 q -105 -339 -104 -339 q -119 -330 -115 -332 q -128 -325 -123 -328 l -139 -314 l -150 -303 q -176 -283 -164 -288 q -191 -269 -191 -269 l -196 -253 l -210 -240 q -217 -229 -215 -234 q -225 -221 -219 -223 q -229 -208 -229 -210 q -231 -206 -230 -207 l -236 -188 l -240 -172 q -248 -149 -244 -155 q -249 -134 -246 -139 l -248 -119 q -246 -112 -248 -115 q -245 -104 -245 -109 q -238 -78 -241 -84 q -236 -65 -236 -73 q -233 -53 -234 -56 q -231 -46 -231 -50 q -222 -33 -222 -36 q -214 -18 -217 -21 q -206 -4 -207 -5 q -203 -1 -206 -2 q -191 11 -193 9 q -187 14 -189 13 q -181 25 -183 23 q -174 31 -179 27 q -169 36 -172 33 q -164 44 -166 39 l -151 54 q -136 67 -138 65 q -132 70 -134 69 l -122 81 l -109 90 q -99 96 -100 96 q -94 100 -97 97 q -80 111 -82 109 q -63 116 -66 113 q -47 113 -47 113 q -35 114 -37 115 q -27 113 -32 113 l -12 108 q 2 105 0 105 q 20 96 14 99 q 36 86 35 88 q 40 82 37 84 q 55 65 46 77 q 67 55 63 59 q 78 42 77 42 l 89 29 q 92 14 90 18 q 92 0 93 0 q 92 -4 92 -1 q 91 -21 94 -17 q 84 -31 88 -25 q 76 -42 77 -39 q 75 -48 75 -44 q 66 -63 67 -61 q 47 -74 58 -69 q 32 -85 35 -82 q 24 -69 25 -71 l 24 -52 q 21 -35 24 -39 q 16 -20 18 -23 q 9 -4 10 -5 q -1 4 -1 4 q -4 5 -1 5 l -18 13 l -20 33 l -33 24 q -47 32 -44 29 q -61 40 -58 37 l -77 40 q -94 44 -92 44 q -100 43 -97 43 q -116 37 -113 37 q -128 33 -127 35 q -130 31 -128 32 q -139 16 -139 16 q -150 0 -147 5 q -154 -16 -154 -8 l -160 -31 q -164 -40 -162 -39 q -166 -44 -165 -42 q -173 -70 -173 -61 q -177 -86 -176 -84 q -179 -89 -177 -88 q -172 -105 -172 -103 q -173 -111 -173 -108 q -168 -127 -169 -126 q -163 -143 -164 -141 q -162 -147 -162 -145 q -156 -166 -158 -165 q -153 -169 -154 -168 q -143 -181 -146 -180 q -132 -192 -135 -189 q -126 -200 -130 -195 q -122 -208 -123 -204 q -109 -223 -109 -222 l -94 -238 q -88 -245 -89 -242 q -81 -252 -86 -248 q -65 -267 -70 -261 q -48 -276 -50 -276 q -35 -282 -36 -282 q -32 -283 -35 -283 q -12 -288 -16 -288 q -6 -290 -9 -288 l 8 -298 q 27 -301 24 -301 q 43 -301 35 -301 q 60 -300 55 -301 q 70 -297 65 -299 q 89 -297 81 -299 q 107 -293 104 -294 q 112 -293 111 -293 q 134 -286 126 -288 q 151 -278 142 -283 q 166 -268 164 -269 q 172 -265 169 -267 q 177 -255 176 -256 q 179 -250 177 -253 q 189 -237 188 -238 q 191 -236 189 -236 l 200 -223 q 210 -208 207 -211 q 223 -176 217 -184 l 234 -164 q 237 -142 231 -150 l 245 -126 q 247 -99 244 -108 q 253 -84 250 -90 q 254 -73 255 -75 q 253 -69 253 -71 q 257 -59 256 -63 q 259 -50 259 -55 q 265 -35 263 -43 q 265 -18 265 -24 q 263 -4 260 -6 q 260 12 259 10 q 261 14 261 13 q 264 36 259 25 q 263 51 263 51 q 264 73 264 69 q 259 93 263 90 q 260 102 259 100 q 261 108 261 104 q 260 134 263 128 q 259 143 257 139 l 267 161 l 259 174 l 259 193 l 253 217 q 252 242 253 236 q 252 259 252 252 q 253 276 255 274 q 252 279 252 278 q 252 299 253 294 q 250 309 250 303 q 249 326 249 322 q 246 349 246 344 q 247 356 246 352 q 248 366 248 360 q 245 381 248 378 q 245 391 244 386 q 246 401 246 396 l 241 416 q 240 438 240 423 q 238 447 240 442 q 234 457 237 453 q 233 472 234 467 l 230 486 q 230 504 231 503 l 225 523 q 223 537 222 535 q 223 541 223 538 q 223 552 223 549 q 222 558 222 556 q 215 587 217 579 q 210 602 212 595 l 208 618 q 206 636 206 634 q 204 638 206 637 q 198 652 203 649 l 196 671 q 190 689 192 687 q 189 693 188 691 q 185 709 187 705 q 183 717 184 713 q 180 732 183 729 l 176 748 l 176 765 q 167 788 169 782 q 165 800 165 794 q 160 819 166 817 q 157 841 160 830 q 155 857 154 855 q 149 892 150 876 q 142 927 147 908 q 141 944 141 942 q 155 952 151 948 l 168 961 q 188 975 180 969 q 195 980 192 978 q 204 982 198 982 l 217 972 q 225 959 223 964 q 229 948 226 954 q 249 937 245 938 q 257 922 253 926 q 261 907 257 910 q 269 889 264 892 l 271 873 q 273 864 271 868 q 278 857 275 859 q 283 842 278 850 l 287 826 q 294 811 291 813 q 303 792 301 793 q 324 741 310 763 q 326 734 325 737 q 330 727 328 731 q 337 709 336 710 q 345 693 344 695 q 351 678 351 678 q 352 676 352 678 q 359 656 356 667 q 367 642 367 645 l 373 626 q 386 613 377 618 q 392 596 386 602 q 402 577 397 584 l 408 561 q 416 548 412 558 l 423 527 q 426 520 425 524 q 430 511 427 516 q 434 504 432 508 q 440 496 436 500 q 442 485 440 489 q 447 478 444 481 l 455 465 q 463 444 459 446 q 470 430 470 431 q 469 428 469 430 q 477 405 477 415 l 488 394 q 495 381 493 382 q 500 377 497 379 q 507 356 507 358 q 514 344 514 345 q 515 341 515 343 q 522 328 522 333 q 526 316 523 322 q 531 294 529 302 q 546 259 541 268 l 554 245 q 563 215 561 225 q 572 199 565 206 q 579 183 577 185 q 590 165 588 166 q 592 150 590 157 q 597 137 595 145 q 602 123 599 130 q 611 107 609 109 q 615 99 614 107 q 617 90 615 90 l 629 61 q 628 73 630 61 q 628 89 626 86 q 626 114 626 105 q 625 124 626 123 l 626 139 q 624 153 625 149 q 623 164 623 157 q 621 178 621 177 q 622 180 622 179 q 622 199 622 195 l 621 218 l 621 244 q 621 261 619 261 q 621 278 621 274 q 618 290 621 283 l 622 305 q 623 312 622 310 q 626 321 623 314 l 628 337 q 621 358 621 348 l 626 373 q 619 392 621 390 q 622 406 623 405 q 628 425 625 420 l 632 442 l 629 457 q 631 467 629 466 q 634 474 633 469 q 633 484 633 481 q 633 491 633 488 l 637 515 q 642 534 642 526 l 645 556 q 650 571 649 565 q 652 583 651 577 q 653 599 653 598 q 656 618 657 617 q 661 634 660 632 q 661 638 661 636 q 670 667 670 653 l 678 680 l 678 695 q 681 710 682 708 q 683 716 680 713 l 687 731 l 691 750 q 694 765 693 760 q 705 788 704 771 l 713 807 q 721 818 721 815 q 724 824 721 822 q 732 846 731 845 l 741 866 l 750 880 q 754 895 754 893 l 762 908 q 766 919 763 915 q 771 930 769 923 q 777 941 774 935 q 782 956 779 946 l 789 969 q 797 991 797 986 l 804 1005 l 813 1020 q 822 1033 813 1025 q 826 1039 824 1036 q 831 1048 828 1043 q 843 1060 842 1060 q 845 1063 843 1060 q 851 1078 851 1077 q 865 1092 864 1090 q 866 1097 866 1094 l 878 1108 l 892 1120 q 901 1129 896 1124 q 911 1138 906 1133 l 923 1147 q 933 1159 933 1158 q 935 1161 934 1161 q 949 1171 948 1170 q 961 1179 959 1178 q 967 1182 964 1180 q 972 1187 969 1184 q 978 1193 975 1190 q 990 1199 986 1197 q 998 1203 994 1200 q 1034 1223 1021 1215 q 1052 1231 1049 1226 q 1068 1231 1060 1231 q 1083 1233 1077 1231 q 1098 1234 1097 1234 q 1113 1234 1106 1234 q 1132 1228 1125 1228 q 1148 1228 1147 1230 q 1166 1222 1161 1224 q 1180 1211 1178 1212 q 1195 1197 1189 1203 l 1207 1177 q 1219 1151 1218 1158 q 1228 1139 1228 1140 q 1230 1121 1230 1124 q 1231 1113 1231 1117 q 1230 1103 1231 1108 q 1227 1093 1228 1098 q 1223 1070 1226 1078 q 1220 1056 1220 1063 q 1208 1036 1214 1040 q 1202 1021 1203 1022 q 1200 1017 1201 1020 q 1180 1001 1189 1005 q 1168 993 1169 994 q 1166 992 1167 992 q 1150 976 1151 979 q 1131 963 1136 972 q 1116 956 1121 961 q 1096 946 1104 949 q 1082 935 1089 942 q 1066 931 1068 931 l 1028 930 q 1021 945 1020 944 q 1039 961 1039 959 l 1051 971 l 1071 971 q 1086 972 1082 971 q 1100 979 1097 978 q 1105 982 1102 980 l 1120 990 q 1125 1002 1124 999 q 1127 1010 1127 1005 l 1136 1022 q 1135 1039 1132 1036 q 1138 1051 1138 1051 q 1139 1053 1139 1052 q 1140 1065 1139 1059 q 1140 1078 1140 1071 q 1139 1093 1140 1089 q 1136 1102 1138 1098 q 1131 1109 1133 1106 q 1124 1123 1124 1121 q 1116 1139 1117 1136 q 1091 1154 1105 1150 l 1077 1163 q 1061 1172 1063 1171 q 1058 1174 1059 1173 q 1027 1174 1039 1174 q 1001 1169 1015 1173 q 982 1161 987 1163 q 973 1147 973 1151 q 963 1136 964 1138 q 952 1131 953 1133 q 950 1127 952 1129 q 938 1117 940 1119 q 934 1113 937 1116 l 925 1098 l 915 1086 q 902 1068 903 1072 l 895 1055 q 890 1049 892 1052 q 885 1043 888 1045 q 883 1034 884 1037 q 880 1028 881 1030 l 870 1014 q 868 998 868 1003 q 864 990 865 994 q 859 983 862 986 l 850 971 q 847 956 847 956 q 841 937 841 941 q 833 926 834 927 q 832 923 832 925 q 815 907 820 915 q 816 891 813 896 q 809 874 811 877 l 797 862 q 794 845 794 850 q 788 827 789 828 q 788 824 788 826 q 777 808 781 812 q 775 801 777 804 q 771 792 774 798 q 766 775 766 778 l 755 762 q 750 728 758 736 q 747 713 748 714 q 737 697 737 699 l 741 680 q 736 658 736 663 q 736 651 736 653 l 732 636 q 727 615 727 622 q 725 600 727 609 q 721 587 722 592 q 717 577 720 581 q 713 556 713 560 l 706 542 q 702 523 704 527 q 704 503 704 510 l 698 485 q 699 467 698 469 q 699 465 699 466 q 699 452 699 458 q 698 438 699 446 q 697 429 698 434 q 697 421 697 425 q 695 405 695 411 q 693 378 693 386 q 694 360 695 363 q 693 352 693 356 q 694 341 693 345 q 695 335 695 337 l 694 317 l 694 299 q 693 284 690 287 q 695 264 693 267 q 695 245 693 248 q 695 230 694 231 q 698 215 697 217 q 698 191 695 199 q 698 176 695 179 l 699 158 q 702 142 698 143 q 706 116 706 126 q 706 105 708 109 q 704 99 705 100 l 708 84 q 709 69 709 69 l 708 54 l 713 37 q 712 25 713 27 q 712 20 712 23 q 717 2 714 5 l 718 -13 q 725 -25 724 -24 q 725 -27 725 -25 q 727 -37 727 -29 q 729 -52 727 -44 q 732 -75 729 -67 q 733 -93 732 -90 q 737 -110 736 -109 q 737 -112 737 -111 l 739 -127 l 740 -143 q 744 -156 744 -155 q 743 -158 743 -157 q 744 -170 743 -165 q 746 -179 746 -176 l 751 -200 q 756 -215 755 -208 q 758 -221 758 -218 q 760 -231 759 -225 l 766 -246 q 770 -266 766 -257 q 778 -282 774 -275 l 788 -297 q 785 -311 785 -309 q 774 -332 774 -322 q 759 -336 762 -336 q 746 -343 746 -341 q 733 -345 737 -343 q 725 -349 728 -347 l 708 -351 l 706 -336 l 702 -320 q 699 -305 699 -307 q 693 -284 695 -287 q 690 -269 691 -275 q 685 -260 687 -264 q 680 -253 682 -256 q 675 -238 675 -240 q 670 -224 670 -227 q 668 -217 670 -221 q 657 -198 657 -210 q 652 -184 655 -185 q 648 -181 649 -183 q 642 -161 642 -166 q 636 -151 637 -154 q 632 -146 634 -149 q 629 -129 630 -132 q 625 -123 628 -126 l 619 -107 q 613 -91 615 -96 q 610 -82 611 -86 q 600 -65 602 -67 q 598 -59 599 -62 l 595 -43 q 587 -27 592 -40 q 577 -12 584 -17 q 574 0 576 -5 q 569 9 572 4 q 566 16 568 12 q 562 25 565 21 q 560 33 561 28 q 557 44 560 37 l 552 59 l 554 74 l 543 88 l 535 104 q 534 119 538 116 q 520 128 520 127 q 519 130 520 128 q 518 142 519 141 q 515 146 516 143 l 503 162 q 499 179 497 176 q 489 196 491 195 q 486 212 488 211 q 482 215 484 214 q 477 231 480 229 q 470 244 473 241 q 463 249 466 246 q 458 268 463 260 q 455 291 458 286 q 446 305 448 305 l 443 320 l 436 326 "},"2":{"x_min":-12.46875,"x_max":758.25,"ha":765,"o":"m 718 -128 q 735 -127 735 -126 q 737 -130 735 -128 q 752 -129 750 -131 q 758 -130 755 -127 q 748 -144 751 -143 q 744 -147 746 -145 q 734 -158 737 -154 q 728 -164 731 -161 q 706 -176 714 -173 q 691 -183 691 -183 q 676 -192 680 -189 q 670 -198 672 -195 l 652 -207 q 634 -219 640 -218 q 625 -223 629 -221 q 611 -230 613 -230 q 603 -231 607 -231 q 595 -230 599 -230 q 580 -237 583 -234 q 575 -240 577 -240 q 566 -240 571 -241 q 557 -241 562 -240 q 543 -246 548 -246 q 535 -248 538 -246 q 480 -249 505 -256 q 459 -248 467 -249 q 447 -241 451 -248 q 430 -238 431 -241 q 427 -234 430 -236 q 413 -232 413 -234 q 409 -229 412 -230 q 400 -229 404 -231 q 394 -225 397 -226 q 378 -219 383 -222 q 366 -212 373 -215 q 336 -204 345 -204 q 325 -196 330 -199 q 309 -193 320 -192 q 293 -184 303 -184 q 266 -170 276 -170 q 253 -161 256 -169 q 237 -157 240 -158 q 233 -158 234 -155 q 217 -149 226 -153 q 198 -147 207 -146 q 181 -137 184 -138 q 173 -134 179 -137 q 149 -132 157 -130 q 139 -127 142 -134 q 125 -128 132 -130 q 111 -126 118 -126 q 99 -128 104 -126 q 82 -128 93 -130 q 66 -125 67 -124 q 62 -126 65 -126 q 37 -125 46 -123 q 18 -130 29 -127 q 4 -134 6 -138 q -8 -131 1 -130 q -12 -119 -13 -119 q -10 -116 -10 -119 q -5 -97 -9 -101 l 9 -90 q 32 -80 27 -85 q 43 -71 37 -75 q 60 -69 58 -71 q 67 -63 62 -66 q 82 -62 78 -63 q 88 -61 85 -61 q 103 -60 100 -61 q 108 -58 105 -59 q 123 -56 120 -55 q 130 -58 126 -58 q 147 -57 137 -59 q 166 -58 158 -55 q 175 -54 170 -55 q 184 -51 180 -54 q 201 -40 196 -40 q 210 -36 206 -39 q 215 -30 212 -33 q 221 -24 218 -27 q 245 -6 236 -18 q 254 -1 253 -2 q 257 2 255 0 q 274 13 267 4 q 292 26 286 23 q 301 39 298 29 q 311 44 307 42 q 317 52 316 46 q 333 62 328 59 q 339 67 336 65 q 345 71 341 69 q 362 87 358 84 q 368 93 366 90 q 381 103 378 99 q 390 109 385 108 q 398 120 393 116 q 409 131 404 124 q 430 154 421 153 q 440 169 439 166 q 442 174 440 172 q 453 185 450 187 q 469 217 463 212 q 472 225 470 222 q 476 234 474 229 q 484 247 482 244 q 489 253 486 250 q 501 278 497 269 q 511 294 504 287 q 515 305 515 301 q 519 310 515 309 q 523 324 520 318 q 529 333 526 329 q 537 356 534 355 q 537 367 534 362 q 541 379 539 373 q 543 394 543 386 q 548 406 542 402 q 550 419 548 413 q 554 427 552 424 l 554 444 q 560 459 561 459 q 564 476 562 476 q 565 478 565 477 q 563 485 565 481 q 564 493 561 489 q 567 508 568 505 q 567 514 567 511 q 566 524 565 519 q 565 531 568 529 q 567 538 568 534 q 567 548 567 542 q 566 565 565 557 q 567 581 568 573 q 557 606 562 598 q 553 634 554 623 q 543 651 552 644 q 541 663 543 661 q 535 667 538 664 q 533 680 535 675 q 529 693 530 685 q 516 708 518 706 q 512 710 515 709 q 501 733 507 725 q 488 747 496 740 q 476 757 478 756 q 473 762 473 758 q 466 766 469 762 q 459 773 463 770 q 452 781 453 779 q 448 785 451 782 q 439 794 440 794 q 435 796 438 794 q 424 803 427 803 q 419 805 421 803 q 406 812 405 809 q 404 816 406 815 q 395 817 397 815 q 389 823 393 820 q 366 825 379 822 q 340 827 352 828 q 320 820 329 826 q 304 817 307 820 q 294 811 301 813 q 274 794 279 801 q 257 784 268 786 q 247 765 252 765 q 244 759 242 765 q 229 747 233 756 q 219 731 226 737 q 207 710 215 718 l 206 695 q 207 674 206 679 q 208 661 208 668 q 206 645 206 649 q 207 637 206 641 q 203 628 202 634 q 207 618 204 621 q 205 604 204 606 q 206 599 206 602 q 205 586 206 592 q 206 573 204 580 q 209 549 210 554 q 210 538 208 543 q 216 523 212 524 q 218 516 219 522 q 225 507 222 512 q 230 496 229 503 q 241 483 241 485 q 242 478 241 481 q 250 472 246 474 q 257 462 255 469 q 270 459 267 458 q 278 458 274 459 q 296 451 291 453 q 305 451 301 448 q 314 453 310 454 q 322 454 318 453 q 343 455 339 455 q 354 451 347 454 q 349 427 352 431 q 344 419 347 424 q 331 416 337 417 q 324 408 325 415 q 306 401 313 405 q 293 392 299 397 q 271 383 275 389 q 251 381 260 381 q 231 381 242 382 q 217 385 221 386 q 208 386 212 385 q 195 393 198 390 q 181 397 183 396 q 177 400 180 398 q 162 406 166 405 q 153 413 155 412 q 149 416 151 413 q 130 446 135 438 q 122 457 126 450 q 115 470 119 463 q 105 493 105 484 q 100 517 99 510 q 97 531 101 524 q 96 555 97 548 q 96 575 94 562 q 99 591 100 587 q 97 602 97 595 q 99 614 100 613 q 97 618 97 615 l 100 633 q 103 645 100 641 q 107 653 107 649 q 109 673 107 664 q 112 691 112 682 q 122 709 122 705 q 124 717 123 713 q 134 728 134 727 q 135 731 134 729 q 143 739 139 735 q 149 748 146 744 q 169 778 162 770 q 185 792 176 786 q 195 803 193 801 q 199 807 196 805 q 213 817 211 813 q 218 823 215 820 q 234 831 230 831 q 240 838 238 831 q 250 843 245 841 q 257 849 255 845 q 268 850 265 847 q 278 854 271 853 q 295 861 284 861 q 303 866 299 864 q 314 868 307 869 q 323 872 320 870 q 332 874 326 873 q 351 880 348 880 q 358 881 354 880 q 388 888 381 885 q 408 888 396 891 q 428 887 424 885 q 439 889 432 888 q 451 885 446 888 q 463 883 455 883 q 471 879 466 880 q 478 877 476 878 q 497 868 492 869 q 503 862 501 868 q 518 853 518 854 q 520 850 519 853 q 530 846 526 849 q 538 841 534 843 q 550 828 550 831 q 569 807 565 816 q 583 800 581 801 q 594 786 587 793 q 602 768 599 770 q 609 763 606 766 q 617 742 614 746 q 621 732 621 739 l 629 713 q 634 700 636 701 q 634 697 633 699 q 639 689 637 694 q 645 680 641 683 q 651 663 645 670 q 659 645 657 656 q 659 627 657 630 q 663 621 661 623 q 665 602 667 606 q 663 594 663 598 q 665 586 663 590 q 668 579 667 583 q 668 553 671 565 q 667 538 667 545 q 667 524 667 531 q 663 510 664 516 q 660 497 663 504 q 661 490 663 495 q 661 482 659 485 q 655 469 655 478 q 652 455 656 459 q 649 436 652 442 q 645 422 648 423 q 644 415 642 421 q 633 402 634 402 q 632 401 632 402 q 633 377 634 383 q 629 364 632 371 q 624 348 623 349 q 623 344 625 347 q 617 333 617 336 q 613 330 617 330 q 607 314 610 317 q 600 307 603 310 q 595 292 596 298 q 591 283 594 287 q 582 275 584 278 q 577 269 580 272 q 578 257 579 261 q 575 246 577 252 q 562 237 569 244 q 556 221 558 222 q 552 218 554 219 q 535 187 549 196 q 526 169 529 170 q 524 162 523 168 q 516 157 518 162 q 512 149 515 151 q 499 134 499 138 q 470 103 472 120 q 458 94 465 99 q 448 82 451 90 q 433 73 439 80 q 423 61 427 67 q 408 52 412 59 q 393 42 404 44 q 381 30 387 35 q 367 20 374 25 q 357 10 359 12 q 352 5 355 8 l 337 -2 q 330 -9 333 -6 q 321 -14 328 -12 q 311 -20 313 -20 q 306 -21 309 -20 q 299 -29 302 -24 q 290 -36 297 -35 q 280 -45 283 -43 q 272 -47 276 -47 q 257 -56 267 -54 q 241 -66 248 -59 q 262 -73 248 -74 q 282 -81 276 -73 q 300 -85 293 -81 q 317 -92 307 -89 q 341 -104 328 -103 q 349 -111 344 -109 q 359 -118 355 -113 q 383 -125 375 -123 q 393 -132 390 -127 q 408 -137 401 -135 q 423 -142 416 -139 q 438 -149 436 -149 q 453 -156 451 -157 q 457 -157 454 -155 q 480 -169 477 -165 q 492 -171 486 -170 q 503 -174 497 -172 q 515 -180 515 -179 q 516 -183 515 -181 q 539 -187 534 -188 q 548 -188 543 -187 q 557 -190 553 -188 q 568 -193 561 -192 q 579 -193 573 -193 q 591 -192 584 -193 q 600 -191 594 -191 q 611 -191 606 -191 q 624 -191 618 -191 q 637 -189 630 -192 q 645 -184 641 -187 q 655 -180 649 -181 q 674 -168 661 -172 q 685 -159 683 -161 q 689 -154 686 -157 q 702 -146 698 -149 q 708 -137 706 -143 l 718 -128 "},"j":{"x_min":-340.921875,"x_max":444.765625,"ha":328,"o":"m 89 746 q 92 728 89 739 q 103 725 101 728 q 107 720 104 722 q 124 704 115 705 q 134 694 132 693 q 138 695 135 695 q 146 690 141 690 q 154 687 151 690 q 172 691 166 691 q 183 687 181 687 q 184 682 185 686 q 192 667 195 670 q 191 657 189 664 q 179 644 179 648 q 168 634 173 638 q 161 623 164 630 q 146 607 149 610 q 141 600 143 603 q 122 594 130 598 q 103 594 113 591 q 97 600 100 598 q 92 606 94 603 q 75 615 85 613 q 61 626 63 623 q 55 626 59 628 q 44 636 44 636 q 42 638 44 637 q 18 653 23 642 q 6 671 6 666 q 8 685 6 676 q 18 695 16 693 q 20 699 20 697 q 31 708 27 702 q 42 716 35 713 q 56 732 54 731 q 75 746 70 747 q 89 746 80 746 m 249 -146 q 264 -146 263 -147 q 280 -143 271 -143 q 301 -142 290 -142 q 330 -151 321 -145 q 347 -154 341 -151 q 359 -157 352 -157 q 380 -170 373 -162 q 397 -181 387 -179 q 409 -192 404 -189 q 414 -206 413 -203 q 417 -210 415 -208 q 425 -225 420 -221 q 432 -233 425 -231 q 431 -240 438 -236 q 442 -260 439 -255 q 443 -272 446 -265 q 442 -286 444 -284 q 439 -291 440 -288 q 438 -303 440 -303 q 435 -306 435 -303 q 433 -324 438 -317 q 427 -341 428 -332 q 415 -352 416 -349 q 412 -352 415 -354 q 404 -366 402 -364 q 406 -371 406 -368 q 402 -379 405 -378 q 401 -387 398 -381 q 390 -402 392 -400 q 389 -406 389 -404 q 377 -413 378 -409 q 374 -419 377 -416 q 364 -432 367 -419 q 339 -443 349 -440 q 330 -427 333 -431 q 329 -419 328 -424 q 336 -398 339 -411 q 347 -389 345 -390 q 349 -386 348 -389 q 355 -366 355 -374 q 358 -351 355 -358 q 354 -330 355 -336 q 354 -320 354 -325 q 351 -307 351 -309 q 351 -302 352 -306 q 347 -295 349 -298 q 341 -286 344 -291 q 330 -276 332 -276 q 330 -272 329 -275 q 310 -261 313 -267 q 301 -256 307 -255 q 291 -248 293 -246 q 287 -248 290 -249 q 269 -236 275 -240 q 259 -231 264 -233 q 247 -235 249 -233 q 241 -234 245 -237 q 240 -251 241 -248 q 237 -257 238 -255 q 237 -283 238 -272 q 229 -303 236 -294 q 229 -314 230 -310 q 225 -322 227 -318 q 221 -345 226 -337 q 210 -360 217 -354 q 208 -368 208 -363 q 206 -379 208 -373 q 196 -393 200 -393 q 180 -420 181 -413 q 179 -428 179 -423 q 177 -436 180 -434 q 168 -443 170 -440 q 164 -447 166 -446 q 158 -459 158 -458 q 154 -459 157 -461 q 148 -470 154 -467 q 142 -481 142 -473 q 136 -486 138 -482 q 128 -489 134 -489 q 124 -501 128 -497 q 119 -511 120 -504 q 107 -519 108 -519 q 104 -522 105 -519 q 95 -534 97 -534 q 92 -535 93 -534 q 76 -551 80 -550 q 74 -558 73 -552 q 50 -579 56 -572 q 35 -588 44 -585 q 29 -599 31 -598 q 24 -600 27 -600 q 19 -607 21 -603 q 12 -611 17 -611 q 0 -625 0 -618 q -8 -628 -4 -626 q -16 -632 -13 -629 q -36 -644 -36 -642 q -62 -663 -54 -659 q -74 -678 -70 -667 q -90 -685 -89 -682 q -92 -690 -90 -687 q -101 -690 -97 -689 q -111 -690 -104 -691 q -118 -695 -115 -693 q -127 -697 -120 -698 l -141 -705 q -148 -712 -143 -710 q -155 -716 -153 -713 q -203 -712 -181 -714 q -244 -713 -225 -710 q -252 -714 -248 -713 q -261 -716 -256 -716 q -286 -708 -278 -706 q -297 -697 -294 -697 q -303 -697 -301 -698 q -312 -685 -310 -690 q -320 -676 -314 -679 q -325 -659 -321 -666 q -335 -648 -329 -653 q -334 -640 -332 -644 q -339 -632 -336 -636 q -340 -617 -341 -625 q -339 -598 -339 -609 q -335 -575 -337 -583 q -336 -562 -333 -567 q -334 -549 -333 -554 q -336 -538 -335 -543 q -322 -528 -324 -531 q -317 -522 -321 -524 q -316 -514 -320 -515 q -314 -505 -313 -512 q -307 -490 -310 -495 q -307 -482 -305 -485 q -294 -466 -301 -469 q -290 -455 -291 -457 q -286 -453 -288 -454 q -278 -439 -280 -440 q -276 -432 -276 -438 q -269 -423 -271 -425 q -268 -419 -268 -421 q -255 -408 -255 -408 q -248 -393 -249 -394 q -246 -389 -246 -392 q -234 -376 -237 -381 q -225 -368 -231 -371 q -208 -352 -214 -358 q -201 -340 -203 -341 q -198 -336 -199 -339 q -181 -317 -183 -326 q -168 -311 -169 -314 q -164 -305 -166 -307 q -148 -292 -151 -294 q -141 -290 -145 -291 q -129 -283 -130 -284 q -126 -282 -128 -282 q -105 -267 -111 -271 q -96 -257 -99 -264 q -78 -244 -86 -255 q -58 -237 -69 -244 q -42 -230 -46 -234 q -27 -223 -32 -226 q -14 -217 -20 -221 q -4 -208 -9 -214 l 12 -206 q 24 -199 20 -199 q 32 -196 28 -199 l 47 -196 q 75 -187 66 -192 q 99 -188 85 -183 q 115 -183 109 -188 q 126 -183 122 -184 q 137 -181 130 -183 q 150 -126 153 -149 q 147 -82 147 -104 q 146 -67 149 -75 q 142 -48 143 -58 q 142 -36 143 -39 q 141 -29 141 -33 q 138 -12 142 -23 q 137 7 138 2 q 134 17 135 12 q 133 31 132 24 q 130 42 134 37 q 130 63 127 54 q 126 77 134 73 q 126 93 128 84 q 122 114 122 108 q 119 123 123 120 q 119 140 118 130 q 115 153 120 150 q 116 161 118 155 q 112 169 115 166 l 111 189 q 108 200 109 195 q 107 208 107 204 q 105 229 105 219 q 101 248 104 238 q 97 277 100 264 q 96 305 94 290 q 93 316 92 314 q 94 321 94 317 q 88 362 93 345 q 82 398 84 379 q 65 387 67 389 q 59 382 62 385 q 48 373 50 378 q 42 367 47 367 q 39 358 42 360 q 33 351 36 355 q 21 350 27 351 q 8 349 14 349 q -2 370 0 364 q -6 383 -4 375 q 9 409 5 401 q 24 413 18 409 q 25 424 29 417 q 46 438 35 436 q 48 444 46 440 q 58 447 51 447 q 64 452 61 450 q 73 455 67 454 q 81 461 77 458 q 92 466 85 463 q 111 481 108 476 q 137 495 132 489 q 147 502 143 503 q 150 504 150 501 q 172 489 165 500 q 174 470 176 473 q 174 461 173 466 q 174 448 176 450 q 173 446 173 447 q 174 432 174 434 q 173 428 173 431 q 183 411 176 413 q 184 389 185 394 q 183 378 183 383 l 185 363 q 188 343 187 347 q 185 336 189 339 q 188 324 188 333 q 185 313 188 316 q 193 299 192 299 q 196 286 196 293 q 198 275 195 280 q 202 260 203 265 q 204 249 202 255 q 208 227 206 230 q 210 213 208 215 q 212 208 211 211 q 215 195 215 202 q 219 184 215 188 q 219 166 221 172 q 221 157 218 161 q 223 139 222 147 q 223 127 223 131 q 227 113 227 118 q 229 103 227 108 q 233 86 234 88 q 231 81 231 84 q 233 73 233 77 q 236 66 234 70 q 236 54 237 54 q 236 51 234 54 q 241 36 240 36 q 241 21 242 21 q 241 18 240 20 q 245 4 245 4 l 246 -27 q 248 -42 246 -33 q 245 -56 249 -50 q 249 -71 246 -69 q 250 -90 250 -88 q 249 -94 249 -92 q 250 -107 249 -101 q 250 -120 250 -113 q 250 -133 249 -127 q 249 -146 252 -139 m 118 -240 q 99 -244 105 -244 q 82 -250 85 -250 q 75 -250 78 -249 q 56 -253 59 -255 q 47 -252 52 -252 q 27 -264 32 -263 q 10 -265 21 -265 q 4 -269 6 -267 q -5 -271 1 -272 q -23 -278 -20 -280 q -31 -278 -25 -276 q -48 -292 -44 -288 q -61 -297 -52 -297 q -69 -303 -63 -301 q -77 -307 -74 -305 q -91 -314 -86 -309 q -105 -321 -96 -320 q -125 -336 -118 -332 q -138 -347 -132 -340 q -155 -357 -153 -355 q -160 -363 -158 -359 q -171 -374 -169 -370 q -176 -381 -173 -378 q -183 -385 -180 -383 q -189 -390 -187 -387 q -189 -398 -191 -396 q -188 -405 -188 -401 q -202 -415 -200 -412 q -206 -421 -204 -419 q -212 -436 -211 -427 q -218 -448 -218 -444 q -221 -453 -218 -451 q -227 -469 -225 -463 q -234 -478 -230 -474 q -234 -491 -236 -491 q -234 -495 -233 -492 q -236 -502 -234 -499 q -241 -511 -238 -505 q -245 -530 -244 -527 l -249 -545 l -246 -560 q -242 -575 -245 -567 q -238 -588 -240 -584 q -223 -606 -233 -599 q -215 -619 -221 -621 q -198 -624 -202 -625 q -189 -625 -193 -623 q -174 -630 -179 -630 q -164 -629 -169 -629 q -141 -631 -149 -633 q -128 -633 -134 -629 q -109 -628 -118 -628 q -94 -626 -94 -626 q -81 -619 -84 -622 q -63 -610 -65 -610 q -49 -600 -54 -602 q -40 -595 -44 -598 q -26 -587 -27 -588 q -23 -584 -25 -585 q -10 -575 -14 -581 q 1 -567 -5 -569 q 29 -534 21 -549 q 52 -511 37 -519 q 55 -500 50 -504 q 59 -488 61 -496 q 70 -479 67 -481 q 75 -474 73 -477 q 89 -448 86 -461 q 103 -432 92 -436 q 103 -421 101 -425 q 105 -411 105 -417 q 117 -389 115 -401 q 126 -366 119 -378 q 128 -359 127 -364 q 128 -351 130 -354 q 132 -342 131 -347 q 134 -330 132 -337 q 136 -315 137 -317 q 135 -310 135 -313 q 140 -291 141 -294 q 139 -286 139 -288 q 141 -274 142 -276 q 141 -268 141 -271 q 142 -250 141 -252 q 143 -248 143 -249 q 118 -240 130 -238 "},"Z":{"x_min":-153.28125,"x_max":1294.046875,"ha":815,"o":"m 1049 -558 q 1043 -563 1047 -562 q 1037 -568 1039 -564 q 1024 -571 1028 -571 q 1021 -575 1021 -571 q 1007 -581 1011 -575 q 992 -587 1002 -588 q 965 -600 978 -595 q 949 -602 952 -602 q 935 -609 938 -606 q 929 -609 931 -611 q 914 -611 919 -613 q 904 -611 910 -610 q 878 -613 887 -617 q 857 -613 865 -618 q 841 -613 846 -613 q 835 -610 836 -613 q 822 -608 823 -611 q 817 -604 820 -604 q 797 -613 807 -613 q 783 -607 784 -602 q 775 -610 782 -611 q 762 -600 770 -604 q 752 -603 756 -604 q 742 -599 747 -602 q 732 -594 737 -596 q 721 -594 727 -592 q 706 -586 712 -591 q 693 -583 699 -581 q 680 -577 682 -576 q 676 -579 679 -579 q 668 -575 674 -576 q 663 -569 663 -573 q 647 -563 652 -564 q 638 -557 641 -562 q 626 -553 630 -557 q 614 -546 621 -549 q 601 -535 602 -535 q 599 -531 600 -534 q 580 -513 585 -516 q 572 -503 575 -510 q 562 -495 565 -500 q 552 -486 558 -489 q 543 -475 543 -478 q 541 -469 542 -472 q 533 -464 539 -466 q 524 -461 526 -462 q 520 -452 522 -454 q 516 -447 518 -450 q 500 -438 503 -439 q 495 -436 497 -438 q 476 -415 480 -424 q 461 -402 472 -405 q 448 -390 453 -392 q 442 -382 443 -389 q 425 -369 427 -371 q 419 -367 423 -367 q 410 -356 413 -356 q 405 -352 406 -355 q 393 -339 398 -341 q 388 -327 390 -329 q 381 -325 386 -325 q 370 -315 371 -314 q 367 -314 368 -316 q 362 -309 364 -311 q 356 -303 359 -306 q 333 -284 340 -294 q 316 -268 326 -275 q 300 -250 306 -255 q 293 -234 294 -245 q 280 -227 280 -229 q 278 -222 279 -225 q 260 -215 265 -222 q 244 -207 255 -208 q 229 -191 233 -193 q 221 -189 226 -189 q 214 -176 219 -184 q 193 -175 199 -174 q 184 -181 187 -176 q 170 -198 170 -195 q 157 -206 164 -202 q 141 -212 150 -210 q 126 -227 128 -219 q 113 -232 119 -230 q 103 -238 108 -234 q 86 -249 89 -248 q 82 -253 84 -250 q 66 -261 67 -259 q 63 -267 65 -264 q 46 -272 51 -271 q 39 -280 40 -274 q 12 -284 18 -280 q 1 -290 6 -287 q -12 -290 -4 -288 q -27 -294 -20 -291 q -39 -298 -37 -299 q -43 -298 -40 -297 q -61 -301 -52 -302 q -77 -302 -69 -299 q -87 -298 -81 -298 q -97 -295 -93 -298 q -113 -286 -112 -288 q -118 -283 -115 -284 q -132 -273 -131 -274 q -131 -269 -132 -272 q -141 -260 -134 -264 q -143 -246 -147 -256 q -149 -233 -150 -236 q -153 -230 -147 -230 q -152 -217 -151 -218 q -153 -214 -153 -215 l -150 -195 q -143 -177 -147 -180 q -141 -168 -139 -173 q -134 -163 -135 -166 q -131 -155 -134 -160 q -123 -153 -124 -157 q -118 -147 -122 -149 q -112 -132 -115 -137 q -93 -123 -99 -130 q -77 -113 -88 -116 q -50 -90 -62 -101 q -42 -84 -43 -86 q -37 -80 -40 -81 q -31 -79 -35 -78 q -23 -77 -28 -80 q -9 -67 -10 -69 q 0 -63 -4 -63 q 5 -62 2 -63 q 21 -55 14 -55 q 31 -52 25 -54 q 42 -52 36 -51 q 55 -47 46 -47 q 71 -44 65 -47 q 83 -46 74 -47 q 96 -47 92 -46 q 115 -46 105 -47 q 137 -46 126 -44 q 153 -50 146 -47 q 166 -52 160 -52 q 174 -57 170 -55 q 184 -58 177 -59 q 197 -64 193 -61 q 208 -66 200 -67 q 215 -71 211 -69 q 222 -77 218 -74 q 237 -84 236 -84 q 242 -82 238 -85 q 259 -69 255 -73 q 269 -62 264 -66 q 279 -52 278 -54 q 282 -48 280 -51 q 291 -39 291 -40 q 293 -36 291 -37 q 301 -28 299 -33 q 309 -20 303 -23 q 328 -4 321 -6 q 335 6 330 2 q 339 16 339 9 q 354 30 354 24 q 360 35 354 36 q 368 42 366 40 q 373 46 370 44 q 383 61 382 56 q 387 70 385 65 q 397 76 396 74 q 398 81 398 78 q 408 92 405 90 q 413 97 411 94 q 421 107 417 104 q 428 113 425 111 q 438 130 436 128 q 444 140 443 139 q 447 143 446 141 q 455 156 454 153 q 459 161 455 160 q 478 191 473 181 q 489 210 482 200 q 507 236 497 225 q 514 254 511 248 q 522 265 516 260 q 524 275 522 271 q 529 283 526 279 q 533 290 531 286 q 538 297 535 294 q 540 305 537 303 q 542 313 543 306 q 547 318 545 314 q 553 324 549 321 q 560 340 557 333 q 561 351 564 347 q 571 364 568 362 q 573 374 575 367 q 584 392 583 390 q 590 406 588 405 q 592 409 591 406 q 597 425 595 421 q 598 435 599 428 q 608 446 606 444 q 610 450 610 447 q 616 470 613 465 q 618 482 619 476 q 626 494 626 489 q 628 501 626 499 q 633 512 632 511 q 636 516 634 514 q 641 529 640 526 q 642 534 642 531 q 649 550 649 549 q 655 568 656 564 q 659 572 655 572 q 668 589 666 584 q 672 598 670 594 q 676 607 675 602 q 682 614 678 611 q 688 630 689 629 q 687 633 687 632 q 695 647 694 645 q 695 656 697 649 q 701 668 701 667 q 699 672 701 668 q 705 690 705 675 q 712 699 709 694 q 713 712 714 704 q 718 717 717 713 q 724 724 720 721 q 725 734 721 731 q 729 744 729 737 q 740 764 737 759 q 746 773 743 769 q 750 783 748 778 q 751 793 752 788 q 758 800 756 796 q 762 812 760 805 q 779 836 770 827 q 784 849 782 843 q 789 859 786 854 q 798 876 798 873 q 801 877 798 878 q 816 910 812 899 q 826 931 820 921 q 817 930 820 931 q 811 933 813 929 q 798 929 805 930 q 788 925 790 929 q 769 927 773 926 q 760 926 766 929 q 747 928 747 931 q 746 923 747 925 q 720 921 732 921 q 695 921 708 922 q 687 918 691 919 q 678 916 682 916 q 658 916 661 918 q 649 914 655 915 q 639 916 642 915 q 630 914 636 916 q 613 916 617 915 q 603 915 609 916 q 590 912 592 911 q 584 914 587 914 q 573 913 576 912 q 569 911 571 914 q 552 912 554 914 q 546 910 550 911 q 522 912 533 908 q 495 907 500 903 q 480 905 488 903 q 466 900 472 907 q 448 897 450 897 q 431 895 440 895 q 411 895 421 895 q 400 888 402 888 q 397 885 397 888 q 384 885 386 887 q 379 883 382 884 q 370 883 374 881 q 364 881 367 884 q 352 870 356 880 q 332 865 341 872 q 343 835 332 842 q 344 822 344 826 q 345 815 344 817 q 349 800 349 805 q 352 792 348 794 q 349 778 348 785 q 351 763 349 771 q 354 741 354 748 q 354 728 354 733 q 352 714 354 717 q 351 709 351 712 q 351 682 351 690 q 347 668 351 675 q 349 652 351 652 q 347 649 347 652 q 344 629 345 636 q 339 618 343 622 q 340 597 344 607 q 336 572 336 587 q 330 558 332 561 q 329 552 329 556 q 326 541 328 543 q 325 534 325 538 q 320 527 321 531 q 313 522 320 523 q 307 511 311 515 q 303 499 303 507 q 297 493 299 496 q 291 488 295 489 q 282 476 288 480 q 272 463 275 473 q 255 451 261 459 q 238 440 249 443 q 227 423 231 428 q 215 415 222 417 q 196 401 199 404 q 187 396 193 398 q 174 392 180 393 q 155 392 168 392 q 136 394 139 390 q 126 396 132 398 q 120 402 124 401 q 112 409 115 404 q 94 426 99 420 q 84 439 90 432 q 78 461 80 458 q 75 469 77 465 q 82 486 82 482 q 81 495 82 489 q 77 514 77 510 q 78 522 78 518 q 78 536 77 534 q 81 541 80 538 q 80 552 77 552 q 81 556 82 553 q 83 577 81 567 q 92 594 85 587 q 92 609 89 602 q 97 622 94 615 q 98 636 97 634 q 101 640 99 638 q 104 651 104 644 q 107 660 104 657 q 114 674 112 672 q 119 679 116 676 q 124 695 122 690 q 131 704 127 701 q 141 723 132 716 q 151 741 149 731 q 164 759 165 754 q 176 774 173 769 q 187 791 183 788 q 196 797 192 794 q 202 805 199 801 q 211 812 206 809 q 215 822 214 822 q 219 826 217 823 q 223 836 225 835 q 219 842 221 838 q 218 857 218 854 q 208 876 208 872 q 207 884 208 881 q 197 899 200 897 q 189 903 193 900 q 179 914 187 912 q 166 931 170 929 q 160 937 162 933 q 153 943 157 940 q 143 946 149 946 q 132 959 132 953 q 113 958 116 957 q 105 957 109 959 q 97 954 101 956 q 88 953 93 953 q 78 959 81 956 q 70 961 74 963 q 69 973 71 967 q 73 980 66 979 q 75 994 71 990 q 82 1005 80 998 q 99 1012 96 1003 q 108 1026 101 1021 q 130 1039 122 1030 q 156 1043 150 1045 q 165 1044 162 1041 q 176 1043 174 1041 q 180 1044 177 1045 q 196 1039 193 1037 q 204 1039 198 1040 q 226 1033 221 1037 q 240 1028 231 1029 q 244 1018 238 1020 q 249 1007 250 1017 q 262 996 259 996 q 267 992 265 995 q 278 977 275 982 q 284 967 282 972 q 295 952 291 954 q 299 945 298 950 q 309 932 309 935 q 310 926 309 929 q 315 919 313 922 q 317 912 317 916 q 327 916 324 914 q 335 921 330 918 q 349 929 345 926 q 356 935 352 933 q 377 940 374 941 l 390 946 q 402 956 398 950 q 417 957 416 956 q 435 963 430 963 q 455 968 442 967 q 472 972 466 972 q 482 973 477 972 q 491 975 486 973 q 500 975 495 978 q 526 977 516 973 q 548 984 537 982 q 566 986 561 986 q 571 990 571 987 q 600 988 583 984 q 621 989 613 987 q 636 991 629 991 q 647 990 642 991 q 657 990 652 990 l 686 991 q 704 992 695 991 q 721 991 712 992 q 744 994 737 992 q 759 996 751 995 q 785 998 774 998 q 807 999 803 998 q 815 999 811 999 q 824 998 820 999 q 834 998 828 996 q 851 1002 846 1002 q 861 1002 857 1002 q 872 1002 868 1002 q 883 1005 876 1002 q 892 1017 889 1009 q 904 1029 900 1029 q 919 1045 914 1043 q 940 1074 933 1058 q 947 1078 945 1075 q 953 1082 949 1081 q 971 1097 968 1093 q 980 1104 973 1101 q 997 1119 987 1113 q 1015 1136 1007 1125 q 1024 1140 1022 1136 q 1033 1144 1026 1143 q 1053 1157 1049 1152 q 1064 1163 1056 1162 q 1075 1174 1074 1176 q 1079 1171 1077 1173 q 1094 1181 1087 1180 q 1115 1193 1110 1190 q 1125 1196 1120 1195 q 1135 1203 1131 1197 q 1148 1205 1142 1204 q 1161 1208 1154 1205 q 1171 1211 1166 1209 q 1182 1215 1176 1214 q 1202 1214 1199 1215 q 1208 1212 1205 1212 q 1222 1211 1215 1211 q 1238 1211 1230 1212 q 1246 1204 1241 1207 q 1254 1196 1252 1201 q 1262 1193 1260 1196 q 1270 1190 1264 1190 q 1275 1182 1272 1185 q 1280 1174 1277 1178 q 1285 1161 1284 1167 q 1294 1147 1287 1154 q 1283 1117 1285 1124 q 1277 1102 1280 1110 q 1265 1091 1268 1093 q 1261 1086 1262 1090 q 1250 1078 1253 1085 q 1238 1068 1247 1071 q 1220 1053 1224 1055 q 1211 1049 1215 1048 q 1207 1044 1207 1049 q 1193 1037 1195 1043 q 1168 1024 1176 1028 q 1154 1017 1161 1021 q 1142 1009 1143 1009 q 1139 1010 1140 1010 q 1119 1003 1123 1006 q 1113 1003 1116 1001 q 1098 995 1105 999 q 1079 991 1090 991 q 1040 975 1051 984 q 1025 973 1032 978 q 1006 969 1018 968 q 988 965 990 967 q 981 963 986 965 q 972 960 976 961 q 956 956 961 960 q 945 953 952 952 q 927 949 931 950 q 921 946 923 948 q 914 935 918 940 q 911 921 911 930 q 895 897 900 904 q 885 884 891 891 q 874 858 877 866 q 865 843 870 850 q 856 826 861 834 q 851 809 851 819 q 838 794 842 796 q 832 789 835 792 q 827 768 827 773 q 826 759 827 763 q 819 744 819 747 q 816 737 820 740 q 812 720 812 725 q 801 708 803 710 q 797 704 800 705 q 798 689 798 693 q 793 685 797 686 q 786 660 793 670 q 777 637 779 651 q 769 628 770 630 q 769 623 767 626 l 758 613 q 755 594 754 594 q 750 587 752 591 q 746 580 748 583 q 739 564 743 567 q 718 527 731 537 q 712 502 714 508 q 710 489 709 496 q 704 483 706 488 q 699 476 702 478 l 698 461 q 689 436 693 444 q 682 423 686 427 q 678 413 682 416 q 674 401 674 409 q 661 382 661 386 q 656 377 660 378 q 651 361 655 366 q 647 347 647 356 q 629 317 636 326 q 619 293 622 307 q 613 285 615 290 q 606 278 611 280 q 602 267 604 271 q 598 256 600 263 q 588 242 591 244 q 588 237 585 240 q 573 216 575 221 q 565 208 571 211 q 560 196 562 200 q 556 188 558 191 q 545 174 546 176 q 541 169 543 172 q 531 157 531 158 q 530 153 531 155 q 523 147 527 150 q 516 141 519 145 q 511 128 515 132 q 505 116 507 123 q 495 108 499 113 q 486 99 492 103 q 473 86 477 92 q 465 74 469 81 q 455 62 455 62 q 442 49 443 51 q 440 43 440 47 q 432 39 434 43 q 425 33 431 35 q 413 15 420 23 q 398 -2 405 8 q 391 -7 393 -4 q 385 -12 389 -10 q 370 -23 373 -23 q 357 -42 362 -40 q 349 -50 352 -44 q 333 -61 339 -61 q 325 -71 328 -69 q 320 -75 322 -73 q 308 -82 311 -80 q 303 -89 305 -85 q 289 -100 295 -97 q 282 -111 283 -103 q 295 -124 293 -119 q 307 -131 302 -127 q 320 -137 311 -135 q 326 -143 322 -141 q 332 -147 329 -145 q 338 -153 335 -150 q 347 -155 341 -155 q 363 -169 349 -164 q 378 -181 375 -177 q 386 -185 381 -184 q 401 -200 393 -195 q 411 -212 408 -210 q 424 -221 424 -219 q 427 -225 424 -222 q 436 -233 434 -233 q 442 -237 439 -234 q 454 -249 451 -249 q 461 -256 459 -253 q 465 -261 463 -259 q 474 -268 473 -267 q 477 -271 474 -269 q 500 -291 495 -286 q 512 -302 511 -302 q 516 -309 514 -305 q 520 -316 519 -313 q 531 -322 527 -318 q 541 -328 534 -326 q 552 -341 549 -339 q 560 -345 556 -343 q 573 -358 569 -354 q 584 -367 577 -362 q 602 -386 596 -383 q 611 -394 609 -390 q 617 -398 613 -397 q 628 -413 626 -411 q 629 -419 630 -415 q 647 -431 638 -420 q 661 -440 652 -440 q 674 -453 671 -450 q 680 -459 676 -457 q 695 -469 694 -470 q 707 -481 705 -480 q 709 -485 709 -482 q 719 -490 714 -488 q 725 -499 724 -492 q 735 -500 732 -497 q 740 -505 737 -503 q 759 -520 758 -516 q 773 -522 766 -518 q 788 -529 779 -527 q 801 -536 797 -531 q 811 -543 805 -541 q 818 -543 816 -541 q 826 -543 820 -546 q 847 -553 834 -553 q 871 -561 866 -561 q 880 -561 876 -561 q 895 -566 888 -564 q 910 -569 903 -568 q 923 -568 916 -569 q 934 -571 929 -567 q 943 -569 938 -568 q 953 -568 948 -569 q 968 -565 961 -565 q 984 -558 982 -560 q 1001 -552 996 -552 q 1007 -546 1005 -553 q 1024 -541 1021 -542 q 1028 -537 1028 -539 q 1044 -529 1037 -535 q 1055 -524 1049 -526 q 1063 -518 1060 -522 q 1081 -510 1078 -514 q 1091 -504 1085 -505 q 1102 -491 1102 -499 q 1119 -477 1116 -486 q 1127 -472 1123 -476 q 1136 -470 1132 -469 q 1138 -482 1139 -480 q 1135 -491 1138 -485 q 1130 -499 1132 -493 q 1121 -507 1128 -504 q 1113 -514 1116 -508 q 1105 -520 1110 -520 q 1094 -529 1098 -526 q 1086 -535 1090 -533 q 1076 -541 1077 -538 q 1072 -546 1075 -545 l 1049 -558 m 1167 1132 q 1158 1134 1162 1129 q 1150 1140 1154 1139 q 1141 1141 1144 1142 q 1132 1139 1138 1140 q 1116 1142 1117 1143 q 1112 1139 1115 1140 q 1098 1131 1100 1135 q 1093 1125 1097 1127 q 1079 1119 1082 1120 q 1067 1114 1071 1119 q 1056 1109 1063 1110 q 1043 1096 1045 1100 q 1033 1091 1040 1093 q 1030 1084 1033 1086 q 1025 1078 1028 1082 q 1015 1067 1018 1068 q 1011 1063 1011 1066 q 1003 1055 1005 1060 q 996 1048 1002 1051 q 980 1032 983 1036 q 976 1021 978 1028 q 988 1022 983 1020 q 999 1025 994 1025 q 1013 1025 1009 1024 q 1020 1028 1017 1026 q 1040 1032 1039 1032 q 1055 1037 1049 1033 q 1068 1037 1062 1040 q 1085 1043 1075 1043 q 1102 1049 1096 1043 q 1116 1051 1110 1048 q 1127 1056 1121 1053 q 1147 1064 1139 1059 q 1161 1068 1159 1066 q 1165 1067 1162 1070 q 1170 1074 1166 1074 q 1177 1078 1174 1075 q 1176 1087 1176 1085 q 1180 1093 1177 1089 q 1181 1110 1178 1100 q 1177 1117 1180 1115 q 1176 1125 1174 1119 l 1167 1132 m 229 758 l 222 744 q 216 729 217 732 q 214 724 215 727 q 204 710 204 710 q 200 700 203 702 q 200 694 198 698 q 193 684 195 685 q 189 680 191 683 q 187 666 187 674 q 183 653 188 659 q 180 636 184 642 q 173 622 176 630 q 170 581 170 600 q 169 546 169 561 q 172 529 169 537 q 179 515 176 522 q 187 489 183 500 q 205 485 199 485 q 211 480 211 485 q 225 488 223 481 q 225 496 227 496 l 233 512 q 237 521 237 515 q 238 534 237 527 q 242 551 241 550 q 244 553 244 552 q 244 566 242 561 q 246 573 246 571 q 246 583 246 579 q 248 592 245 587 q 249 610 246 600 q 248 619 246 615 q 250 626 250 623 l 249 641 q 248 661 250 659 q 250 682 250 675 q 250 694 249 689 q 250 707 249 702 q 249 717 250 712 q 246 751 249 741 q 240 767 242 760 l 229 758 m 143 -143 q 127 -137 127 -138 q 124 -135 127 -135 q 105 -128 115 -135 q 98 -128 101 -127 q 90 -127 94 -128 q 75 -122 80 -122 q 69 -120 71 -123 q 52 -122 54 -122 q 48 -120 51 -122 q 12 -125 29 -126 q -23 -127 -4 -124 q -37 -135 -37 -134 q -40 -138 -37 -137 q -51 -143 -50 -141 q -54 -147 -52 -146 q -61 -160 -61 -154 q -63 -173 -61 -166 q -60 -182 -61 -176 q -58 -192 -59 -188 q -52 -196 -54 -193 q -44 -199 -50 -199 q -37 -206 -42 -204 q -31 -212 -33 -207 q -15 -217 -17 -218 q -10 -217 -13 -215 q 29 -216 16 -217 q 54 -212 43 -215 q 67 -206 65 -204 q 71 -207 69 -207 q 90 -195 80 -200 q 108 -185 101 -189 q 123 -175 122 -176 q 127 -172 124 -174 q 142 -165 141 -166 q 147 -164 143 -164 q 152 -147 154 -150 q 143 -143 150 -143 "},"u":{"x_min":-20.34375,"x_max":557.5,"ha":522,"o":"m 518 1 q 526 8 523 8 q 531 9 529 8 q 557 1 552 14 q 548 -6 552 -1 q 537 -10 545 -10 q 523 -23 526 -24 q 520 -27 520 -23 q 495 -44 500 -37 q 483 -48 488 -46 q 473 -48 478 -51 q 463 -54 469 -52 q 451 -59 458 -56 q 428 -71 435 -66 q 415 -71 421 -77 q 390 -73 396 -75 q 377 -73 385 -71 q 356 -59 358 -63 q 343 -50 344 -52 q 339 -43 341 -47 q 333 -30 336 -37 q 329 -13 329 -23 q 326 -1 325 -4 q 322 1 326 1 q 324 8 325 5 q 324 18 324 12 q 322 39 321 35 q 317 46 324 43 q 317 62 325 51 q 321 72 320 67 q 321 84 322 77 q 317 105 321 94 q 318 113 317 109 q 320 122 320 118 q 320 143 318 138 q 320 151 321 147 q 321 168 321 164 q 321 177 322 172 q 317 188 320 181 q 321 207 321 202 q 318 232 321 227 q 314 242 316 237 q 305 230 306 231 q 303 226 303 229 q 290 216 291 217 q 290 212 288 215 q 280 202 282 204 q 276 199 279 200 q 269 187 271 188 q 264 184 267 187 q 255 168 252 172 q 245 159 246 161 q 244 153 244 157 q 233 137 234 139 q 230 132 231 135 q 212 120 217 122 q 206 115 208 118 q 196 103 202 103 q 185 92 185 94 q 170 84 174 88 q 162 77 166 80 q 157 71 160 74 q 151 66 154 69 q 137 59 138 61 q 128 56 135 58 q 111 42 116 47 q 99 33 105 37 q 78 34 81 31 q 69 39 75 37 q 59 55 61 52 q 52 73 54 70 q 50 81 51 77 q 50 101 54 90 q 52 120 47 112 q 50 131 50 126 q 51 142 51 137 q 50 153 51 149 q 48 162 48 158 q 49 177 50 170 q 50 187 48 183 q 52 193 50 189 q 52 203 55 198 q 54 220 52 217 q 52 230 55 223 q 55 247 56 238 q 55 271 54 256 q 56 286 55 279 q 54 299 58 293 q 54 327 52 314 q 48 347 56 340 q 44 360 47 358 q 40 367 42 363 q 21 362 24 363 q 16 359 18 360 q 2 356 6 358 q -5 352 -1 354 q -12 356 -8 355 q -20 359 -16 356 q -17 370 -20 366 q -13 381 -14 374 q -3 387 -5 386 q 0 390 -1 387 q 10 401 9 401 q 14 402 12 401 q 25 416 25 412 q 42 421 36 420 q 52 425 47 423 q 71 436 67 435 q 78 438 75 436 q 94 444 93 442 q 97 446 94 446 q 107 445 103 444 q 118 447 111 446 q 131 446 128 453 q 138 438 134 440 q 141 423 138 428 q 147 415 143 419 q 147 401 149 408 q 149 390 146 394 q 147 371 147 373 q 147 363 147 370 q 148 352 147 354 q 149 348 149 349 q 145 339 149 343 q 141 329 142 335 q 144 323 142 326 q 147 314 146 320 q 149 296 147 299 q 143 290 150 293 q 147 263 146 271 q 143 249 149 256 q 147 236 147 242 q 149 222 146 229 q 144 210 142 212 q 147 203 146 207 q 147 188 142 193 q 147 167 147 176 q 147 149 147 158 q 147 136 147 142 q 150 127 147 130 q 158 132 154 130 q 165 137 162 134 l 173 150 q 181 160 179 160 q 181 166 183 161 q 193 176 192 176 q 195 177 193 176 q 207 190 207 188 q 210 195 207 192 q 226 211 223 210 q 237 225 230 221 q 248 242 238 236 q 256 257 250 255 q 263 274 263 269 q 267 280 264 278 q 276 290 274 287 q 279 297 278 294 q 286 309 284 309 q 288 310 287 309 q 296 325 295 324 q 297 329 297 326 q 309 346 306 341 q 314 356 311 351 q 318 370 314 370 q 322 373 321 370 q 329 389 321 383 q 346 408 340 405 q 359 413 352 411 q 362 423 356 421 q 370 430 367 425 q 385 429 383 427 q 392 431 387 432 q 405 442 397 438 q 422 430 419 432 q 428 425 425 428 q 422 406 424 409 q 420 398 420 402 q 419 381 420 386 q 420 371 417 377 q 417 355 417 363 q 415 342 413 345 q 413 339 416 339 q 415 321 415 326 q 415 297 415 307 q 417 269 416 278 q 416 248 416 250 q 418 231 419 240 q 423 217 417 223 q 421 198 421 206 q 419 188 421 191 q 419 181 420 185 q 419 172 419 176 q 420 165 419 169 q 421 157 421 161 q 419 136 419 139 q 420 128 420 132 q 417 120 419 124 q 417 112 416 116 q 422 95 420 99 q 427 89 424 92 q 425 75 424 77 q 425 71 425 74 q 425 55 423 61 q 427 36 427 42 q 428 24 427 31 q 440 2 435 6 q 448 -6 444 -1 q 470 -14 465 -14 q 481 -13 474 -13 q 488 -14 485 -13 q 497 -12 491 -14 l 518 1 "},"1":{"x_min":20.34375,"x_max":347.25,"ha":465,"o":"m 314 67 q 314 50 314 59 q 316 35 313 42 q 314 19 314 24 q 314 8 313 14 q 314 -12 313 -8 q 316 -20 316 -17 q 314 -51 314 -39 q 314 -75 313 -63 q 313 -89 314 -88 q 311 -93 311 -90 q 313 -106 311 -100 q 311 -118 314 -112 q 311 -148 307 -134 q 313 -174 316 -162 q 324 -196 320 -193 q 320 -204 321 -199 q 316 -212 318 -208 q 305 -212 310 -212 q 302 -219 301 -212 q 292 -223 291 -218 q 290 -230 293 -227 q 274 -228 276 -229 q 265 -230 271 -227 q 252 -238 253 -240 q 248 -238 250 -237 q 238 -242 242 -240 q 230 -248 234 -245 q 220 -248 223 -245 q 211 -250 217 -250 q 203 -231 204 -234 q 199 -225 202 -227 q 204 -210 204 -214 q 200 -203 203 -206 q 204 -189 206 -196 q 200 -176 203 -183 q 204 -164 206 -165 q 204 -160 203 -162 q 204 -145 206 -149 q 207 -137 202 -141 q 207 -122 203 -126 q 208 -90 206 -104 q 208 -76 208 -82 q 208 -62 207 -70 q 212 -42 211 -47 q 212 -33 212 -37 q 211 -24 212 -28 q 214 -14 210 -20 q 214 1 211 -4 q 213 12 212 12 q 214 16 214 13 q 214 27 212 24 q 215 32 215 29 q 217 54 214 46 q 217 78 215 69 q 217 99 218 89 q 218 118 215 108 q 221 130 222 130 q 221 134 221 131 q 221 155 221 150 q 218 164 221 161 q 221 176 221 169 q 225 185 221 183 q 224 199 226 196 q 225 206 222 202 q 225 218 227 212 q 227 230 223 223 q 227 246 227 242 q 227 256 227 250 q 227 265 226 261 q 229 275 229 269 q 229 293 227 290 q 230 301 230 297 q 229 310 230 305 q 230 322 229 316 q 232 336 233 335 q 231 340 231 337 q 233 358 231 349 q 233 374 236 367 q 234 398 234 394 q 238 419 238 413 q 240 431 237 424 q 238 451 236 446 q 238 469 236 461 q 240 486 240 477 q 238 499 237 497 q 238 503 238 500 l 237 535 q 236 557 238 550 q 238 571 234 564 q 236 578 234 573 q 237 588 237 583 q 236 599 236 598 q 237 603 237 600 q 235 638 238 626 q 231 663 231 651 q 231 676 233 674 q 230 680 230 678 q 229 695 229 687 q 226 709 229 702 q 211 699 212 699 q 207 697 210 699 q 187 687 195 690 q 171 678 176 680 q 161 674 166 676 q 150 669 155 671 q 142 661 145 667 q 132 656 135 657 q 126 652 128 655 q 92 636 97 653 q 61 626 70 641 q 48 626 54 628 q 37 626 43 625 q 26 633 29 629 q 20 642 23 637 q 25 660 25 655 q 37 670 31 667 q 51 675 44 672 q 85 695 78 679 q 103 697 99 695 q 108 702 107 698 q 126 703 124 699 q 131 704 128 708 q 142 710 141 709 q 149 710 143 712 q 171 729 166 722 q 184 739 176 736 q 196 756 189 751 q 202 768 199 769 q 207 770 206 767 q 212 784 207 779 q 218 797 217 788 q 222 804 221 800 q 226 812 223 808 q 227 837 222 831 q 234 854 231 843 q 246 855 242 854 q 250 859 249 857 q 261 861 259 858 q 268 864 263 864 q 280 874 278 873 q 287 873 283 874 q 299 883 293 877 q 314 885 305 888 q 326 887 318 888 q 337 888 333 887 q 345 873 344 880 q 341 857 349 864 q 342 847 344 851 q 339 838 340 843 q 339 813 340 820 q 335 798 339 805 q 338 785 339 793 q 335 770 337 777 q 338 746 336 754 q 335 732 340 739 q 340 714 337 724 q 340 695 343 704 q 339 678 340 682 q 341 670 339 672 q 344 663 343 667 q 341 654 344 659 q 341 645 339 649 q 339 630 335 632 q 341 623 343 629 q 339 609 335 610 q 337 586 335 598 q 343 565 340 575 q 335 553 333 554 q 336 548 336 552 q 337 535 335 537 q 340 530 339 533 q 338 510 337 514 q 336 504 339 507 q 336 478 341 486 q 339 465 340 474 q 337 446 339 455 q 337 427 339 434 q 335 413 335 420 q 337 398 335 406 q 333 383 339 390 q 333 367 333 370 q 329 364 332 364 q 333 344 333 356 q 331 322 330 328 q 328 313 332 316 q 330 297 332 298 q 328 293 328 295 q 330 282 328 286 q 329 272 332 279 q 327 261 326 261 q 328 257 328 260 q 326 246 325 248 q 326 241 326 244 q 324 225 324 229 q 321 219 325 222 q 323 205 321 207 q 324 199 325 203 q 321 184 322 184 q 320 181 320 184 l 316 161 q 314 151 316 154 q 316 142 313 149 q 312 123 314 128 q 316 113 310 118 q 313 96 311 100 q 313 88 314 92 l 314 67 "},"k":{"x_min":42.046875,"x_max":594.125,"ha":532,"o":"m 568 -12 q 554 -20 556 -18 q 535 -40 543 -36 q 524 -50 527 -43 q 507 -59 510 -59 q 501 -61 504 -59 q 493 -65 497 -63 q 488 -70 489 -67 q 477 -73 481 -70 q 467 -80 473 -77 l 453 -80 q 439 -91 443 -89 q 428 -93 435 -93 q 414 -90 413 -86 q 412 -96 415 -94 q 402 -94 406 -96 q 392 -92 397 -92 l 367 -90 q 349 -78 352 -80 q 343 -80 347 -77 q 335 -73 340 -74 q 328 -67 330 -71 q 311 -63 314 -65 q 305 -58 309 -61 q 295 -51 298 -52 q 293 -47 293 -50 q 278 -40 282 -43 q 269 -33 274 -36 q 245 -13 252 -21 q 236 -9 240 -12 q 229 -4 231 -6 q 223 0 226 -1 q 217 6 219 2 q 205 12 207 10 q 200 16 203 13 q 183 25 187 24 q 180 31 180 27 q 164 33 168 31 q 165 15 164 23 q 162 1 166 8 q 161 -16 165 -9 q 164 -32 165 -28 q 162 -42 162 -36 q 165 -56 165 -50 q 164 -77 162 -69 q 165 -90 165 -85 q 166 -111 165 -105 q 164 -122 168 -116 q 163 -134 162 -134 q 164 -141 164 -135 q 161 -151 158 -149 q 165 -158 164 -154 q 164 -172 161 -172 q 166 -176 166 -173 q 166 -190 166 -188 q 165 -195 165 -192 q 168 -205 165 -202 q 170 -215 170 -208 q 164 -249 174 -238 q 148 -257 150 -256 q 143 -263 146 -259 q 138 -269 142 -265 q 131 -276 134 -272 q 123 -280 126 -278 q 118 -286 120 -283 q 103 -288 115 -287 q 89 -291 92 -288 q 71 -297 74 -298 q 62 -293 69 -295 q 63 -281 65 -286 q 62 -269 62 -276 q 62 -256 63 -259 q 61 -250 61 -253 q 59 -225 59 -230 q 62 -214 59 -219 q 60 -203 59 -208 q 61 -191 61 -198 q 58 -167 61 -180 q 61 -146 55 -154 q 60 -132 61 -137 q 59 -123 59 -128 q 59 -111 59 -112 q 56 -107 58 -109 q 57 -75 55 -84 q 55 -59 59 -66 q 58 -47 58 -55 q 54 -36 58 -39 q 56 -15 56 -28 q 56 5 56 -2 q 45 15 47 13 q 42 21 43 17 q 45 36 46 36 q 44 39 44 36 q 51 59 44 55 q 53 75 54 73 q 52 81 52 77 q 56 92 56 90 q 55 96 55 94 q 59 120 61 112 q 59 135 58 128 q 61 144 59 138 q 63 153 62 150 q 63 164 65 161 q 62 170 62 168 q 63 210 61 196 q 59 236 65 225 l 65 256 q 63 278 69 272 q 63 308 63 293 q 67 335 63 324 q 67 369 65 356 q 73 390 70 382 q 71 423 71 409 q 73 439 69 434 q 73 463 75 455 q 77 474 71 470 q 74 486 73 481 q 77 501 75 492 q 77 518 75 514 q 78 529 78 523 q 81 541 80 539 q 82 546 82 543 q 84 563 82 561 q 85 568 85 565 q 85 583 85 580 q 88 591 88 585 q 92 599 89 596 q 94 613 96 609 q 96 619 92 617 q 94 631 93 629 q 97 636 96 633 q 97 657 99 647 q 99 679 96 668 q 102 694 103 690 q 103 702 101 698 q 104 716 105 712 q 108 724 103 721 q 109 744 108 739 q 112 754 111 748 q 118 776 118 771 q 122 785 119 781 q 135 832 131 813 q 150 864 139 850 q 161 891 151 881 q 163 902 162 899 q 166 908 164 904 q 173 923 172 922 q 184 939 180 931 q 191 953 188 946 q 202 969 200 968 q 204 971 203 969 q 214 986 210 982 q 221 994 218 990 q 225 1000 223 996 q 231 1006 226 1003 q 241 1020 238 1018 q 246 1025 244 1022 q 256 1032 252 1029 q 265 1040 260 1034 q 282 1053 280 1051 q 288 1055 284 1055 q 303 1068 301 1066 q 309 1074 306 1071 q 320 1080 318 1079 q 326 1083 322 1081 q 333 1087 329 1085 q 343 1093 337 1090 q 371 1104 358 1102 q 397 1109 385 1105 q 408 1108 406 1108 q 412 1109 409 1108 q 446 1114 428 1117 q 473 1108 465 1110 q 487 1110 484 1109 q 495 1110 491 1110 q 515 1105 507 1105 q 523 1091 522 1093 q 524 1087 524 1090 q 514 1077 515 1077 q 510 1074 512 1077 q 493 1052 499 1060 q 478 1043 480 1043 q 474 1041 476 1043 q 459 1032 462 1032 q 439 1028 450 1030 q 424 1032 428 1026 q 411 1032 413 1030 q 405 1034 408 1033 q 396 1035 401 1034 q 387 1036 392 1036 q 376 1034 382 1034 q 363 1036 370 1033 q 353 1032 359 1033 q 344 1028 347 1030 q 327 1025 329 1026 q 322 1022 325 1024 q 309 1011 311 1015 q 302 1007 307 1007 q 291 987 295 998 q 279 971 280 975 q 275 964 278 967 q 265 948 267 949 q 263 944 263 946 q 252 929 253 933 q 253 915 250 925 q 248 908 252 910 q 241 903 244 907 q 240 887 242 893 q 237 870 237 881 q 229 859 230 866 q 225 845 227 851 q 223 833 223 835 q 221 828 223 831 q 210 796 223 803 q 209 774 210 782 q 207 758 208 766 q 200 754 200 758 q 196 747 199 750 q 195 731 199 735 q 197 722 198 728 q 198 714 196 717 q 196 700 195 709 q 191 689 196 691 q 191 677 193 682 q 185 668 188 672 q 183 647 185 651 q 183 622 185 629 q 183 609 180 615 q 181 588 179 594 q 173 565 177 568 q 172 522 176 539 q 174 507 174 511 q 170 501 173 504 q 172 490 173 495 q 168 480 170 485 q 172 454 172 462 q 168 442 172 446 q 168 434 170 438 q 165 427 166 430 q 166 397 166 406 q 165 379 166 387 q 164 364 164 371 q 164 349 165 356 q 164 330 164 336 q 162 314 162 320 q 164 302 161 309 q 161 287 161 297 q 177 286 174 279 q 185 297 179 293 q 191 306 189 305 q 195 309 192 307 q 202 322 199 320 q 206 328 206 324 q 215 335 212 329 q 225 341 218 340 q 236 356 237 354 q 238 360 236 358 l 256 368 q 264 377 261 371 q 269 386 267 382 q 284 392 279 390 q 293 397 290 394 q 302 403 295 400 q 309 413 309 406 q 319 415 316 412 q 328 420 322 419 l 343 424 q 367 430 360 424 q 392 425 382 430 q 405 408 402 421 q 420 396 419 400 q 425 389 421 392 q 428 375 425 382 q 431 360 431 367 q 427 343 431 351 q 426 328 428 335 q 423 313 424 322 q 413 298 416 302 q 406 291 409 294 q 400 278 405 282 q 393 265 396 274 q 386 260 386 265 q 379 255 386 255 q 376 247 378 250 q 371 240 374 244 q 362 233 362 236 q 360 229 362 230 q 350 220 351 222 q 347 219 349 218 q 335 209 336 211 q 330 207 333 207 q 326 196 330 199 q 320 185 321 192 q 297 171 301 180 q 282 161 294 162 q 274 152 279 155 q 268 142 269 149 q 255 132 260 141 q 241 123 241 130 q 254 106 250 108 q 263 104 257 104 q 284 90 278 92 q 291 82 290 89 q 305 75 301 81 q 320 69 309 69 q 324 62 320 62 q 326 55 329 62 q 335 50 330 52 q 343 42 340 47 q 371 23 359 29 q 387 7 382 8 q 392 2 392 6 q 417 -10 405 -12 q 438 -20 431 -14 q 455 -25 444 -25 q 476 -29 473 -27 q 482 -33 480 -31 q 490 -29 485 -31 q 497 -24 495 -28 q 510 -23 504 -25 q 519 -20 515 -21 q 534 -14 533 -16 q 538 -12 535 -13 q 548 -6 542 -9 q 556 4 553 -2 q 575 18 568 17 q 590 26 588 31 q 594 18 591 21 q 590 12 592 16 q 585 5 588 8 l 568 -12 m 329 341 q 316 348 318 348 q 309 349 314 348 q 297 351 299 349 q 293 351 295 352 q 280 343 282 343 q 278 341 279 343 q 263 322 268 325 q 253 313 257 318 q 248 303 248 306 q 246 299 248 301 q 236 288 240 293 q 227 276 227 278 q 223 275 226 274 q 217 261 222 265 q 212 246 212 256 q 204 236 206 244 q 195 223 202 227 q 185 196 189 200 q 181 185 180 192 q 174 172 177 174 q 170 165 172 169 q 161 137 162 153 q 164 111 160 122 q 176 119 176 116 q 177 124 176 122 q 189 128 184 127 q 206 128 195 130 q 221 141 212 135 q 236 155 230 146 q 250 168 245 164 q 261 177 256 172 q 271 185 272 184 q 272 188 271 187 q 283 197 280 195 q 287 203 286 199 q 316 234 302 227 q 327 252 322 244 q 339 269 332 261 q 340 279 339 275 q 341 287 341 283 q 340 302 340 297 q 336 311 340 307 q 329 341 332 325 "},"€":{"x_min":-6.78125,"x_max":798.953125,"ha":833,"o":"m 691 664 q 704 667 704 664 q 708 668 705 670 l 727 664 l 740 657 q 756 641 751 644 q 763 633 760 638 q 786 621 775 625 q 789 613 786 615 q 794 604 792 610 q 795 595 794 602 q 797 581 796 588 q 792 568 792 569 q 792 564 793 567 q 784 548 786 550 q 779 545 782 546 q 772 535 774 535 q 769 533 770 534 q 759 520 762 523 q 752 514 756 516 q 747 497 748 499 q 743 496 746 496 q 729 482 731 484 q 720 480 727 480 q 701 491 709 478 q 704 501 702 497 q 704 510 706 504 q 712 520 710 520 q 713 523 713 520 q 712 533 713 529 q 714 542 710 537 q 701 561 705 557 q 690 568 697 565 q 670 585 675 581 q 661 594 666 590 q 640 602 648 594 q 618 606 621 603 q 613 610 615 609 q 587 615 595 613 q 572 619 579 617 q 558 619 565 617 q 543 618 550 622 q 531 619 533 621 q 526 615 530 617 q 502 617 510 619 q 491 617 495 614 q 480 611 486 613 q 469 603 474 609 q 442 594 451 596 q 427 585 434 592 q 413 582 420 583 q 405 576 406 581 q 389 567 390 568 q 389 564 387 567 q 368 554 382 561 q 357 545 358 546 q 354 542 356 543 q 313 507 335 520 q 306 495 309 497 q 298 491 303 493 q 288 481 293 486 q 276 473 284 476 q 272 465 275 469 q 267 458 269 462 q 278 458 271 454 q 295 459 286 462 q 312 460 309 459 q 322 461 316 461 q 341 466 336 466 q 355 467 348 467 q 368 472 362 466 q 387 473 381 473 q 405 476 394 473 q 415 474 408 473 q 431 474 421 474 q 440 473 436 474 q 448 472 444 472 q 491 478 476 478 q 505 478 504 478 q 508 477 505 477 q 524 478 523 478 q 542 482 539 481 q 560 482 558 484 q 565 480 562 481 q 565 463 569 465 q 560 453 558 455 q 558 450 561 450 q 541 442 543 443 q 537 438 539 440 q 535 429 538 431 q 531 423 533 427 q 510 405 510 417 q 493 401 495 400 q 489 402 492 402 q 467 401 478 404 q 438 400 453 408 q 428 401 432 402 q 420 398 424 400 q 413 399 417 398 q 405 398 408 400 q 394 400 396 398 q 389 400 392 401 q 365 396 373 397 q 351 396 358 394 q 329 394 336 396 q 314 396 322 392 q 306 392 311 393 q 295 392 301 392 q 281 389 288 392 q 265 389 274 386 q 250 384 253 386 q 245 382 248 382 q 229 381 229 381 l 221 364 q 216 352 218 355 q 212 344 214 349 q 210 329 210 336 q 202 320 204 326 q 198 307 200 314 q 188 299 191 306 q 188 286 185 293 q 191 268 189 274 q 188 256 193 263 q 191 246 192 252 q 193 234 189 240 q 227 248 219 241 q 236 246 231 245 q 245 249 240 248 q 259 252 255 250 q 269 253 263 253 q 284 253 278 256 q 294 257 291 256 q 299 255 297 257 q 318 261 313 263 q 326 259 322 259 q 364 267 349 267 q 379 269 377 269 q 385 271 382 268 q 401 269 398 268 q 406 271 404 269 q 421 272 413 269 q 443 275 438 272 q 461 274 453 275 q 477 276 469 274 q 499 278 497 278 q 505 279 500 278 q 512 257 515 260 q 512 250 510 253 q 503 244 505 245 q 501 240 501 242 q 495 237 497 240 q 486 236 493 234 q 473 221 476 222 q 467 217 470 219 q 457 206 459 208 q 444 196 443 196 q 446 192 446 195 q 430 193 440 193 q 413 197 413 198 q 411 196 413 196 q 398 198 400 199 q 394 196 397 196 q 383 196 387 198 q 374 193 379 193 q 351 193 359 196 q 337 192 344 191 q 324 193 326 196 q 316 192 321 189 q 301 189 305 191 q 291 185 297 187 q 282 185 287 184 q 275 183 278 185 q 262 183 263 185 q 257 181 261 180 q 233 176 240 179 q 222 176 226 173 q 225 158 222 158 q 226 153 229 157 q 237 140 234 149 q 249 128 240 131 q 261 113 255 116 q 281 92 276 101 q 298 81 286 82 q 305 73 303 77 q 310 67 307 70 q 320 63 316 66 q 328 58 324 61 q 341 52 339 52 q 344 48 344 51 q 356 46 352 48 q 366 42 359 43 q 370 35 366 35 q 381 36 375 36 q 395 33 386 33 q 411 29 404 32 q 425 24 424 24 q 440 21 436 23 q 448 20 444 20 q 473 19 465 18 q 488 21 481 20 q 512 25 504 27 q 527 25 520 24 q 543 31 541 31 q 548 33 545 31 l 573 39 q 585 41 584 42 q 590 42 587 40 q 598 45 594 43 q 606 47 602 47 q 634 57 628 52 q 651 65 640 62 q 661 71 655 69 q 674 77 668 73 q 683 89 682 82 q 693 94 693 92 q 697 97 694 96 q 705 111 702 108 q 710 116 708 113 q 720 130 717 126 q 729 141 727 138 q 733 147 731 143 q 750 166 743 161 q 756 183 756 172 q 775 193 771 189 q 784 203 779 198 q 792 200 789 200 q 798 196 796 199 q 792 182 794 184 q 785 177 789 180 q 785 168 786 170 q 782 161 784 166 q 770 153 767 153 q 771 150 773 153 q 763 134 763 137 q 759 131 762 132 q 751 113 752 118 q 737 99 743 103 q 727 88 731 94 q 716 78 717 80 q 716 74 714 77 q 706 68 709 73 q 695 62 704 63 q 691 56 693 59 q 683 51 689 52 q 663 35 668 40 q 651 29 659 31 q 638 21 640 21 q 633 18 636 20 q 618 8 623 10 q 606 2 613 5 q 594 -1 596 4 q 584 -9 591 -6 q 562 -18 569 -12 q 543 -20 556 -20 q 522 -36 529 -31 q 514 -35 518 -33 q 507 -39 511 -37 q 488 -37 489 -39 q 482 -36 486 -35 q 461 -48 467 -44 q 446 -50 455 -46 q 431 -48 438 -55 q 414 -54 421 -51 q 400 -55 406 -56 q 382 -54 392 -55 q 368 -51 373 -54 q 351 -52 363 -55 q 343 -51 344 -52 q 336 -47 341 -50 q 316 -44 325 -44 q 299 -35 302 -39 q 288 -32 295 -32 l 275 -23 q 255 -14 260 -16 q 246 -8 249 -13 q 234 1 236 -1 q 231 6 233 4 q 214 14 219 10 q 203 21 208 18 q 191 37 193 31 q 181 46 188 43 q 168 63 172 59 q 162 70 165 66 q 153 85 157 80 q 147 99 149 90 q 132 124 137 115 q 124 143 127 132 q 117 143 119 146 q 109 142 115 141 q 93 129 99 132 q 77 124 88 126 q 67 117 73 119 q 56 109 61 115 q 37 101 46 109 q 31 97 33 99 q 23 93 29 96 q 12 91 16 90 q 1 92 8 92 q 2 100 4 96 q 4 108 1 104 l 13 120 q 27 137 24 134 q 33 143 31 139 q 43 158 35 150 q 56 172 55 166 q 74 179 71 179 q 78 183 77 180 q 96 186 90 184 q 105 193 103 188 q 115 196 112 193 q 123 199 118 198 q 124 210 122 206 q 123 219 126 215 q 127 246 124 236 q 132 267 130 257 q 141 293 138 284 q 150 310 145 302 q 169 364 162 344 q 159 363 164 367 q 149 356 154 359 q 128 351 134 351 q 119 349 123 352 q 109 345 112 345 q 103 341 105 344 q 88 341 90 340 q 82 340 85 343 q 62 329 65 336 q 42 321 47 322 q 33 317 37 320 q 19 306 24 307 q 9 302 14 305 q -6 313 -6 311 q -4 320 -6 318 q -2 328 -1 322 q 6 341 5 332 q 14 348 12 344 q 21 355 16 352 q 26 366 24 363 q 35 367 28 368 q 40 376 37 371 q 44 383 42 381 q 65 390 58 385 q 84 398 73 396 q 94 402 88 401 q 104 406 101 402 q 118 405 118 404 q 120 408 119 406 q 141 417 134 413 q 153 420 147 421 q 162 425 161 423 q 168 425 164 428 q 189 432 181 432 q 201 434 199 432 q 206 435 203 435 q 214 442 208 436 q 222 451 219 447 q 231 463 230 459 q 238 467 233 466 q 252 491 252 484 q 265 503 264 500 q 272 508 267 507 q 282 526 283 516 q 301 538 295 535 q 311 550 310 548 q 314 550 311 552 q 324 560 324 561 q 326 561 325 560 q 335 570 335 568 q 337 575 336 572 q 344 579 340 577 q 351 584 348 580 q 374 604 370 596 q 389 613 385 613 q 397 620 393 615 q 405 629 401 625 q 417 634 416 636 q 421 636 419 633 q 436 646 428 640 q 454 653 443 652 q 470 661 466 660 q 476 664 473 663 q 491 672 485 664 q 518 681 510 679 q 534 689 527 683 q 542 688 538 686 q 552 691 546 690 q 567 693 561 690 q 582 695 577 693 q 594 697 587 697 q 609 696 606 698 q 615 695 613 694 q 632 692 632 693 q 634 691 632 691 q 652 690 649 690 l 671 686 q 687 674 686 676 l 691 664 "},"<":{"x_min":48.828125,"x_max":489.9375,"ha":533,"o":"m 454 644 q 446 634 450 640 q 439 625 443 629 q 423 617 427 621 q 419 610 420 614 q 411 594 413 595 q 405 592 408 592 q 386 560 386 577 q 373 548 374 552 q 368 543 371 545 q 358 539 358 539 q 355 537 358 538 q 348 526 355 527 q 341 515 341 524 q 332 509 333 511 q 330 504 330 507 q 312 495 320 500 q 306 477 305 491 q 293 467 294 469 q 290 466 293 466 q 276 452 284 458 q 259 439 268 446 q 259 430 261 434 q 257 424 257 427 q 243 419 246 423 q 236 413 240 416 q 228 404 233 408 q 221 394 223 401 q 205 387 207 390 q 199 381 203 383 q 189 369 192 370 q 187 364 187 368 q 177 360 180 366 q 174 351 174 355 q 181 342 180 344 q 183 337 183 340 q 189 328 187 333 q 196 320 192 324 q 209 310 208 311 q 212 307 210 309 q 223 295 219 297 q 229 287 227 294 l 240 274 q 257 254 252 259 q 268 246 261 249 q 293 228 283 231 q 307 214 303 225 q 326 199 314 206 q 337 183 333 185 q 341 176 340 181 q 349 172 347 176 q 354 165 351 168 q 367 152 366 154 q 371 150 368 150 q 386 135 373 141 q 399 114 393 118 q 412 107 405 111 q 432 86 421 93 q 450 67 443 78 q 467 56 465 59 q 473 50 470 52 q 483 42 484 44 q 485 39 482 40 q 489 22 491 25 q 486 16 488 18 l 469 2 q 457 -6 458 -5 q 454 -10 457 -8 q 437 -16 442 -13 q 424 -20 432 -18 q 407 -34 416 -28 q 387 -33 398 -40 q 371 -20 375 -27 q 363 -10 367 -13 q 357 -5 360 -8 q 352 1 354 -2 q 330 20 340 13 q 313 37 321 27 q 308 43 310 40 q 301 47 306 46 q 299 55 303 50 q 290 63 294 61 q 278 77 279 77 q 275 81 276 78 q 260 96 267 90 q 250 108 253 101 q 239 115 241 112 q 237 123 237 118 q 219 139 225 130 q 209 145 212 141 q 199 153 206 150 q 190 166 193 162 q 181 173 187 170 q 168 189 176 184 q 155 206 161 195 q 137 218 143 214 q 128 229 131 222 q 117 240 119 238 q 112 245 115 242 q 102 255 104 255 q 99 257 100 256 l 88 275 q 75 280 78 280 q 73 283 71 279 q 59 284 65 280 q 48 293 54 288 q 55 311 51 307 q 56 324 59 316 q 69 339 67 336 q 74 345 71 343 q 83 347 81 343 q 93 351 85 352 q 110 364 108 362 q 115 368 112 366 q 124 384 120 382 q 132 389 128 386 q 139 396 137 392 q 149 400 142 400 q 159 408 157 406 q 164 412 161 409 q 170 420 169 420 q 174 423 172 420 q 187 436 185 434 q 191 443 189 439 q 204 456 203 453 q 210 458 204 459 q 215 465 210 465 q 218 472 219 465 q 225 478 223 474 q 234 482 227 481 q 240 493 237 489 q 248 500 244 496 q 254 511 252 508 q 261 514 256 514 q 272 526 267 520 q 282 541 282 538 q 284 546 282 543 q 294 556 291 549 q 303 565 297 562 q 313 577 311 575 q 320 580 314 580 q 332 603 335 595 q 347 618 344 617 q 352 621 349 619 q 360 632 356 630 q 366 640 364 634 q 387 648 385 645 q 394 652 389 651 q 406 663 405 657 q 412 671 408 668 q 420 672 417 668 q 430 672 423 675 q 450 657 443 661 q 454 644 457 653 "},"t":{"x_min":-39.34375,"x_max":365.28125,"ha":324,"o":"m 146 841 q 158 819 153 820 q 170 798 164 807 q 172 788 169 792 q 177 782 174 785 q 184 756 176 767 q 184 747 181 750 q 181 741 187 744 q 189 728 191 728 q 187 725 187 728 q 188 711 189 721 q 189 698 187 701 q 200 698 196 698 q 211 699 204 698 q 229 702 227 701 q 234 705 231 704 q 267 704 261 706 q 278 708 274 705 q 290 708 283 710 q 300 710 297 709 q 306 709 303 712 q 317 714 310 714 q 326 717 324 713 q 341 719 336 718 q 351 724 345 720 q 364 694 367 712 q 349 683 351 682 q 343 683 347 685 q 336 674 337 676 q 330 671 335 672 q 316 661 317 663 q 311 657 314 659 q 298 647 301 647 q 293 647 295 648 q 271 638 276 640 q 256 638 265 636 q 231 634 237 636 q 219 632 226 632 q 211 632 215 632 q 203 633 207 633 q 190 628 193 632 q 184 618 187 625 q 181 610 183 615 q 180 598 180 604 q 183 579 184 581 q 180 572 181 576 q 183 564 181 568 q 184 556 184 561 q 183 543 184 549 q 184 530 183 538 q 184 519 185 520 q 183 515 183 518 q 182 493 184 501 q 181 477 180 484 q 181 463 183 465 q 179 458 180 461 q 179 440 176 450 q 176 423 183 430 q 176 389 180 404 q 179 366 172 374 q 175 353 174 354 q 176 351 176 352 q 173 335 173 336 q 168 314 165 318 q 166 307 170 310 q 168 295 168 301 q 169 282 169 290 q 168 274 169 279 q 166 267 166 269 q 167 241 166 248 q 164 227 168 234 q 166 202 165 212 q 170 187 168 192 q 168 165 166 170 q 168 150 169 151 q 166 147 166 149 q 168 128 166 134 q 170 113 169 115 q 172 111 172 112 q 172 99 170 103 q 173 94 173 96 q 177 82 173 85 q 179 74 180 80 q 183 63 181 65 q 184 58 184 62 q 193 44 191 46 q 196 39 195 42 q 210 23 206 24 q 217 16 215 21 q 229 5 227 5 q 240 4 236 6 q 250 2 244 1 q 269 -2 265 -5 q 276 -2 274 0 q 305 17 301 5 q 315 22 311 17 q 328 27 318 27 q 334 33 332 29 q 339 40 336 37 q 347 40 344 39 q 355 40 349 40 q 351 32 358 32 q 345 24 344 32 q 335 9 337 13 q 329 2 332 5 q 302 -14 313 -8 q 284 -31 291 -20 q 272 -32 278 -31 q 259 -35 267 -33 q 245 -46 245 -43 q 242 -50 245 -48 q 234 -52 240 -52 q 223 -55 229 -52 q 207 -61 208 -62 q 203 -59 206 -59 q 188 -63 192 -63 q 181 -66 184 -63 q 165 -64 173 -65 q 154 -56 157 -63 q 141 -54 145 -58 q 135 -46 138 -50 q 122 -38 123 -42 q 113 -35 120 -35 q 103 -19 104 -21 q 100 -14 101 -17 q 91 0 93 -8 q 80 13 89 9 q 77 31 78 29 q 75 36 75 33 q 74 52 70 46 q 72 63 70 58 q 67 73 74 69 q 71 80 73 75 q 70 93 70 84 q 70 106 71 104 q 67 113 69 108 q 69 148 67 137 q 66 166 70 160 q 69 181 70 176 q 67 188 67 185 q 69 201 67 195 q 67 212 70 207 q 72 229 70 225 q 75 240 74 234 q 75 262 73 255 q 78 276 78 269 q 79 299 80 293 q 80 311 78 305 q 82 330 80 325 q 84 351 81 345 q 84 360 86 356 q 86 377 85 373 q 88 385 88 382 q 86 394 88 389 q 85 402 85 398 q 89 426 85 416 q 89 442 93 436 q 92 452 93 446 q 90 465 90 458 q 90 485 90 481 q 92 496 92 493 q 93 501 92 499 q 93 516 92 508 q 92 530 94 523 q 94 550 96 539 q 97 565 93 560 q 97 575 94 571 q 100 584 100 580 q 100 598 99 594 q 101 604 101 602 q 70 611 82 615 q 46 610 58 606 q 25 605 32 606 q 10 604 17 604 q -8 602 -6 602 q -23 602 -21 604 q -27 599 -24 599 q -36 611 -35 611 q -39 614 -37 611 q -35 634 -39 630 q -25 640 -32 638 q -18 653 -16 648 q 0 668 -2 657 q 12 672 6 670 q 20 680 17 674 q 52 683 43 679 q 60 684 55 683 q 67 686 65 685 q 81 684 71 686 q 94 683 90 682 q 96 709 96 691 q 92 731 97 727 q 84 748 85 740 q 77 758 84 755 q 59 767 66 766 q 50 766 52 769 q 34 758 37 760 q 25 755 31 756 l 5 747 q 0 754 2 751 q -2 765 -2 758 q 4 775 1 774 q 6 782 6 777 q 23 798 18 786 q 38 806 31 803 q 47 819 46 809 q 63 820 55 816 q 73 831 70 824 q 88 834 85 834 q 92 838 92 835 q 110 843 108 843 q 115 843 112 842 q 131 844 131 846 q 132 841 131 842 l 146 841 "},"W":{"x_min":-48.828125,"x_max":1599.125,"ha":1671,"o":"m 503 887 q 493 874 496 878 q 486 862 489 869 q 475 853 478 859 q 465 845 472 847 q 459 833 463 835 q 453 824 454 831 q 440 819 440 822 q 436 813 439 816 q 423 796 428 801 q 415 786 417 786 q 412 784 412 786 q 400 767 401 770 q 397 766 400 765 q 392 754 396 759 q 383 743 387 748 q 370 723 374 728 q 366 710 367 718 q 358 697 360 701 q 352 687 355 694 q 344 673 347 678 q 337 668 341 668 q 336 657 339 660 q 335 648 333 655 q 325 629 330 634 q 316 617 320 623 q 309 599 313 603 q 309 588 306 595 q 305 577 306 581 q 305 571 305 573 q 298 558 299 558 q 295 556 297 558 q 292 537 291 539 q 291 531 293 534 q 287 518 286 519 q 287 514 288 516 q 279 488 283 496 q 271 474 275 480 q 271 459 274 459 q 268 455 269 458 l 264 436 q 264 426 264 430 q 261 419 264 423 q 261 404 263 405 q 257 400 259 402 q 251 375 253 385 q 252 358 249 364 q 248 345 246 347 q 249 340 249 344 q 246 316 244 326 q 245 299 248 306 q 248 274 249 279 q 244 259 241 260 q 248 253 248 257 q 246 237 249 237 q 244 234 244 237 q 259 214 253 221 q 256 207 256 212 q 253 195 256 202 q 263 187 261 188 q 265 184 264 187 q 270 168 268 173 q 276 160 272 162 q 290 139 287 141 q 294 132 294 137 q 308 124 302 130 q 325 118 314 119 q 335 113 332 116 q 343 112 339 109 q 356 107 348 108 q 368 101 364 107 q 396 99 382 100 q 420 96 409 99 q 430 100 423 99 q 440 99 436 101 q 459 105 457 103 q 465 109 462 108 q 480 111 480 113 q 484 112 481 109 q 493 119 488 115 q 504 120 499 123 q 509 126 507 123 q 516 130 511 130 q 519 146 519 137 q 523 161 519 155 q 524 174 524 172 q 527 177 524 176 q 526 187 524 181 q 529 196 527 193 q 533 221 531 215 q 538 239 534 233 q 542 252 542 245 q 544 265 548 265 q 543 267 541 264 q 554 284 553 280 q 558 293 556 288 q 567 309 564 307 q 569 323 565 318 q 575 330 572 328 q 588 358 583 347 q 602 377 592 368 q 610 384 609 382 q 614 389 611 386 q 623 400 621 398 q 625 406 626 401 q 638 419 634 416 q 642 427 641 421 q 651 439 651 439 q 652 440 652 439 q 672 457 668 450 q 691 473 690 470 q 703 480 701 480 q 708 482 705 481 q 714 488 712 485 q 721 495 716 491 q 732 501 729 500 q 735 504 735 501 q 755 518 754 514 q 775 520 769 520 q 792 522 782 520 q 806 520 805 520 q 807 519 807 520 q 815 517 812 519 q 823 518 819 515 q 830 514 826 514 q 841 511 835 514 q 846 502 843 505 q 851 493 849 499 q 858 476 859 478 q 862 472 857 473 q 857 453 857 457 q 855 447 857 450 q 851 431 851 440 q 838 419 845 421 q 828 406 832 406 q 826 396 830 400 q 823 385 822 393 l 813 371 l 804 358 q 800 351 803 355 q 798 341 798 347 q 786 327 790 330 q 778 320 782 324 q 767 306 767 307 q 758 297 758 298 q 755 295 758 295 q 747 282 750 286 q 739 275 744 278 q 734 267 737 271 q 728 259 731 264 q 710 242 716 246 l 702 229 q 693 221 695 226 q 685 215 691 217 q 674 202 675 204 q 671 203 674 200 q 655 188 667 192 q 639 173 651 177 q 625 157 628 169 q 613 147 615 153 q 612 134 613 135 q 610 131 611 132 q 611 122 610 124 q 609 113 611 119 q 613 95 614 99 q 613 89 613 92 q 615 73 613 80 q 614 58 617 66 q 619 31 617 39 q 623 18 621 24 q 628 5 626 12 q 628 -9 629 -1 q 637 -29 636 -23 q 641 -37 638 -35 q 643 -50 640 -50 q 647 -56 647 -51 q 651 -75 653 -66 q 655 -90 649 -84 q 667 -104 655 -104 q 668 -116 667 -115 q 672 -120 670 -118 q 683 -138 674 -135 q 694 -150 689 -150 q 701 -159 699 -155 q 708 -164 702 -162 q 712 -180 706 -177 q 724 -187 717 -183 q 729 -193 727 -189 q 735 -199 732 -196 q 746 -204 744 -204 q 748 -206 747 -204 q 755 -215 754 -214 q 759 -218 756 -217 q 773 -225 771 -226 q 775 -226 774 -225 q 783 -235 778 -233 q 792 -237 788 -237 q 809 -250 804 -245 q 823 -253 813 -255 q 829 -263 824 -261 q 836 -271 834 -265 q 844 -271 842 -269 q 851 -272 846 -272 q 861 -279 854 -279 q 870 -284 868 -279 q 895 -290 889 -290 q 904 -295 900 -291 q 914 -295 911 -294 q 922 -299 918 -297 q 940 -303 931 -295 q 952 -304 946 -302 q 965 -307 959 -306 q 981 -310 978 -309 q 988 -311 984 -311 q 1005 -314 1001 -314 q 1025 -317 1022 -317 q 1046 -318 1036 -320 q 1067 -316 1056 -316 q 1098 -314 1085 -317 q 1112 -314 1112 -314 q 1115 -311 1112 -313 q 1129 -309 1121 -309 q 1144 -307 1138 -310 q 1159 -301 1157 -301 q 1171 -299 1165 -298 q 1182 -297 1177 -299 q 1203 -288 1200 -291 q 1212 -284 1207 -286 q 1224 -274 1218 -279 q 1238 -272 1230 -269 q 1248 -265 1245 -269 q 1258 -257 1252 -260 q 1274 -242 1272 -245 q 1281 -237 1276 -238 q 1297 -222 1295 -225 q 1304 -218 1299 -219 q 1314 -200 1311 -202 q 1319 -193 1317 -198 q 1332 -179 1329 -181 q 1333 -172 1334 -176 q 1340 -164 1337 -169 q 1346 -154 1342 -158 q 1355 -138 1352 -141 q 1363 -132 1359 -135 l 1374 -112 q 1380 -96 1380 -96 q 1386 -84 1384 -84 q 1389 -81 1387 -84 q 1393 -65 1390 -75 q 1397 -56 1397 -62 q 1402 -50 1397 -51 q 1409 -33 1407 -33 q 1412 -21 1409 -25 q 1414 -9 1414 -16 q 1428 5 1428 2 q 1433 22 1431 18 q 1437 29 1435 25 q 1451 58 1441 48 q 1454 75 1450 67 q 1454 90 1459 82 q 1462 108 1460 96 q 1470 127 1463 120 q 1472 143 1474 142 q 1471 149 1470 145 q 1479 159 1478 151 q 1482 173 1479 166 q 1486 188 1485 183 q 1489 199 1488 193 q 1490 210 1490 206 q 1494 218 1489 215 q 1493 244 1497 233 q 1499 280 1502 268 q 1496 302 1496 293 q 1497 312 1498 310 q 1493 317 1496 314 q 1495 328 1496 324 q 1492 337 1494 332 q 1494 349 1494 347 q 1493 354 1493 351 q 1491 373 1492 368 q 1490 379 1490 377 q 1488 390 1490 386 q 1486 401 1486 394 q 1486 412 1488 409 q 1485 417 1485 415 q 1482 435 1485 427 q 1479 448 1478 442 q 1474 457 1479 454 l 1473 472 q 1469 486 1467 486 q 1470 488 1470 486 q 1468 501 1469 501 q 1467 503 1467 501 q 1463 516 1464 515 q 1462 519 1462 516 q 1460 531 1459 529 q 1459 538 1460 534 q 1453 558 1456 549 q 1452 576 1450 567 q 1447 583 1451 580 q 1445 591 1443 587 q 1433 605 1440 598 q 1426 622 1426 613 q 1416 636 1418 634 q 1410 643 1412 638 q 1403 649 1409 648 q 1398 661 1399 659 q 1391 663 1397 663 q 1384 679 1384 675 q 1379 685 1382 682 q 1374 690 1376 687 q 1362 701 1364 698 q 1356 706 1360 704 q 1346 716 1348 716 q 1342 717 1344 716 q 1339 725 1341 722 q 1336 731 1337 727 q 1325 735 1332 733 q 1315 740 1319 737 q 1307 750 1311 747 q 1300 758 1303 754 q 1285 762 1285 760 q 1283 765 1285 763 q 1273 769 1275 767 q 1269 771 1272 770 q 1254 773 1257 774 q 1252 777 1250 771 q 1239 779 1242 775 q 1231 785 1235 782 q 1218 786 1224 786 q 1208 788 1211 785 q 1196 781 1201 785 q 1180 778 1190 777 q 1167 765 1171 771 q 1155 754 1157 755 q 1155 750 1154 752 q 1141 743 1142 744 q 1138 740 1140 741 q 1123 733 1136 739 q 1108 725 1112 728 q 1100 720 1105 722 q 1082 721 1085 718 q 1085 735 1082 729 q 1085 748 1087 741 q 1096 761 1091 755 q 1109 773 1101 767 q 1121 782 1119 781 q 1124 788 1124 784 q 1140 796 1139 794 q 1144 797 1142 798 q 1155 807 1148 804 q 1167 816 1162 809 q 1184 823 1177 817 q 1200 832 1192 828 q 1212 838 1209 835 q 1219 843 1215 841 q 1236 849 1231 847 q 1247 854 1241 851 q 1268 857 1258 854 q 1288 854 1279 859 q 1313 856 1306 857 q 1323 851 1321 855 q 1335 851 1330 854 q 1348 850 1340 849 q 1355 843 1349 845 q 1363 836 1360 842 q 1398 819 1382 823 q 1406 810 1401 812 q 1413 801 1412 808 q 1424 794 1424 796 q 1428 790 1425 793 q 1439 779 1437 782 q 1443 773 1440 775 q 1451 766 1447 769 q 1458 760 1455 763 q 1468 746 1463 750 q 1478 740 1473 743 q 1488 728 1479 733 q 1500 714 1492 720 q 1508 699 1507 699 q 1519 682 1519 685 q 1521 679 1519 679 q 1527 663 1524 671 q 1536 651 1530 656 q 1543 634 1536 644 q 1547 618 1543 622 q 1549 610 1551 614 q 1553 602 1551 607 q 1559 596 1555 598 q 1559 588 1557 592 q 1559 577 1562 583 q 1569 552 1565 556 q 1570 537 1568 543 q 1576 520 1573 530 q 1578 505 1578 505 q 1577 501 1577 504 q 1584 484 1582 485 q 1585 476 1585 482 q 1586 469 1587 473 q 1585 461 1585 465 q 1588 453 1587 457 q 1589 446 1589 450 q 1589 432 1588 436 q 1589 425 1589 428 q 1592 408 1592 415 q 1592 395 1591 400 q 1588 389 1593 390 q 1596 376 1597 378 q 1593 371 1595 374 q 1597 361 1596 368 q 1596 347 1599 354 q 1598 333 1599 339 q 1595 325 1597 328 q 1598 308 1600 309 q 1595 305 1596 307 q 1596 292 1597 302 q 1588 280 1595 283 q 1588 246 1591 263 q 1585 228 1587 236 q 1580 218 1584 221 q 1578 202 1578 210 q 1574 188 1578 193 q 1568 170 1572 170 q 1566 162 1565 169 q 1558 147 1565 150 q 1557 119 1563 130 q 1550 93 1550 108 l 1542 74 q 1532 61 1538 66 q 1527 47 1528 55 q 1520 36 1526 39 q 1515 21 1519 27 q 1515 10 1512 16 q 1503 -7 1507 -4 q 1497 -14 1500 -10 q 1496 -29 1500 -21 q 1489 -43 1492 -36 q 1485 -51 1486 -47 q 1481 -58 1483 -55 q 1475 -72 1477 -71 q 1473 -74 1474 -73 q 1453 -101 1456 -90 q 1440 -116 1450 -112 q 1438 -127 1441 -123 q 1432 -137 1435 -131 q 1426 -146 1429 -141 q 1421 -155 1424 -151 q 1410 -171 1413 -169 q 1405 -176 1407 -173 q 1391 -191 1395 -188 q 1382 -207 1382 -203 q 1367 -222 1371 -219 q 1361 -229 1364 -225 q 1350 -233 1353 -229 q 1342 -242 1346 -238 q 1321 -264 1327 -252 q 1300 -274 1307 -272 q 1291 -283 1294 -276 q 1266 -295 1270 -293 q 1256 -303 1258 -302 q 1252 -307 1254 -305 q 1245 -311 1249 -310 q 1238 -316 1241 -313 q 1222 -320 1227 -313 q 1205 -330 1216 -328 q 1193 -335 1200 -333 q 1180 -339 1186 -336 q 1173 -341 1177 -340 q 1166 -347 1169 -343 q 1150 -349 1151 -347 q 1147 -354 1150 -352 q 1127 -354 1136 -355 q 1115 -359 1119 -354 q 1103 -360 1108 -356 q 1091 -364 1098 -364 q 1077 -370 1081 -368 q 1067 -374 1072 -373 q 1052 -375 1053 -377 q 1031 -381 1037 -381 q 1020 -383 1025 -382 q 1003 -383 1006 -382 q 998 -381 999 -383 q 978 -383 982 -385 q 969 -379 975 -382 q 957 -385 967 -385 q 944 -381 948 -385 q 929 -381 937 -383 q 919 -373 922 -379 q 897 -369 903 -368 q 889 -373 892 -370 q 863 -369 874 -373 q 834 -366 851 -366 q 822 -359 824 -358 q 813 -359 819 -360 q 787 -348 793 -352 q 771 -341 781 -344 q 758 -331 762 -336 q 747 -329 754 -326 q 733 -322 737 -328 q 718 -316 728 -316 q 705 -309 708 -311 q 697 -305 702 -306 q 680 -288 686 -291 q 670 -278 674 -284 q 653 -257 655 -271 q 636 -242 640 -246 q 626 -234 633 -237 q 613 -219 622 -223 q 600 -204 604 -215 q 584 -178 590 -184 q 573 -165 579 -172 q 570 -153 571 -157 q 565 -147 569 -149 q 560 -132 562 -135 q 557 -123 557 -130 q 548 -103 552 -107 q 543 -90 543 -99 q 531 -54 537 -67 q 529 -25 526 -40 q 519 -5 522 -8 q 519 15 519 6 q 514 31 519 24 q 515 44 516 40 q 512 52 514 47 q 512 71 511 69 q 512 77 514 73 q 500 72 505 74 q 491 66 495 70 q 476 57 478 63 q 462 52 473 51 q 451 46 458 47 q 439 39 444 44 q 430 39 434 42 q 424 39 427 36 q 414 33 421 33 q 401 27 406 32 q 389 26 390 29 q 386 23 389 23 q 373 23 379 23 q 364 18 367 23 q 343 20 348 20 q 330 20 330 18 q 328 21 330 21 q 319 22 324 23 q 310 23 314 21 q 296 28 297 27 q 293 29 295 29 q 276 33 278 32 q 272 36 275 35 q 263 38 267 36 q 256 43 260 40 q 231 58 236 43 q 217 67 221 59 q 203 77 212 74 q 196 90 203 84 q 183 116 189 109 q 178 135 184 128 q 174 153 172 142 q 168 174 168 169 q 162 185 169 180 q 163 195 164 191 q 165 204 162 199 q 162 212 162 207 q 158 221 161 218 q 158 233 160 231 q 157 237 157 234 q 158 244 155 240 q 157 253 160 248 q 158 271 161 271 q 162 286 164 287 q 161 288 161 286 q 162 311 160 299 q 164 332 165 324 q 174 369 169 358 q 176 392 179 381 q 180 413 181 411 q 184 425 184 417 q 189 438 184 434 q 189 448 189 446 q 192 453 189 450 q 196 470 195 467 q 198 474 198 472 q 200 486 200 481 q 206 496 200 492 q 207 511 207 501 q 210 517 208 514 q 211 526 212 520 q 221 549 219 542 q 226 558 222 556 q 231 582 225 572 q 242 604 238 592 q 251 625 245 619 q 257 640 257 630 q 265 652 263 651 q 267 657 268 653 q 276 670 276 667 q 276 675 275 672 q 282 684 279 679 q 288 691 286 689 q 295 703 293 701 q 299 709 297 706 q 311 727 303 727 q 314 735 310 733 q 317 744 317 737 q 326 747 324 744 q 330 752 328 750 q 335 760 335 758 q 337 766 335 763 q 348 776 347 777 q 349 777 349 775 q 354 794 354 788 q 343 798 344 800 q 339 794 341 796 q 319 791 326 796 q 299 788 311 786 q 279 784 282 782 q 267 778 269 779 q 261 775 264 777 q 245 771 246 773 q 241 770 244 770 q 229 769 234 769 q 217 767 223 769 q 202 763 203 762 q 199 765 202 765 q 187 763 188 763 q 184 762 187 762 q 169 758 176 758 q 161 758 162 759 q 148 754 151 756 q 139 755 145 752 q 129 749 131 751 q 122 748 127 747 q 99 737 101 741 q 89 732 96 732 q 78 727 80 728 q 73 724 75 725 q 58 708 66 713 q 46 687 52 694 q 39 672 40 676 q 31 661 33 668 q 27 647 29 655 q 20 630 18 632 q 21 625 21 628 l 17 609 q 18 592 13 598 q 20 576 23 585 q 32 542 27 556 q 28 533 31 538 q 29 522 25 527 q 23 516 27 518 q 16 511 18 514 q 9 499 12 501 q 4 493 6 496 q 0 483 2 486 q -4 473 -4 480 q -24 476 -14 473 q -39 486 -33 478 q -39 499 -36 499 q -42 501 -42 499 q -42 510 -40 507 q -44 518 -43 514 q -45 531 -46 529 q -47 535 -44 533 q -48 556 -44 552 q -45 571 -46 569 q -47 575 -44 573 q -46 585 -44 580 q -43 592 -47 590 q -41 609 -40 602 q -35 619 -42 617 q -31 632 -35 626 q -31 644 -27 637 q -21 655 -23 653 q -21 663 -18 657 q -14 668 -14 661 q -12 678 -14 675 q 0 695 -2 691 q 8 705 4 699 q 14 715 13 714 q 17 717 16 716 q 23 728 20 722 q 32 737 25 733 q 42 746 39 743 q 48 752 44 750 q 61 768 59 766 q 65 773 63 770 q 91 792 78 789 q 108 807 104 796 q 122 815 118 812 q 128 820 126 817 q 139 819 135 816 q 151 823 143 823 q 169 834 165 828 q 191 841 180 834 q 206 845 199 843 q 229 848 223 849 q 238 850 234 847 q 251 852 249 850 q 257 851 253 854 q 270 854 268 855 q 275 854 272 853 q 295 859 291 859 q 302 862 299 859 q 321 863 310 861 q 339 868 332 865 q 355 868 345 866 q 371 873 364 870 q 379 874 375 874 q 386 877 383 874 q 394 876 389 876 q 401 880 398 877 q 420 883 412 877 q 439 887 428 888 q 446 892 443 889 q 455 897 450 895 q 469 906 458 900 q 479 911 478 910 q 484 912 480 912 q 491 910 488 912 q 500 910 495 908 l 503 887 m 727 444 q 709 425 714 428 q 702 413 704 423 q 686 402 689 405 q 682 396 683 398 q 674 380 676 385 q 664 371 671 375 q 657 354 660 356 q 652 345 653 351 q 647 330 648 332 q 642 330 647 329 q 644 318 644 324 q 642 305 645 311 q 635 290 637 293 q 636 284 633 287 q 631 277 633 280 q 632 268 629 274 q 626 259 628 265 q 628 245 625 252 q 619 221 623 230 q 618 206 615 212 q 634 219 632 217 q 637 225 636 221 q 647 233 647 231 q 648 237 647 236 q 659 249 659 246 q 673 262 671 259 q 676 267 675 265 q 687 280 686 278 q 691 284 689 282 q 699 297 699 295 q 699 301 698 298 q 712 313 712 310 q 714 320 712 316 q 721 330 721 329 q 724 335 721 332 q 741 367 735 360 q 750 389 748 374 q 758 402 755 400 q 762 411 760 405 q 760 419 762 416 q 759 430 759 423 q 744 439 752 436 q 727 444 736 442 "},"v":{"x_min":-42.734375,"x_max":568.796875,"ha":534,"o":"m 504 387 q 500 366 500 371 q 489 358 493 360 q 488 348 485 355 q 481 340 485 344 q 478 329 477 336 q 462 307 467 313 q 455 295 457 302 q 439 271 443 276 q 429 258 430 261 q 425 255 428 255 q 423 247 425 249 q 421 240 420 245 q 415 233 416 237 q 411 226 415 229 q 404 212 405 217 q 401 200 402 207 q 392 193 393 195 q 390 188 390 191 q 377 174 381 176 q 377 166 374 172 q 364 157 367 162 q 360 141 363 143 q 358 134 356 139 l 349 120 q 343 111 343 118 q 337 101 344 104 q 334 92 337 94 q 332 82 330 89 q 318 67 321 69 q 317 61 314 66 q 309 56 311 59 q 305 51 307 54 q 297 21 303 28 q 286 9 291 14 q 276 8 280 12 q 268 0 271 4 q 253 -10 253 -10 q 246 -21 248 -16 q 241 -33 244 -27 q 227 -41 226 -39 q 226 -43 229 -43 q 215 -44 219 -46 q 204 -42 211 -42 q 191 -32 196 -31 q 195 -18 193 -20 q 198 -14 196 -17 q 193 0 195 -8 q 191 13 192 6 q 181 32 183 24 q 177 47 180 40 q 172 58 172 56 q 172 62 173 59 q 166 75 168 74 q 165 78 165 75 q 162 91 164 89 q 161 96 161 93 q 159 109 158 103 q 157 123 160 116 q 150 140 150 135 q 149 150 150 145 q 139 177 142 172 q 134 193 137 188 q 133 200 132 196 q 131 208 134 204 q 127 227 128 223 q 124 234 126 230 q 118 249 118 248 q 118 252 119 250 q 113 261 115 257 q 111 271 111 265 q 103 284 105 282 q 101 290 101 287 q 98 299 99 294 q 93 306 97 303 q 90 320 96 313 q 84 335 85 328 l 73 351 q 65 361 66 354 q 56 370 63 368 q 46 387 46 385 q 29 391 31 392 q 24 390 27 390 q 6 387 9 390 q -2 381 2 383 q -20 358 -14 368 q -31 360 -28 356 q -42 366 -35 363 q -42 377 -43 373 q -42 386 -40 381 q -33 393 -39 389 q -24 401 -27 397 q -12 419 -20 413 q -1 435 -4 424 q 11 439 8 435 q 23 444 14 443 q 31 456 31 453 q 35 462 32 459 q 49 468 47 466 q 52 472 51 470 q 65 476 62 476 q 71 477 69 476 q 90 479 86 481 q 99 481 94 477 q 109 474 103 476 q 118 466 115 473 q 126 462 123 465 q 134 458 130 459 q 146 441 142 447 q 157 428 150 435 q 159 417 155 423 q 166 408 162 411 q 176 393 168 401 q 179 379 176 386 q 185 367 183 373 q 188 353 188 355 q 191 352 188 351 q 193 342 191 345 q 198 336 195 339 q 200 326 198 328 q 204 322 203 325 q 206 312 204 316 q 208 305 207 309 q 214 288 214 294 q 219 276 221 276 q 219 274 218 275 q 223 263 221 269 q 221 252 225 257 q 225 246 223 249 q 230 240 227 242 q 232 227 230 233 q 236 215 234 222 q 239 200 240 200 q 238 196 238 199 q 238 187 240 188 q 240 179 237 185 q 244 171 241 174 q 249 164 246 168 q 252 149 250 150 q 253 146 253 149 q 255 137 253 138 q 255 131 257 135 q 263 115 261 120 q 268 104 265 109 q 280 111 278 109 q 279 118 282 113 q 288 132 286 130 q 291 141 291 135 q 301 160 302 146 q 311 174 307 166 q 320 191 316 181 q 327 197 325 193 q 333 203 329 200 q 335 211 330 210 q 337 218 339 212 q 344 225 344 219 q 349 231 344 230 q 355 244 354 242 q 359 246 356 246 q 364 261 363 259 q 370 265 366 264 q 377 277 371 274 q 383 290 383 280 q 395 311 392 306 q 401 324 398 317 q 408 338 409 336 q 408 344 406 340 q 412 352 408 349 q 412 360 416 354 q 417 365 416 362 q 423 371 419 368 q 428 392 424 386 q 431 408 432 398 q 442 424 440 421 q 442 432 443 427 q 451 449 451 446 q 454 454 451 453 q 457 473 453 463 q 459 482 458 478 q 462 493 461 486 q 465 514 462 505 q 461 529 467 522 q 466 558 465 552 q 469 569 467 564 q 470 579 470 577 q 473 584 470 581 q 471 601 470 599 q 467 606 472 603 q 470 623 470 614 q 465 637 470 632 q 464 649 467 644 q 463 659 461 655 q 458 668 461 666 q 457 678 455 671 q 447 704 451 693 q 438 716 439 716 q 438 718 438 717 q 433 733 436 728 q 425 741 430 737 q 417 758 428 754 q 404 775 406 775 q 401 784 404 782 q 397 792 398 786 q 385 803 389 800 q 378 812 381 805 l 364 820 l 349 826 q 330 831 344 830 q 307 834 321 831 q 295 833 301 834 q 283 830 290 832 q 270 815 272 816 q 267 813 268 815 q 253 801 253 805 q 234 790 237 796 q 221 788 226 790 q 208 785 215 786 q 217 805 215 803 q 222 811 219 807 q 229 823 227 822 q 231 827 230 824 q 240 836 234 832 q 250 845 245 839 q 255 851 253 847 q 261 858 257 855 q 270 864 268 864 q 275 865 272 864 q 286 873 284 874 q 290 873 287 872 q 320 891 309 883 q 333 897 326 892 q 347 899 340 902 q 360 905 349 904 q 379 906 370 906 q 393 906 392 906 q 397 907 394 907 q 407 905 405 904 q 412 904 409 906 q 419 902 415 904 q 427 900 423 900 q 435 893 430 895 q 442 887 440 892 q 449 885 448 889 q 457 881 450 880 q 469 869 466 868 q 479 860 478 862 q 482 855 480 858 q 493 842 491 843 q 497 838 496 841 q 506 823 503 823 q 510 817 510 823 q 517 811 515 813 q 519 805 519 809 q 534 779 529 788 q 541 759 539 771 q 549 744 550 746 q 550 741 548 743 q 557 717 556 721 q 562 689 560 699 q 567 668 564 679 q 568 651 567 653 q 567 645 569 648 q 563 617 564 628 q 558 598 562 606 q 558 569 557 581 q 553 542 560 556 q 553 529 556 530 q 548 527 550 529 q 548 514 550 515 q 542 510 545 512 q 540 497 538 497 q 543 495 542 497 q 535 477 539 477 q 531 462 535 467 q 527 448 527 457 q 522 437 524 439 q 518 430 520 435 q 512 415 514 417 q 511 409 511 412 l 504 387 "},">":{"x_min":48.828125,"x_max":572.421875,"ha":617,"o":"m 293 573 q 309 567 303 573 q 325 558 314 561 q 330 548 328 552 q 335 537 332 543 q 351 531 349 531 q 355 529 352 531 q 377 515 367 518 q 393 503 390 504 q 397 500 396 503 q 415 493 411 493 q 426 482 427 484 q 428 481 425 481 q 440 472 435 473 q 451 469 444 470 q 466 457 461 459 q 471 450 466 451 q 478 446 476 448 q 490 438 486 439 q 496 436 493 438 q 506 427 505 425 q 510 428 507 430 q 521 415 518 416 q 524 411 524 415 q 535 408 531 411 q 543 405 538 405 q 560 407 557 409 q 567 405 562 405 q 571 385 571 390 q 572 371 571 381 q 561 355 562 356 q 550 352 549 354 q 548 348 550 349 q 537 345 539 347 q 533 339 535 343 q 521 332 523 335 q 516 326 519 329 q 503 316 504 317 q 499 313 501 314 q 483 295 486 301 q 473 286 480 288 q 467 278 470 280 q 462 271 465 276 q 452 259 451 260 q 453 255 453 257 q 440 248 444 253 q 432 237 436 244 q 421 225 423 229 q 417 215 420 221 q 404 202 405 204 q 401 199 402 200 q 394 187 394 189 q 393 184 394 185 q 388 179 392 181 q 385 170 385 176 q 373 160 374 162 q 367 158 371 158 q 356 142 360 149 q 348 128 352 135 q 329 114 335 122 q 313 104 324 107 q 302 90 305 93 q 297 81 299 86 q 276 67 279 73 q 267 59 274 62 q 255 47 263 50 q 248 36 253 40 q 241 25 244 32 q 238 14 240 17 q 234 8 237 10 l 217 0 q 212 -6 212 -2 q 204 -9 211 -10 q 184 -16 187 -18 q 174 -20 179 -18 q 162 -24 169 -21 q 137 -35 146 -37 q 120 -36 128 -33 q 115 -26 118 -32 q 109 -17 112 -20 q 116 2 113 -4 q 131 10 131 9 q 132 14 131 12 q 147 25 146 25 q 149 25 147 24 q 163 38 160 35 q 170 44 166 42 q 177 59 176 58 q 180 61 177 59 q 198 77 192 66 q 215 90 212 86 q 222 97 218 93 q 231 105 226 100 q 242 113 236 109 q 259 137 257 126 q 268 144 265 142 q 274 149 271 146 l 280 164 q 293 174 293 174 q 294 173 293 173 q 298 180 297 176 q 303 185 299 184 q 310 200 310 196 q 324 215 321 212 q 334 229 332 227 q 336 234 336 231 q 343 240 341 236 q 349 248 345 244 q 361 258 362 257 q 362 261 360 259 q 370 270 368 269 q 374 272 373 271 q 383 284 381 282 q 387 288 386 286 q 395 298 393 295 q 400 299 397 301 q 409 314 406 309 q 419 321 412 318 q 432 337 427 332 q 419 351 420 349 q 417 355 417 352 q 402 367 408 356 q 382 378 390 378 l 368 387 q 352 400 362 396 q 337 414 348 411 q 320 424 326 417 q 300 438 306 432 q 287 450 294 443 q 268 461 278 459 q 252 477 255 470 q 241 484 244 482 q 236 489 238 485 q 223 495 225 492 q 219 500 222 497 q 208 507 212 505 q 203 515 204 508 q 193 520 196 518 q 184 524 189 523 q 170 534 173 531 q 160 537 166 537 q 146 548 155 543 q 128 556 137 552 q 117 566 118 569 q 113 567 116 564 q 105 575 107 573 q 101 576 104 577 q 92 584 101 581 q 75 587 82 587 q 56 599 61 595 q 48 609 52 603 q 51 617 51 613 q 54 623 51 621 q 62 637 58 637 q 75 652 74 649 q 87 653 86 651 q 90 656 88 655 q 107 662 104 660 q 113 667 111 664 q 132 672 126 670 q 149 672 138 674 q 163 663 155 668 q 176 651 170 657 q 185 647 183 651 q 195 645 188 644 q 208 636 206 638 q 212 632 210 634 q 229 625 227 626 q 233 625 230 623 q 244 615 244 619 q 250 611 245 611 q 259 604 255 604 q 264 598 264 603 q 280 591 276 594 q 292 578 290 580 q 293 573 294 576 "},"s":{"x_min":-27.125,"x_max":381.15625,"ha":429,"o":"m 229 191 q 223 206 225 206 q 219 210 221 207 q 212 223 214 222 q 205 237 207 234 q 200 244 203 240 q 189 252 191 248 q 181 256 187 256 q 179 269 184 264 q 169 278 173 275 q 162 292 165 287 q 157 302 160 297 q 150 309 154 306 q 143 320 146 313 q 135 326 139 322 q 128 337 131 330 q 116 351 118 351 q 113 355 115 352 q 109 365 111 359 q 101 374 108 371 q 93 387 100 383 q 84 402 85 400 q 80 402 82 404 q 73 414 75 412 q 69 417 71 416 q 65 432 69 427 q 56 443 61 438 q 54 452 59 450 q 52 459 50 454 q 46 469 47 462 q 42 482 44 476 q 35 501 36 496 q 33 514 33 507 q 34 528 33 527 q 35 530 35 529 l 37 550 q 47 569 43 569 q 55 585 48 576 q 67 598 65 596 q 71 604 69 600 q 84 615 80 611 q 92 623 89 618 q 103 634 100 629 q 109 638 108 634 q 118 641 111 642 q 121 650 118 648 q 127 655 124 652 q 151 670 149 663 q 168 675 165 674 q 187 685 177 678 q 207 689 203 689 q 215 690 211 689 q 233 699 229 697 q 244 701 238 701 q 265 701 260 699 q 275 704 269 704 q 282 703 278 704 q 291 702 287 702 q 307 699 303 701 q 314 698 310 698 q 322 693 317 694 q 332 690 326 691 q 349 675 341 679 q 359 666 358 670 q 364 663 360 663 q 368 646 364 655 q 374 630 371 637 q 377 612 377 617 q 381 603 378 607 q 375 585 381 588 q 371 571 370 581 q 359 548 362 565 q 349 548 352 550 q 341 543 347 545 q 331 529 332 534 q 325 524 330 524 q 307 514 310 516 q 302 508 305 511 q 292 502 295 505 q 282 497 288 499 q 275 507 279 504 q 267 515 271 511 q 269 531 269 531 q 276 545 272 542 q 280 554 279 549 q 276 577 276 572 q 274 587 276 581 q 267 593 271 590 q 267 600 264 596 q 258 604 260 600 q 249 606 256 609 q 237 615 246 614 q 223 622 227 615 q 204 619 208 621 q 193 618 199 618 q 180 619 188 618 q 165 617 172 619 q 153 610 158 614 q 139 606 147 606 q 124 580 128 588 q 124 564 124 569 q 120 556 123 558 q 125 548 123 552 q 131 541 127 543 q 144 518 137 527 q 154 499 151 510 q 164 488 161 495 q 173 477 166 481 q 183 462 179 465 q 193 446 187 450 q 204 429 203 431 q 204 425 206 428 q 214 413 211 416 q 218 404 217 411 q 225 398 222 401 q 233 392 229 394 q 236 383 234 386 q 238 377 238 381 q 246 366 244 367 q 250 362 248 364 q 255 354 253 358 q 263 347 257 349 q 265 335 263 333 q 269 333 268 336 q 276 326 272 329 q 282 320 279 324 q 291 305 287 309 q 298 295 295 302 q 309 283 306 283 q 315 263 313 274 q 328 250 317 253 q 333 234 329 238 q 342 222 343 222 q 343 221 341 222 q 351 206 351 208 q 352 200 351 203 q 362 188 358 191 q 366 170 366 173 q 372 155 371 158 q 370 153 373 153 q 377 128 377 143 q 378 105 377 113 q 372 90 370 92 q 373 85 374 89 q 368 71 370 78 q 358 63 366 65 q 350 47 351 48 q 347 44 349 46 q 337 28 340 31 q 333 20 333 25 q 325 10 326 12 q 325 6 324 9 q 311 -3 314 4 q 297 -12 307 -10 q 278 -32 293 -31 q 264 -47 267 -43 q 259 -55 261 -51 q 244 -63 248 -59 q 237 -71 241 -67 l 222 -81 q 215 -88 219 -86 q 206 -92 210 -89 q 193 -103 193 -101 q 189 -104 192 -104 q 155 -112 168 -108 q 128 -122 143 -116 q 115 -119 116 -118 q 113 -120 115 -120 q 100 -118 104 -116 q 93 -116 96 -120 q 79 -118 85 -118 q 66 -118 73 -119 q 52 -109 56 -109 q 36 -103 42 -103 q 24 -101 31 -104 q 15 -92 21 -94 q 4 -82 9 -89 q -4 -67 -2 -69 q -9 -63 -6 -66 q -16 -49 -16 -50 q -18 -46 -17 -48 q -22 -31 -24 -32 q -21 -25 -20 -31 q -23 -18 -24 -23 q -24 -8 -23 -14 q -27 5 -27 2 q -25 10 -27 8 q -24 25 -25 24 q -23 29 -23 27 q -21 40 -21 35 q -20 50 -21 46 q -5 82 -8 71 q 6 94 -2 92 q 16 112 8 101 q 29 127 21 122 l 40 141 q 52 150 50 147 q 61 151 54 153 q 78 166 75 165 q 88 164 80 166 q 83 152 85 158 q 84 141 81 146 q 74 126 74 127 q 73 123 74 124 q 67 113 69 116 q 63 107 66 111 q 59 93 58 94 q 59 89 59 92 q 57 74 56 74 q 58 73 58 74 q 59 57 59 58 q 58 55 58 56 q 60 43 61 47 q 62 36 59 39 q 65 21 61 23 q 67 13 66 17 q 69 5 69 9 q 86 -10 81 -5 q 103 -16 92 -16 q 117 -27 113 -28 q 126 -27 120 -27 q 143 -32 134 -29 q 160 -36 153 -35 q 179 -35 173 -32 q 194 -35 188 -33 q 207 -35 200 -36 q 217 -29 212 -32 q 227 -24 221 -25 q 242 -11 240 -17 q 250 -5 244 -5 q 263 12 261 9 q 269 16 265 14 q 273 24 271 21 q 276 31 275 27 q 277 47 276 46 q 278 51 278 48 q 278 86 280 75 q 274 105 276 97 q 267 121 269 118 q 263 127 265 124 q 257 143 261 139 q 253 153 253 146 q 236 173 246 170 l 229 191 "},"B":{"x_min":-35.71875,"x_max":1041.75,"ha":1055,"o":"m 693 1007 q 712 1010 706 1009 q 721 1002 718 1011 q 748 995 739 995 q 777 982 767 986 q 797 976 788 979 q 817 964 813 968 q 827 953 822 960 q 846 949 841 952 q 857 944 851 946 q 883 931 877 937 q 899 923 888 926 q 904 917 902 921 q 912 912 907 914 q 921 902 915 906 q 929 892 926 899 q 940 881 935 887 q 950 870 944 876 q 958 856 956 857 q 961 853 960 855 q 980 826 975 836 q 995 809 986 816 q 1002 794 994 800 q 1004 778 1002 779 q 1007 774 1006 777 q 1009 762 1009 770 q 1015 751 1010 754 l 1017 736 q 1020 729 1018 732 q 1025 720 1022 725 q 1030 709 1029 710 q 1032 706 1030 708 q 1036 680 1036 691 q 1040 659 1037 672 q 1040 634 1043 645 q 1040 610 1037 615 q 1037 568 1041 584 q 1032 545 1037 553 q 1030 530 1028 538 q 1025 518 1026 522 q 1024 511 1024 514 q 1023 494 1022 496 q 1022 489 1024 492 q 1014 472 1015 473 q 1010 467 1013 470 q 1008 458 1011 461 q 1005 448 1005 455 q 994 436 995 438 q 991 431 994 435 q 987 413 988 416 q 982 412 986 411 q 982 400 983 402 q 982 393 980 398 l 972 381 q 967 372 968 378 q 960 364 965 366 q 954 355 960 358 q 949 345 949 352 q 940 333 941 333 q 937 329 938 332 q 931 322 934 326 q 922 314 927 317 q 908 296 912 305 q 895 287 904 287 q 888 276 892 280 q 881 264 884 272 q 872 257 876 261 q 862 249 868 253 q 849 238 850 240 q 845 236 847 236 q 832 225 838 225 q 816 213 823 219 q 800 200 809 207 q 784 185 786 188 q 779 179 782 183 q 770 166 767 169 q 773 158 773 164 q 789 151 782 155 q 803 150 797 154 q 816 143 809 146 q 835 127 830 137 q 846 122 842 126 q 857 118 850 119 q 864 108 859 111 q 874 101 869 105 q 885 88 880 90 q 892 73 888 77 q 899 63 896 70 q 910 54 907 61 q 921 43 914 47 q 934 4 929 18 q 935 -10 933 -8 q 938 -14 937 -12 q 940 -29 941 -21 q 941 -44 938 -37 q 943 -54 944 -51 q 942 -59 942 -56 q 937 -78 937 -75 q 934 -82 937 -81 q 929 -101 929 -93 q 925 -113 929 -109 q 923 -124 927 -120 q 922 -132 919 -128 q 918 -139 918 -134 q 915 -149 918 -145 q 902 -161 906 -154 q 893 -177 897 -173 q 885 -193 891 -185 q 874 -211 880 -202 q 862 -223 866 -214 q 843 -237 849 -234 q 828 -250 831 -248 q 822 -255 826 -253 q 811 -267 811 -265 q 807 -268 811 -269 l 794 -278 q 777 -289 781 -288 q 771 -293 774 -290 q 754 -301 758 -298 q 747 -309 750 -305 q 733 -316 741 -310 q 713 -324 717 -322 q 699 -324 705 -322 q 687 -322 693 -326 q 664 -326 678 -324 q 656 -323 660 -325 q 647 -324 652 -321 q 634 -318 636 -320 q 628 -317 633 -316 q 617 -311 623 -313 q 609 -305 611 -309 q 594 -301 599 -305 q 585 -294 590 -298 q 572 -285 573 -288 q 568 -279 571 -282 q 558 -268 564 -272 q 552 -253 552 -264 q 546 -233 548 -238 q 548 -223 545 -229 q 556 -205 553 -208 q 556 -196 558 -202 q 564 -188 562 -193 q 572 -180 565 -183 q 579 -161 577 -164 q 593 -146 590 -147 q 598 -141 596 -145 q 611 -125 609 -127 q 613 -120 613 -123 q 626 -107 628 -113 q 634 -105 632 -107 q 644 -103 637 -103 q 649 -121 652 -109 q 640 -137 647 -132 l 640 -155 q 634 -185 633 -174 q 647 -203 636 -196 q 653 -212 652 -211 q 657 -214 655 -214 q 666 -221 660 -219 q 675 -229 672 -223 q 693 -238 687 -231 q 706 -244 699 -241 q 721 -245 712 -246 q 739 -246 732 -246 q 750 -250 746 -245 q 771 -246 763 -249 q 788 -238 779 -242 q 794 -233 790 -236 q 798 -226 798 -231 q 811 -216 808 -222 q 822 -207 815 -210 q 830 -191 826 -198 q 841 -176 835 -184 q 846 -158 845 -161 q 845 -155 847 -155 q 849 -147 849 -153 q 851 -135 850 -141 q 857 -116 855 -120 q 859 -105 858 -112 q 858 -88 859 -89 q 857 -84 857 -86 q 855 -73 855 -78 q 854 -62 855 -67 q 846 -39 851 -50 q 838 -17 841 -28 q 830 -6 828 -6 q 831 -2 831 -5 q 822 13 824 5 q 816 21 819 16 q 808 29 813 25 q 789 55 796 42 q 769 61 769 61 q 763 66 765 63 q 758 71 760 69 q 741 78 744 78 q 736 81 739 78 q 709 93 727 86 q 698 94 699 92 q 694 97 697 96 q 676 99 686 99 q 655 100 666 99 q 641 102 644 103 q 636 101 638 101 q 627 102 632 101 q 618 103 622 103 q 580 93 595 103 q 564 91 565 90 q 562 92 564 92 q 549 88 553 88 q 542 88 545 89 q 529 78 530 78 q 504 78 516 71 q 501 98 500 92 q 504 108 501 104 q 517 126 515 122 q 522 135 519 130 q 536 146 533 145 q 541 153 539 147 q 551 155 546 154 q 557 160 556 155 q 573 166 571 165 q 575 172 576 168 q 609 170 595 177 q 624 172 615 173 q 638 177 633 170 q 651 178 645 174 q 664 179 656 181 q 672 182 670 180 q 679 184 675 184 q 699 187 687 183 q 716 192 714 192 q 721 193 718 192 q 733 200 728 196 q 744 206 737 204 q 757 215 751 210 q 770 223 763 219 q 780 233 774 229 q 790 244 786 237 q 807 253 804 253 q 813 261 811 256 q 822 265 816 265 q 829 274 824 271 q 836 284 834 278 q 850 299 847 286 q 867 313 862 307 q 876 325 872 318 q 887 340 885 337 q 893 356 895 351 q 902 362 900 358 q 906 370 903 366 q 910 379 908 373 q 915 392 912 386 q 922 404 918 398 q 927 420 926 411 q 935 432 933 424 q 942 446 937 440 q 944 455 941 451 q 948 465 946 459 q 951 482 952 481 q 950 485 950 484 q 956 497 957 496 q 956 500 956 499 q 959 518 960 514 q 961 529 957 523 l 961 603 q 960 621 961 618 q 957 628 959 625 q 957 637 957 633 q 952 644 957 641 q 949 662 950 659 q 945 670 948 666 q 944 686 945 678 q 938 697 944 694 q 933 712 934 712 q 934 716 931 713 q 926 731 926 728 q 922 733 926 735 q 915 750 915 748 q 912 751 915 751 q 897 784 903 770 q 886 794 888 792 q 881 800 884 797 q 872 813 876 808 q 863 822 865 820 q 857 824 861 824 q 841 842 854 842 q 828 855 836 851 q 813 865 820 858 q 799 870 804 866 q 789 880 794 874 q 773 888 778 883 q 756 895 767 893 q 739 907 743 904 q 729 912 736 910 q 712 921 718 921 q 704 927 705 921 q 690 930 694 925 q 675 934 686 935 q 661 942 663 944 q 656 941 660 940 q 633 949 648 949 q 626 956 630 956 q 617 956 621 956 q 585 961 598 961 q 562 963 573 961 q 552 965 554 967 q 548 965 550 964 q 533 967 534 968 q 530 967 531 967 l 514 967 l 497 969 q 484 967 491 969 q 472 971 477 965 q 457 961 461 965 q 430 960 439 967 q 401 956 406 959 q 382 952 383 953 q 371 948 373 950 q 367 945 370 946 q 358 944 363 944 q 349 942 354 944 q 331 934 337 937 q 320 926 325 931 q 303 921 310 925 q 288 914 295 918 q 264 902 272 904 q 246 889 249 891 q 241 885 244 888 q 229 879 234 883 q 219 872 223 876 q 212 866 215 869 q 203 859 208 862 q 193 848 195 851 q 187 845 192 845 q 181 834 185 836 q 176 824 176 832 q 164 809 169 812 q 161 800 158 807 q 149 786 149 792 q 139 774 141 777 q 139 767 138 771 q 125 752 128 755 q 122 743 122 750 q 112 727 115 729 q 111 718 109 725 l 105 704 q 93 680 97 697 q 91 668 90 671 q 90 663 92 666 q 77 630 82 638 q 80 614 71 622 q 80 595 81 603 q 80 577 80 587 q 82 566 80 572 q 81 556 84 561 q 82 542 84 543 q 80 538 81 541 q 92 512 92 520 q 99 499 93 504 q 105 477 101 481 q 109 466 108 473 q 118 459 115 463 q 131 457 122 455 q 136 449 134 453 q 141 443 138 446 q 148 440 145 443 q 155 436 151 438 q 168 432 166 435 q 170 435 169 430 q 188 428 177 427 q 187 408 188 415 q 182 397 184 402 q 176 389 180 392 q 168 369 174 373 q 164 356 161 366 q 153 346 155 347 q 150 343 151 345 q 135 339 137 337 q 131 343 134 341 q 121 345 127 345 q 109 348 115 345 q 96 356 96 355 q 80 366 82 366 q 74 367 77 367 l 56 393 q 41 409 44 406 q 39 419 37 412 q 34 427 35 421 q 29 438 33 434 q 27 447 29 446 q 27 454 25 448 q 18 471 20 467 q 13 478 16 474 q 11 501 10 496 q 12 514 12 507 q 10 531 12 522 q 9 548 8 539 q 10 556 9 553 q 13 562 12 560 q 13 572 14 568 q 14 581 12 576 q 20 597 18 596 q 21 600 21 598 q 25 615 25 613 q 29 618 25 618 q 28 624 25 621 q 29 633 31 628 q 35 645 35 642 q 35 649 35 648 q 40 659 37 655 q 44 671 42 664 q 51 685 51 683 q 54 694 54 687 q 58 706 55 701 q 74 732 67 725 q 80 748 80 747 q 82 752 80 750 q 94 765 90 763 q 103 781 97 773 q 113 796 108 789 q 124 812 122 809 q 130 817 127 815 q 139 830 135 827 q 145 839 142 834 q 154 849 149 845 q 164 859 164 858 q 165 861 164 859 q 176 874 173 872 q 191 892 187 888 q 199 903 196 896 q 212 908 210 903 q 223 915 215 914 q 233 927 230 925 q 240 930 237 929 q 245 935 242 933 q 253 940 248 938 q 271 952 265 946 q 283 956 282 954 q 287 961 284 959 q 297 965 294 961 q 306 972 301 969 q 316 977 310 975 q 326 982 322 979 q 344 991 341 990 l 360 996 q 367 1000 364 998 q 374 1005 370 1002 q 393 1012 390 1010 q 398 1015 396 1014 q 408 1018 401 1018 q 419 1021 415 1018 q 449 1026 436 1025 q 473 1029 462 1026 q 493 1032 486 1033 q 507 1032 500 1032 q 513 1034 510 1033 q 522 1036 516 1036 q 535 1034 533 1033 q 539 1034 537 1036 q 560 1032 556 1033 q 567 1036 564 1032 q 583 1035 572 1033 q 602 1032 595 1037 q 618 1033 610 1036 q 634 1030 626 1030 q 649 1030 647 1032 q 653 1030 651 1029 q 664 1020 663 1025 q 681 1016 679 1018 q 689 1015 683 1014 l 693 1007 m 505 750 q 514 741 510 746 q 519 729 518 737 q 505 720 508 721 q 484 699 491 706 q 469 687 477 693 q 441 668 453 671 q 424 655 430 666 q 409 647 417 653 q 393 625 400 632 q 389 617 390 622 q 387 606 389 611 q 379 601 383 603 q 371 596 375 599 q 369 583 371 584 q 367 579 367 581 q 360 562 363 564 q 354 560 358 560 q 355 545 356 546 q 352 541 354 543 q 351 520 351 520 q 345 497 344 503 q 341 486 345 492 q 343 469 343 474 q 341 462 344 463 q 341 442 343 453 q 336 419 339 431 q 335 395 335 400 q 337 382 336 390 q 341 368 339 370 q 341 366 343 367 q 345 347 343 351 q 348 337 347 343 q 348 324 345 330 q 354 313 351 318 q 354 298 351 305 q 358 288 356 291 q 358 280 358 284 q 355 272 358 276 q 358 265 358 269 q 360 257 358 261 q 364 251 363 255 q 367 244 364 248 q 373 232 370 238 q 374 215 377 226 q 379 208 377 211 q 383 200 381 206 q 390 179 386 185 q 394 162 389 169 q 392 149 393 149 q 394 146 392 150 q 402 132 400 138 q 409 113 408 116 q 412 104 411 111 q 419 84 419 93 q 425 70 420 75 q 427 59 424 62 q 427 51 430 55 q 432 45 428 47 q 436 39 435 43 q 439 30 434 33 q 443 17 444 27 q 448 9 446 13 q 451 -1 451 5 q 474 -31 465 -21 q 478 -52 474 -42 q 472 -70 481 -63 q 472 -82 469 -77 q 476 -94 474 -88 q 476 -110 478 -109 q 474 -113 474 -111 q 478 -128 476 -118 q 476 -141 473 -141 q 477 -149 478 -142 q 476 -172 473 -169 q 470 -184 472 -183 q 469 -188 469 -185 q 465 -204 466 -203 q 463 -207 463 -204 q 460 -221 461 -218 q 458 -226 459 -223 q 455 -233 455 -229 q 454 -244 455 -237 q 451 -251 453 -248 q 450 -259 448 -255 q 443 -263 446 -261 q 435 -267 440 -265 q 429 -277 431 -275 q 425 -282 428 -279 q 413 -291 415 -290 q 406 -294 411 -293 q 396 -307 398 -306 q 392 -309 394 -309 q 380 -324 387 -318 q 370 -339 373 -329 q 362 -344 366 -341 q 351 -348 358 -347 q 323 -370 333 -363 q 302 -382 313 -378 q 294 -392 299 -389 q 284 -400 288 -394 q 268 -406 272 -406 q 248 -415 256 -415 q 231 -420 236 -420 q 225 -421 227 -420 q 187 -427 200 -427 q 168 -423 173 -423 q 160 -423 164 -424 q 142 -419 143 -419 q 121 -413 126 -413 q 112 -411 116 -412 l 96 -405 q 58 -390 67 -400 q 36 -385 40 -389 q 24 -382 32 -382 q 18 -376 23 -378 q 14 -367 13 -374 q 4 -360 8 -364 q -5 -354 1 -356 q -6 -343 -6 -348 q -8 -333 -6 -339 q -16 -316 -14 -317 q -18 -313 -18 -316 q -26 -291 -24 -298 q -35 -279 -28 -284 q -33 -257 -36 -267 q -32 -234 -31 -246 q -33 -227 -32 -230 q -32 -219 -33 -225 q -25 -189 -28 -196 q -18 -174 -23 -181 q -14 -157 -17 -160 q -11 -145 -10 -147 q -10 -141 -12 -142 q -2 -129 -4 -132 q 0 -120 0 -126 q 14 -103 9 -108 q 21 -90 18 -99 q 32 -80 29 -81 q 35 -73 35 -78 q 50 -64 46 -66 q 58 -59 54 -62 q 70 -46 67 -48 q 75 -40 73 -43 q 91 -34 86 -39 q 103 -25 96 -29 l 115 -16 q 141 -10 132 -9 q 153 -5 150 -10 q 172 -1 168 -5 q 189 -5 180 -9 q 198 -10 193 -8 q 206 -14 202 -13 q 214 -16 210 -17 q 222 -17 218 -14 q 231 -26 230 -25 q 234 -29 233 -27 q 227 -45 230 -46 q 223 -46 225 -44 q 217 -61 218 -56 q 209 -71 211 -70 q 204 -75 207 -73 q 191 -88 193 -88 q 187 -94 188 -89 q 175 -101 176 -97 q 172 -105 174 -104 q 162 -108 165 -105 q 153 -107 158 -111 q 133 -84 146 -86 q 108 -80 120 -82 q 96 -83 97 -84 q 93 -82 96 -82 q 82 -94 80 -94 q 81 -97 84 -94 q 71 -101 73 -99 q 67 -104 70 -104 q 66 -113 69 -109 q 62 -123 63 -118 q 60 -139 59 -130 q 54 -153 61 -147 q 56 -168 56 -168 l 52 -183 q 54 -194 54 -192 q 56 -199 55 -196 q 58 -225 55 -219 q 59 -237 61 -230 q 64 -246 62 -242 q 67 -256 66 -249 q 78 -275 74 -271 q 84 -284 81 -279 q 93 -294 90 -293 q 96 -301 96 -295 q 126 -321 118 -313 q 142 -323 141 -322 q 147 -325 143 -324 q 155 -327 150 -328 q 162 -328 160 -326 q 185 -337 177 -335 q 203 -341 199 -340 q 216 -343 214 -344 q 222 -343 218 -343 q 231 -344 226 -343 q 240 -347 236 -345 q 257 -348 252 -345 q 266 -347 263 -348 q 274 -343 269 -345 q 284 -342 280 -345 q 294 -339 287 -339 q 308 -330 305 -330 q 311 -326 311 -330 q 327 -322 322 -330 q 341 -311 332 -313 q 347 -306 344 -309 q 354 -301 351 -303 q 364 -287 362 -295 q 378 -274 373 -279 q 383 -259 383 -269 q 389 -249 387 -252 q 393 -242 392 -246 q 394 -233 394 -238 q 396 -222 393 -227 q 398 -202 400 -210 q 397 -187 397 -193 q 398 -158 398 -166 q 396 -137 397 -149 q 393 -116 396 -127 q 386 -100 390 -104 q 381 -71 392 -82 q 377 -51 377 -58 q 370 -43 371 -46 q 368 -37 370 -40 q 363 -20 366 -28 q 358 -4 360 -12 q 350 10 351 1 q 343 24 349 18 q 339 41 343 35 q 333 56 336 47 q 330 70 333 66 q 326 77 328 74 l 322 97 q 314 118 316 115 q 311 123 313 120 q 308 137 310 135 q 309 142 306 139 q 301 158 305 151 q 301 170 298 165 q 295 179 297 173 q 291 188 294 185 q 290 202 291 195 q 282 210 288 208 q 282 226 283 223 q 279 238 280 231 q 275 253 278 245 q 272 271 275 263 q 269 287 271 282 q 268 295 268 293 q 267 307 268 301 q 267 320 267 313 q 265 356 263 344 q 259 374 268 368 q 264 400 261 392 q 263 416 267 409 q 265 423 265 419 q 264 431 264 427 q 267 438 265 435 q 268 446 268 442 q 270 467 271 457 q 272 485 269 477 q 278 501 276 499 q 279 505 279 503 q 283 530 283 519 q 292 543 290 534 q 301 557 294 553 q 303 569 303 565 q 307 572 303 572 q 316 588 313 584 q 322 599 318 592 q 329 609 325 603 q 335 621 333 614 q 352 641 344 626 q 368 657 364 645 q 381 668 377 657 q 392 676 390 675 q 394 680 394 678 q 409 691 409 686 q 420 697 416 693 q 431 704 424 701 q 435 710 432 708 q 440 716 438 713 q 459 729 453 721 q 472 737 467 732 q 485 741 476 741 q 499 748 497 747 q 505 750 501 750 "},"?":{"x_min":20.34375,"x_max":638.4375,"ha":597,"o":"m 610 922 q 614 902 618 906 q 624 897 621 900 q 630 891 628 893 q 630 881 629 887 q 626 874 632 874 q 632 852 628 861 q 634 832 637 843 q 637 819 640 820 q 634 816 634 819 q 634 803 636 803 q 630 800 632 803 q 630 769 630 779 q 622 755 623 765 q 617 739 621 746 q 618 726 621 729 q 615 716 615 722 q 609 698 609 709 q 599 688 602 691 q 594 680 596 685 q 589 671 591 676 q 585 659 587 666 q 573 644 575 648 q 567 641 572 641 q 556 632 557 633 q 553 632 556 630 q 543 621 543 622 q 542 618 543 619 q 528 607 530 609 q 523 603 526 604 q 514 592 516 595 q 505 587 511 590 q 497 579 499 581 q 491 577 496 576 q 477 561 480 568 q 467 558 467 560 q 463 554 466 556 q 451 541 451 543 q 448 537 450 539 q 438 535 442 538 q 428 530 435 531 q 408 518 415 520 q 400 510 402 515 q 385 503 387 504 q 385 501 383 503 q 369 497 373 497 q 363 493 366 496 q 354 484 358 485 q 347 480 349 484 q 339 479 343 481 q 332 476 335 477 q 319 467 325 472 q 309 457 313 463 q 293 454 301 455 q 284 444 286 453 q 269 433 275 440 q 256 419 263 425 q 248 404 253 406 q 240 385 242 387 q 238 377 237 383 q 233 367 231 370 q 231 362 234 364 q 231 338 227 348 q 231 321 236 328 q 236 311 234 317 q 240 299 237 305 q 243 285 242 287 q 246 283 244 283 q 247 269 245 272 q 249 261 249 267 q 258 253 252 256 q 267 245 264 250 q 277 243 274 246 q 283 237 280 240 q 299 236 291 240 q 314 233 306 233 q 307 215 309 218 q 292 208 295 210 q 288 199 288 206 q 281 197 283 199 q 274 198 279 195 q 267 194 271 196 q 259 191 264 192 q 253 183 259 183 q 244 183 248 183 q 217 188 221 180 q 199 191 198 191 q 187 204 188 196 q 173 214 177 210 q 168 225 169 218 q 151 250 157 238 q 143 275 143 267 q 141 290 143 286 q 141 299 139 295 q 143 317 146 313 q 147 336 147 333 q 155 355 153 352 q 164 371 162 370 q 165 377 165 373 q 170 388 166 385 q 176 396 173 392 l 184 411 q 193 417 192 417 q 196 420 195 417 q 209 434 207 430 q 217 440 211 438 q 232 455 226 451 q 241 466 238 459 q 249 468 248 463 q 257 473 250 473 q 271 480 261 477 q 280 488 279 485 q 283 493 282 491 l 297 501 q 305 507 302 505 q 311 512 309 510 q 326 516 322 515 q 330 520 330 516 q 348 530 344 526 q 366 538 363 537 q 373 543 370 539 q 386 550 385 550 q 390 552 387 550 q 398 556 394 553 q 404 558 401 558 q 418 570 416 567 q 424 576 420 573 q 434 581 430 580 q 440 583 438 581 q 457 596 454 595 q 459 602 459 598 q 475 611 472 609 q 481 615 478 613 q 495 628 492 623 q 505 636 499 633 q 524 664 516 656 q 529 674 529 671 q 533 679 530 676 q 542 702 533 690 q 546 714 543 709 q 553 725 549 718 q 554 738 552 739 q 557 740 557 737 q 556 754 556 754 q 557 756 557 755 q 557 765 556 763 q 560 771 558 767 q 558 780 560 775 q 560 788 557 785 q 559 820 561 809 q 560 842 557 831 q 550 864 554 861 q 541 886 542 881 q 538 893 541 891 q 531 904 531 903 q 530 908 531 906 l 520 921 q 503 938 511 930 q 491 947 495 944 q 481 952 486 950 q 467 965 472 961 q 455 971 462 968 q 448 979 455 978 q 436 980 440 980 q 413 992 417 987 q 397 998 408 998 q 382 1002 383 1002 q 368 1003 370 1001 q 363 1007 366 1006 q 348 1011 348 1011 q 337 1012 343 1014 q 325 1010 332 1010 q 316 1012 321 1010 q 307 1014 311 1014 q 291 1007 301 1009 q 272 1002 282 1005 q 255 994 265 996 q 238 986 245 992 q 225 979 225 982 q 212 976 215 982 q 200 971 208 971 q 193 964 198 967 q 188 956 189 961 l 174 946 q 162 931 165 931 q 158 922 161 925 q 150 918 154 919 q 142 902 149 908 q 137 891 138 895 q 134 884 137 887 q 127 874 127 876 q 126 870 127 873 q 116 858 116 858 q 100 822 100 842 q 96 803 96 808 q 101 797 96 798 q 99 777 101 779 q 96 770 97 774 q 97 740 93 751 q 94 733 97 736 q 90 724 90 729 q 91 714 89 718 q 90 708 93 710 q 101 695 99 698 q 101 680 96 686 l 109 656 q 113 640 113 644 q 109 634 112 637 q 124 624 123 628 q 128 621 126 621 q 138 598 131 606 q 151 585 147 588 q 158 579 154 583 q 168 577 161 576 q 172 592 174 585 q 181 598 181 596 q 183 603 181 600 q 192 610 191 609 q 193 614 193 611 q 215 622 211 621 q 224 628 221 626 q 226 633 227 629 q 240 640 236 640 q 255 642 249 644 q 269 640 261 641 q 271 629 269 636 q 271 618 274 622 l 263 587 l 250 575 q 244 566 248 569 q 240 557 241 564 q 228 548 227 550 q 226 543 229 545 q 215 535 219 535 q 212 529 211 535 q 201 524 206 526 q 193 515 196 522 q 183 510 187 514 q 172 505 180 505 q 152 498 165 499 q 132 488 139 497 q 116 493 119 493 q 111 495 113 493 q 96 504 103 497 q 80 512 90 511 q 63 535 70 523 q 56 552 59 549 q 47 558 52 556 q 42 573 44 571 q 37 583 39 576 q 32 595 35 592 q 29 602 29 598 q 29 619 31 618 q 27 621 27 619 q 24 640 23 633 q 23 650 25 647 q 21 656 21 653 q 22 679 24 671 q 20 694 20 687 q 21 708 20 704 q 23 716 23 712 q 22 725 23 720 q 23 735 21 731 q 25 749 24 748 q 25 751 25 750 q 25 766 25 766 l 31 789 q 39 810 36 807 q 39 816 42 813 q 48 832 46 830 q 51 842 51 835 l 58 857 q 70 872 69 869 q 74 876 71 874 q 90 899 82 896 q 96 908 92 906 q 101 918 100 911 q 110 925 108 923 q 115 930 112 927 q 126 945 123 942 q 127 950 128 948 q 139 962 134 956 q 151 972 143 968 q 160 981 154 979 q 168 991 166 983 q 192 1006 188 999 q 206 1013 202 1007 q 217 1024 211 1018 q 229 1028 227 1026 q 233 1030 230 1029 q 247 1039 244 1039 q 253 1041 250 1040 q 272 1052 271 1049 q 287 1058 284 1055 q 300 1058 294 1058 q 309 1063 306 1059 q 329 1064 325 1064 q 337 1063 333 1063 q 349 1065 344 1063 q 359 1067 354 1067 q 365 1065 362 1067 q 374 1066 368 1063 q 384 1062 377 1063 q 394 1064 392 1062 q 413 1062 411 1063 q 419 1059 416 1060 q 432 1052 432 1055 q 442 1051 438 1051 q 453 1051 447 1052 q 466 1045 465 1045 q 467 1041 467 1044 q 489 1032 480 1032 l 504 1024 q 512 1014 508 1020 q 520 1005 516 1009 q 527 1004 524 1006 q 535 1002 530 1002 q 544 990 542 991 q 548 986 546 988 q 564 979 562 982 q 567 972 567 976 q 583 959 577 968 q 599 946 588 949 q 600 935 600 940 q 606 929 600 931 l 610 922 m 286 90 q 288 78 286 75 q 295 78 291 80 q 324 67 311 67 q 337 59 333 65 q 352 56 341 54 q 370 46 364 47 q 378 40 377 44 q 388 30 390 31 q 387 27 386 29 q 394 9 398 18 q 374 -2 381 1 q 364 -13 366 -13 q 360 -16 362 -13 q 350 -21 351 -18 q 347 -24 349 -23 q 334 -31 339 -32 q 326 -33 329 -31 q 307 -25 309 -27 q 302 -23 306 -23 l 282 -12 q 275 -6 279 -9 q 268 -1 271 -4 q 241 5 249 5 q 222 14 229 8 q 207 17 208 16 q 182 25 189 21 q 168 32 174 28 q 166 41 168 37 q 164 48 165 44 q 176 59 174 58 q 176 63 177 59 q 183 67 181 65 q 189 71 185 70 q 208 90 204 82 q 233 101 225 90 l 257 101 q 276 93 271 93 q 286 90 282 93 "},"H":{"x_min":-27.125,"x_max":1396.890625,"ha":1084,"o":"m 455 766 q 467 752 465 754 q 472 748 469 750 q 474 739 470 741 q 477 731 477 737 q 482 720 482 727 q 484 709 481 713 q 489 696 488 697 q 493 693 491 695 q 501 671 496 682 q 507 651 507 656 q 510 642 507 647 q 515 634 512 638 q 516 623 518 630 q 520 615 519 619 q 523 604 520 611 q 528 587 527 590 q 530 581 529 584 q 535 567 534 568 q 537 564 535 567 q 544 548 542 552 q 548 539 546 543 q 550 524 548 527 q 550 515 553 520 q 556 501 553 508 q 558 488 560 495 q 562 479 561 485 q 562 469 564 473 q 568 453 567 457 q 572 447 569 448 q 570 440 569 443 q 572 431 571 438 q 567 416 562 419 q 572 411 572 413 q 577 397 576 401 q 579 386 579 393 q 588 375 587 377 q 588 370 590 373 q 595 356 592 359 q 598 351 598 354 q 600 340 598 343 q 602 336 602 337 q 603 326 602 329 q 604 320 604 322 q 610 299 604 302 q 610 290 609 294 q 613 284 611 287 q 617 271 617 271 q 618 269 618 271 q 621 252 621 253 q 623 238 623 238 q 621 236 622 238 q 624 228 625 234 q 628 221 623 222 q 627 209 625 210 q 630 206 629 208 q 637 181 630 191 q 641 161 637 162 q 638 153 638 155 q 640 142 638 150 q 663 141 657 142 q 674 141 668 141 q 682 144 676 142 q 694 147 689 146 q 707 149 701 149 q 718 153 713 149 q 751 155 739 157 q 775 162 762 162 q 798 164 788 161 q 813 163 809 162 q 816 170 816 164 q 834 180 834 177 q 834 202 836 189 q 836 221 832 214 q 835 236 834 236 q 836 237 836 236 q 834 251 834 246 q 835 261 835 256 q 834 272 835 267 q 836 284 834 278 q 834 297 832 295 q 836 301 836 298 q 836 315 838 313 q 835 320 835 317 q 838 329 835 325 q 841 339 841 333 l 838 363 q 840 377 842 371 q 838 386 838 382 q 840 393 838 389 q 842 401 842 397 l 842 419 q 845 427 843 420 q 843 439 846 434 q 845 453 846 451 q 843 457 843 454 q 845 474 846 469 q 847 485 843 480 q 847 501 847 496 q 847 514 847 507 q 851 539 851 529 q 855 554 854 548 q 859 573 858 571 q 864 580 861 576 q 870 609 869 600 q 878 623 872 617 q 889 657 888 644 q 903 682 897 678 q 908 697 908 686 q 922 717 919 712 q 929 733 929 731 q 937 748 935 740 q 944 763 934 763 q 948 770 948 766 q 956 775 949 774 q 965 792 963 789 q 980 811 976 807 q 983 822 983 815 q 996 830 994 828 q 998 835 999 831 q 1009 845 1005 839 q 1021 855 1014 851 q 1032 869 1030 866 q 1037 874 1034 872 q 1052 886 1048 880 q 1062 897 1056 892 q 1072 904 1066 900 q 1082 910 1078 907 q 1097 922 1091 916 q 1110 929 1102 927 q 1121 939 1117 937 q 1127 944 1124 941 q 1143 950 1142 949 q 1147 952 1144 952 q 1169 964 1162 960 q 1188 971 1177 968 q 1211 979 1205 976 q 1226 979 1218 982 q 1245 984 1241 982 q 1256 987 1250 987 q 1271 986 1268 984 q 1275 983 1275 987 q 1288 985 1284 986 q 1295 987 1292 984 q 1314 981 1311 986 q 1323 980 1317 976 q 1334 974 1333 973 q 1338 975 1336 975 q 1352 967 1351 969 q 1356 963 1353 965 q 1370 952 1368 953 q 1374 952 1371 952 q 1377 944 1376 948 q 1384 941 1378 940 q 1395 916 1391 925 q 1389 904 1399 907 q 1384 892 1384 893 q 1380 891 1383 891 q 1372 872 1375 881 q 1365 868 1370 869 q 1359 864 1361 868 q 1334 847 1342 859 q 1325 845 1329 847 q 1318 845 1321 843 q 1307 855 1307 855 q 1300 865 1300 864 q 1296 866 1299 866 q 1280 884 1285 883 q 1272 889 1275 885 q 1256 897 1260 895 q 1234 902 1239 900 q 1222 900 1228 903 q 1206 904 1207 903 q 1204 904 1205 904 q 1183 902 1186 904 q 1174 900 1180 899 q 1157 895 1162 900 q 1138 885 1139 888 q 1125 882 1131 884 q 1115 877 1119 880 q 1096 866 1100 868 q 1090 861 1093 864 q 1075 850 1079 854 q 1064 845 1071 846 q 1055 831 1058 831 q 1051 828 1053 831 q 1045 815 1048 816 q 1044 812 1041 813 q 1026 790 1028 794 q 1019 771 1021 777 q 1011 763 1017 766 q 1008 754 1011 756 q 1001 748 1005 751 q 999 739 1002 741 q 996 731 996 737 q 987 709 990 717 q 981 695 983 699 q 976 686 979 691 l 971 667 q 967 660 967 664 q 964 653 967 656 q 961 641 963 641 q 959 638 959 641 q 958 625 960 626 q 953 621 956 623 q 950 607 952 614 q 946 592 948 599 q 938 572 938 573 q 937 541 940 554 q 935 518 935 529 q 935 500 937 505 q 933 488 933 495 q 935 473 934 476 q 935 467 935 470 q 931 455 931 458 q 929 448 931 451 q 931 438 931 446 q 935 427 931 430 q 934 412 933 412 q 932 397 933 397 q 931 394 931 397 q 928 375 929 381 q 927 367 927 370 q 929 346 929 355 q 926 330 929 337 q 929 307 930 320 q 930 299 929 303 q 931 290 931 294 q 929 282 930 286 q 926 275 927 279 q 929 253 929 252 q 929 244 930 248 q 927 233 929 240 q 926 211 929 222 q 927 201 926 206 q 929 192 929 196 q 926 170 929 173 q 930 155 927 162 q 926 141 933 149 q 933 120 931 122 q 931 107 933 109 q 931 103 930 105 q 933 88 931 96 q 937 71 935 80 q 936 64 937 69 q 937 56 935 59 q 940 38 941 43 q 942 29 938 33 q 940 16 940 18 q 944 12 941 14 q 946 -2 942 2 q 950 -17 949 -8 q 953 -44 948 -35 q 953 -67 959 -54 q 958 -81 956 -77 q 961 -92 960 -85 q 963 -108 961 -105 q 965 -113 964 -111 q 966 -123 967 -119 q 968 -131 965 -127 q 972 -141 971 -137 q 975 -150 973 -145 q 979 -172 976 -168 q 980 -184 982 -176 q 984 -196 982 -193 q 983 -200 986 -198 q 988 -217 987 -214 q 988 -223 988 -219 q 991 -238 991 -237 q 992 -248 991 -242 q 994 -259 994 -253 q 996 -277 994 -272 q 999 -287 999 -282 q 1017 -281 1014 -283 q 1024 -276 1020 -279 q 1030 -272 1026 -275 q 1036 -265 1033 -269 q 1042 -255 1041 -257 q 1047 -252 1043 -252 q 1052 -236 1052 -241 q 1059 -234 1052 -231 q 1079 -223 1074 -222 q 1090 -223 1083 -223 q 1093 -236 1096 -234 q 1090 -241 1091 -238 q 1081 -259 1085 -255 q 1072 -265 1078 -263 q 1062 -278 1062 -276 q 1062 -283 1063 -280 q 1055 -290 1059 -287 q 1048 -299 1051 -293 q 1036 -311 1037 -305 q 1018 -329 1020 -325 q 1002 -338 1003 -333 q 994 -343 1001 -343 q 984 -355 984 -352 q 980 -360 983 -358 q 963 -374 971 -370 q 948 -381 956 -378 q 932 -392 935 -390 q 926 -394 929 -394 q 908 -385 912 -389 q 910 -373 908 -379 q 907 -363 911 -367 q 907 -347 912 -354 q 904 -326 907 -332 q 907 -313 902 -320 q 904 -298 906 -298 q 900 -297 902 -298 q 899 -275 899 -286 q 897 -263 895 -264 q 903 -259 900 -261 q 897 -250 899 -256 q 900 -241 896 -244 q 889 -224 892 -236 q 888 -203 887 -212 q 877 -184 878 -191 q 881 -170 876 -177 q 869 -151 873 -155 q 868 -138 869 -142 q 865 -127 866 -134 q 862 -104 861 -113 q 858 -89 862 -94 q 857 -74 858 -75 q 855 -70 855 -73 q 853 -56 853 -63 q 851 -42 854 -48 q 849 -27 849 -32 q 847 -17 849 -21 q 844 0 846 -10 q 845 18 842 9 q 838 42 841 35 q 836 58 836 50 q 838 78 836 67 q 835 99 841 88 q 820 99 824 101 q 809 94 816 97 q 790 97 793 94 q 775 97 781 99 q 760 94 769 96 q 749 96 751 99 q 740 96 747 93 q 709 89 720 88 q 689 84 698 90 q 678 75 679 77 q 675 75 676 73 q 663 69 670 71 q 649 63 656 66 q 648 50 648 56 q 645 40 648 43 q 647 23 649 32 q 645 4 645 13 q 642 -16 642 -14 q 641 -31 641 -27 q 637 -48 638 -46 q 638 -54 636 -51 q 631 -69 633 -69 q 632 -74 629 -69 q 625 -88 626 -80 q 621 -105 623 -97 q 615 -117 617 -115 q 614 -122 614 -119 q 604 -137 607 -128 q 592 -150 600 -145 q 591 -159 594 -157 q 585 -165 588 -161 q 576 -180 577 -180 q 575 -183 575 -180 q 565 -193 567 -191 q 565 -199 564 -195 q 547 -218 553 -212 q 534 -230 541 -223 q 529 -243 531 -241 q 524 -248 527 -245 q 516 -252 518 -250 q 512 -257 515 -255 q 502 -268 504 -265 q 497 -271 500 -271 q 486 -288 489 -283 q 476 -295 482 -293 q 459 -310 461 -306 q 450 -317 457 -314 q 423 -341 430 -332 q 405 -352 417 -349 q 389 -364 393 -362 q 382 -370 386 -367 q 360 -379 370 -379 q 348 -386 356 -385 q 333 -392 340 -387 q 305 -398 313 -397 q 291 -401 298 -398 q 277 -402 278 -404 q 275 -401 276 -401 q 256 -401 257 -405 q 247 -402 252 -404 q 237 -401 242 -401 q 230 -402 234 -401 q 222 -402 226 -402 q 210 -398 215 -401 q 199 -394 206 -394 q 179 -387 180 -385 q 170 -385 176 -385 q 158 -383 164 -385 q 136 -363 149 -363 q 122 -352 123 -363 q 107 -348 109 -351 q 94 -350 94 -352 q 90 -347 93 -348 q 74 -340 75 -340 q 59 -320 73 -325 q 59 -311 61 -314 q 54 -307 56 -309 q 51 -303 52 -305 q 51 -297 50 -301 q 41 -285 40 -288 q 43 -278 42 -282 q 29 -261 32 -265 q 23 -255 25 -257 l 17 -234 q 4 -215 9 -221 q 4 -200 5 -200 q 1 -196 2 -199 q 0 -183 0 -189 q -1 -169 1 -176 q -6 -142 -8 -151 q -6 -124 -5 -132 q -8 -111 -9 -113 q -8 -107 -8 -109 q -12 -90 -8 -99 q -10 -75 -8 -82 q -9 -59 -12 -67 q -4 -43 -4 -46 q -3 -27 -4 -32 q 0 -20 -2 -23 q 3 -6 4 -9 q 4 -1 2 -4 q 11 16 9 14 q 12 21 13 18 q 15 31 16 28 q 16 40 14 33 q 25 52 24 51 q 27 55 27 52 q 35 65 33 58 q 43 75 36 73 q 44 84 42 81 q 46 93 47 86 q 59 105 55 104 q 65 109 62 107 q 70 118 67 115 q 74 127 73 122 q 88 138 88 137 q 89 139 88 139 q 100 150 97 150 q 110 164 108 164 q 115 166 112 165 q 127 178 124 176 q 132 180 130 180 q 140 189 134 187 q 146 198 146 191 q 162 204 160 206 q 166 204 164 202 q 179 210 179 207 q 181 212 179 212 q 198 214 188 215 q 215 215 208 214 q 232 216 227 217 q 242 215 237 215 q 259 214 257 215 q 263 212 261 212 q 276 210 272 212 q 283 210 279 208 q 299 198 290 202 q 311 185 309 195 q 326 177 322 180 q 344 154 330 164 q 348 141 347 141 q 349 139 349 141 q 356 126 356 127 q 356 124 355 126 l 367 108 q 378 90 374 90 q 379 80 374 84 q 383 69 383 75 q 392 59 390 61 q 393 51 394 56 q 373 32 374 40 q 360 20 363 21 q 356 16 358 18 q 344 5 347 13 q 333 4 336 8 q 322 1 329 1 q 314 6 316 2 q 306 9 313 10 q 299 19 301 18 q 295 20 298 20 q 286 36 288 36 q 285 44 288 40 q 280 51 282 47 q 268 75 275 65 q 256 92 259 89 q 248 94 253 94 q 237 108 242 105 q 223 115 223 115 q 222 118 223 116 q 199 126 202 122 q 188 128 196 130 q 175 125 176 123 q 172 128 174 127 q 162 126 166 126 q 153 123 157 126 q 115 105 130 115 q 99 81 105 92 q 94 63 94 67 q 89 59 93 59 q 81 36 84 40 q 81 27 78 32 q 78 21 80 24 q 73 13 75 17 q 71 -4 70 0 q 77 -10 73 -9 q 75 -29 73 -28 q 75 -32 77 -29 q 75 -48 73 -46 q 74 -66 71 -55 q 71 -84 77 -77 q 73 -95 74 -93 q 70 -100 71 -97 q 80 -119 80 -111 q 84 -134 81 -127 q 92 -150 89 -145 q 94 -166 93 -164 q 94 -173 96 -168 q 111 -193 104 -191 q 120 -221 119 -214 l 128 -236 q 140 -250 138 -249 q 142 -256 142 -252 q 156 -259 155 -257 q 158 -264 157 -261 q 173 -274 170 -275 q 177 -276 176 -274 q 197 -285 192 -280 q 211 -290 202 -290 q 226 -299 223 -301 q 233 -299 229 -298 q 248 -309 245 -303 q 263 -311 261 -310 q 267 -313 264 -313 q 291 -317 280 -311 q 304 -312 298 -314 q 314 -316 310 -310 q 343 -311 333 -314 q 362 -306 352 -309 q 372 -303 368 -303 q 381 -299 375 -302 q 399 -296 394 -298 q 405 -290 404 -294 q 423 -282 419 -283 q 431 -278 427 -282 q 445 -268 443 -269 q 447 -264 447 -267 q 455 -259 453 -263 q 462 -255 458 -256 q 478 -233 473 -240 q 489 -222 482 -226 l 499 -208 q 502 -200 499 -202 q 505 -192 505 -199 q 515 -180 512 -183 q 520 -174 518 -177 q 526 -158 524 -160 q 529 -153 527 -155 q 532 -141 531 -147 q 535 -130 533 -135 q 541 -118 542 -120 q 541 -113 541 -116 q 550 -96 545 -104 q 553 -79 552 -82 q 556 -73 554 -75 q 554 -62 553 -63 q 556 -58 556 -61 q 556 -48 554 -50 q 558 -42 558 -46 q 556 -23 554 -24 q 561 -18 558 -21 q 560 2 560 -12 q 567 24 560 17 q 556 56 556 46 q 554 78 557 67 q 552 92 550 92 q 553 96 553 93 q 549 107 548 103 q 550 116 550 111 q 543 131 545 128 q 542 137 543 134 q 541 147 541 141 q 533 178 538 165 q 531 204 529 191 q 524 216 527 212 q 522 222 522 219 q 521 237 522 233 q 518 244 520 241 q 517 255 519 253 q 514 261 515 257 q 512 271 512 265 q 511 283 512 276 q 506 295 505 293 q 505 299 507 297 q 499 313 500 310 q 496 317 499 316 q 496 330 497 324 q 488 340 495 337 q 487 354 493 349 q 484 370 481 359 q 479 387 478 386 q 480 389 480 387 q 475 401 474 400 q 476 405 476 402 q 470 421 469 416 q 469 430 470 425 q 465 442 467 436 q 465 453 462 447 q 454 479 457 470 q 448 499 451 488 q 441 521 442 516 q 438 529 440 526 q 431 550 434 535 q 423 568 424 567 q 423 576 421 569 q 417 583 420 580 q 416 592 415 585 q 405 621 411 610 q 400 631 401 630 q 398 634 398 632 q 396 642 396 637 q 396 652 397 647 q 385 678 390 667 q 382 689 383 685 q 378 698 381 693 q 371 715 374 709 q 368 731 368 721 q 362 744 362 741 q 360 750 362 747 q 352 767 358 763 q 351 777 354 774 q 345 786 348 781 q 344 794 347 790 q 340 801 341 797 q 336 816 336 812 q 331 825 332 822 q 328 830 330 828 q 322 846 328 841 q 316 862 317 851 q 307 882 309 874 q 301 892 306 889 q 297 906 301 902 q 294 919 294 911 q 288 929 288 923 q 284 942 287 935 q 277 959 279 957 q 274 963 275 960 q 272 971 274 968 q 271 978 271 973 q 265 973 267 976 q 257 971 264 971 q 242 954 245 957 q 241 948 240 952 q 226 933 229 934 l 223 918 q 207 906 210 910 q 198 900 204 903 q 189 885 195 889 q 181 872 184 881 q 170 863 174 869 q 160 854 166 857 q 153 840 155 843 q 143 838 150 838 q 134 815 134 826 q 125 809 126 811 q 120 808 124 807 q 107 789 109 796 q 99 777 104 782 q 89 760 94 763 q 81 754 84 758 q 74 736 77 739 q 69 720 71 722 q 66 694 69 702 q 63 679 65 682 q 65 672 62 676 q 57 667 58 672 q 52 659 56 661 q 54 645 54 649 q 55 634 55 641 q 56 621 56 630 q 54 609 55 613 q 48 594 50 594 q 47 592 47 595 q 56 584 58 587 q 54 579 54 581 q 60 561 56 565 q 61 550 63 557 q 62 541 63 542 q 62 535 61 539 q 70 518 71 522 q 69 511 69 514 q 72 503 70 507 q 74 495 74 500 q 89 478 85 482 q 100 461 97 467 q 119 442 115 446 q 128 440 123 440 q 139 436 134 439 q 159 428 157 431 q 166 424 161 425 q 185 426 176 425 q 204 425 193 427 q 221 430 217 430 q 227 435 225 431 q 246 439 242 435 q 262 442 260 439 q 268 446 264 444 q 290 421 294 440 q 282 414 284 419 q 279 404 280 409 q 271 383 268 387 q 261 370 263 378 q 247 365 250 366 q 245 359 244 364 q 238 355 241 358 q 231 351 236 352 q 217 347 221 349 q 208 343 212 345 q 189 339 195 347 q 170 336 179 337 q 150 332 161 335 q 124 333 138 337 q 108 334 108 332 q 104 337 108 336 q 77 342 81 340 q 66 345 73 344 q 60 352 62 349 q 52 352 58 354 q 37 363 48 360 q 32 370 35 366 q 24 378 29 375 q 14 394 18 386 q 2 409 9 402 q 0 419 1 416 q -2 427 0 423 q -9 446 -6 443 q -14 467 -14 463 q -18 474 -14 472 q -21 501 -21 492 q -25 518 -21 511 q -24 530 -23 529 q -27 534 -25 531 q -25 552 -24 542 q -23 569 -25 561 q -22 580 -21 577 q -20 584 -23 583 q -19 600 -21 591 q -14 614 -17 610 q -14 625 -12 622 q -14 630 -16 628 q -5 652 -6 647 q -6 663 -4 657 q 0 674 -1 672 q 0 679 1 675 q 7 693 8 693 q 6 695 6 694 q 12 706 12 705 q 16 709 13 708 q 20 722 17 716 q 24 732 23 728 q 29 739 25 736 q 33 748 33 741 q 42 759 40 758 q 43 763 43 760 q 49 769 47 765 q 55 774 51 773 q 59 784 55 782 q 62 793 63 786 q 74 806 70 803 q 81 815 78 809 q 94 829 93 827 q 97 834 94 831 q 106 847 100 841 q 118 858 112 853 q 128 873 127 870 q 143 889 142 887 q 149 895 146 892 q 155 902 153 899 q 168 922 166 916 q 174 929 173 925 q 183 937 176 934 q 193 956 192 950 q 200 961 193 961 q 206 973 203 968 q 214 980 208 978 q 228 999 223 996 q 236 1005 233 1002 q 244 1021 242 1020 q 246 1025 246 1022 q 255 1032 252 1028 q 265 1040 259 1037 q 281 1061 278 1056 q 287 1072 284 1066 q 296 1078 293 1075 q 302 1085 299 1081 q 316 1091 314 1090 q 336 1093 329 1097 q 349 1085 343 1089 q 351 1074 351 1082 q 349 1062 352 1066 q 359 1047 360 1048 q 360 1043 358 1047 q 368 1023 368 1028 q 373 1018 368 1018 q 380 1000 377 1005 q 381 988 383 995 q 389 972 389 978 q 393 961 393 964 q 396 953 393 957 q 405 932 402 937 q 411 921 408 927 q 413 908 411 912 q 419 902 415 904 q 425 883 425 887 q 428 877 425 880 q 435 862 430 864 q 437 846 439 847 q 436 842 435 845 q 446 823 447 827 q 448 816 446 819 q 453 807 454 811 q 454 800 451 803 q 461 786 459 788 q 462 778 463 784 l 455 766 "},"c":{"x_min":21.25,"x_max":448.171875,"ha":496,"o":"m 330 44 q 316 39 324 39 q 301 36 309 39 q 293 34 297 36 q 286 31 290 32 q 265 32 271 33 q 252 29 260 31 q 242 28 248 29 q 234 29 237 27 q 223 34 226 35 q 219 36 221 33 q 198 34 206 35 q 179 33 189 33 q 171 38 176 36 q 164 44 166 40 q 139 52 149 51 q 126 62 130 52 q 106 71 108 66 q 96 75 104 75 q 84 85 84 84 l 77 99 q 65 118 65 105 q 56 130 59 124 q 52 150 52 137 q 45 155 47 154 q 40 161 43 157 q 35 176 37 169 q 29 196 28 189 q 24 208 29 202 q 25 221 24 215 q 24 233 25 226 q 22 243 21 241 q 23 248 23 245 q 21 257 23 252 q 23 268 20 263 q 35 319 31 295 q 44 366 40 343 q 56 385 51 371 q 66 398 65 397 q 77 409 74 406 q 86 417 81 415 q 93 425 90 420 q 105 434 100 428 q 113 444 109 439 q 133 459 128 454 q 146 466 138 463 q 163 478 160 470 q 176 484 166 485 q 183 489 179 486 q 191 495 187 492 q 204 501 198 499 q 218 507 210 504 q 231 512 225 510 q 245 516 238 514 q 271 518 264 515 q 284 523 279 520 q 301 520 299 522 q 306 519 303 519 q 318 520 313 519 q 329 518 322 520 q 342 513 335 515 q 356 510 349 511 q 382 495 366 499 q 392 476 389 481 q 402 469 396 470 q 406 461 404 465 q 411 451 408 457 q 416 438 415 447 q 417 424 417 430 q 415 413 415 415 q 413 409 416 411 q 409 391 412 396 q 400 383 406 386 q 387 366 392 371 q 378 356 383 360 q 362 349 364 354 q 344 343 345 344 q 330 333 335 333 q 324 329 326 333 q 297 344 298 329 q 309 359 307 356 q 314 360 310 362 q 316 375 317 371 q 316 383 316 379 q 317 392 316 387 q 314 400 318 396 q 302 408 303 408 q 298 412 301 409 q 288 421 288 419 q 286 424 288 423 q 272 431 276 431 q 264 432 268 431 q 252 439 256 439 q 245 440 248 439 q 223 446 225 446 q 214 444 218 446 q 204 446 210 443 q 198 443 200 443 q 188 442 195 443 q 173 438 177 438 q 164 431 169 438 q 149 413 151 416 q 146 405 146 411 q 137 389 139 393 q 137 382 134 385 q 129 367 128 368 q 128 363 130 366 q 122 330 123 343 q 119 306 120 318 q 116 291 116 293 q 119 274 119 278 q 123 259 123 261 q 126 257 123 256 q 139 215 128 226 q 144 201 139 207 q 150 187 149 195 q 158 175 155 181 q 166 165 160 169 q 174 149 173 150 q 177 147 176 149 l 188 137 q 197 131 196 134 q 200 126 198 128 q 217 118 214 123 q 231 111 227 118 q 240 108 238 112 q 248 105 241 104 q 268 99 260 100 q 279 92 276 97 q 288 92 284 94 q 298 90 293 90 q 316 88 309 88 q 325 90 321 88 q 333 92 329 92 q 350 96 345 92 q 362 99 355 100 q 371 105 367 101 q 383 109 375 108 q 389 116 387 112 q 396 120 390 120 q 402 125 396 126 q 406 131 408 124 q 424 143 421 145 q 428 147 427 141 q 438 147 434 147 q 447 147 443 146 q 439 130 450 134 l 428 113 q 418 105 419 105 q 417 103 417 105 q 400 88 405 94 q 393 77 394 81 q 385 70 386 75 q 377 65 383 65 q 360 55 370 56 q 344 47 349 54 l 330 44 "},"&":{"x_min":75.203125,"x_max":1058.03125,"ha":982,"o":"m 1039 930 q 1049 911 1043 922 q 1048 889 1055 900 q 1052 881 1053 887 q 1047 873 1051 874 q 1053 870 1048 870 q 1058 862 1058 869 q 1053 846 1055 850 q 1055 835 1052 842 q 1049 818 1051 822 q 1047 812 1047 815 q 1029 800 1033 800 q 1020 786 1022 788 q 1018 778 1018 784 q 992 762 1003 767 q 985 755 988 758 q 975 751 982 752 q 957 733 959 739 l 940 727 q 933 718 937 720 q 925 712 929 716 q 913 706 921 709 q 902 697 906 704 q 884 689 885 697 q 870 682 874 682 q 861 676 862 675 q 857 675 859 676 q 833 662 841 667 q 820 652 826 657 q 800 646 809 649 q 784 636 790 642 q 771 636 777 638 q 760 632 766 634 q 764 621 760 622 q 770 619 767 621 q 779 612 778 615 q 785 610 779 609 q 801 599 797 599 q 808 591 804 594 q 816 585 812 588 q 831 568 826 569 q 841 550 831 560 q 849 534 846 539 q 855 522 853 529 q 867 502 864 505 q 866 496 870 499 q 880 470 873 477 q 879 455 876 463 q 877 440 883 447 q 881 425 878 432 q 883 412 884 419 q 879 398 878 398 q 880 394 880 397 q 880 385 881 390 q 881 378 878 381 q 878 361 878 363 q 874 358 877 359 q 874 339 873 341 q 873 332 874 336 q 868 319 872 322 q 868 313 865 316 q 862 302 859 302 q 861 298 864 302 q 849 284 851 286 q 846 279 846 282 q 832 257 834 274 q 821 252 826 255 q 816 241 816 249 q 808 235 809 240 q 800 229 807 230 q 794 219 800 222 q 788 210 789 217 q 777 202 778 204 q 775 196 775 199 q 760 187 767 188 q 755 177 754 185 q 745 173 748 177 q 735 168 741 169 q 728 160 731 165 q 717 155 725 155 q 712 146 714 151 q 705 138 709 141 q 687 132 690 135 q 678 126 683 128 q 657 112 661 115 q 645 107 652 109 q 623 94 629 97 q 610 88 617 92 q 588 76 592 80 q 579 71 584 73 q 564 63 571 67 q 552 57 556 59 q 542 55 549 55 q 529 50 529 51 q 527 48 529 48 q 517 44 523 46 q 508 39 511 43 q 487 35 497 36 q 469 27 477 33 q 451 23 453 21 q 448 23 450 24 q 422 16 431 16 q 405 13 413 17 q 389 14 392 16 q 383 12 386 13 q 366 13 374 10 q 352 16 359 16 q 334 18 337 18 q 329 21 330 17 q 313 25 318 18 q 297 31 307 32 q 264 48 271 37 q 246 54 253 48 q 229 63 240 61 q 217 73 221 70 q 210 78 212 75 q 197 86 198 84 q 192 89 196 89 q 187 95 189 92 q 180 99 185 99 q 169 112 176 107 q 160 127 162 118 q 146 141 150 137 q 138 151 141 145 q 130 161 135 158 q 121 179 124 179 q 120 185 118 180 q 105 209 109 203 q 99 226 100 215 q 94 235 94 229 q 90 244 93 241 q 88 263 88 261 q 82 264 88 264 q 81 277 81 271 q 80 290 81 283 q 75 315 74 303 q 77 335 75 326 q 80 352 77 341 q 82 368 81 366 q 84 374 84 371 q 83 388 84 381 q 89 401 82 396 q 91 415 89 415 q 94 419 93 416 q 96 434 92 425 q 105 447 101 442 q 107 465 108 463 q 107 467 107 466 q 113 479 109 474 q 116 491 118 484 q 122 499 122 493 q 128 507 123 504 q 138 523 132 520 q 145 533 141 529 q 153 541 150 537 q 161 553 161 552 q 162 556 161 554 q 176 573 172 562 q 191 590 187 577 q 212 610 207 599 l 223 622 q 233 630 230 629 q 237 633 236 632 q 250 648 246 644 q 261 655 255 652 q 287 678 279 667 q 303 687 299 686 q 305 691 306 687 q 322 701 320 699 q 328 702 324 702 q 364 724 355 713 q 340 734 348 731 q 328 747 332 737 q 322 752 325 750 q 316 758 320 755 q 310 776 313 773 q 307 785 307 779 q 308 802 306 793 q 310 820 310 811 q 323 839 317 835 q 330 850 329 843 q 343 862 341 861 q 343 865 344 862 q 356 878 352 877 q 360 885 360 880 q 377 892 367 885 q 393 906 387 903 q 401 915 398 910 q 420 927 419 921 q 437 933 431 930 q 444 940 443 935 q 463 946 461 949 q 480 958 477 956 q 485 963 482 960 q 499 968 496 967 q 507 972 503 969 q 522 975 522 975 q 524 978 522 976 q 539 980 538 980 q 543 979 541 979 q 550 981 546 979 q 560 982 553 983 q 583 980 579 982 q 594 980 588 978 q 602 977 596 978 q 610 973 607 976 q 628 973 623 972 q 636 975 633 975 q 645 971 641 973 q 655 969 649 968 q 661 964 657 967 q 671 964 666 961 q 680 946 679 949 q 686 941 680 942 q 689 932 687 935 q 697 927 691 929 l 710 902 q 729 912 727 910 q 746 918 741 915 q 754 918 750 921 q 768 923 760 925 q 786 923 775 922 q 785 902 786 904 q 762 887 763 895 l 747 883 q 724 868 731 874 q 716 851 716 858 q 693 838 695 845 q 685 827 690 831 q 679 827 682 832 q 670 824 676 822 q 659 814 663 816 q 653 809 656 812 q 642 805 647 809 q 626 805 637 800 q 618 824 621 819 q 617 842 619 841 q 613 846 614 843 q 605 862 607 859 q 599 866 603 865 q 597 875 600 873 q 592 883 594 877 q 577 888 584 884 q 567 894 573 891 q 553 899 560 897 q 534 905 539 903 q 522 907 529 907 q 504 907 508 906 q 495 908 500 908 q 484 907 489 908 q 476 906 480 906 q 464 906 469 906 q 454 902 459 906 q 444 896 451 899 q 435 891 438 893 q 419 878 421 880 q 412 873 416 876 q 407 862 411 866 q 400 854 404 858 q 403 838 404 841 q 402 834 402 836 q 417 811 406 822 q 425 803 424 804 q 430 798 427 801 q 444 786 443 789 q 453 785 446 784 q 466 777 465 778 q 480 771 480 773 q 481 770 480 770 q 490 771 482 770 q 501 771 497 771 q 519 777 515 774 q 541 777 530 773 q 571 773 554 773 q 579 774 573 773 q 587 774 585 775 q 597 767 594 767 q 602 765 600 767 q 611 763 609 765 q 618 763 614 760 q 621 748 622 751 q 617 748 621 746 q 613 732 617 735 q 603 729 610 729 q 590 714 592 717 q 583 710 587 712 q 573 706 575 705 q 565 706 571 708 l 545 698 q 522 693 529 695 q 512 694 516 691 q 494 693 497 691 q 484 691 491 694 q 467 695 473 693 q 459 699 462 697 q 444 697 447 697 q 438 698 440 698 q 416 693 421 693 q 406 690 411 693 q 392 687 392 694 q 363 676 367 678 q 355 673 359 674 q 348 667 351 672 q 328 659 337 660 q 311 647 313 652 q 303 641 310 641 q 292 632 294 634 q 286 629 291 629 q 274 615 278 615 q 271 609 271 614 q 264 602 267 606 q 255 596 261 598 q 242 579 244 580 q 230 566 231 569 q 225 561 229 562 q 214 538 217 546 q 195 500 192 518 q 190 493 192 497 q 185 486 188 489 q 185 467 183 470 q 184 465 187 465 q 178 450 181 454 q 173 443 174 446 q 168 428 166 430 q 169 424 169 427 q 167 394 170 404 q 168 374 164 383 q 168 333 169 351 q 173 324 172 330 q 177 311 174 318 q 179 292 177 297 q 185 286 181 288 q 192 263 192 267 q 204 245 203 248 q 208 240 206 242 q 213 227 211 231 q 221 222 215 223 q 233 196 231 203 q 243 184 241 185 q 248 181 245 183 q 253 165 248 169 q 263 164 259 161 q 273 156 268 160 q 280 146 278 153 q 295 135 295 138 q 298 131 295 132 q 322 122 314 124 q 335 113 329 119 q 365 103 351 105 q 389 92 379 100 q 408 88 397 92 q 429 81 421 81 q 447 81 438 81 q 455 80 451 82 q 462 78 458 78 q 476 80 474 81 q 480 80 477 80 q 497 82 495 82 q 501 81 500 81 q 516 86 514 88 q 520 85 518 85 q 529 90 523 88 q 538 90 534 92 q 560 96 554 99 q 565 102 562 99 q 575 103 568 105 q 585 109 583 108 q 590 112 587 109 q 609 120 603 115 q 623 128 614 126 q 638 137 637 135 q 651 145 649 143 q 655 149 652 147 q 671 162 667 155 q 682 171 680 169 q 687 172 683 173 q 696 179 694 177 q 699 184 698 181 q 710 192 706 187 q 720 200 713 198 q 730 215 728 210 q 739 221 732 219 q 748 238 744 234 q 756 246 754 244 q 760 248 758 249 q 769 264 766 255 q 775 282 771 274 q 777 295 775 294 q 782 297 778 297 q 781 309 778 307 q 785 311 785 310 q 786 326 785 325 q 787 338 786 335 q 785 345 788 341 q 788 356 788 351 q 786 367 788 360 q 786 385 790 382 q 785 394 781 387 l 785 411 q 782 418 782 413 q 777 425 782 423 q 775 435 779 431 q 774 447 771 439 q 766 463 769 454 q 755 477 763 473 q 753 490 754 485 q 750 497 752 495 q 738 511 741 508 q 728 516 735 514 q 722 528 729 524 q 712 539 714 531 q 699 546 701 545 q 698 550 698 548 q 689 554 691 550 q 680 558 686 557 q 656 567 664 564 q 637 572 648 571 q 609 580 629 577 q 584 580 592 579 q 569 576 576 581 q 549 571 553 573 q 541 567 545 569 l 526 562 q 505 557 507 558 q 486 548 495 553 q 474 543 474 543 q 472 539 474 542 q 461 535 463 537 q 457 533 459 534 q 441 518 448 526 q 428 499 434 510 q 419 488 416 488 q 420 484 421 488 l 404 432 q 403 419 402 427 q 400 409 404 412 q 405 392 402 394 q 408 385 408 390 q 405 368 402 370 q 411 363 408 366 q 415 349 413 349 q 417 347 416 348 q 429 330 424 332 q 435 321 435 328 q 445 313 443 313 q 450 310 447 313 q 472 302 455 305 q 491 297 481 302 q 512 291 501 291 q 521 283 512 280 q 537 283 530 286 q 532 273 537 275 q 526 264 527 271 l 505 257 q 495 245 495 245 q 478 241 481 244 q 469 240 476 238 q 442 238 451 236 q 420 240 432 240 q 410 248 411 249 q 406 248 409 248 q 385 256 390 256 l 370 257 q 362 265 368 259 q 356 274 356 271 q 347 288 349 287 q 341 290 345 290 q 330 307 336 303 q 324 343 324 329 q 321 355 320 352 q 322 360 322 358 q 318 371 320 368 q 317 377 317 374 q 319 391 317 390 q 321 394 321 392 q 322 416 320 412 q 324 424 324 420 q 331 444 329 440 q 336 451 333 448 q 343 471 341 469 q 344 476 344 473 q 355 491 355 480 q 369 510 366 497 q 386 526 373 522 q 400 548 398 545 q 411 550 411 548 q 415 554 412 553 l 431 562 q 442 571 442 569 q 444 575 442 573 q 459 587 458 580 l 481 592 q 489 599 484 596 q 496 606 493 602 q 519 615 515 611 q 527 621 523 618 q 542 628 541 621 q 564 632 556 628 q 583 638 572 637 q 595 646 591 647 q 603 645 599 645 q 623 652 619 651 q 630 653 626 652 q 638 655 633 655 q 663 661 656 660 q 675 668 670 661 q 691 670 689 667 q 697 670 694 672 q 731 679 720 678 q 751 686 743 680 q 758 685 754 683 q 769 686 763 687 q 778 690 773 690 q 789 691 784 690 q 796 693 793 693 q 805 695 800 694 q 813 697 809 697 q 823 698 816 698 q 838 704 827 699 q 862 714 857 710 q 873 718 866 718 q 889 731 887 728 q 899 733 892 733 q 912 744 906 737 q 926 752 918 750 q 941 762 940 760 q 953 771 950 767 q 959 778 956 775 l 969 790 q 972 803 972 797 q 976 811 972 808 q 983 831 976 824 q 979 846 980 842 q 976 860 975 859 q 978 864 978 861 q 971 878 971 873 q 971 885 972 883 q 961 902 963 900 q 956 904 960 903 q 953 914 957 911 q 946 921 949 918 q 942 935 946 934 q 933 937 938 935 q 921 950 921 948 q 918 953 921 952 q 900 963 903 957 q 900 981 902 980 q 900 986 897 982 q 914 994 912 992 q 918 998 915 996 q 928 995 923 996 q 937 996 933 994 q 956 988 953 990 q 963 983 960 986 q 971 983 968 984 q 978 982 973 982 q 989 973 986 976 q 998 971 992 971 q 1014 960 1011 960 q 1029 946 1024 948 q 1036 941 1034 944 l 1039 930 "},"I":{"x_min":62.390625,"x_max":630.75,"ha":735,"o":"m 481 1064 q 489 1048 486 1058 q 489 1023 486 1029 q 488 1010 491 1017 q 491 1002 491 1006 q 493 992 491 998 q 495 977 495 978 q 497 973 496 976 q 499 954 497 959 q 501 945 500 949 q 505 926 503 931 q 504 915 507 921 l 507 899 q 512 881 511 891 q 518 864 514 870 q 519 841 522 846 q 524 828 527 828 q 523 823 522 827 l 529 808 q 527 798 526 801 q 529 792 529 794 q 533 763 531 774 q 538 744 534 751 q 539 731 539 733 q 539 727 538 729 q 542 720 541 722 q 542 710 543 717 q 545 694 542 699 q 550 676 548 680 q 553 670 552 672 q 554 652 553 659 q 557 631 557 638 q 564 621 557 623 q 562 615 561 618 q 564 606 564 611 q 572 587 567 590 q 572 573 569 580 q 577 560 575 565 q 576 535 577 542 q 581 522 579 524 q 585 518 583 520 l 588 497 q 590 486 588 491 q 591 474 592 481 q 596 461 598 461 q 594 458 594 461 q 596 445 598 446 q 596 442 595 444 q 598 419 592 425 q 600 404 604 413 q 607 392 603 397 q 609 377 610 387 q 611 359 611 360 q 614 342 613 347 q 615 332 615 337 q 616 316 617 325 q 617 301 615 307 q 613 284 613 288 q 618 278 614 279 q 617 261 619 260 q 615 256 614 261 q 617 244 618 246 q 615 240 615 242 q 619 222 619 225 q 618 217 618 219 q 621 206 619 211 q 623 192 623 200 q 626 166 626 170 q 626 148 625 154 q 628 137 628 142 q 628 128 629 134 q 630 120 628 123 l 629 92 q 628 79 628 80 q 629 77 629 78 q 627 58 626 61 q 625 52 628 55 q 626 40 628 43 q 625 35 625 37 q 623 20 626 25 q 624 8 625 14 q 622 0 623 2 q 623 -17 623 -12 q 622 -31 622 -23 q 622 -42 621 -37 q 619 -48 623 -46 q 621 -69 623 -52 q 618 -88 621 -74 q 614 -111 617 -108 q 608 -134 611 -128 q 603 -149 604 -139 q 592 -170 598 -166 q 589 -185 592 -180 q 584 -199 585 -191 q 572 -214 577 -210 q 567 -227 567 -218 q 556 -236 560 -230 q 548 -248 553 -242 q 531 -265 537 -259 q 520 -279 526 -271 q 505 -290 507 -286 q 501 -297 504 -294 q 493 -302 499 -299 q 486 -310 488 -305 q 476 -321 477 -320 q 477 -325 476 -322 q 462 -329 465 -330 q 457 -326 459 -328 q 438 -343 440 -339 q 431 -349 435 -347 q 420 -353 421 -352 q 417 -356 419 -354 l 404 -364 q 394 -368 397 -368 q 387 -370 390 -368 q 380 -375 383 -373 q 371 -381 377 -378 q 360 -387 360 -386 q 356 -389 359 -387 q 348 -396 351 -396 q 343 -398 345 -396 q 325 -398 326 -396 q 321 -400 324 -400 q 303 -394 311 -400 q 260 -402 275 -401 q 229 -405 245 -404 q 210 -400 219 -398 q 193 -398 200 -401 q 180 -393 181 -396 q 173 -392 179 -390 q 165 -387 170 -387 q 155 -383 160 -386 q 150 -379 153 -382 q 142 -374 147 -377 q 128 -362 130 -362 q 126 -362 127 -363 q 122 -349 120 -352 q 124 -344 123 -347 q 108 -340 118 -340 q 102 -335 104 -339 q 96 -329 100 -332 q 99 -315 100 -317 q 94 -314 99 -313 q 94 -305 97 -309 q 90 -297 92 -302 q 94 -282 90 -290 q 94 -267 97 -275 q 101 -249 103 -252 q 101 -241 100 -246 q 115 -214 109 -221 q 126 -195 120 -207 q 136 -181 135 -184 q 141 -176 137 -177 q 147 -164 146 -168 q 150 -157 149 -161 q 164 -158 157 -157 q 176 -157 170 -160 q 172 -183 179 -174 q 169 -203 166 -191 q 162 -217 160 -215 q 164 -221 165 -218 q 163 -229 162 -225 q 164 -237 164 -233 q 166 -252 166 -250 q 165 -255 165 -253 q 172 -265 168 -261 q 174 -275 176 -268 q 185 -284 184 -284 q 189 -286 187 -284 l 208 -306 q 217 -310 214 -307 q 227 -311 221 -313 q 244 -320 233 -320 q 258 -324 253 -322 q 265 -325 263 -325 q 283 -325 282 -322 q 287 -328 284 -328 q 305 -326 301 -325 q 316 -326 310 -328 q 328 -326 326 -325 q 332 -328 329 -328 q 347 -327 347 -326 q 348 -328 347 -328 q 360 -326 354 -328 q 370 -322 366 -324 q 389 -317 382 -318 q 404 -313 397 -316 q 418 -305 411 -307 q 430 -295 425 -302 q 444 -287 442 -288 q 447 -283 446 -286 q 463 -271 463 -276 q 467 -267 462 -267 q 486 -244 481 -252 q 497 -230 491 -237 q 500 -217 497 -222 q 507 -208 503 -212 q 507 -198 505 -202 q 512 -192 510 -195 q 520 -165 516 -170 q 520 -153 523 -160 q 525 -141 523 -147 q 524 -127 527 -134 q 529 -113 531 -115 q 529 -109 527 -112 q 531 -103 531 -107 q 531 -92 530 -99 q 535 -85 533 -89 q 537 -75 537 -81 q 535 -57 534 -62 q 533 -48 535 -52 q 533 -27 534 -31 q 530 -18 531 -24 q 533 -6 534 -6 q 531 -2 531 -5 q 533 7 534 2 q 535 14 533 12 q 533 27 533 18 q 535 40 533 36 q 534 70 537 58 q 532 92 531 89 q 533 101 533 96 q 531 119 531 116 q 533 124 530 122 q 531 139 530 138 q 531 142 531 139 q 530 150 531 146 q 527 161 529 154 q 526 176 526 176 q 525 200 524 189 q 526 221 526 211 q 524 228 526 223 q 526 236 523 233 q 522 252 523 252 q 520 256 520 253 q 520 271 522 267 q 518 279 519 275 q 516 299 516 294 q 515 309 516 305 q 512 329 511 326 q 512 335 512 332 q 509 354 508 349 q 510 366 510 359 q 504 393 507 385 q 503 408 501 401 q 506 424 505 423 q 507 428 507 425 q 503 446 504 444 q 499 448 501 448 q 498 458 499 455 q 497 466 497 461 q 501 480 504 477 q 501 485 499 482 q 490 501 493 500 q 486 504 486 501 q 487 517 489 518 q 482 519 485 516 q 481 539 484 537 q 478 545 478 542 q 470 570 469 562 q 466 584 470 577 q 463 600 463 599 q 461 609 463 604 q 458 621 459 614 q 457 638 458 637 q 455 641 455 640 q 458 651 457 647 q 457 661 459 655 q 453 671 455 667 q 453 679 450 675 q 444 699 444 694 q 442 713 444 705 q 439 723 440 718 q 438 735 438 728 q 433 757 432 751 q 430 767 434 763 q 429 782 434 775 q 423 793 425 789 q 419 822 427 809 q 416 849 412 834 q 413 865 409 854 q 411 880 417 876 q 408 893 409 891 q 404 897 406 895 q 397 918 405 911 q 388 904 389 906 q 383 904 387 903 q 378 891 378 892 q 377 887 378 891 q 365 873 370 876 q 363 864 360 870 q 353 855 355 857 q 349 850 351 853 q 341 834 344 839 q 336 824 339 830 q 332 819 333 822 q 332 809 330 816 q 320 794 325 798 q 314 779 314 790 q 299 753 305 759 q 287 740 294 747 q 281 723 282 725 q 278 721 280 721 q 267 706 275 710 q 257 693 259 698 q 249 685 255 687 q 242 670 244 672 q 237 663 240 667 q 227 642 231 653 q 217 625 223 632 q 213 615 214 617 q 210 611 212 613 q 204 591 208 595 q 202 580 204 584 q 198 573 200 576 q 194 557 198 562 q 187 545 191 552 q 185 535 187 538 q 184 524 183 531 q 176 509 179 512 q 172 501 173 505 q 170 481 173 489 q 169 468 169 474 q 162 458 169 462 q 163 434 164 443 q 157 421 162 425 q 158 402 158 406 q 155 390 158 397 q 151 363 150 374 q 146 347 153 352 q 146 329 145 337 q 150 314 147 321 l 146 299 q 149 278 147 282 q 149 272 150 275 q 146 261 143 260 q 151 257 149 261 q 154 237 146 249 q 155 224 155 227 q 157 218 155 221 q 164 200 162 200 q 171 185 169 185 q 170 180 173 184 q 180 166 179 168 q 184 162 181 165 q 195 146 180 149 q 204 134 202 138 q 212 130 207 131 q 229 113 223 119 q 242 101 236 108 q 259 103 250 103 q 269 96 267 103 q 288 91 279 94 q 306 84 297 88 q 324 82 322 84 q 328 81 325 81 q 345 81 341 82 q 352 85 349 80 q 393 88 382 82 q 413 87 409 92 q 424 80 417 82 q 426 70 425 74 q 427 59 427 66 q 413 48 415 48 q 409 47 411 48 q 401 35 402 36 q 400 31 400 35 q 389 22 390 27 q 383 16 389 17 q 364 0 373 1 q 344 -1 356 -1 q 333 0 339 -1 q 322 1 328 1 q 299 0 307 0 q 282 -1 290 0 q 261 2 269 1 q 245 0 252 2 q 237 3 242 2 q 227 2 231 4 q 220 7 223 5 q 211 12 217 9 q 191 14 199 9 q 173 18 184 18 q 157 29 158 24 q 149 36 155 35 q 140 44 141 40 q 134 48 139 48 q 124 59 124 59 q 123 62 123 59 q 105 77 107 74 q 98 90 100 89 q 93 92 96 90 q 93 109 93 107 q 92 115 93 112 q 85 124 89 120 q 78 135 81 128 q 74 153 80 150 q 73 168 74 166 l 65 191 q 65 219 62 211 q 62 234 67 227 q 62 253 63 250 q 63 265 65 260 q 62 278 62 271 q 65 296 63 293 q 65 305 67 299 q 69 312 69 307 q 73 321 70 317 q 71 337 69 328 q 70 354 73 345 q 76 369 75 358 q 74 390 77 381 q 80 402 80 400 q 78 405 81 405 q 84 423 85 412 q 88 443 84 434 q 94 463 92 458 q 96 473 97 467 q 103 483 105 481 q 103 491 101 485 q 106 503 107 501 q 107 507 105 504 q 114 523 113 522 q 113 529 115 524 q 118 540 118 533 q 124 552 118 548 q 126 561 124 557 q 131 571 128 565 l 138 591 q 153 615 146 610 q 160 630 160 619 q 169 640 170 638 q 168 644 168 641 q 177 655 174 653 q 181 659 179 657 q 186 668 183 666 q 192 678 189 671 q 203 694 200 693 q 208 698 206 695 q 215 715 214 713 q 219 720 217 717 q 226 729 222 725 q 233 737 230 733 q 237 755 234 744 q 242 765 240 760 q 248 774 245 769 q 252 790 252 779 q 270 815 265 809 q 279 827 275 820 q 282 836 280 832 q 288 842 283 841 q 291 849 288 847 q 297 855 294 851 q 307 870 306 866 q 310 877 307 873 q 318 886 318 883 q 320 892 317 889 q 332 903 329 903 q 338 912 337 910 q 343 915 339 915 q 347 925 343 922 q 352 934 351 927 q 358 946 356 944 q 359 956 359 949 q 375 975 370 972 q 379 986 381 978 q 390 1003 387 995 q 396 1017 393 1010 q 419 1036 411 1033 q 430 1048 427 1039 q 446 1055 446 1055 q 451 1056 447 1055 q 470 1062 467 1067 l 481 1064 "},"G":{"x_min":-69.171875,"x_max":1205.875,"ha":1276,"o":"m 921 572 q 903 565 910 571 q 889 552 896 560 q 876 541 878 546 q 864 536 866 538 q 861 531 862 534 q 847 524 851 526 q 841 516 843 522 q 826 510 828 510 q 809 499 812 500 q 808 495 807 499 l 793 488 q 779 480 781 481 q 775 476 778 478 l 762 467 q 747 457 750 461 q 741 451 744 453 q 723 442 727 444 q 714 438 720 439 q 706 430 708 434 q 702 427 704 427 q 687 417 689 417 q 685 416 686 417 q 674 409 676 412 q 664 408 671 406 q 656 402 661 404 q 648 394 651 400 q 638 392 641 394 q 633 387 636 390 q 614 383 622 386 q 594 377 606 379 q 554 354 564 363 q 541 351 546 354 q 533 345 537 348 q 521 344 526 347 q 511 339 516 341 q 498 334 504 336 q 485 326 492 332 q 470 323 472 322 q 463 321 467 324 q 447 314 458 320 q 423 309 430 309 q 411 303 416 309 q 397 301 400 303 q 392 297 394 299 q 367 292 377 297 q 343 288 358 288 q 318 284 326 284 q 303 283 310 284 q 288 281 290 280 q 284 282 287 282 q 268 279 271 278 q 261 279 265 280 q 257 271 257 276 q 253 264 256 267 q 254 255 253 259 q 253 245 255 252 q 249 227 250 229 q 249 218 248 225 q 249 208 248 214 q 250 199 250 202 q 252 183 249 191 q 252 164 253 169 q 252 153 250 160 q 252 138 250 138 q 253 124 252 127 q 256 116 255 120 q 256 105 255 107 q 257 101 257 104 q 259 82 256 85 q 257 75 263 78 q 265 54 265 69 q 271 45 268 50 q 272 36 275 40 q 278 23 276 27 q 282 16 279 20 q 290 -1 286 2 q 297 -10 294 -5 q 301 -27 298 -24 q 305 -37 305 -31 q 311 -46 310 -40 q 324 -51 313 -52 q 346 -86 335 -74 q 370 -109 358 -99 q 385 -118 381 -113 q 394 -124 392 -124 q 397 -127 397 -124 q 425 -139 412 -139 l 439 -146 q 446 -150 442 -150 q 455 -151 451 -150 q 469 -156 462 -154 q 486 -160 476 -158 q 503 -160 501 -158 q 507 -161 504 -161 q 517 -160 512 -161 q 529 -158 522 -158 l 543 -160 q 560 -155 552 -157 q 577 -151 569 -154 q 591 -151 587 -153 q 599 -147 595 -150 q 607 -147 602 -149 q 614 -146 611 -146 q 634 -143 630 -142 q 640 -142 637 -143 q 653 -139 652 -137 q 656 -139 653 -141 q 672 -132 668 -131 q 678 -127 676 -132 q 689 -125 685 -127 q 701 -122 694 -123 q 712 -113 710 -115 q 716 -112 713 -112 q 733 -104 731 -105 q 737 -101 735 -103 q 754 -93 752 -94 q 758 -90 755 -92 q 773 -80 771 -81 q 777 -80 774 -80 q 784 -75 779 -77 q 790 -70 788 -73 q 815 -55 809 -59 q 826 -44 822 -51 q 841 -37 841 -39 q 846 -31 843 -35 q 851 -24 849 -28 q 862 -20 859 -21 q 868 -16 865 -18 q 895 6 885 0 q 910 25 906 13 q 922 41 918 39 q 926 50 926 43 q 937 59 937 59 q 940 59 938 58 q 946 69 944 66 q 952 75 949 71 q 961 84 959 82 q 961 93 963 86 q 973 106 969 105 q 975 109 976 107 q 983 118 980 112 q 990 126 986 123 q 999 138 995 138 q 1003 147 999 145 q 1006 157 1006 150 q 1018 168 1017 166 q 1021 169 1018 170 q 1036 189 1026 187 q 1040 200 1037 196 q 1043 210 1043 203 q 1060 229 1055 219 q 1072 245 1064 238 q 1083 269 1082 260 q 1089 283 1083 278 q 1092 297 1090 297 q 1094 301 1094 298 q 1096 314 1091 310 q 1101 326 1100 317 q 1111 330 1109 328 q 1117 335 1113 333 q 1127 341 1125 340 q 1132 343 1128 343 q 1161 367 1152 356 q 1176 374 1169 370 q 1193 381 1182 378 q 1197 369 1193 373 q 1200 356 1201 366 q 1192 339 1193 341 q 1190 332 1190 336 q 1181 314 1182 317 q 1181 305 1180 311 q 1176 290 1177 295 q 1174 282 1174 286 q 1174 267 1174 272 q 1171 256 1173 263 q 1170 240 1171 248 q 1167 225 1169 231 q 1168 213 1169 214 q 1167 210 1167 212 q 1167 181 1171 192 q 1169 160 1169 169 q 1174 143 1169 150 q 1172 132 1171 139 q 1176 120 1173 126 q 1175 104 1176 105 q 1174 101 1174 103 q 1175 84 1174 94 q 1178 66 1176 73 q 1176 59 1176 62 q 1178 50 1177 55 q 1181 31 1180 36 q 1184 18 1182 25 q 1185 6 1185 12 q 1189 -5 1185 1 q 1190 -37 1190 -21 q 1196 -63 1189 -54 q 1193 -82 1196 -77 q 1197 -98 1195 -94 q 1200 -107 1199 -101 q 1200 -122 1201 -113 q 1204 -139 1199 -131 q 1201 -152 1200 -146 q 1203 -165 1201 -158 q 1205 -184 1203 -179 q 1201 -200 1204 -198 q 1203 -214 1201 -210 q 1201 -218 1204 -218 q 1201 -232 1203 -231 q 1200 -236 1200 -233 q 1197 -255 1199 -252 q 1195 -267 1193 -264 q 1193 -274 1196 -271 q 1189 -285 1189 -280 q 1188 -293 1189 -290 q 1176 -309 1176 -305 q 1166 -323 1165 -320 q 1165 -329 1167 -326 q 1157 -337 1159 -335 q 1152 -343 1155 -340 q 1146 -349 1150 -345 q 1139 -359 1143 -354 q 1125 -371 1125 -368 q 1121 -374 1124 -374 l 1109 -390 q 1095 -400 1102 -396 q 1081 -411 1087 -404 q 1065 -420 1066 -419 q 1062 -424 1064 -421 q 1043 -436 1048 -435 q 1036 -444 1039 -438 q 1025 -448 1029 -444 q 1017 -454 1021 -451 q 1005 -457 1009 -454 q 995 -462 1002 -461 q 974 -475 982 -472 q 956 -476 967 -478 q 912 -482 929 -476 q 893 -478 902 -478 q 873 -476 884 -477 q 871 -460 874 -461 q 866 -454 868 -459 q 874 -434 876 -439 q 869 -424 872 -430 q 880 -413 880 -416 q 883 -408 880 -411 q 890 -406 887 -408 q 899 -404 893 -405 q 919 -411 916 -400 q 936 -415 930 -412 q 952 -421 942 -419 q 973 -419 963 -417 q 995 -417 984 -420 q 1005 -413 1001 -416 q 1015 -412 1009 -409 q 1030 -404 1022 -406 q 1044 -397 1037 -401 q 1055 -384 1056 -386 q 1056 -378 1053 -382 q 1068 -369 1063 -370 q 1071 -363 1074 -368 q 1081 -354 1079 -355 q 1082 -345 1083 -352 q 1092 -330 1091 -337 q 1091 -326 1093 -324 q 1096 -312 1096 -317 q 1097 -303 1096 -307 q 1104 -276 1105 -284 q 1110 -264 1104 -268 q 1108 -253 1106 -260 q 1112 -244 1109 -246 q 1108 -236 1109 -241 q 1112 -227 1108 -230 q 1106 -214 1108 -218 q 1106 -207 1104 -210 q 1103 -189 1102 -199 q 1104 -170 1104 -180 q 1102 -154 1102 -162 q 1104 -138 1101 -146 q 1098 -121 1100 -124 q 1096 -113 1097 -118 q 1095 -92 1094 -104 q 1093 -70 1096 -81 q 1091 -60 1093 -65 q 1089 -50 1090 -55 q 1090 -41 1089 -46 q 1089 -33 1091 -36 q 1083 -10 1086 -17 q 1085 2 1081 -4 q 1083 18 1081 13 q 1079 35 1078 25 q 1077 54 1079 46 q 1077 68 1079 66 q 1075 74 1075 70 q 1073 98 1078 88 q 1072 119 1068 108 q 1068 141 1072 134 q 1067 151 1064 147 q 1054 132 1058 139 q 1044 120 1051 126 q 1032 105 1036 109 q 1026 93 1029 100 q 1012 81 1017 89 q 999 69 1007 73 q 992 57 994 61 q 984 51 990 54 q 976 37 978 40 q 971 32 973 35 q 965 27 968 29 q 953 14 954 16 q 949 12 952 12 q 944 5 945 9 q 937 2 944 1 q 930 -10 930 -8 q 919 -16 921 -13 q 915 -16 918 -18 q 898 -29 908 -24 q 883 -46 888 -35 q 859 -63 869 -50 q 850 -66 853 -63 q 845 -71 847 -69 q 823 -86 828 -82 q 813 -96 817 -90 q 786 -113 797 -100 q 772 -119 774 -116 q 767 -124 770 -122 q 757 -129 758 -127 q 754 -132 756 -131 q 739 -138 741 -137 q 725 -149 728 -142 q 710 -154 714 -150 q 701 -162 705 -158 q 685 -166 690 -161 q 675 -174 680 -170 q 660 -180 661 -177 q 656 -185 659 -183 q 640 -189 648 -187 q 629 -196 633 -191 q 619 -196 622 -195 q 613 -200 615 -198 q 604 -200 607 -198 q 596 -206 602 -203 q 585 -207 590 -207 q 576 -211 580 -207 q 554 -214 565 -211 q 533 -219 543 -217 q 521 -220 526 -221 q 510 -222 516 -219 q 500 -224 501 -226 q 495 -222 499 -222 q 485 -224 488 -221 q 478 -223 482 -227 q 459 -229 465 -227 q 447 -226 453 -230 q 430 -227 431 -227 q 425 -227 430 -226 q 411 -229 415 -229 q 402 -227 406 -230 q 392 -223 397 -226 q 381 -223 386 -221 q 347 -212 363 -214 q 336 -206 337 -210 q 329 -206 335 -203 q 324 -198 326 -202 q 316 -195 322 -195 q 302 -185 303 -188 q 297 -184 301 -183 q 286 -170 290 -176 q 276 -161 282 -165 q 270 -155 274 -158 q 263 -150 267 -153 l 252 -137 q 244 -126 248 -128 q 241 -119 241 -123 q 233 -110 233 -112 q 231 -105 234 -108 q 219 -92 221 -96 q 218 -84 218 -89 q 205 -75 207 -78 q 203 -69 203 -73 q 195 -60 196 -62 q 192 -55 193 -58 q 188 -42 189 -43 q 185 -39 187 -42 q 181 -20 183 -24 q 180 -9 180 -16 q 173 9 176 1 q 168 35 169 24 q 162 51 166 46 q 160 74 161 66 q 160 91 160 82 q 160 109 160 100 q 160 124 160 119 q 160 146 160 131 q 161 168 160 161 q 165 195 162 187 q 172 227 169 210 q 180 257 176 244 q 185 265 184 260 q 187 276 185 271 q 170 278 173 280 q 164 279 168 279 q 155 280 160 279 q 131 284 139 284 q 118 290 123 284 q 105 295 105 294 q 104 299 105 297 q 90 299 92 299 q 82 297 88 299 q 72 306 73 303 q 69 311 71 309 q 56 318 61 316 q 47 317 52 321 q 40 324 44 322 q 31 329 35 326 q 22 335 25 332 q 13 339 18 337 q 5 352 10 347 q -1 364 0 356 q -21 379 -17 375 q -27 387 -24 382 q -35 397 -32 394 q -36 406 -37 400 q -43 417 -40 416 q -48 421 -46 419 q -58 440 -47 432 q -57 451 -55 443 q -63 461 -59 458 q -62 470 -61 465 q -65 480 -63 476 q -69 495 -65 496 q -67 512 -65 501 q -69 534 -69 523 q -67 550 -69 548 q -66 554 -66 552 q -65 568 -65 561 q -67 581 -66 575 q -64 588 -65 584 q -62 596 -63 592 q -56 621 -58 617 q -55 632 -54 626 q -51 644 -51 640 q -50 652 -51 649 q -43 671 -47 666 q -42 683 -39 676 q -31 694 -36 689 q -23 709 -25 699 q -7 734 -12 729 q -1 746 -2 739 q 12 763 8 759 q 20 777 17 767 q 37 795 33 792 q 40 805 40 798 q 54 812 51 809 q 58 820 56 815 q 71 831 66 824 q 81 843 77 841 q 85 850 85 845 q 105 857 100 854 q 118 858 111 859 q 128 842 126 855 q 118 832 120 835 q 116 823 115 830 q 108 811 111 812 q 108 807 105 809 q 96 797 101 803 q 85 786 92 792 q 61 771 66 777 q 50 758 55 765 q 41 740 42 744 q 35 736 40 736 q 24 714 33 724 q 21 697 24 698 q 16 693 18 695 q 14 678 13 680 q 14 672 16 675 q 9 646 10 655 q 5 630 8 637 q 5 614 8 615 q 1 609 2 613 q 4 599 1 602 q 10 594 8 596 q 4 573 2 576 q 8 567 5 569 q 6 548 5 549 q 10 543 8 546 q 13 529 9 531 q 13 522 17 527 q 21 517 20 522 q 25 510 21 512 q 27 498 27 500 q 32 495 28 496 q 44 476 32 480 q 57 453 52 457 q 62 443 62 450 q 75 434 70 440 q 88 424 81 428 q 97 410 94 412 q 103 406 100 408 q 118 396 115 397 q 124 393 122 396 q 140 385 138 387 q 149 385 142 382 q 162 371 162 374 q 179 367 173 367 q 187 363 184 367 q 215 362 204 364 q 229 384 225 379 q 233 396 233 389 l 240 413 q 246 422 245 416 q 252 431 248 428 q 254 444 250 440 q 259 455 257 448 q 269 471 264 467 q 276 480 274 474 q 293 518 283 508 q 299 538 298 537 q 309 557 306 554 q 314 562 311 560 q 323 577 322 573 q 328 581 324 580 q 335 596 333 594 q 340 602 337 599 q 355 632 352 618 q 373 653 366 640 q 392 678 381 667 q 408 696 402 691 q 416 710 413 701 q 425 720 424 720 q 430 721 427 720 q 440 738 439 733 q 448 743 442 743 q 465 764 459 760 q 474 777 472 767 l 485 788 q 508 808 501 803 q 519 820 515 813 q 533 832 533 828 q 537 836 534 835 q 552 847 550 845 q 556 853 553 850 q 573 867 568 864 q 580 877 579 870 q 590 882 587 878 q 596 889 594 885 q 604 894 600 892 q 611 903 609 896 q 624 911 626 910 q 625 915 622 912 q 638 921 638 921 q 640 923 638 922 q 651 931 649 929 q 655 935 652 933 q 678 946 672 946 q 687 959 683 949 q 703 963 698 961 q 712 968 708 965 q 732 978 722 976 q 757 990 751 986 q 770 995 763 995 q 782 1005 775 998 q 790 1005 786 1003 q 798 1010 793 1007 q 806 1013 801 1011 q 813 1015 811 1014 q 832 1022 826 1022 q 855 1029 850 1028 q 867 1033 864 1033 q 873 1037 870 1033 q 891 1038 881 1034 q 911 1039 902 1041 l 944 1043 q 965 1045 961 1047 q 987 1048 982 1048 q 995 1045 992 1048 q 1011 1045 1002 1047 q 1032 1042 1028 1041 q 1043 1041 1037 1043 q 1051 1037 1048 1037 q 1058 1036 1055 1037 l 1071 1029 l 1087 1024 q 1102 1016 1098 1017 q 1108 1014 1105 1015 q 1120 999 1119 1001 q 1120 995 1121 998 q 1138 979 1131 988 q 1155 961 1146 969 q 1161 942 1159 950 q 1162 929 1163 934 q 1166 914 1166 921 q 1169 891 1167 895 q 1169 883 1170 887 q 1167 874 1169 878 q 1167 866 1165 870 q 1163 850 1162 855 q 1162 838 1163 845 q 1155 826 1159 831 q 1152 815 1150 822 q 1144 799 1144 801 q 1143 794 1143 797 q 1132 779 1136 779 q 1119 761 1125 769 q 1105 744 1112 754 q 1094 735 1093 736 q 1093 731 1096 733 q 1077 711 1085 714 q 1067 697 1068 708 q 1054 687 1053 690 q 1052 683 1055 685 q 1041 676 1044 678 q 1034 672 1037 675 q 1021 660 1026 664 q 1011 652 1015 656 q 993 638 995 644 q 984 632 991 633 q 976 621 978 622 q 972 621 975 621 q 952 602 956 610 q 938 594 949 595 q 929 583 931 585 q 923 580 927 580 l 921 572 m 975 982 q 950 983 961 979 q 935 986 935 987 q 933 984 935 984 q 916 985 921 987 q 907 986 911 983 q 869 978 877 983 q 858 977 865 980 q 846 978 851 975 q 836 973 842 972 q 827 971 831 973 q 805 967 811 967 q 793 965 798 968 q 775 956 778 959 q 767 952 771 953 q 746 944 756 944 q 730 933 735 938 q 714 930 725 927 q 704 920 705 923 q 698 919 702 916 q 687 910 693 914 q 675 906 680 906 q 663 898 670 900 q 652 889 656 896 q 644 887 645 891 q 637 885 642 884 q 628 874 634 878 q 617 864 621 870 q 607 855 611 861 q 598 847 603 850 q 588 836 590 842 q 580 834 587 831 q 570 819 575 823 q 562 809 565 816 q 549 800 554 803 q 541 792 543 797 q 518 765 523 782 q 503 754 505 754 q 500 752 501 754 q 493 739 495 743 q 485 733 492 735 q 476 721 478 724 q 471 712 473 713 q 466 709 469 710 q 454 689 461 698 q 438 672 447 680 q 435 661 436 663 q 431 659 434 660 q 421 639 424 645 q 412 629 417 633 q 407 615 409 615 q 404 614 405 615 q 402 606 404 611 q 394 598 401 600 q 382 573 386 577 q 378 558 378 568 q 367 543 367 546 q 366 537 367 539 q 355 516 358 520 q 351 505 352 512 q 345 499 348 503 q 343 489 343 496 q 338 482 340 486 q 339 474 336 477 q 331 459 333 463 q 326 451 329 455 q 320 436 324 444 q 311 424 316 428 q 307 409 307 411 q 303 405 306 408 q 301 395 303 398 q 297 389 299 392 q 291 367 297 375 q 287 352 286 359 q 298 352 293 354 q 307 351 303 351 q 319 352 317 354 q 324 352 321 351 q 332 354 328 352 q 340 355 336 355 q 359 355 354 354 q 371 354 364 356 q 389 359 383 356 q 402 358 401 359 q 404 358 402 358 q 417 362 413 363 q 424 366 421 362 q 440 367 435 368 q 448 366 446 366 q 463 372 461 368 q 472 371 466 375 q 484 381 482 379 q 488 383 485 383 q 501 386 499 386 q 504 389 503 386 q 512 389 508 386 q 523 390 515 392 q 538 397 524 397 q 548 402 541 402 q 560 405 556 402 q 584 417 577 415 q 598 421 591 419 q 619 427 613 425 q 636 434 633 431 q 642 435 638 436 q 651 443 645 442 q 660 447 657 444 q 678 453 671 451 q 690 458 686 455 q 706 467 704 466 q 712 470 709 467 q 725 477 721 476 q 739 484 739 484 q 741 488 739 485 q 756 497 751 495 q 773 507 771 505 q 782 514 779 514 q 786 515 785 514 q 796 524 797 522 q 798 527 796 526 q 821 541 812 535 q 836 553 830 546 q 847 559 847 557 q 850 564 847 561 q 865 571 861 567 q 881 581 877 581 q 899 596 895 591 q 911 604 903 602 q 923 614 912 614 q 929 623 923 621 q 937 632 934 626 q 946 638 945 637 q 949 642 948 640 q 960 649 956 645 q 968 659 964 653 q 977 666 973 666 q 979 672 980 666 q 990 681 987 678 q 996 690 994 685 q 1005 696 1006 694 q 1006 702 1005 698 q 1025 718 1020 716 q 1032 727 1030 720 q 1049 748 1047 741 q 1059 759 1052 755 q 1062 778 1060 771 q 1068 788 1064 785 q 1074 807 1072 804 q 1075 815 1077 809 q 1080 828 1081 824 q 1078 834 1079 831 q 1074 843 1074 841 q 1075 849 1075 846 q 1073 859 1074 854 q 1071 870 1072 865 q 1066 888 1071 885 q 1056 906 1063 900 q 1047 923 1049 912 q 1041 935 1039 934 q 1041 940 1043 937 q 1026 952 1028 952 q 1021 956 1024 953 q 999 969 1002 969 q 986 975 992 971 q 975 982 979 979 "},"(":{"x_min":111.234375,"x_max":485.609375,"ha":377,"o":"m 481 -374 l 463 -383 q 446 -392 448 -390 q 439 -396 443 -394 q 422 -406 430 -401 q 409 -419 415 -412 q 398 -419 401 -416 q 393 -425 396 -423 q 382 -431 383 -428 q 378 -436 381 -434 q 363 -439 370 -438 q 354 -444 356 -440 q 334 -444 343 -442 q 316 -442 325 -447 q 297 -442 303 -444 q 278 -440 291 -440 q 257 -431 260 -436 q 245 -427 255 -425 q 229 -416 241 -417 q 206 -400 208 -406 q 193 -390 203 -393 q 186 -379 191 -383 q 180 -364 181 -375 q 170 -349 172 -349 q 166 -347 168 -348 q 162 -333 162 -336 q 160 -326 161 -329 q 155 -301 155 -314 q 151 -274 154 -288 q 147 -261 150 -268 q 142 -246 143 -253 q 145 -233 147 -236 q 143 -227 143 -230 q 142 -212 143 -212 q 141 -210 141 -212 q 138 -198 139 -207 q 139 -187 137 -189 q 139 -174 138 -176 q 139 -169 139 -172 q 137 -146 137 -151 q 134 -137 138 -141 q 134 -115 134 -124 q 133 -98 135 -99 q 131 -94 131 -97 q 130 -77 131 -81 q 127 -69 128 -73 q 127 -54 126 -54 q 128 -51 128 -54 q 125 -30 127 -36 q 127 -20 123 -24 q 123 2 122 -9 q 122 14 123 9 q 124 21 122 18 q 122 28 124 25 q 116 35 119 31 q 115 66 115 55 q 117 86 119 81 q 115 99 115 92 q 115 111 113 105 q 111 124 116 118 q 111 200 116 162 q 115 219 119 207 q 118 238 112 230 q 113 255 115 244 q 111 278 111 267 q 113 294 113 288 q 113 314 112 309 q 115 325 115 318 q 115 346 116 336 q 120 363 113 356 q 119 373 118 368 q 119 383 120 377 q 120 402 118 398 q 123 409 122 405 q 120 424 123 424 q 119 427 118 424 q 123 443 124 442 q 120 447 122 444 q 120 455 119 450 q 118 462 120 459 q 121 488 124 473 q 124 515 118 503 q 124 524 122 519 q 124 534 126 529 q 124 544 124 538 q 123 558 123 550 q 125 592 126 580 q 131 610 124 603 q 131 636 132 628 q 131 653 130 645 q 134 679 135 674 q 139 689 134 685 q 137 705 137 697 q 143 720 138 713 q 145 752 146 737 q 150 784 145 767 q 155 800 155 797 q 155 808 154 804 q 162 828 162 824 q 162 834 161 831 q 170 851 168 843 q 173 865 172 858 q 178 874 176 873 q 179 881 180 876 q 187 899 183 895 q 189 911 191 903 q 198 921 196 914 q 210 927 199 927 q 219 948 215 942 q 229 957 222 954 q 241 975 233 967 q 255 983 256 980 q 256 987 253 986 q 271 992 265 987 q 282 1001 276 996 q 288 1015 286 1014 q 290 1018 291 1015 q 307 1022 303 1021 q 316 1026 311 1024 q 324 1032 321 1029 q 330 1037 326 1034 q 341 1046 339 1044 q 349 1048 343 1048 q 365 1059 362 1055 q 377 1063 368 1063 q 390 1070 389 1071 q 394 1071 392 1068 q 406 1073 404 1074 q 411 1074 408 1072 q 421 1079 416 1075 q 435 1082 425 1082 q 442 1079 439 1082 q 450 1075 444 1077 q 457 1075 454 1074 q 467 1075 461 1077 q 478 1064 473 1066 q 485 1058 484 1063 q 479 1047 478 1049 q 478 1044 480 1045 q 465 1036 469 1037 q 455 1033 462 1034 q 435 1014 435 1020 q 425 1013 428 1015 q 420 1010 423 1011 q 397 997 402 1001 q 387 988 392 994 q 375 987 381 987 q 364 984 370 987 q 357 986 360 984 q 349 987 354 987 q 333 984 333 986 q 332 983 333 983 q 322 976 325 979 q 317 971 320 973 q 308 963 310 968 q 298 959 306 959 q 297 944 301 948 q 295 934 293 941 q 288 929 288 933 q 282 923 287 925 q 275 903 282 907 q 271 885 269 887 q 271 881 272 884 l 265 861 q 260 845 259 849 q 259 836 261 842 q 256 822 255 826 q 256 813 257 817 q 252 794 250 798 q 250 788 253 790 q 248 763 249 769 q 246 751 248 758 q 240 736 236 740 q 244 727 244 732 q 240 708 241 709 q 233 687 237 694 q 237 672 240 675 q 234 667 234 670 q 233 650 233 652 q 233 647 234 648 q 228 629 226 632 q 233 623 230 626 q 233 610 233 617 q 233 596 234 603 q 230 573 231 577 q 227 565 229 569 q 227 542 227 548 q 226 531 226 537 q 227 512 229 518 q 225 500 225 507 q 227 484 227 488 q 230 478 226 481 q 224 463 221 463 q 226 459 227 462 q 227 434 227 440 q 230 423 226 428 q 225 406 227 411 q 218 398 222 401 q 221 389 225 396 q 225 382 218 383 q 222 366 221 370 q 223 360 223 363 q 220 348 219 351 q 218 345 221 345 q 220 339 221 341 q 221 329 219 336 q 222 307 218 311 q 226 295 226 302 q 225 272 223 279 q 223 259 226 265 q 222 241 221 244 q 223 236 223 238 q 221 221 223 229 q 222 203 219 214 q 223 194 222 198 q 223 184 225 191 q 219 168 218 169 q 222 164 221 166 q 220 147 218 157 q 225 131 222 138 q 221 114 223 116 q 215 109 218 112 q 221 93 221 104 q 227 78 221 82 q 230 63 226 66 q 229 51 227 52 q 231 47 230 50 q 223 37 222 37 q 227 31 223 37 q 232 16 231 25 q 233 -2 233 8 q 236 -22 234 -12 q 242 -39 237 -32 q 244 -54 238 -46 q 244 -69 250 -62 q 248 -82 248 -75 q 250 -97 249 -88 q 249 -122 248 -113 q 246 -138 250 -131 q 250 -162 252 -155 q 252 -176 248 -169 q 257 -211 257 -192 q 269 -234 265 -229 q 267 -249 267 -246 q 271 -253 268 -252 q 276 -274 272 -269 q 278 -285 279 -283 q 276 -288 276 -287 q 281 -295 278 -293 q 283 -302 284 -298 q 295 -318 290 -314 q 303 -328 299 -322 q 316 -342 307 -340 q 324 -352 324 -344 q 338 -358 333 -354 q 348 -366 343 -362 q 374 -373 362 -368 q 398 -378 386 -378 q 411 -377 405 -379 q 423 -379 416 -375 l 443 -371 q 455 -366 455 -367 q 457 -364 455 -366 q 474 -360 473 -360 q 480 -359 476 -359 l 481 -374 "},"`":{"x_min":410.328125,"x_max":668.734375,"ha":1080,"o":"m 524 938 q 522 924 526 930 q 520 911 519 918 q 522 900 518 903 q 524 889 526 896 q 533 883 531 887 q 541 877 534 880 q 551 862 552 868 q 558 857 550 857 q 571 843 568 843 q 577 835 575 842 q 597 828 588 832 q 619 820 606 823 q 631 819 630 820 q 634 817 632 817 q 644 815 640 815 q 651 812 648 816 q 660 810 653 812 q 668 804 667 808 q 660 799 666 797 q 649 800 655 801 q 626 790 634 792 q 610 792 617 788 q 602 790 606 789 q 594 789 599 790 q 577 794 579 794 q 573 793 576 793 q 550 797 554 798 q 532 805 541 801 q 516 809 523 808 q 497 822 510 817 q 473 832 484 827 q 442 858 447 842 q 430 870 432 866 q 420 877 428 874 q 419 893 421 892 q 416 895 417 893 q 412 910 416 904 q 412 927 408 916 q 431 946 425 941 q 440 948 436 945 q 447 952 443 950 q 461 948 458 948 q 469 948 465 949 q 490 951 484 949 q 504 952 496 953 q 518 944 518 948 q 524 938 519 941 "},"U":{"x_min":-118.015625,"x_max":978,"ha":943,"o":"m 660 126 q 659 137 657 132 q 663 150 660 141 q 656 144 656 150 q 651 137 656 138 q 649 128 652 130 q 644 120 645 126 q 637 107 638 111 q 634 99 636 104 q 626 90 626 92 q 625 84 625 88 q 619 76 619 81 q 613 69 618 71 q 607 58 611 61 q 600 51 603 55 q 595 34 600 40 q 587 17 590 28 q 576 4 579 8 q 572 -5 573 1 q 564 -12 568 -8 q 556 -18 561 -16 q 551 -31 552 -29 q 546 -31 550 -32 q 539 -46 542 -44 q 534 -55 535 -48 q 520 -72 523 -67 q 518 -84 518 -77 q 507 -99 511 -92 q 493 -111 503 -107 q 486 -126 486 -122 q 482 -131 486 -130 q 477 -139 480 -138 q 472 -142 474 -141 l 457 -157 q 439 -177 444 -169 q 423 -191 434 -185 q 414 -199 417 -195 q 405 -204 411 -203 q 395 -218 397 -214 q 386 -225 393 -222 q 368 -242 370 -237 q 360 -248 363 -245 q 355 -255 358 -252 q 343 -263 349 -260 q 332 -272 336 -267 q 315 -282 316 -279 q 311 -287 314 -284 q 291 -296 297 -294 q 280 -301 286 -298 q 274 -305 276 -303 q 267 -310 271 -307 q 259 -313 263 -313 q 252 -317 255 -313 q 238 -322 241 -321 q 233 -328 234 -324 q 221 -329 226 -326 q 211 -332 217 -332 q 193 -332 196 -330 q 187 -335 191 -333 q 162 -334 169 -335 q 147 -335 154 -333 q 131 -328 131 -330 q 122 -320 127 -325 q 112 -313 118 -316 q 106 -301 111 -306 q 99 -291 101 -297 q 96 -284 97 -288 q 92 -278 94 -280 q 90 -267 93 -271 q 85 -259 88 -264 q 84 -246 88 -250 q 84 -236 81 -241 q 80 -221 81 -221 q 78 -219 78 -221 q 78 -210 80 -212 q 75 -204 77 -207 q 77 -192 78 -198 q 75 -180 75 -187 q 75 -168 77 -170 q 74 -162 74 -165 q 75 -145 74 -154 q 77 -126 77 -135 q 75 -99 81 -108 q 78 -80 78 -93 q 80 -46 78 -56 q 84 -29 81 -36 q 84 -16 84 -20 q 89 -9 85 -13 q 90 2 89 -2 q 92 13 90 6 q 95 30 96 28 q 94 35 94 32 q 99 52 99 46 q 105 65 107 65 q 101 70 103 65 q 103 82 101 74 q 107 94 105 89 q 118 140 116 122 q 127 170 120 158 q 127 183 124 177 q 132 195 130 189 q 132 207 130 199 q 137 222 134 215 q 146 244 143 241 q 149 259 150 255 q 150 268 149 263 q 158 286 158 283 q 159 292 160 288 q 160 301 158 297 q 164 307 161 305 q 168 314 166 310 q 168 324 169 320 q 169 330 168 328 q 177 351 177 345 q 181 362 177 356 q 183 377 179 371 q 184 389 188 382 q 197 421 189 413 q 203 443 204 428 q 209 459 207 457 q 211 466 211 461 l 218 485 q 222 494 221 488 q 227 503 223 500 q 231 516 230 510 q 236 531 233 523 q 242 545 241 546 q 242 546 242 545 q 248 561 248 561 q 253 579 253 576 q 259 590 257 588 q 261 594 261 591 q 263 605 264 598 q 264 618 263 613 q 276 653 269 648 q 276 664 276 659 q 278 676 275 670 q 282 696 283 690 q 284 709 282 702 q 286 720 287 718 q 287 727 286 722 q 289 740 290 737 q 288 746 288 743 q 289 757 288 752 q 293 767 290 762 q 290 787 291 777 q 293 808 290 797 q 294 822 295 820 q 293 826 293 823 q 292 838 293 835 q 288 845 291 842 q 289 859 291 854 q 287 866 287 864 q 284 883 287 877 q 283 897 280 888 q 275 910 276 908 q 275 915 274 911 q 269 927 271 921 q 264 941 267 934 q 253 960 257 946 q 245 969 249 964 q 238 982 241 975 q 226 986 231 984 q 218 995 221 988 q 203 1001 206 999 q 198 1002 200 1002 q 180 1007 181 1009 q 176 1009 179 1006 q 164 1014 168 1014 q 158 1011 161 1014 q 140 1018 145 1017 q 128 1020 135 1018 q 117 1013 122 1017 q 101 1009 112 1009 q 94 1005 99 1006 q 84 1001 90 1003 q 69 992 71 995 q 54 983 56 984 q 39 972 50 980 q 26 961 31 964 q 17 956 21 959 q 12 944 14 945 q 6 940 9 942 q 0 926 4 933 q -10 918 -2 919 q -13 901 -12 910 q -21 889 -14 892 q -23 870 -23 880 q -23 857 -23 857 q -24 855 -24 857 q -20 844 -23 845 q -16 841 -17 843 q -16 821 -18 828 q -13 804 -14 813 q -2 781 -8 788 q 8 766 4 774 q 18 756 16 758 q 20 750 20 754 q 32 741 32 743 q 33 739 32 740 q 44 734 40 736 q 51 732 47 732 q 78 731 69 729 q 88 731 82 731 q 96 732 93 731 q 103 735 100 733 q 111 739 107 737 q 128 747 123 741 q 135 741 132 744 q 142 736 138 739 q 131 718 139 722 q 129 706 131 708 q 126 699 127 704 q 107 687 112 690 q 101 676 103 683 q 90 669 93 671 q 82 664 88 667 q 55 651 65 657 q 32 649 44 653 q 8 645 20 644 q -10 648 -2 651 q -23 654 -14 655 q -36 659 -31 653 q -52 663 -50 660 q -62 670 -55 667 q -70 684 -67 682 q -74 687 -73 686 q -85 699 -78 697 q -89 709 -88 705 q -96 714 -90 713 q -98 730 -93 727 q -107 736 -103 733 q -110 746 -108 746 q -113 750 -112 747 q -118 777 -118 767 q -118 793 -118 786 q -113 811 -113 808 q -109 816 -112 813 q -108 832 -111 831 q -103 836 -105 834 q -102 849 -105 845 q -101 859 -99 854 q -95 866 -94 859 q -89 873 -96 872 q -75 906 -80 895 q -63 923 -71 916 q -54 936 -56 934 q -50 938 -52 938 q -35 959 -37 954 q -24 964 -33 964 q -12 977 -16 975 q -6 983 -9 979 l 4 994 q 10 1001 8 999 q 14 1007 13 1003 q 25 1014 23 1009 q 36 1020 28 1020 q 52 1032 50 1030 q 59 1037 55 1034 q 74 1048 70 1044 q 88 1054 84 1052 q 94 1059 92 1056 q 112 1068 109 1067 q 115 1074 115 1068 q 126 1073 122 1070 q 135 1078 130 1077 q 155 1083 149 1079 q 168 1086 161 1086 q 193 1091 184 1089 q 212 1091 202 1093 q 236 1085 231 1087 q 245 1083 240 1082 q 271 1074 252 1075 q 281 1066 276 1070 q 293 1060 286 1063 q 301 1056 297 1058 q 307 1051 305 1055 q 327 1038 322 1041 q 337 1029 332 1034 q 355 999 351 1015 q 359 983 359 986 q 360 978 359 980 q 376 954 373 963 q 383 940 379 946 q 384 931 381 935 q 385 923 387 927 q 389 906 386 912 q 394 893 393 900 q 396 873 396 887 q 396 861 397 868 q 394 847 396 854 q 391 832 389 831 q 393 831 393 834 q 391 809 392 813 q 393 798 390 805 q 391 787 390 794 q 389 771 392 779 q 387 757 389 759 q 386 754 386 755 q 385 742 385 747 q 383 732 386 737 q 380 714 379 716 q 381 709 381 712 l 377 690 q 372 682 374 687 q 370 671 370 678 q 363 642 363 651 q 357 623 356 629 q 356 611 358 617 q 348 594 349 598 q 343 588 347 591 q 343 574 345 581 q 340 560 341 567 q 333 543 335 546 q 329 538 330 541 q 320 512 322 523 q 316 505 317 508 q 316 497 314 501 l 309 476 q 302 460 302 470 q 295 443 302 450 q 295 432 297 435 q 291 427 293 430 q 289 418 288 423 q 288 409 290 413 q 282 396 286 402 q 280 382 279 389 q 269 364 271 367 q 271 356 268 360 q 267 347 268 352 q 263 336 265 343 q 259 318 257 325 q 253 309 260 311 q 250 297 255 301 q 248 284 246 293 q 244 273 242 274 q 244 269 245 272 q 241 263 241 267 q 240 252 241 259 q 233 237 236 238 q 234 233 231 236 l 229 215 q 223 194 226 200 q 221 180 219 188 q 217 164 214 165 q 206 144 204 150 q 208 135 208 138 q 204 124 207 128 q 204 113 202 119 q 200 103 202 107 q 203 97 199 100 q 198 90 200 93 q 193 82 196 86 q 192 50 192 62 q 187 29 192 37 q 184 13 188 17 l 185 -2 q 183 -27 184 -21 q 183 -35 183 -32 q 183 -42 184 -37 q 181 -59 183 -54 q 179 -69 180 -63 q 177 -92 180 -84 q 178 -105 179 -105 q 177 -107 177 -105 q 179 -122 180 -119 q 181 -126 179 -124 l 183 -141 q 185 -163 183 -157 q 184 -174 187 -169 q 187 -189 185 -185 q 189 -195 189 -192 q 189 -206 191 -202 q 189 -214 188 -211 q 196 -220 192 -218 q 198 -229 199 -222 q 206 -242 206 -241 q 208 -246 206 -244 q 222 -262 219 -259 q 230 -265 225 -265 q 246 -266 244 -265 q 250 -267 248 -267 q 269 -264 260 -264 q 284 -261 278 -264 q 300 -250 298 -250 q 305 -249 302 -250 q 311 -244 309 -246 q 320 -240 314 -241 q 331 -227 326 -229 q 336 -218 336 -225 q 349 -206 347 -208 q 354 -204 351 -204 q 358 -196 356 -200 q 366 -189 360 -192 q 370 -183 368 -187 q 378 -177 373 -180 q 385 -164 383 -165 q 398 -151 394 -154 q 404 -142 402 -149 q 410 -137 408 -139 q 415 -131 412 -134 q 425 -116 424 -119 q 427 -109 427 -113 q 435 -99 435 -103 q 438 -93 435 -96 q 448 -82 443 -85 q 453 -72 450 -75 q 459 -65 457 -69 q 469 -47 467 -54 q 476 -36 474 -37 q 477 -32 477 -35 q 487 -21 484 -28 q 497 -12 491 -14 q 507 2 499 -5 q 507 11 504 9 q 511 20 511 13 q 524 36 518 32 q 529 48 526 43 q 534 63 533 54 q 542 70 539 66 q 548 80 545 74 l 553 94 q 560 100 558 96 q 567 104 562 104 q 573 121 571 118 q 573 127 576 124 q 582 142 580 131 q 592 155 584 153 q 601 174 598 172 q 604 183 604 177 q 618 203 614 195 q 625 218 622 211 q 630 234 629 233 q 633 238 632 236 q 636 246 636 242 q 640 253 637 249 q 647 265 645 264 q 649 269 648 267 q 657 290 655 284 q 659 301 659 297 q 664 307 659 305 q 668 322 663 317 q 672 333 672 326 q 680 349 678 347 q 686 352 683 351 q 688 368 685 367 q 690 377 691 370 q 697 391 695 387 q 699 401 699 394 q 711 421 706 417 q 716 436 716 425 q 724 447 722 439 q 731 458 725 455 q 737 473 736 470 q 741 478 739 476 q 747 498 741 491 q 755 515 752 505 q 758 529 759 526 q 759 535 758 533 q 763 546 765 545 q 765 550 762 548 q 775 571 771 567 q 778 585 779 576 q 788 604 789 594 q 794 615 794 611 q 794 622 793 619 q 801 634 800 633 q 803 637 803 636 q 804 651 805 649 q 803 655 803 652 q 812 669 811 667 q 813 676 813 671 q 819 687 817 680 q 826 695 820 693 q 829 716 831 714 q 828 721 827 718 q 836 741 838 739 q 836 747 835 744 q 856 752 855 748 q 864 756 857 756 q 889 777 885 767 q 914 789 908 786 q 926 793 919 792 q 936 786 933 790 q 946 777 940 781 q 941 760 949 762 q 934 746 934 747 q 927 727 930 729 q 925 716 923 724 q 917 702 919 705 q 912 697 915 699 q 912 689 914 691 q 912 682 910 686 q 906 666 907 675 q 903 649 906 657 q 897 639 900 644 q 897 628 895 634 q 890 610 889 611 q 889 603 891 609 q 884 591 884 594 q 883 585 884 588 q 881 575 880 577 q 880 569 883 572 q 873 549 874 556 q 868 538 872 542 q 862 516 864 518 q 861 508 861 514 q 855 499 857 505 q 850 488 854 493 l 849 473 q 840 459 843 463 q 836 451 838 455 q 832 420 831 427 q 826 406 832 413 q 824 394 826 400 q 826 381 823 387 q 817 351 820 359 q 812 332 815 343 q 803 307 805 316 q 800 288 801 299 q 791 265 793 271 q 785 250 789 259 q 779 224 784 234 q 777 206 775 214 q 773 190 774 192 q 770 183 771 188 q 768 174 767 176 q 767 166 769 172 l 765 147 q 761 130 760 135 q 760 123 762 126 q 760 104 760 107 q 759 94 759 101 q 759 86 760 92 q 755 78 758 81 q 756 65 755 66 q 758 61 758 63 q 756 50 758 55 q 755 42 755 46 q 756 27 756 29 q 755 23 755 25 q 756 16 755 20 q 756 8 756 12 q 754 -6 756 1 q 755 -23 752 -14 q 753 -52 755 -40 q 756 -74 751 -63 q 756 -93 751 -85 q 755 -108 752 -100 q 755 -123 758 -116 q 757 -139 756 -135 q 755 -146 758 -143 q 758 -164 756 -162 q 759 -172 759 -166 q 758 -195 759 -187 q 765 -210 758 -203 q 765 -225 763 -218 q 768 -240 769 -236 q 769 -246 767 -244 l 773 -263 q 777 -271 777 -268 q 779 -278 777 -275 q 781 -289 779 -284 q 786 -298 784 -294 q 788 -311 788 -309 q 792 -313 789 -314 q 803 -337 800 -330 q 812 -345 805 -343 q 822 -355 817 -351 q 831 -362 826 -359 q 862 -363 851 -362 q 880 -359 872 -364 q 893 -357 892 -359 q 897 -355 893 -355 q 912 -350 908 -351 q 918 -345 916 -349 q 933 -341 927 -343 q 944 -336 940 -339 q 957 -324 957 -326 q 971 -324 967 -326 q 978 -324 975 -322 q 973 -330 976 -328 q 969 -337 971 -333 q 961 -341 964 -339 q 956 -345 959 -343 q 948 -348 950 -345 q 946 -354 946 -351 q 943 -358 945 -356 q 934 -359 941 -359 q 919 -375 926 -373 q 910 -379 912 -377 l 887 -385 q 871 -396 874 -393 q 861 -397 868 -400 q 847 -397 851 -396 q 838 -397 843 -398 q 826 -402 831 -401 q 816 -402 822 -404 q 803 -406 807 -405 q 796 -406 800 -406 q 769 -408 774 -405 q 756 -409 765 -411 q 743 -406 744 -405 q 739 -406 741 -406 q 720 -398 721 -401 q 713 -397 718 -396 q 708 -389 712 -390 q 702 -382 704 -387 q 692 -360 695 -364 q 691 -348 689 -356 q 681 -336 682 -339 q 683 -330 680 -333 q 674 -309 675 -314 q 671 -298 672 -303 q 664 -289 664 -293 q 664 -283 664 -286 q 659 -273 661 -276 q 660 -264 657 -269 q 655 -249 656 -252 q 657 -244 655 -246 q 652 -217 653 -231 q 648 -187 651 -202 q 651 -176 653 -183 q 648 -162 649 -169 q 649 -152 648 -157 q 649 -141 651 -147 q 649 -124 649 -131 q 651 -109 648 -116 q 649 -103 649 -107 q 648 -93 649 -100 q 648 -65 651 -74 l 648 -14 q 649 -8 649 -12 q 648 1 648 -4 q 652 21 651 8 q 652 40 653 33 q 653 58 653 54 q 653 75 651 67 q 649 84 655 82 q 659 116 653 107 l 660 126 "},"F":{"x_min":-200.75,"x_max":926.453125,"ha":746,"o":"m -104 649 q -98 639 -101 642 q -92 630 -94 636 q -78 619 -80 619 q -58 613 -70 614 q -39 611 -43 610 q -31 609 -35 611 q -27 600 -29 603 q -27 590 -25 596 q -32 579 -32 580 q -35 576 -32 579 q -42 553 -42 560 q -54 539 -52 541 q -54 534 -55 538 q -61 530 -58 533 q -66 524 -63 527 q -77 514 -78 511 q -80 515 -77 516 q -91 515 -86 512 q -103 518 -96 518 q -125 522 -122 519 q -132 522 -128 524 q -143 535 -141 530 q -150 543 -145 539 q -162 554 -160 553 q -164 557 -164 554 q -173 573 -173 569 q -179 579 -173 577 q -183 596 -179 588 q -187 604 -184 600 q -192 613 -189 607 l -195 634 l -199 651 q -200 665 -199 664 q -200 668 -200 666 q -198 682 -199 680 q -198 686 -198 683 q -197 706 -199 701 q -193 716 -195 710 q -189 735 -189 729 q -184 752 -184 744 q -177 765 -179 756 q -170 777 -176 773 q -165 793 -166 790 q -161 798 -164 796 q -153 813 -153 812 q -151 816 -153 813 q -142 827 -143 826 q -138 830 -141 828 q -126 849 -131 842 q -113 861 -122 855 q -96 884 -97 874 q -70 902 -82 888 q -52 916 -55 911 q -41 924 -46 919 q -29 933 -36 929 q -20 932 -23 931 q -14 934 -17 933 q -6 939 -9 935 q 5 941 -2 942 q 25 947 18 946 q 35 950 31 948 q 49 954 47 953 q 52 959 51 956 q 86 959 69 956 q 119 959 103 961 q 126 955 123 957 q 134 953 130 953 q 148 954 146 956 q 153 952 150 952 q 166 952 164 952 q 172 953 169 953 q 188 950 184 949 q 195 948 192 950 q 210 947 208 949 q 214 945 211 945 q 233 942 225 945 q 253 941 241 938 q 274 936 269 938 q 280 933 278 934 q 297 933 291 933 q 310 931 303 933 q 327 927 322 926 q 343 926 332 927 q 363 920 358 923 q 378 918 368 916 q 398 915 390 918 q 412 916 408 918 q 420 912 416 914 q 436 910 434 912 q 442 908 439 908 q 460 910 451 908 q 476 906 469 912 q 505 909 496 906 q 522 907 515 912 q 539 919 539 910 q 547 925 543 922 q 548 934 550 927 q 569 960 564 948 q 580 972 577 972 q 584 975 583 972 q 595 990 592 991 q 608 1000 606 999 q 613 1003 610 1001 q 623 1017 622 1015 q 635 1029 632 1028 q 640 1034 638 1030 q 660 1045 652 1041 q 674 1057 670 1053 q 686 1064 679 1060 q 699 1078 698 1075 q 702 1085 701 1081 q 718 1086 710 1085 q 729 1093 725 1087 q 768 1102 750 1101 q 800 1106 786 1104 q 836 1104 824 1106 q 855 1096 849 1102 q 869 1091 865 1096 q 881 1085 873 1086 q 892 1071 884 1075 q 906 1060 900 1067 q 908 1053 906 1056 q 912 1047 910 1049 q 923 1026 919 1029 q 926 1015 926 1022 q 919 1005 921 1006 q 916 1003 918 1005 q 908 984 912 992 q 889 972 903 975 q 883 956 883 956 q 868 937 872 944 q 858 929 865 931 q 851 914 853 915 q 847 914 850 914 q 838 908 843 911 q 827 902 834 904 q 819 891 824 895 q 809 883 813 888 q 796 878 797 880 q 794 877 796 877 q 776 868 781 869 q 770 864 771 868 q 759 861 763 864 q 748 857 755 858 q 732 855 739 855 q 716 846 716 847 q 688 842 695 845 q 674 843 680 839 q 659 836 661 838 q 638 838 644 834 q 626 831 626 832 q 623 830 625 830 q 616 830 619 830 q 609 830 613 831 q 593 827 600 830 q 580 827 585 824 q 571 824 575 826 q 565 823 568 823 q 558 813 560 820 q 552 803 557 805 q 552 790 552 794 q 550 778 553 785 q 549 750 550 762 q 550 729 548 739 q 544 708 543 718 q 545 686 545 697 q 548 668 543 674 q 549 654 550 664 q 548 636 548 644 q 545 615 546 625 q 552 596 545 606 q 573 602 564 596 q 594 603 583 609 q 628 619 618 611 q 641 619 640 621 q 645 619 642 618 q 668 628 660 626 q 680 634 675 629 q 698 644 695 638 q 710 642 705 641 q 721 644 714 644 q 731 626 731 630 q 728 619 731 622 q 719 607 721 611 q 714 600 717 603 q 702 590 702 591 q 693 572 693 575 q 682 560 682 562 q 676 552 675 554 q 672 548 676 550 q 665 533 671 534 q 656 526 659 531 q 643 521 647 523 q 637 516 640 519 q 622 510 630 511 q 615 520 611 510 q 622 537 619 530 q 614 537 618 539 q 606 534 610 535 q 588 537 592 538 q 579 534 584 535 l 562 534 q 549 527 549 531 q 546 520 549 523 q 549 514 550 518 q 550 505 548 510 q 551 499 552 503 q 550 491 550 496 q 550 475 548 477 q 552 470 552 473 q 551 446 553 458 q 552 423 549 434 q 554 416 552 420 q 556 408 556 412 q 556 393 554 398 q 558 381 558 387 q 558 366 560 367 q 557 362 556 366 q 558 343 560 348 q 558 332 556 337 q 555 315 553 317 q 560 309 557 313 q 560 296 561 301 q 561 284 560 291 q 561 259 561 269 q 565 241 561 248 q 566 221 562 230 q 571 198 569 212 q 570 180 571 183 q 569 174 569 177 l 572 157 q 574 146 575 147 q 573 142 573 145 q 573 134 573 139 q 575 123 573 130 q 578 110 576 116 q 575 97 580 104 q 577 81 576 82 q 577 77 577 80 l 577 51 q 578 44 577 47 q 576 36 579 40 q 578 24 579 25 q 577 20 577 23 q 576 5 577 6 q 575 1 575 4 q 576 -19 576 -14 q 575 -27 576 -24 l 572 -47 q 571 -61 573 -54 q 567 -75 568 -69 q 563 -96 562 -92 q 562 -103 564 -100 q 556 -115 558 -111 q 557 -126 554 -120 q 548 -142 553 -131 q 541 -158 541 -154 q 536 -164 538 -161 q 534 -173 534 -166 q 519 -192 524 -187 q 514 -208 514 -198 q 505 -218 505 -217 q 505 -222 504 -219 q 494 -236 499 -229 q 482 -250 489 -244 q 469 -268 472 -265 q 464 -277 467 -275 q 458 -282 461 -279 q 449 -295 451 -294 q 444 -297 447 -295 q 435 -310 443 -302 q 415 -330 421 -322 q 405 -347 409 -337 q 398 -352 401 -349 q 390 -355 394 -354 q 375 -371 379 -370 q 367 -377 370 -373 q 352 -385 358 -382 q 343 -394 347 -389 q 333 -398 333 -396 q 329 -404 332 -401 q 300 -419 309 -416 q 283 -428 291 -423 q 276 -429 280 -430 q 267 -430 271 -428 q 254 -434 260 -431 q 241 -438 248 -438 q 222 -438 231 -436 q 206 -440 212 -440 q 179 -439 187 -439 q 164 -432 170 -439 q 142 -434 153 -436 q 122 -428 131 -431 q 104 -419 108 -424 q 90 -417 100 -415 q 69 -402 74 -406 q 54 -396 63 -398 q 47 -387 51 -390 q 40 -381 43 -385 q 21 -359 28 -366 q 8 -345 14 -352 q 0 -335 4 -340 q -8 -326 -2 -329 q -10 -318 -6 -321 q -17 -311 -14 -314 l -23 -295 q -33 -263 -33 -275 q -35 -238 -32 -250 q -36 -221 -32 -223 q -42 -196 -35 -202 q -36 -172 -37 -179 q -39 -161 -35 -166 q -33 -140 -32 -147 q -31 -126 -33 -132 q -25 -111 -25 -115 q -27 -104 -24 -107 q -19 -94 -21 -97 q -17 -89 -17 -92 q -4 -66 -9 -69 q -1 -54 -1 -56 q 1 -48 -1 -51 q 11 -31 9 -36 q 18 -23 13 -25 q 31 -6 23 -9 q 44 10 39 5 q 54 23 48 16 q 63 33 62 32 q 67 36 65 35 q 74 46 70 43 q 81 55 78 48 q 105 70 96 62 q 131 80 115 78 q 162 85 154 84 q 177 80 169 86 q 199 80 188 82 q 218 75 215 77 q 223 74 221 73 q 236 68 231 70 q 246 65 240 66 q 274 44 268 47 q 277 37 274 40 q 280 29 280 35 q 282 6 280 14 q 283 -6 284 -1 q 275 -21 274 -20 q 275 -24 276 -21 q 259 -48 265 -39 q 246 -52 250 -47 q 234 -58 241 -58 q 225 -55 227 -58 q 217 -48 223 -52 q 213 -33 217 -36 q 208 -24 210 -31 q 185 -9 193 -14 q 172 -7 176 -12 q 162 -5 169 -2 q 147 2 150 4 q 139 0 145 1 q 116 3 120 4 q 105 1 112 2 q 91 -6 94 -4 q 82 -10 88 -8 q 67 -17 73 -13 q 61 -30 66 -24 q 59 -43 56 -36 q 54 -50 55 -46 q 48 -54 54 -54 q 39 -78 46 -69 q 41 -92 43 -82 q 43 -108 39 -103 q 42 -120 40 -118 q 43 -126 43 -123 l 40 -143 q 42 -162 40 -158 q 43 -169 43 -165 l 43 -185 q 48 -204 48 -202 q 47 -208 47 -206 q 56 -227 54 -225 q 59 -233 58 -230 q 67 -250 66 -248 q 75 -259 71 -253 q 81 -271 78 -265 q 94 -282 93 -280 q 99 -283 94 -283 q 119 -310 115 -299 q 150 -325 135 -311 q 162 -328 160 -326 q 168 -333 165 -330 q 193 -341 183 -340 q 210 -348 203 -341 q 224 -347 217 -344 q 238 -349 231 -349 q 248 -348 244 -349 q 259 -347 253 -347 q 283 -345 275 -348 q 300 -343 298 -344 q 305 -341 302 -341 q 327 -340 322 -341 q 336 -337 332 -339 q 344 -334 340 -335 q 351 -329 348 -333 l 367 -320 q 385 -310 381 -310 q 396 -301 394 -302 q 398 -299 397 -301 q 405 -291 405 -294 q 411 -287 405 -288 q 415 -278 413 -279 q 417 -274 416 -276 q 424 -263 421 -265 q 430 -257 427 -260 q 440 -241 438 -244 q 453 -227 448 -226 q 454 -219 450 -221 q 457 -210 458 -217 q 467 -184 467 -199 q 476 -174 474 -176 q 478 -169 477 -172 q 482 -152 481 -155 q 485 -146 484 -149 q 488 -130 486 -134 q 489 -122 489 -126 q 493 -100 491 -105 q 493 -90 495 -94 q 497 -75 497 -80 q 499 -66 496 -70 q 495 -44 497 -51 q 495 -29 492 -36 q 494 -12 493 -18 q 495 -4 495 -6 q 495 19 495 10 q 491 35 495 28 q 494 48 495 42 q 491 62 493 55 q 492 73 491 69 q 493 85 493 78 q 489 108 488 101 q 488 122 489 115 q 487 128 488 124 q 486 137 486 131 q 485 155 488 150 q 481 177 481 173 q 480 208 482 200 q 478 226 478 217 q 478 239 478 233 q 477 250 477 245 q 475 268 477 267 q 473 271 473 269 q 478 288 478 278 q 476 305 477 298 q 474 313 474 309 q 472 321 474 317 q 474 328 473 325 q 474 339 474 332 q 472 351 472 351 q 473 355 473 352 q 472 368 473 362 q 473 379 470 374 q 472 397 473 392 q 467 406 470 402 q 470 423 470 412 q 469 438 470 438 q 467 440 467 438 q 466 455 467 451 q 466 466 465 458 q 466 477 467 474 q 465 482 465 480 q 465 493 463 488 q 465 504 466 499 q 446 499 448 501 q 440 496 444 497 q 412 486 423 497 q 368 470 386 482 q 359 468 363 472 q 351 467 355 465 q 342 462 348 465 q 333 461 336 459 q 318 453 328 454 q 303 446 307 453 q 288 444 294 447 q 276 439 283 442 q 265 448 267 448 q 263 451 263 448 q 274 470 264 461 q 278 480 274 477 q 282 491 282 484 q 292 502 288 495 q 305 511 295 510 q 322 529 318 526 q 333 534 326 531 q 342 533 339 534 q 349 531 345 531 q 357 533 352 531 q 364 535 362 534 q 374 539 367 538 q 386 537 381 539 q 393 541 389 539 q 402 545 397 542 q 417 550 412 550 q 427 553 421 550 q 447 557 438 556 q 465 565 457 558 q 465 587 462 572 q 463 595 465 591 q 462 602 462 599 q 464 618 465 617 q 463 622 463 619 q 464 640 463 636 q 465 647 465 644 q 465 659 463 659 q 466 663 466 660 q 465 683 465 678 q 467 695 466 689 q 468 717 467 705 q 472 737 469 729 q 473 752 469 751 q 476 789 473 782 q 479 803 480 800 q 480 808 478 805 q 471 822 478 824 q 461 824 463 820 q 448 820 450 819 q 443 823 446 822 q 435 824 439 822 q 425 826 431 826 q 415 826 420 827 q 405 824 411 824 q 395 826 400 824 q 386 826 390 828 q 370 828 370 830 q 368 826 371 826 q 348 823 358 828 q 311 832 325 828 q 280 835 297 835 q 259 841 265 841 q 248 841 253 841 q 236 846 237 847 q 231 843 234 845 q 217 847 223 846 q 199 847 210 849 q 185 849 191 847 q 170 854 179 851 q 161 855 166 855 q 149 855 155 854 q 137 857 137 858 q 134 857 137 857 q 123 858 124 859 q 119 858 122 857 q 105 860 107 861 q 101 859 104 859 q 88 860 89 859 q 84 862 86 861 q 69 864 73 862 q 59 865 66 865 q 42 865 43 861 q 35 864 39 862 q 27 865 31 865 q 19 862 23 864 q 10 864 16 859 q 3 861 8 861 q -5 861 -1 861 q -23 859 -20 859 q -29 858 -25 859 q -46 851 -42 851 q -61 845 -54 846 q -74 838 -71 841 q -84 828 -84 832 q -93 824 -85 823 q -103 813 -100 816 q -109 807 -105 809 q -120 798 -118 801 q -126 793 -123 796 q -126 783 -124 788 q -128 775 -128 778 q -129 762 -130 765 q -127 755 -128 759 q -130 737 -128 739 q -131 733 -131 736 q -129 717 -128 718 q -130 714 -130 716 q -125 701 -124 704 q -124 695 -126 698 l -120 672 l -104 649 m 603 904 q 613 906 609 904 q 622 904 618 907 q 648 908 641 908 q 671 910 664 908 q 685 914 678 912 q 699 915 689 915 q 718 917 714 915 q 729 919 722 919 q 750 922 748 922 q 766 923 762 923 q 779 928 778 929 q 782 929 779 927 q 812 939 801 937 q 832 948 823 941 q 834 960 834 954 q 834 972 834 965 q 821 990 826 986 q 812 999 816 994 q 798 1009 800 1006 q 794 1015 797 1011 q 786 1017 789 1014 q 778 1021 784 1020 q 766 1022 767 1020 q 762 1022 765 1024 q 737 1021 747 1025 q 717 1021 728 1017 q 701 1015 706 1015 q 676 1003 680 1009 q 660 995 671 996 q 651 983 651 984 q 648 980 651 982 q 634 971 634 973 q 633 967 634 969 q 617 948 618 961 q 609 944 613 945 q 603 940 604 942 q 594 922 599 927 q 590 906 590 916 l 603 904 "},"r":{"x_min":-42.046875,"x_max":565.640625,"ha":461,"o":"m 215 89 q 216 61 219 74 q 221 35 212 47 q 221 22 218 28 q 223 9 223 16 q 228 -6 225 -2 q 234 -16 231 -10 q 229 -28 229 -25 q 230 -32 230 -31 q 218 -43 222 -40 q 199 -56 204 -55 l 189 -71 q 178 -82 179 -84 q 174 -81 177 -81 q 168 -88 172 -84 q 162 -94 165 -92 q 141 -99 143 -99 q 126 -86 127 -92 q 123 -75 126 -81 q 124 -57 127 -62 q 124 -47 122 -52 q 119 -23 126 -36 q 120 -8 122 -16 q 117 8 118 1 q 119 18 116 14 q 116 27 116 21 q 116 40 116 33 q 114 61 113 56 q 115 69 115 65 q 113 80 115 73 q 111 93 111 86 q 110 110 109 105 q 109 120 111 115 q 109 127 109 123 q 108 137 109 131 q 106 145 108 139 q 104 157 104 150 q 102 178 104 174 q 100 185 100 181 q 103 202 104 198 q 104 208 101 206 q 99 227 100 215 q 100 248 99 240 q 97 267 97 263 q 97 276 97 271 q 94 288 93 287 q 94 293 94 290 q 90 311 89 307 q 90 317 90 314 q 83 345 82 337 q 80 360 84 354 q 79 373 82 367 q 74 382 75 378 q 66 409 71 402 q 58 425 61 416 q 52 431 55 428 q 47 439 50 434 q 20 438 31 442 q 0 428 9 435 q -16 417 -10 419 q -24 411 -21 416 q -33 417 -29 413 q -42 423 -37 420 q -39 432 -40 427 q -37 442 -37 436 q -30 448 -35 446 q -24 458 -25 451 q -15 465 -16 462 q -12 470 -14 467 q 1 481 -2 481 q 11 492 9 489 q 16 493 13 495 q 42 514 32 508 q 63 522 52 519 q 72 522 67 522 q 80 520 77 523 q 98 518 96 520 q 105 519 100 516 q 119 511 109 514 q 123 501 122 505 q 127 493 124 497 q 134 486 130 488 q 141 480 138 484 q 149 463 149 469 q 149 448 154 448 q 155 440 151 444 q 158 428 158 436 q 165 402 162 413 q 172 385 168 392 q 179 366 176 368 l 189 379 q 193 388 192 383 q 196 396 193 393 q 202 401 199 398 q 208 406 206 404 q 217 423 217 420 q 221 427 217 425 q 225 436 222 434 q 230 443 227 439 q 241 466 238 453 q 246 473 244 469 q 250 480 248 477 q 256 487 253 484 q 261 495 259 491 q 274 514 271 510 q 278 526 276 519 q 286 533 283 531 q 290 539 288 535 q 308 558 303 554 q 313 569 313 561 q 336 590 330 576 q 353 604 347 602 q 359 615 359 606 q 370 617 367 614 q 378 623 374 621 q 389 627 386 621 q 398 636 393 633 q 425 643 419 641 q 438 647 431 645 q 458 653 451 651 q 470 659 465 656 q 492 659 488 660 q 501 659 496 659 q 510 659 504 659 q 519 653 516 660 q 533 647 529 652 q 545 640 538 642 q 552 630 546 633 q 557 617 558 626 q 561 607 560 614 q 565 596 562 600 q 563 585 565 587 q 565 581 561 583 q 564 567 565 567 q 562 565 564 568 q 553 545 553 552 q 542 534 543 538 q 539 524 539 526 q 535 519 538 522 q 523 507 524 507 q 512 495 514 496 q 506 485 507 486 q 505 480 505 484 q 497 476 501 477 q 495 467 493 474 q 477 454 481 466 q 459 438 461 440 q 449 436 453 438 q 440 435 446 435 q 436 421 440 425 q 428 411 431 417 q 415 403 417 405 q 415 398 413 401 q 398 392 408 394 q 385 383 389 390 q 386 404 387 398 q 397 417 396 413 q 402 423 398 420 q 408 438 406 435 q 413 444 411 442 q 418 450 416 447 q 420 458 420 453 q 433 467 431 465 q 435 472 435 469 q 448 482 447 481 q 448 485 450 482 q 463 500 459 496 q 469 508 466 504 q 470 527 470 518 q 472 545 470 537 l 463 560 q 447 568 453 561 q 436 569 443 565 q 424 568 430 572 q 373 556 393 572 q 363 550 367 552 q 358 541 359 548 q 340 531 347 541 q 333 514 336 516 q 333 510 330 511 q 317 495 317 499 q 316 488 317 492 q 307 476 310 477 q 307 473 305 476 q 295 462 295 465 q 291 461 294 459 q 286 450 290 454 q 280 442 283 446 q 278 425 282 431 q 274 412 275 420 q 257 388 260 394 q 252 374 255 382 q 250 358 249 366 q 246 348 250 351 q 244 335 245 337 q 240 330 242 332 q 238 322 238 326 q 234 316 237 317 q 238 295 236 302 q 234 283 240 287 q 229 261 231 269 q 231 245 231 255 q 227 227 227 237 q 223 212 222 217 q 223 203 225 207 q 222 193 223 198 q 219 185 221 189 q 220 175 219 180 q 219 164 221 170 q 218 145 219 154 q 217 128 217 137 q 217 115 215 118 q 218 111 218 113 l 215 89 "},":":{"x_min":19.796875,"x_max":194.171875,"ha":231,"o":"m 126 543 q 132 535 127 537 q 143 535 138 533 q 158 529 157 527 q 161 530 158 530 q 181 520 177 524 q 192 512 185 515 q 193 497 195 500 q 191 489 191 495 q 177 476 181 476 q 173 469 172 476 q 161 456 162 458 q 161 448 160 454 q 143 436 150 447 q 130 430 132 430 q 111 423 113 425 q 105 423 108 421 q 95 437 99 434 q 89 444 92 440 q 62 455 71 451 q 47 461 48 459 q 42 465 46 463 q 44 479 43 478 q 46 482 44 480 q 53 499 52 497 q 59 500 54 501 q 65 510 62 505 q 73 518 67 515 q 84 534 82 527 q 98 537 96 535 q 104 542 100 539 q 115 543 111 542 q 126 543 119 545 m 94 109 q 104 108 100 107 q 112 108 108 109 q 132 96 128 99 q 139 89 137 94 q 149 85 145 86 q 157 78 154 84 q 172 73 170 71 q 176 73 174 75 l 188 62 q 187 44 188 50 q 184 33 187 37 q 172 24 172 27 q 170 18 172 21 q 155 9 155 9 l 138 2 q 133 -3 135 0 q 128 -9 131 -6 q 108 -15 113 -17 q 96 -13 103 -13 q 80 -4 82 -5 q 75 -5 78 -4 q 59 4 62 1 q 48 5 55 8 q 29 14 33 10 q 20 18 25 17 q 21 35 18 29 q 24 48 23 42 q 33 54 31 51 q 39 59 35 56 q 54 75 50 73 q 61 85 58 78 q 80 95 74 93 q 93 101 86 97 l 94 109 "},"x":{"x_min":-51.890625,"x_max":620.03125,"ha":488,"o":"m 562 -59 q 550 -65 550 -63 q 546 -67 549 -67 q 531 -71 535 -66 q 515 -75 526 -77 q 499 -84 504 -80 q 489 -89 495 -88 q 479 -91 481 -92 q 474 -92 477 -90 q 460 -98 463 -96 q 454 -99 457 -100 q 432 -103 438 -104 q 421 -101 427 -101 q 397 -101 401 -104 q 366 -99 382 -94 q 362 -92 366 -94 q 355 -88 358 -90 q 330 -73 340 -78 q 316 -56 321 -67 q 302 -48 305 -51 q 297 -39 299 -44 q 279 -20 287 -25 q 271 -8 272 -12 q 267 0 269 -5 q 256 14 259 10 q 253 25 253 18 q 242 43 244 42 q 236 52 240 48 q 231 62 233 55 q 222 80 225 70 q 215 98 218 96 q 211 101 212 100 q 204 120 208 120 q 203 127 200 120 q 190 126 191 130 q 188 116 189 122 q 177 105 181 112 q 165 93 172 99 q 162 86 164 90 q 157 78 160 81 q 142 60 146 66 q 132 48 138 54 q 116 25 119 33 q 115 8 118 10 q 112 1 112 6 q 90 -16 94 -6 q 78 -17 81 -17 q 71 -18 74 -17 q 51 -25 52 -24 q 35 -32 36 -31 q 33 -35 35 -33 q 21 -35 27 -32 q 10 -39 16 -39 q 0 -33 4 -37 q -8 -23 -4 -29 q 0 -9 -4 -9 q 13 6 10 4 q 20 9 16 8 q 25 18 18 17 q 29 29 31 18 q 44 42 40 42 q 46 47 47 43 q 63 65 59 61 q 71 77 67 70 q 82 92 82 89 q 88 99 85 94 q 96 107 92 104 q 104 120 103 115 q 111 128 105 126 q 117 142 115 137 q 126 150 119 147 q 139 168 130 164 q 147 183 142 177 q 160 195 153 189 q 161 210 161 208 q 153 237 155 226 q 148 249 150 246 q 147 256 146 252 q 131 291 138 279 q 122 307 124 301 q 118 321 120 314 q 115 334 118 332 q 111 339 113 336 q 100 351 100 349 q 94 367 96 366 q 89 371 92 368 q 83 386 82 385 q 82 389 84 387 q 73 402 74 400 q 73 405 73 404 q 67 413 69 408 q 61 420 66 417 q 47 440 51 432 q 37 439 43 438 q 29 443 32 440 q 4 444 18 443 q -17 436 -9 444 q -37 436 -33 435 q -46 435 -42 436 q -49 459 -55 455 q -40 469 -43 462 q -25 476 -28 476 q -21 477 -23 477 q -3 486 -8 482 q 8 491 1 491 l 23 497 l 39 503 q 62 505 56 507 q 73 505 67 504 q 86 507 82 508 q 92 505 89 505 q 118 503 111 504 q 131 503 124 503 q 150 485 147 497 q 168 465 165 472 q 177 455 170 459 q 185 432 181 443 q 196 416 191 424 q 214 382 207 389 q 217 374 217 379 q 222 367 217 368 q 224 354 225 355 q 225 351 223 352 q 232 339 230 345 q 240 328 234 332 q 245 311 244 316 q 250 305 246 307 q 274 317 268 311 q 278 328 278 328 q 280 332 279 329 q 288 341 286 337 q 294 347 290 345 q 305 363 303 358 q 311 371 306 368 q 318 383 313 379 q 324 396 322 387 q 335 406 332 402 q 341 415 339 411 q 346 421 344 417 q 352 428 348 425 q 361 444 358 440 q 368 450 364 447 q 383 472 381 465 q 389 485 386 478 q 400 497 397 495 q 406 501 404 499 q 411 509 408 507 q 416 518 415 511 q 431 526 428 526 q 436 529 434 527 l 448 541 q 461 541 457 538 q 472 548 465 545 q 485 555 480 556 q 497 557 491 554 q 518 552 512 553 q 519 542 520 545 q 520 535 518 539 q 507 524 510 526 q 503 522 505 522 q 485 495 485 507 q 476 486 478 488 q 474 480 474 485 q 462 459 467 477 q 453 453 457 458 q 450 444 448 448 q 444 439 444 443 q 436 435 443 435 q 423 416 434 420 q 417 406 420 409 q 409 400 413 402 q 406 393 409 394 q 405 385 402 392 q 396 371 402 374 q 383 356 386 359 l 374 344 q 357 324 362 328 q 351 313 352 321 q 339 301 341 306 q 329 294 330 297 q 328 288 328 291 q 313 275 317 284 q 298 263 309 265 q 286 247 288 252 q 286 240 283 242 q 278 227 279 230 q 283 223 276 225 q 299 191 290 196 q 303 176 305 176 q 301 173 301 176 q 304 166 303 170 q 310 161 305 161 q 314 153 310 155 q 320 147 317 150 q 322 137 321 141 q 322 127 322 132 q 329 119 328 120 q 332 115 330 118 q 340 98 339 101 q 345 93 341 94 q 358 67 351 69 q 365 52 363 54 q 367 48 367 51 q 374 40 370 43 q 378 29 378 36 q 400 3 390 9 q 415 -14 411 -2 q 424 -21 421 -20 q 428 -25 427 -23 q 440 -36 439 -35 q 448 -42 444 -42 q 454 -46 451 -43 q 477 -56 470 -55 q 484 -57 480 -58 q 493 -58 488 -56 q 511 -56 508 -58 q 516 -52 514 -54 q 534 -48 530 -47 q 555 -32 548 -37 q 573 -27 562 -27 q 579 -20 577 -24 q 587 -16 581 -16 q 603 2 602 -2 q 611 10 604 8 q 619 -9 622 -5 q 615 -18 615 -13 q 604 -32 603 -27 q 598 -32 599 -27 q 590 -36 596 -37 q 575 -50 580 -48 l 562 -59 "},"*":{"x_min":8.1875,"x_max":546.640625,"ha":499,"o":"m 320 998 q 315 984 317 992 q 317 971 313 975 q 318 957 320 959 q 321 952 316 956 q 318 936 316 945 q 316 921 320 927 q 319 908 321 910 q 317 904 317 907 q 318 888 316 888 q 320 885 321 888 q 314 836 316 857 q 320 804 311 816 q 314 790 317 789 q 309 788 311 790 q 313 778 311 784 q 317 767 314 773 q 330 767 326 765 q 335 774 335 769 q 352 794 343 788 q 370 815 367 808 q 379 824 373 822 q 397 843 393 838 q 404 862 408 855 q 416 867 412 862 q 427 869 420 872 q 433 874 430 872 q 438 881 436 876 q 459 885 454 883 q 473 888 463 888 q 479 874 480 873 q 476 873 478 876 q 470 862 472 864 q 469 858 467 861 l 461 845 q 446 837 451 843 q 436 826 442 831 q 431 816 434 817 q 425 813 428 815 q 418 800 420 801 q 416 796 416 798 q 398 780 402 786 q 389 769 394 774 q 383 757 387 760 q 377 746 378 754 q 368 739 371 743 q 360 733 366 736 q 355 724 358 727 q 349 718 352 721 q 340 704 343 710 l 390 705 q 405 706 404 706 q 423 709 420 709 q 442 710 439 712 q 448 709 446 709 q 478 710 467 712 q 499 716 488 709 q 512 715 512 713 q 514 718 512 717 q 531 723 523 720 q 546 720 538 727 q 537 701 546 705 q 533 691 537 694 q 526 682 529 687 q 507 672 508 678 q 497 667 500 671 q 488 663 495 663 q 465 653 470 655 q 454 651 461 651 q 441 649 446 651 q 431 648 436 648 q 416 647 424 647 q 401 647 408 648 q 388 642 392 642 q 382 640 385 642 q 375 641 379 642 q 367 638 370 640 q 340 637 352 634 q 321 633 328 640 q 323 619 324 619 q 322 618 322 619 q 324 604 322 615 q 325 590 325 594 q 322 571 321 577 q 321 560 324 565 q 322 545 321 552 q 326 535 324 539 q 325 514 324 518 q 324 505 326 510 q 321 491 320 496 q 322 478 322 485 q 318 466 321 472 q 320 455 314 461 q 316 444 314 446 q 317 440 317 443 q 317 421 320 424 q 317 415 314 417 q 321 404 320 405 q 317 400 322 402 q 320 392 320 397 q 320 383 320 387 q 318 368 320 373 q 317 362 317 364 q 318 352 317 356 q 317 340 320 347 q 307 324 309 328 q 302 317 305 320 q 292 305 294 307 q 286 303 290 303 q 282 295 286 297 q 276 286 278 293 q 253 281 257 286 q 242 278 249 276 q 223 280 223 272 q 227 297 226 293 q 229 303 229 301 q 229 318 227 314 q 226 322 230 321 q 230 333 231 332 q 229 337 229 335 q 229 359 227 355 q 230 367 230 363 q 228 377 230 373 q 226 387 226 382 q 228 398 226 393 q 230 409 230 402 q 229 427 227 420 q 233 439 231 434 q 228 452 229 451 q 227 454 227 453 q 229 464 227 459 q 229 473 230 469 q 229 486 229 480 q 233 495 229 492 q 230 516 231 512 q 229 524 229 520 q 231 539 230 539 q 226 554 229 552 q 231 562 230 554 q 229 573 231 571 q 221 568 222 573 q 212 560 219 562 q 201 539 206 541 q 199 530 196 537 q 181 518 187 520 q 173 509 174 508 q 169 508 172 510 q 162 502 166 503 q 158 496 158 501 q 146 491 150 496 q 135 485 142 486 q 116 472 123 474 q 101 467 109 470 q 97 474 99 470 q 94 481 96 478 q 100 487 97 484 q 101 499 103 491 q 111 510 109 508 q 115 511 112 511 q 120 520 115 518 q 123 530 124 522 q 131 534 127 533 q 135 542 135 535 q 147 548 143 545 q 158 554 151 552 q 168 566 165 562 q 176 573 172 569 q 187 586 185 581 q 195 592 189 591 q 206 607 206 604 q 210 613 207 610 q 219 622 219 619 q 222 623 219 625 q 213 627 218 629 q 203 625 208 625 q 187 626 195 625 q 172 626 179 626 l 119 626 q 96 626 101 625 q 85 628 92 628 q 69 626 77 628 q 55 625 62 625 q 46 626 51 625 q 36 625 42 626 q 24 625 25 626 q 20 623 23 623 q 8 640 5 637 q 9 652 12 644 l 20 668 q 30 675 27 670 q 42 680 33 680 q 54 690 48 687 q 70 698 63 698 q 88 700 82 702 q 100 702 94 698 q 106 700 104 701 q 115 701 108 699 q 132 696 130 695 q 138 698 135 697 q 147 695 141 695 q 155 698 153 695 q 168 698 166 695 q 174 699 169 701 q 206 697 195 699 q 227 698 217 695 q 227 722 230 709 q 227 741 225 735 q 226 766 226 759 q 225 779 226 773 q 225 803 226 796 q 226 815 223 809 l 223 830 q 225 841 226 841 q 223 845 223 842 q 228 856 225 850 q 226 869 231 862 q 227 877 229 872 q 225 885 226 883 q 228 901 227 891 q 226 919 229 911 q 228 942 227 934 q 225 957 229 950 q 222 969 218 964 q 227 982 226 973 q 236 988 233 984 q 245 994 240 991 q 263 1003 252 1001 q 286 1018 279 1015 q 299 1025 293 1020 q 306 1018 303 1022 q 313 1011 309 1014 q 320 998 313 1005 "},"V":{"x_min":-138.359375,"x_max":1382.21875,"ha":910,"o":"m 596 153 q 601 168 600 166 q 606 170 602 170 q 606 191 599 181 q 610 214 613 202 q 617 222 615 219 q 618 227 618 225 q 622 234 619 231 q 623 244 625 237 q 625 263 628 261 q 638 280 633 276 q 641 295 642 284 l 648 309 q 653 317 651 311 q 657 326 655 322 q 662 335 660 330 q 663 344 664 340 q 678 371 671 360 q 685 387 685 383 q 686 393 685 390 q 689 400 687 397 q 693 409 691 402 q 700 423 698 420 q 701 431 702 425 q 706 441 705 435 q 709 454 708 447 q 721 482 718 463 q 736 502 735 496 q 741 512 737 508 q 748 539 748 523 q 756 548 755 541 q 765 557 758 556 q 775 588 765 579 q 777 598 777 592 q 784 606 777 603 q 786 617 785 614 q 790 623 788 621 q 797 640 792 634 q 804 656 803 647 q 815 678 816 672 q 822 689 820 689 q 826 693 824 690 q 830 701 828 697 q 836 710 832 706 q 844 727 843 727 q 846 728 845 727 q 859 758 854 751 q 868 777 865 766 q 878 791 876 790 q 881 793 880 792 q 891 813 888 811 q 892 822 893 815 q 902 835 899 826 q 912 849 906 845 q 929 873 923 869 q 940 898 937 887 q 953 915 944 910 q 961 932 953 927 q 971 948 969 937 q 983 961 983 960 q 986 963 983 961 q 996 975 994 973 q 996 982 998 976 q 1007 987 1003 983 q 1018 994 1011 991 q 1026 1007 1026 1006 q 1028 1010 1026 1009 q 1044 1026 1039 1018 q 1053 1032 1051 1028 q 1060 1037 1055 1036 q 1079 1060 1074 1053 q 1091 1071 1085 1066 q 1104 1085 1101 1081 q 1115 1093 1108 1090 q 1123 1100 1119 1097 q 1135 1105 1128 1104 q 1140 1111 1138 1108 q 1144 1117 1142 1115 q 1159 1129 1154 1125 q 1167 1138 1165 1132 q 1185 1142 1177 1138 q 1201 1150 1193 1147 q 1210 1150 1205 1151 q 1220 1150 1215 1150 q 1230 1152 1226 1150 q 1242 1152 1235 1154 q 1256 1149 1252 1150 q 1262 1148 1260 1148 q 1277 1149 1275 1150 q 1283 1148 1280 1148 q 1292 1150 1285 1148 q 1304 1152 1298 1152 q 1311 1149 1307 1150 q 1319 1146 1315 1148 q 1350 1136 1337 1138 q 1370 1127 1363 1133 q 1380 1119 1379 1123 q 1382 1110 1382 1116 q 1370 1098 1372 1104 q 1351 1087 1355 1091 q 1344 1081 1348 1083 q 1326 1072 1330 1072 q 1315 1070 1319 1070 q 1304 1074 1311 1071 q 1290 1078 1292 1075 q 1285 1082 1288 1081 q 1268 1084 1277 1083 q 1253 1087 1260 1085 q 1238 1087 1238 1087 q 1237 1086 1238 1086 q 1197 1071 1204 1079 q 1187 1068 1190 1071 q 1177 1063 1184 1064 q 1165 1055 1166 1056 q 1159 1055 1163 1053 q 1153 1049 1155 1052 q 1146 1047 1151 1045 q 1133 1032 1135 1037 q 1127 1025 1131 1028 q 1110 1011 1115 1025 q 1089 997 1093 1002 q 1082 986 1085 992 q 1074 981 1078 983 q 1066 976 1071 979 q 1060 956 1062 959 q 1044 942 1048 949 q 1033 933 1040 935 q 1023 913 1026 916 q 1017 907 1020 910 l 1007 891 q 994 872 995 872 q 991 856 996 864 q 980 845 986 849 q 976 834 979 838 q 971 827 973 831 q 964 811 972 816 q 961 804 963 807 q 956 796 959 801 q 950 783 953 790 q 942 771 948 775 q 935 755 937 759 q 927 748 933 751 q 919 729 922 735 q 913 714 915 716 q 911 706 911 712 q 898 689 902 693 q 892 683 895 686 q 885 670 889 672 q 880 653 885 659 q 872 638 873 641 q 868 627 868 629 q 865 623 868 625 q 846 581 858 596 q 841 558 841 567 q 832 549 834 556 q 826 539 830 542 q 818 518 820 527 q 808 504 816 508 q 804 486 807 489 q 801 477 801 482 q 795 469 796 474 q 793 457 794 463 q 786 451 788 455 q 782 443 785 446 q 780 430 782 432 q 777 425 778 428 q 771 410 773 415 q 767 402 770 405 q 763 390 766 392 q 762 382 760 389 q 750 360 755 364 q 746 347 746 356 q 735 331 736 341 q 727 313 735 321 q 724 299 728 305 q 717 286 720 293 q 712 265 713 269 q 700 231 701 245 q 693 210 699 218 q 691 195 694 199 q 687 183 687 191 q 680 169 683 172 q 678 164 678 166 q 675 152 676 153 q 674 149 674 151 q 673 137 674 141 q 671 131 672 134 q 672 113 671 118 q 671 104 672 108 q 664 86 663 92 q 660 75 666 80 q 659 53 660 55 q 655 47 657 51 q 656 38 657 42 q 656 32 655 35 q 654 25 653 29 q 652 17 655 21 q 649 10 651 13 q 645 4 647 8 q 644 -12 644 -8 q 640 -18 644 -17 q 639 -30 642 -25 q 633 -39 636 -35 q 630 -61 636 -58 q 625 -77 630 -71 q 625 -92 625 -90 q 623 -103 625 -99 q 622 -113 622 -107 q 616 -126 618 -123 q 611 -134 614 -130 q 613 -145 611 -139 q 613 -157 615 -150 q 610 -171 611 -166 q 606 -179 609 -176 q 606 -196 607 -191 q 602 -206 604 -202 q 601 -215 604 -211 q 598 -225 598 -219 q 597 -234 596 -227 q 599 -245 598 -241 q 601 -255 599 -249 q 600 -267 603 -260 q 604 -276 604 -269 q 604 -287 603 -282 q 607 -305 609 -299 q 609 -316 604 -311 q 610 -325 610 -320 q 614 -333 610 -330 q 613 -341 611 -337 q 613 -348 615 -344 q 618 -377 617 -366 q 622 -393 619 -389 q 624 -411 621 -405 q 630 -424 628 -416 q 623 -434 625 -432 q 618 -438 621 -435 q 604 -455 603 -450 q 593 -457 596 -454 q 585 -463 590 -461 q 572 -470 579 -465 q 560 -480 565 -474 q 553 -480 557 -477 q 543 -484 549 -484 q 526 -481 527 -480 q 522 -480 524 -482 q 522 -470 519 -474 q 524 -459 524 -465 q 521 -441 520 -443 q 522 -438 522 -439 q 518 -425 518 -428 q 516 -423 519 -423 q 515 -393 512 -405 q 510 -372 512 -378 q 507 -362 507 -366 q 504 -345 507 -348 q 505 -329 507 -337 q 504 -313 504 -321 l 507 -297 q 501 -278 503 -280 q 500 -275 500 -276 q 500 -259 501 -263 q 497 -253 499 -256 q 495 -236 500 -242 q 491 -218 491 -229 q 489 -193 492 -202 q 485 -180 486 -184 q 484 -165 485 -166 q 482 -161 482 -164 q 482 -151 481 -157 q 481 -139 482 -146 q 478 -129 480 -135 q 478 -116 477 -123 q 475 -101 474 -103 q 476 -97 476 -100 q 474 -88 476 -93 q 476 -80 473 -84 q 472 -64 474 -69 q 469 -55 470 -59 q 465 -43 465 -43 q 466 -40 466 -43 q 463 -25 462 -31 q 461 -17 463 -20 q 458 0 457 -1 q 459 1 459 0 q 454 23 454 20 q 450 44 450 37 q 447 54 448 50 q 446 62 446 58 q 444 75 446 71 q 440 84 442 80 q 436 103 438 97 q 438 112 435 108 l 427 126 q 427 142 428 141 q 424 147 425 143 q 421 164 424 164 q 417 168 419 165 q 413 193 413 184 q 406 207 413 202 q 406 220 409 214 q 401 231 404 226 q 400 244 404 240 q 398 257 396 249 q 392 277 396 271 q 386 290 389 283 q 382 307 382 306 q 375 332 378 322 q 370 349 371 341 q 367 366 364 359 q 363 376 364 370 q 358 386 362 382 q 356 408 360 397 q 355 431 352 420 q 351 439 351 432 q 345 448 351 446 q 345 467 345 463 q 341 473 344 470 q 339 491 339 484 q 333 501 339 499 q 330 516 333 511 q 328 530 326 520 q 320 550 322 546 q 316 557 317 553 q 311 572 314 564 q 306 588 306 584 q 301 611 301 600 q 294 621 297 615 q 288 630 291 626 q 286 641 290 638 q 282 651 282 644 q 276 663 278 661 q 275 672 275 666 q 265 693 269 689 q 255 705 260 698 q 255 722 260 713 q 241 731 250 731 q 240 748 242 743 q 234 758 237 752 q 223 771 223 769 q 219 775 222 773 q 207 790 208 788 q 200 793 206 793 q 188 808 191 804 q 183 817 185 812 q 170 823 173 817 q 160 832 166 828 q 145 832 153 831 q 130 835 137 834 q 113 834 122 835 q 99 836 105 834 q 67 832 82 835 q 48 824 52 823 q 40 823 43 824 q 28 812 29 813 q 24 809 27 811 q 13 799 14 801 q 9 797 12 797 q 2 788 4 794 q -6 777 0 781 q -9 768 -6 770 q -14 763 -12 766 q -20 746 -20 751 q -25 740 -20 741 q -26 731 -23 733 q -27 725 -29 729 q -37 709 -35 720 q -46 691 -39 698 l -43 676 q -45 666 -44 672 q -47 655 -46 660 q -47 646 -47 651 q -50 638 -47 641 q -44 620 -47 630 q -44 599 -42 610 q -40 590 -39 595 q -42 579 -42 584 q -39 567 -37 569 q -37 562 -40 565 q -33 550 -36 549 q -31 548 -31 550 q -26 529 -29 534 q -20 519 -23 524 q -14 504 -18 511 q -11 499 -13 501 q -6 491 -9 496 q 2 474 0 476 q 4 470 4 473 q 27 451 18 459 q 44 446 42 447 q 47 443 46 446 q 67 440 63 440 q 78 439 71 440 q 86 436 82 438 q 94 438 89 434 q 102 445 100 440 q 109 453 104 450 q 116 467 116 466 q 118 477 119 473 q 118 485 118 481 q 119 495 119 492 q 115 503 119 499 q 113 510 113 504 q 109 519 112 516 q 99 541 104 538 q 94 554 94 545 q 86 563 90 560 q 78 572 81 567 q 80 582 80 579 q 81 590 80 585 q 92 602 93 600 q 92 606 90 603 q 107 619 104 613 q 124 628 123 622 q 134 633 132 632 q 138 637 137 634 q 160 626 155 638 q 172 619 170 626 q 183 610 174 613 q 186 591 184 594 q 185 587 188 588 q 200 579 200 579 q 208 562 207 567 q 212 544 211 549 q 210 537 212 539 q 219 523 215 526 l 214 501 q 205 486 208 491 q 198 477 202 481 q 191 465 193 467 q 189 458 189 462 q 181 452 181 455 q 176 450 180 448 q 168 437 168 438 q 169 435 169 436 q 160 426 164 431 q 150 420 157 421 q 137 402 138 415 q 124 398 124 401 q 122 393 124 396 q 109 386 115 390 q 99 377 103 382 q 83 367 90 370 q 71 359 75 364 q 58 353 59 355 q 55 349 56 351 q 44 349 44 348 q 40 351 43 351 l 20 349 q 8 352 9 354 q 5 351 8 351 q -2 354 2 352 q -9 356 -6 355 q -25 360 -25 360 q -38 366 -33 366 q -46 370 -43 367 q -59 380 -56 377 q -69 382 -62 383 q -80 399 -77 396 q -85 405 -82 402 q -90 415 -89 408 q -96 423 -92 421 q -100 437 -96 432 q -109 446 -104 442 q -118 469 -115 461 q -122 488 -123 486 q -124 495 -122 489 q -126 505 -126 499 q -130 518 -127 511 q -132 537 -131 531 q -134 548 -134 542 q -134 562 -132 558 q -137 568 -137 565 q -137 588 -135 583 q -138 600 -138 594 q -137 607 -138 603 q -137 615 -137 611 q -132 630 -134 629 q -131 634 -131 632 q -128 651 -127 645 q -124 657 -130 656 q -122 671 -123 666 q -118 683 -120 676 q -105 709 -109 704 q -99 721 -101 714 q -90 738 -92 736 q -89 744 -89 740 q -83 748 -85 746 q -77 754 -81 751 q -69 768 -75 763 q -61 784 -63 773 q -48 797 -51 794 q -42 804 -44 800 q -33 812 -31 811 q -32 816 -35 813 q -18 826 -24 820 q -5 835 -12 831 q 11 849 8 847 q 17 854 14 851 q 31 860 31 858 q 35 865 32 862 q 50 874 44 866 q 67 880 61 876 q 82 885 73 884 q 97 893 93 891 q 105 900 101 896 q 118 900 112 900 q 126 903 123 900 q 134 910 128 908 q 141 907 141 911 q 155 910 147 910 q 172 911 162 910 q 182 912 176 911 q 195 911 188 912 q 206 908 202 910 q 217 907 210 907 q 232 904 229 903 q 238 904 236 904 q 257 891 252 893 q 267 878 265 880 q 271 873 269 876 q 281 860 279 862 q 284 855 283 858 q 300 842 295 851 q 314 827 305 832 q 332 801 328 805 q 337 791 336 792 q 339 788 339 790 q 347 771 344 782 q 352 760 352 763 q 352 756 352 758 q 358 746 355 751 q 362 735 362 741 q 369 712 366 717 q 377 702 373 706 q 380 687 378 691 q 387 682 382 683 q 391 663 390 667 q 394 653 392 660 q 395 640 392 647 q 402 628 398 634 q 408 611 409 615 q 409 604 408 607 q 414 592 413 596 q 417 585 415 588 q 419 579 419 583 q 420 571 419 575 q 432 544 428 550 q 438 527 436 538 q 442 510 439 515 q 440 501 444 504 q 445 491 444 495 q 450 484 446 486 q 454 459 451 469 q 459 442 459 448 q 461 427 458 435 q 466 416 466 419 q 466 411 466 413 q 468 399 467 401 q 472 396 469 397 q 474 381 473 383 q 473 377 476 379 q 476 367 476 373 q 478 358 477 362 q 482 347 480 349 q 481 340 484 344 q 484 333 484 337 q 488 326 485 329 q 491 311 489 313 q 493 307 493 310 q 499 284 497 290 q 499 271 501 278 q 504 254 504 256 q 507 250 504 252 q 510 237 508 244 q 516 227 511 230 q 518 212 516 221 q 523 193 520 203 q 524 187 524 191 q 526 179 524 183 q 531 160 531 165 q 533 149 530 154 q 537 134 538 137 q 538 128 537 131 q 540 118 541 119 q 539 113 539 116 l 546 96 q 548 85 549 90 q 553 75 548 80 q 553 66 553 70 q 557 61 553 62 q 561 29 560 39 q 563 22 562 25 q 564 14 564 18 q 573 42 575 33 q 576 54 572 50 q 576 68 573 61 q 575 82 579 75 q 580 94 577 92 q 583 97 583 96 q 585 108 585 103 q 585 119 584 113 q 591 133 591 131 q 594 138 591 135 q 592 151 591 151 q 594 153 594 151 l 596 153 "},"h":{"x_min":62.390625,"x_max":869.484375,"ha":635,"o":"m 633 1161 q 629 1146 630 1148 q 626 1139 628 1143 q 615 1133 615 1135 q 611 1129 614 1132 q 600 1118 602 1119 q 595 1116 598 1117 q 560 1094 577 1101 q 520 1109 537 1100 q 507 1110 514 1106 q 496 1120 500 1115 q 478 1117 480 1116 q 474 1120 477 1119 q 459 1117 466 1117 q 440 1117 451 1117 q 412 1108 419 1113 q 394 1101 405 1102 q 381 1093 383 1096 q 374 1090 379 1091 q 366 1081 370 1086 q 358 1072 363 1077 q 347 1062 348 1064 q 344 1059 347 1059 q 335 1044 336 1047 q 332 1041 335 1041 q 326 1031 326 1034 q 321 1028 325 1028 q 319 1019 322 1021 q 316 1010 316 1017 q 287 978 301 984 q 279 961 283 965 q 278 949 275 956 q 269 935 271 937 q 267 931 267 934 q 264 919 265 921 q 261 915 263 918 q 255 897 256 900 q 249 892 253 893 q 242 869 249 878 q 240 859 240 864 q 237 847 240 855 q 234 840 236 845 q 231 831 233 835 q 229 813 230 815 q 229 808 227 811 q 225 801 226 805 q 222 794 225 797 q 218 781 219 782 q 217 778 217 781 q 210 762 212 762 q 207 760 208 762 q 203 735 203 746 q 204 727 203 731 q 203 717 204 724 q 196 697 196 701 q 193 694 196 694 q 191 679 196 687 q 191 663 189 668 q 192 652 192 657 q 185 628 185 633 q 183 621 185 623 q 183 606 184 614 q 176 594 181 598 q 176 569 176 569 q 172 562 174 565 q 168 554 170 558 q 166 533 172 538 q 168 520 169 526 q 169 505 168 514 q 164 495 162 497 q 165 489 165 493 q 164 480 166 484 q 160 472 161 477 q 160 464 160 469 q 161 454 161 459 q 160 446 161 450 q 161 439 160 442 q 157 415 158 424 q 158 404 157 409 q 158 396 160 400 q 157 390 158 393 q 155 381 155 387 q 155 368 154 374 q 154 360 155 363 q 151 345 151 349 q 153 339 150 340 q 151 324 154 326 q 151 309 147 321 q 147 295 145 297 q 151 291 150 294 q 163 298 162 295 q 166 302 164 301 q 173 321 173 320 q 183 337 179 335 q 187 345 187 339 q 192 351 189 348 q 198 358 195 354 q 202 365 200 360 q 203 373 204 370 q 210 379 210 373 q 215 385 210 385 q 219 394 215 392 q 225 404 223 397 q 236 419 231 406 q 246 434 245 432 q 252 436 248 436 q 259 444 255 440 q 267 454 264 448 q 277 460 276 458 q 280 463 278 462 q 286 468 283 466 q 293 473 288 470 q 305 482 306 481 q 306 485 305 484 q 317 492 313 489 q 325 496 321 495 q 341 507 339 501 q 354 512 344 512 q 371 520 367 518 q 381 520 375 522 q 400 515 396 516 q 412 516 405 514 q 427 509 424 510 q 435 507 430 508 q 440 490 438 491 q 444 486 443 489 q 448 470 442 474 q 453 454 454 465 l 457 439 q 463 419 462 431 q 466 397 465 408 q 474 375 473 382 q 478 363 476 367 q 482 345 478 352 q 488 328 485 337 q 493 308 489 316 q 493 295 496 301 q 503 264 499 274 q 505 255 504 259 q 507 248 507 252 q 507 236 505 238 q 508 229 510 233 q 516 213 518 215 q 520 208 514 211 q 519 193 518 202 q 529 177 527 180 q 530 165 530 173 q 533 151 533 153 q 538 147 534 149 q 539 128 539 131 q 539 122 538 126 q 543 114 541 118 q 545 104 545 111 q 545 93 545 99 q 552 84 545 88 q 553 71 550 73 q 556 67 556 70 q 559 52 557 52 q 562 48 561 51 q 564 37 561 42 q 567 25 567 33 q 571 16 571 23 q 573 5 571 10 q 578 -11 579 -9 q 579 -16 577 -13 q 585 -29 581 -23 q 588 -42 590 -35 q 592 -50 591 -46 q 595 -59 592 -54 q 600 -72 598 -66 q 604 -85 602 -78 q 609 -94 607 -90 q 613 -101 610 -97 q 621 -122 619 -118 q 628 -130 622 -127 q 640 -146 637 -141 q 651 -154 644 -151 q 660 -167 659 -165 q 663 -166 661 -169 q 676 -177 668 -173 q 687 -187 683 -180 q 700 -193 699 -191 q 704 -196 701 -195 q 718 -200 717 -198 q 724 -203 720 -203 l 746 -208 q 760 -210 758 -208 q 765 -211 762 -211 q 779 -208 771 -211 q 794 -207 788 -206 l 819 -195 q 824 -189 823 -193 q 831 -185 824 -184 q 849 -171 845 -173 q 861 -172 854 -169 q 869 -188 868 -184 q 854 -195 865 -192 q 849 -206 847 -203 q 847 -211 850 -208 q 824 -216 831 -212 q 812 -225 817 -219 q 796 -229 796 -229 q 781 -236 788 -236 q 771 -240 775 -237 q 750 -249 754 -246 q 741 -255 746 -252 q 729 -255 735 -255 q 720 -261 722 -256 q 703 -262 709 -261 q 690 -267 697 -263 q 671 -267 679 -261 q 655 -261 659 -264 q 634 -257 642 -264 q 622 -252 622 -249 q 618 -255 622 -256 q 610 -250 615 -252 q 603 -244 604 -249 q 592 -238 595 -240 q 590 -231 590 -236 q 573 -225 580 -225 q 569 -218 575 -218 q 560 -215 562 -218 q 554 -204 557 -210 q 548 -192 550 -199 q 539 -183 542 -184 q 537 -177 535 -183 q 524 -159 524 -162 q 520 -153 523 -155 q 516 -142 518 -143 q 515 -138 514 -141 q 510 -126 508 -127 q 512 -122 512 -126 q 501 -111 504 -116 q 500 -101 501 -104 q 500 -92 499 -99 q 493 -71 486 -78 q 481 -61 491 -65 q 480 -52 484 -55 q 480 -46 477 -50 q 476 -35 477 -42 q 472 -23 474 -29 q 468 -15 470 -18 q 465 -8 466 -12 q 465 6 467 6 q 461 9 462 6 q 453 36 457 31 q 451 52 450 42 q 446 73 446 66 q 443 84 447 80 q 440 99 439 99 q 440 100 440 99 q 436 113 436 111 q 432 120 435 115 q 428 135 428 131 q 423 151 423 147 q 421 158 423 155 q 417 166 419 162 q 417 174 415 169 q 410 198 411 184 q 402 219 409 211 q 402 231 405 226 q 398 244 400 237 q 394 265 398 253 q 386 284 392 276 q 385 296 386 291 q 382 303 385 301 q 379 326 382 318 q 377 344 377 341 q 377 349 378 347 q 369 370 373 367 q 363 381 366 374 q 360 392 360 386 q 356 400 360 397 q 352 411 354 409 q 348 416 351 413 q 344 432 345 430 q 340 436 343 434 q 319 441 324 446 q 307 435 314 436 q 301 425 305 428 q 294 419 298 421 q 290 408 293 412 q 288 397 288 404 q 278 378 275 392 q 267 368 269 371 q 267 360 265 366 q 261 356 264 358 q 255 351 257 354 q 246 335 246 339 q 242 325 245 330 q 233 305 237 307 q 230 297 230 303 q 225 280 226 286 q 219 271 222 275 q 214 263 217 268 q 209 242 208 248 q 204 233 210 237 q 202 221 203 226 q 198 208 200 215 q 193 193 195 198 q 189 181 191 184 q 189 173 187 177 q 186 168 187 172 q 183 160 185 164 q 177 147 179 147 q 174 143 176 146 q 172 128 172 132 q 169 120 172 124 q 167 109 166 112 q 165 104 168 105 q 166 86 165 90 q 166 77 166 81 q 166 69 166 74 q 172 62 166 65 q 169 49 172 51 q 165 43 166 47 q 155 37 158 42 q 143 35 153 33 q 134 24 137 31 q 124 14 131 17 q 109 -4 112 4 q 96 -8 96 -4 q 94 -12 97 -12 q 88 -12 92 -14 q 80 -13 84 -10 q 70 -1 74 -5 q 71 10 69 5 q 73 21 73 14 q 69 40 69 35 q 70 50 70 44 q 68 62 67 61 q 69 66 69 63 q 65 82 69 71 q 67 99 62 93 q 66 122 65 116 q 63 132 67 127 q 63 160 63 147 q 62 170 62 172 q 63 189 62 184 q 65 199 65 193 q 66 210 66 206 q 69 219 66 215 q 66 243 66 227 q 65 276 66 259 q 65 300 63 288 q 63 321 66 311 q 65 328 66 324 q 65 337 65 333 q 67 354 66 349 q 69 362 69 359 q 68 374 69 367 q 71 387 67 381 q 70 400 69 394 q 73 413 71 406 q 78 442 74 434 q 78 459 81 451 q 83 484 81 477 q 88 499 85 492 q 86 512 84 505 q 89 524 88 518 q 90 543 90 538 q 92 553 90 548 q 97 584 100 572 q 103 598 104 595 q 104 603 103 600 q 108 632 108 617 q 112 648 109 647 q 111 659 109 657 q 115 664 113 661 q 118 680 119 676 q 119 687 118 685 q 122 701 123 697 q 124 710 122 706 q 126 720 127 718 q 127 727 126 722 q 132 746 131 744 q 138 761 137 760 q 141 765 139 762 q 143 777 139 773 q 143 790 146 782 q 151 801 149 797 q 155 809 154 805 q 159 817 158 812 q 162 824 160 822 q 165 843 165 839 q 169 849 165 847 q 173 862 170 855 q 174 876 176 868 q 187 892 180 887 q 193 913 191 910 q 195 923 195 916 q 210 944 206 941 q 215 957 215 948 q 231 980 229 972 q 241 994 238 991 q 246 999 244 996 q 259 1024 253 1017 q 269 1040 265 1030 q 284 1059 283 1055 q 310 1089 302 1070 q 324 1097 321 1094 q 335 1102 328 1100 q 345 1113 343 1110 q 352 1116 347 1116 l 364 1125 q 375 1137 374 1138 q 378 1138 377 1136 q 387 1144 381 1140 q 397 1150 393 1147 q 409 1154 406 1152 q 413 1158 412 1155 q 421 1160 420 1157 q 428 1163 423 1163 q 448 1171 444 1173 q 459 1170 453 1170 q 477 1177 476 1176 q 484 1180 481 1177 q 493 1185 488 1182 q 503 1188 499 1188 q 514 1192 508 1189 q 524 1188 520 1190 q 533 1193 529 1186 q 555 1192 543 1190 q 573 1185 567 1193 q 602 1171 599 1177 q 619 1168 613 1171 q 633 1161 626 1165 "},"0":{"x_min":55.609375,"x_max":830.953125,"ha":894,"o":"m 709 674 q 709 666 705 670 q 716 660 713 663 q 723 655 718 657 q 731 648 728 652 q 744 630 740 633 q 747 622 747 628 q 759 611 758 611 q 758 609 760 611 q 770 593 769 595 q 774 590 771 591 q 782 574 781 575 q 786 571 784 573 q 792 553 790 556 q 796 546 793 550 q 800 537 798 543 q 804 526 801 531 q 805 503 801 508 q 813 491 809 497 q 813 478 809 485 q 813 463 816 472 q 819 443 820 446 q 828 413 826 424 q 828 389 831 401 q 826 373 823 374 q 830 370 828 373 q 830 362 831 366 q 828 355 828 358 q 830 340 831 343 q 830 335 830 337 q 829 314 828 325 q 828 294 830 303 q 817 256 826 268 q 815 245 816 248 q 812 241 815 242 q 811 230 813 234 q 807 222 809 226 q 806 206 808 207 q 803 204 804 206 q 798 187 798 188 q 797 183 797 187 q 790 165 790 177 q 785 160 786 164 q 779 154 784 157 q 777 141 777 143 q 775 135 777 138 q 765 112 766 126 q 748 90 754 93 q 743 75 743 86 q 728 61 731 63 q 725 55 725 59 q 714 44 717 47 q 712 36 712 42 q 700 28 702 33 q 691 21 698 23 q 682 4 683 5 q 668 -7 670 -4 q 659 -10 666 -10 q 647 -25 648 -24 q 642 -25 645 -25 q 628 -37 630 -33 q 623 -42 626 -40 q 608 -49 610 -48 q 603 -52 606 -50 q 591 -56 592 -58 q 587 -56 590 -55 q 578 -63 580 -59 q 573 -67 576 -66 q 560 -71 564 -70 q 550 -73 557 -71 q 530 -82 542 -80 q 508 -90 518 -84 q 495 -91 501 -89 q 482 -93 489 -93 q 463 -92 466 -90 q 455 -93 459 -93 q 436 -99 442 -97 q 421 -104 430 -101 q 401 -105 408 -104 q 387 -103 394 -105 q 366 -104 377 -104 q 349 -101 356 -104 q 338 -98 343 -97 q 330 -97 333 -99 q 314 -94 325 -97 q 300 -89 302 -89 q 295 -85 298 -89 q 276 -80 279 -82 q 269 -78 272 -78 q 248 -69 255 -78 q 227 -59 233 -63 q 221 -54 225 -56 q 214 -48 217 -52 q 202 -42 204 -43 q 200 -39 200 -42 q 191 -33 193 -33 q 188 -29 189 -32 q 177 -17 177 -21 q 167 -11 169 -10 q 162 -9 165 -12 q 156 -1 161 -4 q 149 5 151 1 q 137 18 141 18 q 128 30 128 25 q 124 32 128 35 q 111 48 120 43 q 106 65 104 63 q 105 70 108 67 q 96 88 97 82 q 90 97 94 94 q 82 111 89 108 q 78 130 80 126 q 71 147 71 146 q 70 153 70 147 q 65 174 65 166 q 61 187 66 181 q 61 204 62 202 q 59 208 59 206 q 59 227 61 222 q 56 241 56 231 q 56 255 58 252 q 55 261 55 259 q 56 274 55 268 q 58 287 58 279 q 58 299 56 298 q 59 303 59 301 q 59 320 61 311 q 63 333 58 329 q 62 348 61 345 q 65 354 63 351 q 66 363 66 359 q 67 373 66 367 q 71 389 70 387 q 75 402 74 400 q 74 408 77 404 q 77 421 78 415 q 78 435 77 427 q 86 446 82 443 q 89 451 89 448 q 92 466 92 462 q 103 484 101 478 q 107 499 105 491 q 119 521 113 516 q 126 537 124 526 q 135 550 132 542 q 146 560 138 557 q 153 573 153 569 q 155 579 153 576 q 162 583 158 581 q 165 591 165 585 q 180 601 176 598 q 187 611 184 604 q 197 616 193 613 q 204 625 200 619 q 219 634 215 628 q 232 641 231 638 q 236 645 233 644 q 251 654 250 652 q 255 659 252 656 q 265 662 263 657 q 275 667 268 667 q 287 677 286 675 q 291 679 288 679 q 305 685 305 683 q 307 689 305 687 q 326 695 322 695 q 332 695 329 694 q 353 706 348 704 q 360 710 358 708 q 381 718 373 710 q 396 722 390 716 q 411 727 401 728 q 432 736 427 732 q 443 740 436 740 q 460 740 450 740 q 480 741 470 740 q 487 741 484 741 q 496 740 491 740 q 516 741 510 740 q 537 743 530 743 q 548 741 543 743 q 561 736 558 736 q 567 735 564 736 q 587 729 576 732 q 606 721 604 724 q 623 717 621 717 q 648 706 642 709 q 660 701 653 704 q 668 694 666 695 q 674 694 671 693 q 678 687 674 689 q 683 682 682 686 q 709 674 694 674 m 716 419 q 718 432 717 430 q 718 438 718 435 q 711 459 714 455 q 705 466 708 462 q 702 480 705 477 q 699 491 699 484 q 691 510 694 499 q 683 524 685 520 q 678 531 682 529 q 672 544 676 539 q 667 558 668 549 q 653 572 657 568 q 648 583 649 576 q 629 602 634 591 q 617 613 618 611 q 614 617 615 614 q 591 628 598 626 q 577 638 580 633 q 565 640 573 642 l 552 647 q 522 661 538 657 q 510 668 511 670 q 505 668 508 667 q 491 674 499 671 q 473 679 484 678 q 463 674 467 672 q 451 675 458 675 q 429 674 434 672 q 420 676 424 675 q 394 671 405 674 q 383 672 385 675 q 378 670 381 670 q 368 668 374 672 q 360 661 363 664 q 339 653 348 655 q 326 644 330 651 q 314 641 318 642 q 307 637 310 640 q 293 625 298 628 q 274 617 276 619 q 269 615 272 614 q 263 608 267 611 q 257 602 260 604 q 242 593 246 595 q 236 588 238 591 q 231 578 234 581 q 223 571 227 575 q 221 562 225 564 q 215 557 218 561 q 215 550 218 554 q 212 541 211 546 q 198 524 203 527 q 192 515 193 520 q 182 501 184 505 q 181 486 180 496 q 174 478 177 482 q 173 463 170 473 q 169 447 168 448 q 166 438 168 443 q 162 430 165 432 q 155 404 154 411 q 153 389 155 397 q 149 381 151 385 q 146 373 147 378 q 147 354 147 362 q 146 344 146 347 q 147 335 147 337 q 142 329 146 332 q 139 307 145 318 q 145 280 142 291 q 141 261 149 269 q 147 250 147 257 q 150 237 147 242 q 149 228 147 231 q 149 219 151 225 q 155 202 157 206 q 153 193 154 198 q 160 184 155 187 q 161 170 164 181 q 168 153 166 157 q 169 142 170 149 q 176 137 173 139 q 181 132 179 135 q 193 119 191 122 q 199 113 196 116 q 204 101 199 105 q 214 92 210 97 q 217 84 215 86 q 219 75 219 81 q 229 68 225 71 q 237 59 234 65 q 246 51 245 52 q 250 47 248 50 q 271 33 265 35 q 279 24 278 32 q 302 9 297 18 q 316 4 316 4 q 317 4 316 5 q 332 -4 329 -2 q 339 -5 335 -5 q 351 -13 351 -10 q 355 -13 351 -16 q 370 -23 366 -23 q 381 -25 379 -24 q 386 -27 383 -25 q 402 -31 393 -29 q 419 -35 412 -32 q 449 -41 435 -42 q 476 -43 463 -40 q 491 -44 488 -46 q 497 -43 495 -43 q 519 -42 508 -40 q 538 -39 530 -43 q 558 -24 557 -35 q 572 -14 568 -17 q 579 -4 576 -10 q 589 1 587 -4 q 599 6 591 6 q 617 31 615 24 q 628 44 628 40 q 652 66 640 56 q 658 77 659 75 q 659 81 657 78 q 671 107 668 97 q 674 115 672 111 q 675 124 676 119 q 686 143 685 139 q 686 153 687 146 q 695 165 693 164 q 697 172 698 166 q 707 196 702 188 q 712 214 712 203 q 716 226 716 218 q 724 238 717 234 q 723 247 721 244 q 727 255 725 250 q 726 265 727 260 q 727 274 725 269 q 729 284 729 283 q 728 288 728 286 q 732 322 729 317 q 729 335 728 329 q 732 344 731 340 q 732 355 733 351 q 729 362 731 359 q 727 382 727 371 q 721 401 727 393 q 718 413 718 409 q 716 419 718 416 "},".":{"x_min":6.234375,"x_max":174.984375,"ha":220,"o":"m 80 109 q 90 108 86 107 q 99 108 94 109 q 119 96 115 99 q 126 89 123 94 q 134 85 130 86 q 142 78 139 84 q 159 73 157 71 q 162 73 161 75 l 174 62 q 174 44 174 50 q 170 33 173 37 q 158 24 158 27 q 157 18 158 21 q 147 13 149 13 q 143 12 146 13 l 124 2 q 120 -3 122 0 q 115 -9 118 -6 q 94 -15 100 -17 q 81 -13 89 -13 q 67 -4 69 -5 q 62 -5 65 -4 q 45 4 48 1 q 35 5 42 8 q 15 14 18 10 q 6 18 12 17 q 7 35 5 29 q 10 48 9 42 q 18 54 16 51 q 24 59 20 56 q 40 75 36 73 q 47 85 44 78 q 67 95 61 93 q 78 101 73 97 l 80 109 "},"@":{"x_min":51.546875,"x_max":1063.90625,"ha":1092,"o":"m 457 10 q 436 14 446 10 q 415 16 421 17 q 405 10 408 14 q 391 12 397 10 q 377 13 385 13 q 370 18 374 16 q 364 23 367 20 q 345 22 356 23 q 325 24 333 21 q 305 32 309 27 q 294 37 302 37 q 278 45 280 46 q 274 43 276 44 q 252 54 255 51 q 242 56 249 56 q 226 67 230 63 q 214 73 222 71 q 194 88 199 82 q 183 100 189 93 q 174 105 176 100 q 165 112 172 111 q 151 126 153 124 q 146 131 149 128 q 137 140 141 138 q 131 146 134 142 q 125 157 127 154 q 122 164 123 160 q 97 200 107 187 q 86 226 89 221 q 81 238 82 231 l 74 256 l 65 282 q 61 298 62 288 q 54 314 59 307 q 56 326 56 320 q 51 336 55 333 q 52 357 52 351 q 51 370 52 363 q 52 396 51 390 q 54 413 51 412 q 52 434 50 424 q 55 455 55 443 q 61 461 58 458 q 66 467 63 465 q 63 480 65 480 q 63 482 62 481 q 68 495 67 493 q 69 499 69 497 q 75 517 75 514 q 78 520 75 520 q 79 533 77 533 q 81 537 81 534 q 84 548 82 542 q 90 558 86 554 l 96 573 q 105 593 103 591 q 109 599 108 595 q 123 621 120 617 q 128 632 126 625 q 140 643 138 641 q 142 648 142 645 q 160 666 151 657 q 176 685 169 674 q 186 692 183 687 q 196 699 189 697 q 207 710 206 709 q 210 712 208 710 q 222 725 217 718 q 234 736 227 731 q 250 750 241 741 q 269 762 259 758 q 279 774 276 771 q 293 784 291 782 q 299 785 295 785 q 311 794 305 792 q 325 803 318 796 q 345 812 340 803 q 367 823 358 813 q 386 831 382 827 q 396 834 392 834 q 405 838 400 835 q 415 847 412 842 q 425 854 419 851 q 442 858 439 858 q 447 862 446 858 q 456 864 453 862 q 465 868 459 866 q 472 871 470 869 q 478 876 474 873 q 493 876 492 874 q 497 881 495 878 q 510 883 510 884 q 514 881 511 881 q 522 886 516 885 q 531 889 529 887 q 550 891 546 891 q 561 893 554 892 q 579 896 577 897 q 584 895 581 895 q 604 895 598 897 q 615 900 610 893 q 629 897 621 896 q 647 897 637 897 q 658 897 657 895 q 661 899 659 899 q 673 899 667 899 q 683 897 679 899 q 701 894 697 892 q 712 893 705 896 q 725 889 720 889 q 732 889 729 889 q 750 883 743 884 q 762 878 758 881 q 773 877 769 880 q 779 872 777 874 q 794 868 792 869 q 797 866 796 868 q 813 861 812 862 q 826 854 824 854 q 830 853 827 854 q 841 841 841 845 q 845 835 842 838 q 857 833 854 836 q 866 831 859 830 q 880 822 869 827 q 900 806 893 808 q 908 798 906 804 q 922 790 916 793 q 933 784 927 788 q 941 775 937 779 q 950 769 945 771 q 960 759 959 760 q 964 758 961 758 q 970 748 968 748 q 975 747 972 748 q 984 736 983 740 q 990 731 986 732 q 1010 702 1003 718 q 1024 693 1015 698 q 1030 678 1028 679 q 1034 674 1032 676 q 1046 643 1043 652 q 1052 626 1049 634 q 1060 586 1059 600 q 1063 557 1062 572 q 1062 543 1064 549 q 1062 531 1059 538 q 1058 523 1059 529 q 1052 516 1058 518 q 1055 505 1056 508 q 1058 500 1053 501 q 1049 455 1049 481 q 1043 434 1045 440 q 1039 420 1040 428 q 1029 403 1032 405 q 1029 398 1026 401 l 1022 382 q 1015 375 1017 381 q 1007 370 1014 370 q 1002 357 1002 359 q 1001 352 1002 355 q 993 345 998 348 q 987 337 988 343 q 973 324 973 326 q 971 325 973 322 q 956 306 960 311 q 945 299 953 301 q 937 291 938 291 q 933 290 935 291 q 918 275 919 279 q 901 265 907 268 q 892 255 895 263 q 876 249 878 249 q 872 246 874 249 q 863 242 868 244 q 853 237 858 240 q 835 231 842 231 q 824 224 826 227 q 816 223 823 221 q 802 218 805 218 q 796 217 798 218 q 778 207 782 207 q 771 206 774 207 q 761 204 766 204 q 750 203 756 203 q 739 202 741 204 q 735 200 737 200 q 723 203 729 200 q 710 206 717 206 q 687 210 693 207 q 675 214 682 212 l 653 222 q 644 233 645 233 q 641 234 642 233 q 632 244 633 242 q 630 246 632 245 q 622 264 621 261 q 625 269 623 267 q 615 288 618 284 q 609 295 611 291 q 609 309 611 307 q 604 314 606 310 q 607 325 606 320 q 606 339 609 330 q 604 360 604 354 q 603 373 603 367 q 595 366 599 368 q 588 356 591 363 q 579 351 581 355 q 572 345 577 347 q 560 328 562 333 q 554 320 557 324 q 545 311 548 317 q 538 303 543 306 q 522 291 526 297 q 516 278 519 286 l 497 263 q 478 252 489 256 q 453 239 459 244 q 442 227 447 234 q 425 227 431 229 q 412 231 419 226 q 398 230 400 229 q 393 233 396 231 q 371 239 381 234 q 354 250 362 244 q 348 259 351 255 q 341 267 345 264 q 336 282 341 278 q 338 291 337 286 q 337 305 339 297 q 341 325 341 316 q 345 340 341 335 q 351 360 349 349 q 362 377 352 371 q 359 388 359 385 q 360 394 359 392 q 365 403 364 398 q 371 409 366 408 q 385 439 382 421 q 397 457 393 453 q 401 470 401 462 q 424 503 420 491 q 436 512 435 510 q 435 516 436 514 q 456 533 450 530 q 469 541 462 537 q 476 554 474 552 q 481 557 477 557 q 489 566 488 562 q 493 571 491 569 q 508 580 504 576 q 525 594 520 588 q 538 598 530 599 q 555 609 552 606 q 561 615 558 613 q 577 620 569 619 q 587 628 585 621 q 596 626 590 628 q 603 629 602 623 q 624 628 619 629 q 633 628 629 628 q 647 623 645 623 q 653 621 649 623 q 670 610 666 611 q 679 606 675 609 q 688 593 682 598 q 701 581 694 588 q 715 577 714 576 q 718 576 716 579 q 725 571 722 575 q 729 562 727 567 q 725 554 729 558 q 727 545 721 550 q 722 537 724 541 q 721 526 720 533 q 718 518 718 524 q 718 503 718 511 q 716 489 717 496 q 713 481 716 482 q 708 458 712 469 q 709 436 704 447 q 706 418 706 425 q 706 404 705 411 q 706 386 709 394 q 712 363 712 367 q 714 352 712 359 q 725 324 717 332 q 730 316 729 320 q 733 309 731 311 q 749 296 746 298 q 755 294 752 294 q 769 287 767 286 q 773 288 770 288 q 804 280 796 283 q 822 283 812 278 q 836 285 836 286 q 842 284 836 284 q 856 290 857 288 q 857 294 855 293 q 870 297 864 293 q 884 302 877 301 q 890 307 887 305 q 892 316 893 309 q 908 326 904 321 q 912 337 912 330 q 921 344 919 339 q 927 352 923 349 q 931 366 931 362 q 935 367 930 370 q 937 374 937 370 q 937 382 937 378 q 949 413 942 405 q 948 424 948 419 q 953 432 948 430 q 956 454 956 448 q 959 467 957 459 q 962 482 963 478 q 961 491 961 486 q 961 515 964 507 q 960 534 961 530 q 960 542 959 538 q 957 550 957 545 q 956 560 957 556 q 951 572 950 571 q 948 575 952 573 q 944 588 946 581 q 937 598 942 595 q 937 609 938 607 q 934 614 935 611 q 914 641 927 638 q 910 651 914 648 q 903 659 906 655 q 892 672 903 672 q 875 688 878 683 q 864 694 872 693 q 851 705 853 702 q 847 706 850 708 q 838 714 839 713 q 834 716 836 716 q 826 728 827 729 q 823 727 826 727 q 810 735 816 732 q 801 746 804 739 q 790 748 793 744 q 782 755 786 752 q 769 760 773 759 q 765 766 766 762 l 744 773 q 729 784 733 782 q 724 790 725 785 q 711 792 716 789 q 699 794 706 794 l 687 804 q 671 807 676 807 q 649 810 661 809 q 625 813 636 811 q 597 816 604 815 q 583 813 590 817 q 569 817 576 817 q 554 816 562 816 q 532 816 543 815 q 514 811 520 817 q 489 809 495 809 q 477 808 482 809 l 462 804 q 451 798 457 801 q 439 797 446 796 q 405 779 415 790 q 392 773 393 779 q 374 770 385 773 q 368 765 370 767 q 360 760 366 763 q 351 755 356 758 q 343 748 345 752 q 316 736 325 740 q 300 729 303 729 q 298 725 297 728 q 278 712 286 718 q 256 704 269 706 q 241 680 245 695 q 227 670 229 678 q 208 650 214 660 q 192 633 202 640 q 187 618 188 619 q 184 614 187 617 q 181 598 184 606 q 176 584 179 591 q 174 575 174 579 q 169 568 173 571 q 162 543 170 554 q 157 518 154 531 q 153 510 154 514 q 153 500 151 507 q 149 481 149 489 q 146 469 149 473 q 146 450 150 459 q 148 436 149 443 q 147 421 147 428 q 149 412 147 416 q 149 404 151 408 q 153 381 151 387 q 158 368 155 375 q 165 352 161 354 q 167 339 165 343 q 172 332 169 335 q 177 313 174 316 q 179 307 179 310 q 185 295 181 299 q 187 286 189 291 l 195 269 q 202 255 199 263 q 212 245 206 248 q 221 229 218 241 q 232 219 231 219 q 233 217 233 218 q 246 202 244 204 q 250 196 248 199 q 256 191 253 193 q 264 187 259 189 q 284 169 280 173 q 297 160 295 162 q 302 157 299 158 q 326 140 318 145 q 340 131 333 135 q 347 127 344 128 q 354 120 351 126 q 381 111 370 116 q 401 100 393 107 q 416 99 405 101 q 436 93 431 93 q 446 92 442 93 q 457 87 453 86 q 463 82 461 88 q 477 81 473 81 q 482 77 481 81 q 500 73 496 80 q 514 71 507 75 q 524 70 520 67 q 538 65 538 63 q 541 69 538 67 q 556 66 549 66 q 571 66 564 66 q 588 63 581 63 q 600 63 596 65 q 609 59 603 61 q 617 61 611 59 q 628 62 622 62 q 644 59 641 58 q 653 59 648 61 l 679 59 q 693 61 689 59 q 701 63 697 62 q 712 64 706 63 q 724 65 717 65 q 739 66 733 61 q 755 67 750 62 q 777 69 773 66 q 786 75 781 73 q 800 75 793 77 q 808 80 807 74 q 828 86 823 80 q 842 90 834 93 q 862 100 859 94 q 868 112 865 105 q 885 107 873 107 q 881 96 883 101 q 876 85 878 92 q 857 71 859 74 q 851 66 854 69 q 835 67 838 69 q 830 65 832 66 q 817 63 820 62 q 815 56 815 63 l 800 55 l 766 48 q 750 35 758 37 q 735 36 741 33 q 722 30 729 32 q 709 24 716 28 q 695 24 697 27 q 691 20 694 21 q 672 16 680 21 q 659 15 664 17 q 647 13 653 13 q 630 13 632 14 q 626 12 629 12 q 603 12 613 13 q 588 8 594 10 q 569 9 575 10 q 550 11 554 12 q 541 13 545 10 q 501 7 515 2 q 466 10 488 12 l 457 10 m 596 508 q 585 519 588 514 q 577 523 580 520 q 568 526 573 526 q 550 524 561 527 q 518 514 534 523 q 505 503 511 508 q 489 496 499 497 q 484 485 486 489 q 476 480 482 481 q 470 469 476 472 q 462 461 465 466 q 446 430 455 439 q 444 408 448 419 q 442 385 440 398 q 436 370 438 379 q 442 353 436 358 q 451 341 447 348 q 472 338 466 337 q 481 339 478 339 q 493 339 491 337 q 497 341 495 340 q 512 347 507 344 q 522 356 516 351 q 533 363 531 360 q 537 368 535 366 q 545 377 543 370 q 557 386 548 385 q 562 401 564 400 q 564 405 561 402 q 572 411 571 405 q 580 420 573 417 q 601 458 591 446 q 617 488 611 470 q 611 497 614 495 q 603 501 607 499 l 596 508 "},"f":{"x_min":-291.640625,"x_max":467.96875,"ha":350,"o":"m -291 -402 q -279 -390 -287 -394 q -282 -377 -284 -379 q -282 -368 -279 -375 q -269 -360 -275 -364 q -256 -354 -264 -356 q -242 -353 -242 -356 q -238 -348 -241 -349 q -223 -360 -226 -358 q -222 -368 -219 -362 q -208 -384 -208 -379 q -206 -394 -208 -389 q -181 -416 -189 -408 q -164 -427 -166 -424 q -158 -432 -161 -430 q -139 -437 -143 -438 q -130 -438 -134 -436 q -113 -438 -122 -438 q -99 -438 -105 -439 q -85 -436 -89 -435 q -78 -436 -81 -436 q -66 -431 -71 -434 q -54 -428 -61 -428 q -42 -422 -44 -421 q -37 -423 -40 -423 q -19 -416 -28 -419 q -2 -409 -10 -413 q 10 -398 9 -400 q 12 -393 10 -396 q 23 -389 21 -390 q 29 -385 25 -387 q 35 -380 32 -383 q 44 -377 39 -377 q 52 -363 51 -364 q 56 -360 54 -362 q 69 -343 67 -347 q 71 -336 71 -340 q 80 -328 81 -329 q 81 -322 80 -326 q 97 -304 88 -311 q 107 -280 107 -297 q 119 -252 115 -264 q 124 -236 124 -241 q 130 -227 124 -230 q 132 -206 130 -219 q 137 -193 135 -199 q 142 -185 139 -188 q 139 -166 139 -172 q 143 -155 143 -155 q 142 -151 142 -154 q 144 -137 146 -138 q 142 -132 142 -135 q 144 -121 146 -123 q 142 -116 142 -119 q 142 -90 143 -97 q 143 -75 141 -82 q 145 -67 143 -71 q 143 -61 147 -63 q 141 -46 147 -51 q 143 -27 145 -37 q 141 -8 141 -16 q 139 13 139 9 q 137 20 139 17 q 139 30 139 24 q 135 39 138 36 q 135 63 138 46 q 131 82 131 75 q 128 94 131 88 q 127 111 127 101 q 125 126 126 122 q 124 135 124 131 l 120 153 q 120 166 119 165 q 120 169 120 168 q 115 190 115 184 q 112 200 116 196 q 110 215 109 204 q 109 231 111 225 q 105 249 108 244 q 98 287 103 274 q 96 317 93 301 q 91 337 90 330 q 89 348 92 343 q 86 361 85 359 q 85 366 88 363 l 84 381 q 82 400 81 396 q 81 411 82 405 q 77 427 78 423 q 74 435 75 431 q 72 451 71 451 q 73 453 73 451 q 69 491 69 476 q 71 503 70 497 q 67 515 71 508 q 67 533 66 523 q 63 550 69 543 q 36 545 44 548 q 18 542 28 542 q 10 543 14 542 q 2 542 6 543 q -15 536 -12 538 q -21 534 -18 534 q -34 538 -29 538 q -42 541 -39 538 q -63 530 -59 537 q -75 533 -69 533 q -85 537 -82 534 q -93 552 -92 543 q -89 567 -94 560 q -74 575 -78 573 q -67 583 -70 576 q -54 590 -54 591 q -52 590 -54 590 q -40 602 -39 598 q -20 611 -28 600 q 2 609 -8 607 q 20 604 12 611 q 33 607 27 603 q 43 603 39 610 q 54 606 52 603 q 61 609 56 609 q 61 677 65 641 q 67 746 56 713 q 65 765 65 756 q 68 773 69 769 q 67 782 67 777 q 69 796 69 789 q 73 811 70 804 q 77 832 77 826 q 78 846 77 838 q 83 859 82 857 q 84 865 84 862 q 93 888 92 881 q 97 902 94 895 q 103 914 100 908 q 109 927 107 921 q 122 945 120 942 q 127 950 124 948 q 147 969 135 964 q 162 985 158 980 q 172 994 166 990 q 180 999 174 996 q 188 1005 185 1001 q 202 1012 198 1009 q 212 1018 207 1015 q 234 1029 226 1026 q 249 1039 242 1032 q 274 1046 267 1041 q 293 1048 282 1051 q 322 1056 311 1052 q 349 1056 337 1052 q 371 1051 360 1059 q 385 1051 383 1052 q 389 1049 387 1051 q 398 1047 394 1049 q 409 1044 402 1045 q 423 1033 415 1037 q 439 1025 431 1029 q 448 1013 446 1018 q 457 1007 451 1009 q 465 988 463 991 q 467 982 466 986 q 454 968 458 968 q 451 961 450 968 q 431 953 434 957 q 424 950 428 949 q 417 940 420 940 q 409 938 413 940 q 396 932 398 934 q 392 929 394 930 q 379 930 385 930 q 367 931 373 930 q 360 938 364 935 q 354 945 356 941 q 348 964 354 963 q 330 977 335 973 q 322 984 326 982 q 313 987 317 987 q 306 990 309 987 q 295 989 299 987 q 286 994 291 991 l 268 990 q 255 988 259 987 q 248 987 250 988 q 238 980 241 984 q 229 973 234 976 q 215 963 221 965 q 206 938 208 948 q 198 923 204 929 q 194 912 195 919 q 193 899 193 904 q 185 885 185 891 q 181 874 184 878 q 177 858 183 866 q 174 841 177 847 q 174 819 173 831 q 168 801 174 807 q 168 771 170 784 q 166 752 165 755 q 166 747 166 750 q 165 727 162 729 q 158 710 158 713 q 162 694 155 697 q 166 679 161 687 q 166 669 164 675 q 168 660 168 663 q 163 653 165 657 q 158 647 161 649 q 162 632 161 640 q 170 622 162 625 q 189 625 185 626 q 196 623 193 623 q 206 625 202 623 q 214 628 210 626 q 224 628 219 626 q 233 629 229 629 q 243 628 241 628 q 248 629 245 628 q 256 631 253 630 q 265 634 259 632 q 288 638 279 636 q 299 648 297 641 q 314 651 311 651 q 327 644 324 645 q 333 644 330 644 q 335 635 330 637 q 341 629 339 633 q 330 611 336 613 q 321 602 324 609 q 302 598 306 602 q 291 594 298 595 q 281 585 282 587 q 278 583 280 584 q 267 579 269 581 q 261 576 265 576 q 249 568 250 568 q 244 565 248 568 q 232 567 234 567 q 227 565 230 567 q 216 569 217 571 q 212 567 215 567 q 187 565 196 568 q 174 562 180 564 q 162 560 168 561 q 167 547 165 554 q 165 533 169 539 q 169 522 169 529 q 172 510 169 516 q 171 499 169 501 q 174 491 173 496 q 175 478 174 481 q 177 469 176 476 q 177 454 176 455 q 174 453 177 453 q 184 434 184 439 q 184 423 184 428 q 187 416 185 420 q 187 406 188 412 q 186 394 185 396 q 187 389 187 392 q 191 361 185 367 q 196 344 196 355 q 193 326 195 328 q 192 322 192 325 q 196 302 195 303 q 198 286 195 288 q 200 282 200 284 q 203 266 200 268 q 203 257 206 264 q 216 226 214 236 q 221 206 218 217 q 221 197 222 200 q 222 188 221 193 q 225 178 223 183 q 226 168 226 173 q 226 153 225 157 q 229 143 227 149 q 225 133 223 137 q 229 127 227 130 q 233 111 234 113 q 234 105 231 108 q 237 90 238 90 q 237 88 236 90 q 240 67 238 77 q 240 46 242 56 q 242 19 242 27 q 246 4 242 12 q 243 -8 241 -5 q 246 -13 245 -10 q 247 -29 248 -25 q 248 -35 246 -32 q 248 -53 249 -47 q 249 -63 246 -59 q 244 -85 245 -84 l 248 -105 q 247 -123 246 -122 q 246 -127 248 -124 q 238 -143 238 -141 q 240 -147 238 -146 q 234 -160 234 -153 q 236 -173 234 -166 q 233 -181 234 -176 q 230 -191 233 -185 q 225 -209 225 -204 q 223 -218 225 -214 q 215 -238 217 -236 q 214 -246 212 -241 q 206 -257 208 -249 q 200 -271 203 -264 q 193 -278 196 -274 q 188 -286 191 -282 q 173 -306 176 -299 q 169 -320 170 -313 q 150 -347 158 -337 q 135 -356 141 -349 q 123 -367 130 -362 q 115 -373 120 -370 q 109 -382 111 -375 q 89 -395 99 -387 q 69 -408 80 -402 q 46 -420 55 -412 q 27 -432 37 -428 q 14 -441 21 -440 q 6 -448 8 -442 l -10 -453 q -37 -467 -31 -463 q -51 -472 -44 -470 q -62 -477 -58 -474 q -69 -478 -66 -480 q -82 -483 -81 -484 q -89 -485 -84 -482 q -104 -491 -101 -491 q -111 -496 -107 -492 q -125 -491 -124 -489 q -128 -495 -126 -493 q -143 -497 -138 -497 q -151 -496 -147 -497 q -166 -499 -161 -497 q -181 -500 -180 -499 q -185 -501 -183 -501 q -200 -503 -200 -503 q -203 -503 -200 -504 q -218 -499 -210 -501 q -233 -495 -226 -497 q -250 -476 -245 -484 q -267 -465 -256 -469 q -278 -447 -274 -448 q -279 -439 -282 -446 l -291 -402 "},";":{"x_min":20.34375,"x_max":191.265625,"ha":229,"o":"m 179 78 q 177 69 176 74 q 176 56 177 65 q 180 43 179 47 q 183 35 181 39 q 180 17 179 20 q 181 12 181 14 q 170 -8 177 -4 q 174 -21 174 -17 q 173 -27 174 -24 q 162 -48 168 -40 q 162 -63 157 -55 q 152 -73 160 -70 q 147 -89 145 -77 q 131 -101 134 -90 q 123 -119 128 -111 q 101 -131 105 -128 q 94 -139 97 -134 q 81 -143 85 -139 q 70 -141 77 -147 q 69 -126 71 -132 q 73 -116 67 -120 q 89 -96 67 -99 q 97 -65 97 -88 q 99 -40 100 -46 q 97 -29 97 -35 q 98 -22 97 -23 q 96 -14 99 -21 q 90 -1 89 -2 q 89 1 90 0 q 79 9 84 6 q 69 14 74 12 q 69 23 71 18 q 66 32 67 27 q 73 39 71 33 q 77 47 74 44 q 90 54 85 52 q 94 62 94 55 q 106 67 101 63 q 118 73 111 71 q 141 88 127 84 q 151 94 147 90 q 165 97 154 99 q 177 82 179 85 q 179 78 176 80 m 160 467 q 153 455 155 458 q 147 448 150 451 q 137 445 141 448 q 127 440 134 442 q 107 432 112 432 q 93 438 103 432 q 88 445 90 442 q 78 446 85 448 q 67 458 75 459 q 52 470 56 469 q 46 473 48 470 q 30 481 33 474 q 20 491 27 488 q 28 509 24 507 q 29 515 32 511 q 37 520 33 518 q 44 527 42 523 q 57 534 52 530 q 69 541 62 538 q 84 552 78 550 q 97 560 90 556 q 115 562 104 564 q 125 556 122 560 q 135 550 128 552 q 148 531 142 533 q 158 523 154 529 q 172 520 172 519 q 174 520 172 520 q 191 512 188 512 q 188 495 188 497 q 181 486 185 488 q 174 481 177 484 q 166 472 169 477 q 160 467 164 466 "},"i":{"x_min":0,"x_max":271.484375,"ha":317,"o":"m 124 686 q 134 682 131 683 q 143 676 138 680 q 154 666 154 668 q 154 661 154 663 q 161 654 158 655 q 165 651 164 653 q 175 638 172 640 q 184 634 179 636 q 200 620 192 622 q 214 617 207 618 q 222 611 219 613 q 229 611 225 610 q 236 601 231 604 q 238 588 241 598 q 231 579 234 584 q 222 572 229 575 q 200 558 211 565 q 186 548 191 552 q 179 539 181 543 q 169 539 173 542 q 161 535 165 537 q 145 535 153 534 q 130 535 137 537 q 125 550 124 548 q 123 554 126 552 q 96 575 104 569 q 80 587 89 580 q 63 596 70 591 q 47 603 55 602 q 42 613 44 610 q 37 621 40 615 q 44 638 40 637 q 81 661 73 649 q 94 672 90 671 q 99 676 97 674 q 120 682 116 682 q 124 686 124 682 m 269 43 q 270 35 272 39 q 269 24 268 31 q 256 15 257 17 q 249 14 255 13 q 239 3 241 6 q 230 0 237 0 l 217 -6 q 206 -14 208 -13 q 200 -18 203 -16 q 185 -25 191 -23 q 174 -31 179 -27 q 161 -29 168 -29 q 149 -23 154 -28 q 134 -24 142 -24 q 123 -21 127 -24 q 111 -9 113 -9 q 111 -6 109 -9 q 96 6 103 0 q 90 20 89 17 q 85 23 90 23 q 88 35 88 33 q 88 40 89 37 l 85 69 q 89 80 88 74 q 89 92 90 85 q 89 108 88 107 q 90 112 90 109 q 90 126 89 123 q 92 131 92 128 q 92 142 90 139 q 93 147 93 145 q 91 179 93 170 q 96 193 89 187 q 93 201 96 196 q 90 211 90 206 q 92 227 90 221 q 94 236 93 233 q 93 258 94 250 q 92 272 92 265 q 90 294 93 288 q 91 302 90 298 q 90 309 92 306 q 80 336 82 328 q 69 345 78 344 q 50 356 59 358 q 35 352 42 355 q 17 347 18 352 q 9 344 16 343 q 5 354 9 351 q 0 364 1 358 q 10 375 9 377 q 13 374 12 374 q 32 386 27 386 q 35 394 29 394 q 42 401 40 394 q 55 404 52 402 q 61 406 58 405 q 85 416 75 408 q 105 417 96 416 q 122 424 115 419 q 141 428 137 427 q 167 413 162 420 q 179 401 172 406 q 185 379 185 385 q 187 368 184 373 q 189 357 187 359 q 193 352 192 355 q 191 335 192 339 q 189 325 189 330 q 193 307 193 313 q 193 298 192 302 q 195 272 195 275 q 197 250 195 255 q 195 241 199 246 q 195 212 198 226 q 198 187 192 198 q 193 177 192 180 q 196 172 195 174 q 194 161 196 166 q 193 150 192 155 q 193 112 191 127 q 196 85 195 97 q 196 66 193 73 q 200 52 198 59 q 217 33 208 37 q 223 28 219 31 q 233 25 227 25 q 243 31 240 27 q 250 43 246 36 l 269 43 "},"6":{"x_min":55.609375,"x_max":872.1875,"ha":893,"o":"m 641 857 q 657 853 652 855 q 664 850 661 851 q 687 852 679 854 q 701 850 694 850 q 708 851 705 850 q 716 850 712 851 q 728 846 722 849 q 740 845 733 843 q 756 836 750 838 q 765 831 762 835 q 782 826 774 828 q 797 815 792 820 q 805 804 803 811 q 822 797 820 800 q 828 794 824 794 q 835 784 832 788 q 845 779 838 779 q 861 762 853 770 q 869 744 869 748 q 872 736 869 739 q 867 728 870 729 q 862 720 864 727 q 850 713 851 714 q 847 708 849 712 q 836 704 842 705 q 830 694 830 702 l 809 689 q 795 685 803 686 q 779 680 788 683 q 770 694 770 690 q 755 711 758 708 q 750 717 752 714 q 733 735 735 729 q 714 743 718 741 q 708 751 709 744 q 697 756 701 751 q 687 762 694 760 q 672 773 676 769 q 653 777 661 771 q 633 779 637 775 q 625 782 629 782 q 590 779 599 788 q 569 779 577 788 q 551 783 553 782 q 542 782 549 784 q 527 777 527 775 q 519 780 523 782 q 510 777 515 778 q 501 775 504 775 q 491 773 497 775 q 480 768 484 770 q 470 766 476 766 q 463 767 467 766 q 455 767 459 769 q 432 755 438 759 q 415 752 425 751 q 401 741 406 744 q 387 736 396 737 l 378 724 q 369 719 374 720 q 360 716 364 718 q 344 701 348 706 q 333 694 340 697 q 325 684 328 687 q 317 678 322 680 q 303 663 307 666 q 297 659 299 661 q 286 641 286 647 q 277 632 279 634 q 276 625 275 630 q 263 617 263 617 q 261 618 263 618 q 250 600 259 604 q 241 583 241 595 q 232 565 234 576 q 223 546 230 554 q 222 534 223 537 q 217 531 221 531 q 215 520 219 523 q 212 511 210 518 q 198 497 200 497 q 192 495 195 496 q 197 484 196 486 q 196 480 198 482 q 189 465 189 469 q 187 461 189 462 q 186 452 189 455 q 185 442 183 448 q 180 434 181 439 q 174 428 179 430 q 173 420 174 423 q 173 413 172 417 q 166 400 169 411 q 162 383 161 386 q 165 377 164 379 q 164 360 162 368 q 160 344 165 351 q 160 333 162 333 q 157 329 158 332 q 158 317 160 324 q 160 303 157 310 q 162 293 164 295 q 162 288 160 291 q 156 281 158 286 q 151 274 154 276 q 155 264 153 268 q 157 253 157 260 q 149 248 150 253 q 142 240 149 242 q 148 232 147 237 q 153 225 149 227 q 152 204 150 211 q 154 187 154 196 q 156 174 158 177 q 160 169 154 170 q 162 153 158 154 q 162 147 165 153 q 162 126 160 132 q 168 115 164 119 q 162 95 162 108 q 173 80 162 82 q 172 72 170 75 q 177 65 174 69 q 181 50 179 54 q 185 43 183 46 q 191 23 187 27 q 203 6 199 9 q 210 -2 207 2 q 217 -10 215 -5 q 223 -17 219 -14 q 230 -31 223 -31 q 238 -40 238 -39 q 238 -44 237 -42 q 250 -52 249 -48 q 259 -56 252 -56 q 275 -74 272 -67 q 286 -79 282 -75 q 298 -84 291 -82 q 318 -99 310 -99 q 328 -105 325 -100 q 337 -109 333 -107 q 345 -113 340 -111 q 364 -123 360 -119 q 381 -126 381 -126 q 396 -131 393 -128 q 405 -132 400 -134 q 420 -138 415 -137 q 432 -139 425 -139 q 444 -139 443 -138 q 448 -141 446 -141 q 460 -141 454 -142 q 469 -147 466 -141 q 491 -145 480 -143 q 508 -141 501 -146 q 518 -142 512 -145 q 527 -142 523 -139 q 536 -137 533 -139 q 546 -135 539 -134 q 554 -132 552 -134 q 560 -128 557 -131 q 573 -126 568 -127 q 580 -120 579 -126 q 596 -111 591 -118 q 611 -101 602 -105 q 626 -93 625 -94 q 633 -89 628 -92 q 637 -82 636 -86 q 644 -78 638 -78 q 650 -69 647 -69 q 652 -63 653 -69 l 663 -51 q 674 -40 671 -50 q 687 -29 686 -31 q 686 -23 687 -28 q 698 -5 697 -16 q 710 7 709 5 q 710 12 710 9 q 714 31 714 23 q 717 47 714 40 q 722 68 721 59 q 717 84 724 77 q 722 100 725 99 q 718 104 718 101 q 717 119 718 118 q 714 123 716 120 q 713 141 716 130 q 699 154 710 153 q 693 172 695 170 q 693 177 691 174 q 684 187 685 184 q 680 189 683 189 q 680 203 682 203 q 675 204 678 203 q 664 215 676 215 q 658 231 659 229 q 653 234 657 234 q 640 241 645 240 q 636 249 636 242 q 625 252 628 248 q 615 256 622 257 q 609 269 613 269 q 581 276 598 274 q 571 282 572 283 q 567 283 569 282 q 555 287 558 287 q 548 288 552 287 q 526 295 533 295 q 510 295 519 294 q 493 295 495 297 q 489 294 491 294 q 469 295 477 291 q 449 290 459 293 q 431 283 439 288 q 413 277 417 278 q 406 275 409 276 q 394 265 404 265 q 382 255 383 265 q 370 252 373 253 q 364 248 368 252 q 349 233 355 236 q 345 225 349 226 q 343 218 341 225 q 330 197 333 200 q 321 191 326 193 q 309 176 318 180 q 308 160 310 168 q 309 141 306 151 q 301 120 303 126 q 299 108 299 115 q 300 92 297 96 q 302 77 303 88 q 308 68 305 71 q 313 59 311 65 q 322 46 324 47 q 321 44 321 46 q 328 37 325 42 q 337 32 330 33 q 339 23 339 28 q 341 16 339 18 q 352 6 347 10 q 360 -5 358 2 q 349 -21 352 -20 q 344 -25 347 -23 q 329 -27 337 -32 q 317 -43 321 -36 q 306 -40 313 -42 q 294 -44 299 -37 q 288 -38 291 -42 q 283 -32 286 -35 q 274 -33 276 -31 q 267 -35 271 -35 q 259 -30 260 -35 q 255 -23 257 -25 q 239 -15 244 -17 q 230 -9 234 -13 q 218 5 222 1 q 211 24 212 21 q 207 29 210 27 q 206 42 210 37 q 206 51 202 46 q 202 61 203 58 q 200 67 200 63 q 204 79 204 78 q 203 82 203 80 q 205 92 203 88 q 204 100 207 96 q 208 109 208 103 q 211 116 207 115 q 214 134 212 131 q 212 138 215 138 q 217 154 217 147 q 222 166 221 166 q 223 168 223 166 q 231 183 230 180 q 234 185 231 185 q 245 201 244 198 q 245 208 246 204 q 257 216 253 210 q 269 225 260 222 q 274 235 269 231 q 279 245 278 238 q 303 262 295 253 q 322 276 311 271 q 334 284 328 280 q 343 294 340 287 q 358 302 351 297 q 374 310 366 307 q 397 321 390 316 q 408 335 405 332 q 421 335 413 333 q 436 337 430 336 q 450 344 439 341 q 463 351 455 345 q 485 355 480 352 q 507 362 504 359 q 515 363 511 366 q 534 368 529 367 q 543 371 539 368 q 552 368 549 370 q 560 366 556 366 q 576 366 575 366 q 591 364 588 363 q 596 364 594 364 q 621 359 610 363 q 641 349 632 355 q 664 345 659 347 q 675 343 670 343 q 691 333 687 337 q 702 328 694 328 q 727 310 717 310 q 736 301 736 302 q 737 299 736 301 q 754 286 748 288 q 759 269 754 276 q 767 264 762 267 q 775 257 773 261 q 783 245 778 249 q 789 231 788 241 q 798 215 797 218 q 805 211 800 211 q 805 200 803 206 q 811 192 808 195 q 807 186 808 189 q 805 176 805 183 q 818 156 816 160 q 823 147 820 153 q 824 128 827 132 q 826 116 822 123 q 819 97 819 103 q 816 83 817 84 q 815 81 815 82 q 808 46 811 59 q 798 27 805 33 q 792 15 794 17 q 788 12 790 13 q 774 -5 775 1 q 763 -13 763 -12 q 759 -17 762 -14 q 751 -29 751 -27 q 748 -29 751 -31 q 734 -48 737 -46 q 729 -58 731 -51 q 716 -70 718 -70 q 713 -73 713 -70 q 703 -82 705 -78 q 697 -88 701 -85 q 679 -100 686 -99 q 665 -115 674 -113 q 649 -122 656 -116 q 637 -130 638 -131 q 634 -132 636 -130 q 616 -146 619 -145 q 610 -150 613 -147 q 596 -158 598 -155 q 591 -164 594 -161 q 572 -172 576 -170 q 564 -176 568 -173 q 542 -187 546 -183 q 533 -191 538 -192 l 514 -196 q 499 -204 503 -203 q 476 -211 486 -207 q 454 -217 466 -215 q 439 -217 440 -215 q 436 -218 438 -218 q 426 -219 431 -219 q 417 -221 421 -218 q 400 -220 401 -222 q 396 -218 398 -218 q 371 -216 379 -215 q 356 -217 363 -217 q 335 -211 339 -214 q 321 -211 328 -215 q 307 -207 314 -207 q 293 -198 297 -200 q 283 -196 290 -195 q 261 -183 275 -185 q 238 -169 246 -180 q 221 -161 227 -164 q 208 -155 215 -158 l 193 -143 q 179 -130 187 -137 q 165 -118 172 -124 q 157 -110 160 -111 q 154 -105 154 -109 q 146 -99 149 -103 q 137 -92 143 -94 q 126 -77 131 -82 q 115 -63 119 -70 q 105 -48 112 -55 q 99 -31 103 -33 q 96 -21 100 -24 q 96 -13 93 -18 q 91 -7 92 -10 q 88 1 90 -4 q 84 8 85 4 q 81 17 84 13 q 80 31 78 31 q 80 33 81 32 q 75 47 75 43 q 73 54 75 51 q 71 74 74 66 q 70 93 67 82 q 65 110 65 109 q 66 112 66 111 q 61 128 63 128 q 62 143 63 141 q 61 147 61 145 q 58 172 58 162 q 58 190 59 187 q 56 196 56 193 l 55 211 q 57 221 58 218 q 56 226 56 223 q 58 246 56 237 q 58 267 59 256 q 63 287 59 283 q 62 298 67 291 q 64 316 63 311 q 66 324 65 321 q 69 337 70 333 q 70 345 69 341 q 73 353 71 349 q 75 360 74 356 q 77 370 77 364 q 78 382 77 375 q 86 408 81 401 q 89 428 90 416 q 99 450 94 443 q 102 459 100 454 q 103 470 104 463 q 119 488 113 486 q 122 507 120 504 q 130 520 130 518 q 131 524 130 522 q 137 537 135 535 q 138 545 138 539 q 151 560 150 558 q 151 567 153 562 q 160 573 157 569 q 165 580 162 577 q 174 595 168 588 q 184 610 180 602 q 199 626 193 623 q 204 636 200 633 q 211 647 208 640 q 227 660 222 651 q 242 672 231 670 q 257 689 255 686 l 269 701 q 276 706 275 702 q 283 709 278 709 q 290 718 286 717 q 294 727 294 720 q 310 743 307 735 q 326 746 325 747 q 332 746 328 744 q 339 752 332 752 q 345 759 347 751 q 359 767 358 766 q 360 770 360 767 q 378 776 377 774 q 382 779 379 778 q 402 789 398 786 q 409 794 406 792 q 419 796 415 796 q 425 803 424 797 q 440 809 440 809 q 451 814 450 812 q 455 819 453 816 q 469 824 465 820 q 482 826 473 827 q 495 832 492 832 q 501 834 499 832 q 524 837 519 838 q 533 842 529 836 q 545 841 539 839 q 558 838 552 842 q 573 845 571 843 q 577 847 575 847 q 594 847 590 846 q 604 845 598 847 q 626 851 622 850 q 637 851 629 853 l 641 857 "},"A":{"x_min":-236.015625,"x_max":1204.53125,"ha":893,"o":"m 355 938 q 378 931 370 931 q 396 932 392 933 q 404 934 400 931 q 423 935 416 931 l 443 933 q 462 935 451 935 q 480 930 473 934 q 499 931 495 933 q 507 933 503 930 q 517 935 510 935 q 527 931 524 934 q 548 935 543 933 q 558 937 553 937 q 585 938 581 935 q 599 944 599 941 q 602 946 599 946 q 617 942 613 946 q 626 948 623 945 q 630 957 628 952 q 644 969 641 961 q 654 975 651 972 q 664 980 657 978 q 672 987 670 986 q 676 990 674 988 q 688 999 682 995 q 698 1007 694 1002 q 714 1016 709 1014 q 720 1022 718 1018 q 736 1028 733 1026 q 744 1030 739 1030 q 762 1037 751 1037 q 775 1043 773 1045 q 782 1043 777 1041 q 799 1046 794 1047 q 811 1045 804 1045 q 830 1040 827 1043 q 832 1029 832 1033 q 834 1022 832 1025 q 845 1011 845 1014 q 861 986 854 994 q 855 973 854 975 q 854 969 855 972 q 835 941 838 953 q 826 918 832 929 q 826 906 826 908 q 826 899 827 903 q 823 893 824 896 q 822 884 822 889 l 820 859 q 815 844 817 853 q 812 826 813 835 q 810 815 811 820 q 808 804 809 809 q 807 791 809 794 q 805 785 804 788 q 802 757 801 765 q 797 743 803 750 q 796 718 800 725 q 794 704 792 710 q 790 693 788 694 q 792 689 793 691 q 790 663 788 676 q 784 640 792 651 q 784 627 782 633 q 784 615 786 621 l 777 590 q 777 579 777 583 q 775 572 778 576 l 773 553 q 771 543 770 546 q 767 538 773 541 q 770 527 771 534 q 763 518 769 520 q 763 504 763 507 q 760 501 763 501 q 761 495 763 499 q 760 485 759 492 q 758 469 760 469 q 756 466 755 469 q 759 448 758 451 q 760 442 760 444 q 757 433 756 438 q 755 425 758 428 q 755 408 754 411 q 755 400 756 405 q 751 368 755 381 q 752 359 754 363 q 752 348 750 355 q 747 325 750 326 q 744 305 747 313 q 745 287 743 291 q 747 278 747 283 q 744 260 746 263 q 743 255 743 257 q 741 247 741 252 q 741 238 741 242 q 741 222 740 222 q 741 219 741 222 q 739 200 739 203 q 740 193 739 196 q 747 176 741 185 q 741 161 739 166 q 738 149 737 151 q 736 143 739 146 q 738 137 739 141 q 737 126 737 132 q 735 103 736 108 q 739 92 735 97 q 735 71 735 81 q 736 50 736 61 q 735 37 737 40 q 735 31 733 33 q 737 -1 739 9 q 739 -25 736 -12 q 740 -39 741 -37 q 740 -43 739 -40 q 741 -51 740 -47 q 744 -58 743 -55 q 746 -71 744 -70 q 747 -74 747 -73 q 747 -88 747 -81 q 744 -100 747 -96 q 748 -118 747 -116 q 750 -122 750 -119 q 752 -142 751 -137 q 752 -153 752 -147 q 754 -169 751 -161 l 755 -191 q 760 -207 760 -206 q 762 -211 759 -208 q 763 -228 758 -221 q 766 -246 767 -236 q 770 -265 770 -261 q 767 -272 770 -268 q 773 -286 773 -283 q 775 -291 773 -290 q 778 -306 778 -306 q 786 -319 786 -316 q 789 -322 786 -322 q 794 -339 793 -336 q 792 -343 794 -341 q 803 -370 797 -362 q 811 -386 808 -379 q 820 -404 811 -400 q 821 -411 816 -408 q 823 -419 826 -415 q 830 -430 828 -423 q 832 -446 831 -438 q 846 -458 838 -453 q 851 -470 853 -470 q 849 -473 849 -470 q 857 -480 854 -480 q 861 -484 859 -481 q 868 -497 868 -496 q 869 -501 869 -499 q 877 -513 876 -511 q 881 -518 878 -515 q 891 -531 889 -530 q 895 -535 893 -533 q 906 -550 904 -550 q 911 -552 908 -550 q 921 -567 919 -565 q 926 -572 923 -569 q 937 -585 931 -583 q 952 -592 944 -592 q 960 -600 957 -598 q 968 -600 963 -602 q 984 -613 972 -607 q 997 -624 992 -622 q 1007 -629 1002 -626 q 1023 -630 1022 -629 q 1025 -633 1024 -632 q 1037 -634 1032 -634 q 1047 -634 1041 -633 q 1053 -638 1051 -636 q 1062 -638 1056 -640 l 1086 -638 q 1095 -638 1091 -640 q 1101 -636 1098 -636 q 1116 -636 1112 -634 q 1124 -634 1120 -637 q 1140 -625 1133 -626 q 1152 -621 1147 -623 q 1165 -616 1162 -619 q 1171 -615 1167 -613 q 1182 -592 1177 -595 q 1189 -585 1186 -590 q 1197 -588 1193 -585 q 1204 -590 1200 -590 q 1200 -604 1203 -603 q 1197 -611 1197 -606 q 1182 -615 1182 -611 q 1182 -621 1182 -618 q 1167 -628 1169 -628 q 1163 -629 1166 -629 q 1157 -639 1161 -637 q 1150 -637 1152 -641 q 1143 -642 1147 -640 q 1138 -651 1139 -645 q 1125 -658 1131 -653 q 1113 -660 1120 -663 q 1104 -666 1109 -663 q 1091 -668 1100 -668 q 1072 -673 1075 -671 q 1067 -678 1070 -675 q 1051 -678 1052 -676 q 1048 -680 1051 -679 q 1037 -680 1041 -679 q 1026 -685 1032 -682 q 1019 -681 1021 -682 q 1007 -682 1017 -680 q 992 -680 992 -678 q 971 -679 972 -678 q 952 -682 953 -680 q 948 -683 952 -685 q 935 -678 942 -680 q 923 -672 929 -676 q 912 -671 912 -672 q 908 -670 911 -670 q 895 -663 899 -666 q 888 -659 891 -661 q 872 -655 874 -656 q 855 -642 861 -645 q 841 -631 842 -633 q 834 -629 839 -629 q 828 -619 832 -622 q 820 -610 823 -615 q 805 -591 811 -594 q 798 -577 803 -583 q 790 -565 793 -572 q 779 -547 781 -554 q 770 -535 777 -539 q 760 -514 767 -523 q 750 -491 752 -505 q 740 -474 740 -480 q 731 -459 732 -462 q 728 -453 731 -455 q 726 -434 727 -439 q 724 -424 725 -428 q 709 -402 713 -409 q 704 -381 705 -394 q 695 -353 695 -362 q 689 -337 694 -344 q 684 -314 683 -321 q 682 -302 685 -307 q 678 -286 678 -291 q 675 -276 678 -282 q 672 -250 672 -257 q 668 -238 672 -242 q 667 -221 671 -230 q 670 -204 663 -211 q 663 -188 664 -192 q 661 -177 661 -184 q 661 -164 660 -166 q 661 -158 661 -161 q 659 -147 660 -153 q 657 -137 657 -142 q 654 -113 653 -122 q 655 -100 655 -104 q 653 -70 651 -81 q 653 -56 655 -56 q 653 -54 652 -56 q 652 -31 652 -36 q 651 -21 653 -27 q 649 -13 649 -16 q 650 0 648 -6 q 652 10 652 5 q 649 27 648 25 q 651 32 651 29 q 649 49 651 40 q 648 67 648 58 q 650 93 648 80 q 651 120 652 107 q 636 122 640 120 q 628 123 633 123 q 615 122 617 123 q 610 122 613 122 q 600 125 606 123 q 588 126 594 127 q 555 123 568 122 q 530 122 542 124 q 521 120 526 122 q 512 119 516 119 q 504 119 508 118 q 497 120 500 120 q 478 120 484 119 q 469 120 473 120 q 436 116 446 119 q 420 116 427 113 q 405 115 408 115 q 400 116 402 115 q 391 113 396 115 q 382 111 386 112 q 370 97 374 101 q 370 89 373 94 q 366 81 368 84 q 366 71 368 75 q 367 59 364 66 q 359 44 359 50 q 353 39 354 43 q 348 33 352 35 q 347 22 348 27 q 343 13 345 17 q 339 -6 340 -2 q 332 -12 337 -9 q 326 -29 330 -25 q 324 -44 326 -42 q 322 -48 322 -46 q 314 -66 322 -62 q 309 -80 313 -74 q 302 -93 306 -86 l 295 -112 q 290 -118 291 -113 q 284 -123 288 -122 q 281 -141 280 -138 q 280 -147 282 -143 q 267 -158 265 -155 q 267 -162 268 -160 q 261 -172 259 -169 q 261 -179 263 -174 q 245 -191 250 -191 q 240 -207 244 -206 q 234 -211 237 -208 q 231 -219 236 -218 q 229 -226 226 -221 q 207 -244 217 -241 q 198 -256 196 -256 q 193 -264 195 -261 q 188 -271 191 -267 q 179 -283 181 -282 q 174 -287 176 -284 q 157 -302 165 -301 q 144 -318 147 -314 q 139 -324 141 -321 q 129 -328 131 -324 q 124 -336 127 -332 q 119 -341 122 -339 q 115 -348 116 -344 q 86 -364 97 -359 q 69 -379 74 -368 q 56 -387 55 -385 q 55 -390 56 -389 q 43 -394 46 -389 q 33 -400 40 -398 q 12 -411 16 -408 q 2 -416 8 -413 q -12 -419 -6 -417 q -21 -425 -18 -421 q -35 -425 -33 -423 q -39 -424 -36 -427 q -52 -423 -52 -424 q -55 -421 -52 -421 q -89 -419 -73 -423 q -107 -419 -100 -420 q -113 -411 -113 -417 q -128 -410 -122 -409 q -141 -408 -134 -411 q -146 -404 -143 -406 q -155 -402 -149 -401 q -167 -392 -164 -396 q -177 -390 -170 -389 q -189 -378 -183 -379 l -199 -362 q -210 -347 -210 -348 q -212 -341 -210 -345 q -217 -331 -217 -335 q -221 -328 -217 -328 q -223 -317 -221 -318 q -226 -313 -225 -316 q -230 -297 -227 -299 q -234 -280 -230 -283 q -231 -268 -231 -275 q -236 -257 -230 -261 q -231 -244 -230 -244 q -231 -242 -231 -244 q -227 -225 -230 -230 q -228 -216 -230 -221 q -223 -208 -226 -211 q -221 -195 -225 -199 q -218 -181 -218 -191 q -211 -169 -212 -174 q -207 -157 -210 -164 q -193 -139 -198 -145 q -187 -127 -189 -134 q -170 -109 -176 -112 q -164 -100 -165 -107 q -153 -91 -157 -97 q -142 -82 -149 -85 q -129 -70 -134 -75 q -118 -59 -124 -65 q -109 -54 -111 -55 q -104 -50 -108 -52 q -88 -42 -93 -44 q -77 -37 -82 -40 q -59 -25 -62 -27 q -52 -24 -56 -24 q -39 -17 -40 -17 q -27 -16 -29 -17 q -23 -16 -25 -16 q -10 -16 -10 -16 q -6 -17 -9 -17 q 18 -21 10 -18 q 44 -31 40 -27 q 55 -36 48 -35 q 69 -50 62 -48 q 80 -61 70 -56 q 85 -72 82 -73 q 89 -73 88 -71 q 99 -90 99 -85 q 103 -100 100 -96 q 101 -118 99 -115 q 103 -124 103 -122 q 101 -138 104 -131 q 99 -154 99 -145 q 85 -166 86 -164 q 81 -169 84 -168 q 73 -180 77 -180 q 67 -181 70 -180 q 54 -198 56 -195 q 46 -200 51 -200 q 41 -177 39 -184 q 43 -162 43 -169 q 37 -147 42 -154 q 31 -132 33 -139 q 17 -120 24 -126 q 8 -105 10 -115 q -9 -100 -8 -101 q -13 -97 -10 -99 q -33 -94 -25 -97 q -47 -88 -40 -92 q -59 -89 -54 -89 q -69 -89 -63 -89 q -84 -92 -81 -90 q -92 -92 -86 -93 q -109 -105 -103 -103 q -119 -120 -118 -115 q -126 -128 -120 -126 q -133 -147 -130 -142 q -139 -155 -137 -151 q -141 -172 -142 -166 q -146 -181 -141 -179 q -142 -189 -141 -185 q -143 -199 -143 -193 q -142 -210 -143 -206 q -147 -217 -141 -214 q -142 -229 -143 -225 q -141 -238 -141 -234 q -147 -259 -146 -253 q -150 -267 -147 -264 q -142 -278 -141 -276 q -143 -283 -143 -280 q -131 -294 -131 -287 q -123 -300 -124 -299 q -116 -299 -122 -301 q -110 -314 -113 -313 q -107 -320 -107 -314 q -88 -328 -92 -322 q -77 -336 -84 -333 q -63 -342 -65 -343 q -59 -343 -62 -341 q -41 -346 -44 -347 q -35 -347 -37 -345 q -18 -348 -23 -349 q -8 -349 -13 -347 q 16 -347 8 -349 q 36 -344 24 -344 q 45 -339 39 -341 q 54 -333 51 -337 q 78 -323 71 -326 q 89 -311 85 -320 q 99 -305 96 -306 q 100 -301 101 -305 q 110 -295 107 -299 q 120 -288 113 -291 q 128 -278 126 -280 q 134 -275 131 -276 q 139 -265 134 -268 q 143 -255 143 -263 q 158 -243 154 -252 q 169 -231 161 -234 q 177 -219 174 -223 q 183 -210 179 -214 q 191 -196 191 -200 q 195 -189 191 -192 q 203 -176 202 -180 q 208 -169 204 -172 q 215 -153 208 -158 q 221 -135 222 -149 q 232 -112 229 -126 q 244 -88 236 -99 q 252 -63 249 -71 q 255 -44 256 -54 q 265 -31 261 -33 q 267 -23 268 -29 q 274 -10 274 -18 q 280 5 275 -1 q 286 23 286 14 q 290 35 286 31 q 298 59 294 48 q 299 66 299 63 q 301 75 299 69 q 305 88 306 86 q 305 93 305 90 q 309 100 306 96 q 311 107 311 104 q 311 118 313 112 q 310 128 309 123 q 320 141 313 135 q 322 155 328 146 q 331 176 329 172 q 330 184 333 180 q 334 199 335 196 q 335 204 333 202 q 341 226 341 219 q 343 240 340 233 l 348 255 q 351 280 352 274 q 355 290 351 286 q 356 311 351 302 q 360 332 360 320 q 364 348 363 345 q 367 354 364 351 q 370 363 370 360 q 371 368 370 366 q 375 380 373 379 q 377 383 377 381 q 381 402 378 397 q 383 413 383 408 q 386 436 386 430 q 394 461 394 454 q 400 474 393 469 q 404 489 404 489 q 406 504 406 500 q 412 525 412 518 q 417 539 412 533 q 420 558 416 550 q 423 571 424 565 q 430 585 428 583 q 433 596 431 595 q 436 599 435 596 q 438 613 438 606 q 443 625 439 619 q 446 641 446 641 q 451 659 450 653 q 458 670 453 666 q 463 689 457 682 q 469 706 469 695 q 473 719 474 718 q 472 724 472 720 q 479 731 478 727 q 485 737 480 735 q 490 749 489 747 q 495 751 491 751 q 501 769 500 767 q 508 781 510 779 q 510 786 507 784 l 518 803 q 525 813 523 807 q 533 824 527 820 q 543 842 534 832 q 552 853 552 850 q 554 857 553 855 q 562 866 561 866 q 564 869 562 866 q 569 876 568 873 q 575 880 571 878 q 551 890 560 891 q 534 887 542 889 q 526 885 531 887 q 515 883 522 884 q 500 883 500 883 q 484 880 485 880 q 467 879 469 878 q 463 880 466 880 l 424 878 q 409 878 416 878 q 393 880 402 878 q 383 881 387 880 q 373 883 378 883 q 347 877 356 876 q 330 878 339 878 q 320 877 326 878 q 309 880 314 876 q 284 880 295 874 q 269 876 278 874 q 252 874 261 878 q 200 872 227 872 q 181 868 187 868 q 168 866 174 868 q 157 863 161 862 q 149 862 153 864 q 128 858 134 858 q 120 855 123 858 q 112 851 116 853 q 101 847 108 850 l 77 842 q 52 828 59 830 q 43 822 47 822 q 36 820 39 822 q 25 812 25 813 q 21 808 24 811 q 9 801 10 805 q 2 797 8 797 q -4 778 1 781 q -14 760 -10 762 q -20 755 -17 758 q -21 737 -18 739 q -27 733 -24 736 q -44 704 -43 717 q -47 676 -44 690 q -52 657 -50 661 q -51 648 -54 653 q -47 614 -52 625 q -40 598 -42 599 q -39 595 -39 598 q -37 586 -36 591 q -36 579 -37 581 q -29 568 -33 572 q -20 560 -24 564 q -14 545 -17 549 q -4 543 -10 542 q 4 535 -4 535 q 13 526 13 534 q 23 521 18 526 q 33 515 27 516 l 50 511 q 59 506 56 508 q 67 507 61 504 q 82 504 77 499 q 93 510 86 510 q 112 502 103 504 q 122 496 122 500 q 99 482 105 486 q 85 476 92 478 q 73 476 74 477 q 69 473 71 474 q 58 471 61 473 q 52 472 55 469 q 39 470 40 467 q 35 470 37 472 q 14 464 17 466 q 8 462 10 462 q -3 463 2 462 q -16 465 -9 465 q -29 472 -29 472 l -55 477 q -69 486 -67 488 q -74 485 -71 485 q -82 494 -82 491 q -85 496 -82 497 q -100 512 -94 510 q -108 526 -103 522 q -112 542 -113 531 q -120 553 -120 550 q -122 558 -120 556 q -126 575 -127 573 q -127 579 -126 576 q -129 590 -127 585 q -132 600 -131 595 q -131 623 -130 617 q -132 636 -132 630 q -128 651 -128 645 q -124 664 -124 660 q -122 672 -124 668 q -104 720 -115 706 q -99 736 -100 735 q -84 752 -89 752 q -81 760 -84 758 q -78 769 -78 763 q -55 790 -65 782 q -39 808 -46 797 q -30 813 -33 812 q -27 817 -27 813 q -14 827 -17 824 q -9 832 -12 830 q 10 851 4 838 q 24 859 24 858 q 36 866 33 865 q 43 869 39 866 q 59 878 55 877 q 63 883 62 878 q 79 889 74 889 q 88 891 84 889 q 101 899 94 892 q 119 904 118 903 l 153 912 l 179 922 q 196 930 191 930 q 206 933 200 930 q 223 935 219 937 q 230 938 227 934 q 239 937 234 935 q 248 938 244 938 q 260 939 255 940 q 271 941 265 938 q 281 940 275 938 q 291 937 287 941 q 305 937 307 938 q 307 938 303 937 q 319 937 317 935 q 324 938 321 940 q 335 937 332 937 q 343 938 337 938 l 355 938 m 717 931 q 704 925 710 925 q 689 918 690 918 l 671 912 q 659 910 664 911 q 652 908 655 910 q 640 890 645 893 q 629 883 634 887 q 606 854 625 859 q 600 843 599 845 q 599 841 600 842 q 588 827 588 828 q 584 823 587 826 q 576 801 584 807 q 574 786 575 790 q 571 777 573 782 q 560 767 561 769 q 557 763 558 766 q 555 749 557 752 q 553 743 553 746 q 543 720 543 728 q 535 706 542 712 q 531 694 535 698 q 526 682 526 690 q 518 672 520 674 q 518 667 516 670 q 515 643 518 648 q 511 634 512 638 q 506 624 505 626 q 504 619 507 622 q 503 607 504 609 q 499 604 501 604 q 486 580 492 583 q 486 568 485 569 q 486 565 486 567 q 484 555 486 560 q 485 546 482 550 q 481 536 478 542 q 482 523 484 530 q 476 508 477 511 q 469 507 476 505 q 473 497 472 501 q 472 485 474 492 q 467 472 465 474 q 470 467 470 470 q 465 461 467 465 q 458 455 462 458 q 456 442 458 442 q 455 440 454 443 q 452 427 454 432 q 451 412 450 421 q 448 396 450 398 q 443 392 446 394 q 444 370 448 381 q 438 348 440 359 q 431 325 438 333 q 421 309 424 317 q 423 302 421 305 q 425 294 425 299 q 418 280 415 283 q 421 272 421 278 q 417 261 419 265 q 417 255 415 257 q 413 232 415 237 q 413 225 411 227 q 406 210 408 215 q 402 200 405 206 q 424 187 416 189 q 442 187 432 185 q 458 189 457 189 q 462 188 459 188 q 479 190 478 191 q 481 189 480 189 q 498 190 497 189 q 501 191 499 191 q 512 187 504 189 q 523 189 519 185 q 531 187 527 185 q 542 189 535 189 q 555 188 552 187 q 561 189 558 189 q 581 188 576 187 q 592 189 585 189 q 600 189 596 191 q 610 189 604 188 q 638 191 630 191 q 655 189 647 192 q 655 198 656 193 q 655 206 653 202 q 658 227 655 217 q 659 245 661 237 q 661 274 660 261 q 668 293 661 286 q 666 301 664 295 q 668 313 667 307 q 668 332 668 326 q 668 343 667 337 q 670 356 670 345 q 671 368 670 367 q 670 386 670 383 q 671 392 670 389 q 674 408 675 406 q 674 412 674 409 q 674 419 674 413 q 675 428 674 424 q 677 442 678 439 q 678 450 676 446 q 680 460 680 458 q 679 465 679 462 q 681 472 679 469 q 682 480 683 476 q 685 490 687 489 q 685 496 683 491 q 687 517 685 512 q 690 529 689 522 q 691 541 691 535 q 695 552 691 546 q 694 568 694 561 l 695 595 q 701 609 701 606 q 701 614 701 611 q 706 637 701 629 q 706 653 705 648 q 705 661 708 659 q 709 676 708 672 q 709 687 710 680 q 714 718 716 708 q 720 736 712 729 q 717 750 718 747 q 716 755 716 754 q 718 775 720 767 q 725 798 725 792 q 727 809 724 804 q 731 824 732 822 q 731 832 731 827 q 733 840 733 836 q 733 847 733 845 q 735 861 736 859 q 736 865 735 862 q 741 876 740 872 q 741 883 743 880 q 744 897 746 889 q 750 924 752 918 q 750 934 748 930 q 735 935 743 937 q 717 931 727 933 "},"n":{"x_min":-14.015625,"x_max":656.515625,"ha":595,"o":"m 515 44 q 516 30 518 31 q 516 27 515 29 l 519 12 q 522 2 523 6 q 526 -4 522 -1 q 529 -19 527 -16 q 533 -24 530 -23 q 533 -33 531 -31 q 535 -39 534 -36 q 545 -50 543 -50 q 546 -54 546 -51 q 585 -81 565 -74 l 609 -88 q 622 -81 622 -81 q 635 -78 634 -75 q 638 -78 636 -80 q 647 -68 645 -69 q 649 -65 649 -67 q 656 -79 656 -75 q 652 -85 656 -82 q 649 -95 652 -90 q 645 -103 647 -100 q 636 -109 640 -105 q 629 -112 633 -112 q 619 -120 619 -119 q 615 -122 618 -122 q 599 -130 599 -130 q 596 -134 599 -131 q 581 -139 588 -134 q 568 -142 575 -145 q 541 -147 548 -143 q 530 -150 535 -150 q 515 -142 519 -147 q 480 -138 493 -137 q 467 -126 469 -127 q 463 -124 466 -124 q 444 -108 455 -115 q 434 -89 436 -92 q 430 -81 431 -86 q 425 -69 427 -71 q 424 -63 424 -67 q 421 -45 423 -51 q 417 -32 419 -39 q 416 -14 419 -20 q 414 8 416 0 q 412 23 412 16 q 413 34 412 28 q 411 43 415 40 q 413 59 412 58 q 413 62 413 59 q 412 70 413 66 q 409 80 411 74 q 408 94 408 86 q 408 108 409 101 q 407 117 408 112 q 406 126 406 122 q 406 142 408 139 q 405 149 405 145 q 404 162 405 161 q 402 165 402 164 q 402 175 404 173 q 401 180 401 177 q 399 194 398 192 q 400 199 400 196 q 398 213 397 210 q 397 221 400 217 q 396 236 397 234 q 394 238 394 237 q 395 250 396 246 q 394 257 394 255 q 389 279 389 274 q 387 290 389 284 q 383 303 385 297 q 379 316 381 309 q 371 327 375 322 q 370 337 367 332 q 358 343 358 341 q 356 344 359 344 q 340 340 344 343 q 329 322 335 326 q 321 310 324 318 q 311 297 313 299 q 310 288 310 295 q 300 280 302 287 q 290 272 298 274 q 286 254 288 256 q 284 246 284 252 q 276 238 278 244 q 272 226 275 233 q 267 219 271 222 q 264 208 264 215 q 256 198 257 200 q 256 192 255 196 q 248 179 248 180 q 248 176 249 177 q 241 162 241 164 q 239 153 238 157 q 238 143 240 149 q 230 126 231 130 q 226 119 229 123 q 227 107 229 112 q 222 99 225 103 q 215 76 215 84 q 211 65 215 69 q 207 47 211 52 q 206 31 204 33 q 203 31 207 29 q 210 6 207 23 q 209 -5 210 1 q 211 -16 208 -12 q 215 -35 217 -32 q 211 -42 212 -37 q 199 -54 203 -50 q 184 -62 185 -61 q 172 -74 173 -71 q 169 -80 172 -77 q 155 -88 155 -85 q 153 -90 155 -90 q 132 -101 142 -99 q 115 -97 122 -104 q 109 -85 111 -86 q 104 -81 107 -84 q 110 -66 112 -69 q 108 -61 108 -63 q 109 -31 109 -42 q 109 -14 108 -21 q 109 1 111 -1 q 107 6 108 4 q 108 25 111 18 q 105 37 105 31 q 107 48 105 43 q 104 58 108 54 q 104 73 103 73 q 105 75 105 73 q 103 107 107 92 q 99 139 100 123 q 99 156 100 154 q 96 160 99 158 q 96 172 99 166 q 96 187 94 179 q 92 207 92 204 q 90 217 93 210 q 86 236 88 233 q 82 241 84 238 q 82 256 82 248 q 80 271 82 264 l 77 290 q 73 300 75 295 q 71 310 70 305 q 65 326 66 325 q 65 333 63 328 q 60 345 58 343 q 59 349 62 347 q 41 352 43 356 q 32 348 39 347 q 15 338 18 341 q 8 332 12 335 q -2 333 1 332 q -12 336 -6 335 q -13 348 -14 343 q -9 360 -12 354 q 1 367 0 366 q 2 373 2 368 q 18 385 14 379 q 24 397 21 390 q 44 404 37 400 q 54 415 50 408 q 65 420 61 416 q 71 430 69 424 q 84 431 82 428 q 88 438 85 434 q 99 441 94 438 q 105 447 103 444 q 118 444 112 444 q 127 442 123 444 q 139 435 138 438 q 143 431 141 432 q 148 408 141 417 q 157 383 155 398 q 164 363 161 370 q 169 349 168 356 q 171 317 168 326 q 176 297 174 307 q 174 284 172 287 q 179 276 177 280 q 180 259 179 263 q 179 256 181 256 q 184 227 181 237 q 187 210 187 218 q 195 213 193 210 q 199 219 196 217 q 203 229 200 222 q 208 238 206 237 q 214 248 211 241 q 218 263 217 255 q 229 276 225 275 q 234 280 233 276 q 239 291 238 287 q 245 294 240 295 q 252 306 250 305 q 255 309 255 307 q 261 318 256 316 q 263 326 265 321 q 280 341 276 339 q 288 348 284 344 q 291 355 287 355 q 295 362 295 355 q 314 376 310 373 q 321 382 317 379 q 332 393 332 392 q 347 402 344 396 q 364 411 360 406 q 387 420 381 417 q 397 424 393 423 q 411 423 409 424 q 417 421 413 423 q 435 419 434 417 q 439 420 436 420 q 450 409 447 408 q 461 394 457 396 q 466 384 462 387 q 470 371 470 381 q 477 356 477 358 q 478 348 477 354 q 482 333 482 337 q 484 321 482 328 q 488 303 488 309 q 489 290 488 297 q 493 280 491 284 q 493 269 495 275 l 489 248 q 498 227 496 233 q 501 214 500 221 q 505 193 504 199 q 505 181 507 187 q 503 165 503 170 q 504 157 504 160 q 507 136 508 143 q 510 123 507 128 q 510 108 510 112 q 510 100 510 104 q 511 85 511 89 q 511 66 511 71 l 515 44 "},"O":{"x_min":62.390625,"x_max":1008.078125,"ha":1080,"o":"m 576 843 q 583 847 579 846 q 592 850 588 847 q 614 855 602 854 q 626 857 621 857 q 638 855 632 858 q 659 859 653 857 q 670 855 666 862 q 682 857 675 859 q 695 855 689 854 q 707 848 699 849 q 720 842 714 847 q 741 831 736 835 q 775 816 760 816 q 790 805 788 807 q 797 800 793 803 q 806 790 804 796 q 815 785 808 785 q 820 773 817 778 q 830 767 823 769 q 844 752 838 756 q 854 740 850 747 q 867 731 864 739 q 880 721 870 724 q 883 712 880 714 q 888 705 887 710 q 897 697 893 699 q 900 690 902 695 q 912 679 912 680 q 912 676 911 678 q 921 661 919 668 q 930 651 923 655 q 942 630 938 638 q 952 614 945 621 q 955 598 952 598 q 961 596 959 599 q 967 585 964 590 q 972 575 969 581 q 973 563 969 568 q 972 553 976 558 q 983 538 978 538 q 986 529 984 533 q 988 519 987 524 q 993 502 994 504 q 994 497 992 500 q 1001 483 1001 485 q 1005 478 1002 481 q 1003 460 1002 469 q 1002 442 1005 451 q 1007 427 1009 430 q 1005 423 1006 425 q 1002 396 1007 406 q 1002 375 1002 386 q 1005 358 1002 363 q 1003 345 1001 354 q 1002 332 1005 337 q 1002 312 1005 317 q 1003 305 999 307 q 1001 294 1001 302 q 998 283 1002 286 q 995 261 999 267 q 994 248 991 255 q 989 236 990 244 q 983 225 988 227 q 982 215 986 218 q 982 206 979 212 q 977 200 978 204 q 973 192 976 195 q 973 183 976 187 q 972 174 969 180 q 961 151 963 165 q 952 136 953 139 q 949 128 950 132 q 939 111 940 115 q 935 107 938 108 q 930 87 935 94 q 919 73 925 80 q 908 44 914 50 q 900 25 902 37 q 892 21 893 25 q 884 17 891 16 q 877 7 881 10 q 872 -2 873 4 q 862 -12 865 -6 q 851 -23 858 -18 q 836 -40 842 -35 q 827 -54 830 -46 q 815 -62 816 -61 q 811 -62 813 -63 q 803 -72 804 -74 q 800 -73 803 -70 q 788 -80 794 -77 q 775 -89 782 -82 q 758 -104 762 -103 q 751 -109 754 -105 q 730 -123 735 -119 q 718 -130 725 -127 q 698 -141 704 -139 q 670 -153 676 -150 q 660 -157 664 -155 q 653 -161 656 -158 q 634 -164 644 -158 q 615 -172 619 -169 q 604 -176 611 -174 q 593 -177 595 -176 q 588 -180 591 -179 q 565 -187 572 -181 q 554 -185 558 -184 q 542 -188 549 -187 q 526 -189 530 -188 q 519 -191 522 -191 q 508 -190 512 -191 q 499 -191 504 -189 q 489 -187 496 -188 q 478 -184 482 -187 q 463 -189 465 -189 q 439 -187 446 -192 q 424 -187 427 -185 q 416 -187 421 -188 q 406 -183 411 -184 q 396 -181 402 -181 q 374 -169 379 -174 q 359 -166 363 -170 q 349 -158 355 -161 q 328 -151 336 -158 q 316 -151 325 -149 q 299 -151 307 -153 q 271 -140 279 -143 q 256 -139 263 -137 q 242 -128 242 -130 q 238 -124 241 -127 q 224 -113 227 -111 q 218 -112 221 -115 q 208 -105 208 -107 q 204 -104 207 -103 q 185 -89 199 -92 q 177 -75 183 -78 q 168 -65 170 -73 q 149 -46 157 -51 q 141 -30 145 -37 q 130 -18 137 -23 q 125 -7 130 -10 q 120 2 120 -4 q 108 20 109 16 q 104 27 107 24 q 97 43 99 37 q 94 55 96 48 l 88 70 q 80 98 81 89 q 75 115 78 107 q 75 137 73 128 q 72 151 71 147 q 70 157 73 154 q 67 173 69 170 q 63 180 65 176 q 67 197 67 187 q 66 214 66 207 q 67 224 67 221 q 65 230 66 227 q 67 242 66 238 q 66 250 67 246 q 63 269 65 265 q 62 276 62 274 q 63 300 63 294 q 66 310 62 306 q 65 319 65 313 q 65 329 65 325 l 67 344 q 70 356 71 354 q 70 362 69 359 q 70 368 71 364 q 71 379 69 373 q 74 394 73 393 q 77 398 75 396 q 77 407 77 404 q 78 415 78 411 q 81 424 78 421 q 80 430 84 427 q 83 440 82 434 q 82 448 84 446 q 89 462 89 454 q 92 477 89 470 q 99 493 99 484 q 106 508 108 504 q 107 515 104 512 q 113 529 111 527 q 115 537 116 530 q 120 542 118 538 q 124 550 122 546 q 130 562 128 561 q 130 567 131 564 q 150 594 139 583 q 156 604 155 600 q 160 611 157 607 q 168 621 164 615 q 176 632 172 626 q 183 642 181 641 q 187 645 184 644 q 197 659 189 653 q 207 674 204 664 q 218 685 214 682 q 222 694 222 687 q 231 699 229 695 q 241 706 234 704 q 246 712 244 709 q 250 718 248 716 q 263 728 261 727 q 268 732 265 729 q 282 744 280 743 q 283 747 283 744 q 292 752 291 751 q 294 758 294 754 q 304 765 306 763 q 305 770 302 767 q 323 777 321 775 q 328 779 325 778 q 341 791 330 789 q 354 801 351 793 q 383 815 375 811 q 398 826 392 820 q 413 831 409 828 q 424 835 417 834 q 442 843 439 841 q 448 847 446 846 q 463 849 459 847 q 472 853 467 851 q 491 855 484 853 q 504 859 497 857 q 523 859 518 857 q 531 858 529 862 q 576 843 567 861 m 621 463 q 600 455 607 457 q 588 447 592 454 q 565 444 577 446 q 542 443 553 442 q 520 446 531 447 q 507 448 510 447 q 501 447 505 450 q 487 450 488 453 q 481 448 486 447 q 465 459 473 454 q 446 466 457 463 q 438 474 443 472 q 428 481 434 477 q 419 493 419 491 q 419 496 420 496 q 400 513 402 510 q 393 522 397 516 q 391 537 396 531 q 383 552 386 543 q 379 566 381 562 q 374 573 378 571 q 375 581 377 577 q 373 588 373 584 q 377 605 378 603 q 377 610 377 607 q 377 624 378 621 q 374 632 377 628 q 385 653 382 648 q 386 668 387 659 q 394 676 393 671 q 397 686 394 682 q 412 706 406 704 q 416 717 417 708 q 422 722 419 720 q 430 727 425 725 q 442 744 439 739 q 453 752 446 750 q 459 764 455 763 q 465 767 462 765 q 448 778 455 778 q 434 775 435 777 q 430 774 432 774 l 413 770 q 398 767 401 769 q 389 766 396 765 q 385 760 389 760 q 378 755 381 759 q 362 750 363 752 q 345 739 348 741 q 340 733 343 736 q 324 718 329 724 q 314 706 318 713 q 304 700 307 702 q 299 693 301 698 q 288 678 291 679 q 283 671 284 676 q 264 650 268 657 q 252 638 260 642 q 250 631 255 632 q 246 623 246 630 q 239 611 241 614 q 236 602 237 609 l 227 584 q 217 573 219 576 q 212 568 214 571 q 206 552 207 552 q 202 537 206 542 q 199 524 199 533 q 193 516 195 522 q 191 504 192 511 q 187 486 187 496 q 178 458 179 469 q 172 440 177 447 q 170 420 172 425 q 170 409 172 412 q 169 397 168 406 q 166 379 165 383 q 165 368 166 375 q 162 350 162 356 q 161 340 162 344 q 162 328 161 333 q 162 317 162 324 q 160 301 160 301 q 161 299 161 301 q 161 267 157 278 q 158 245 157 249 q 155 236 158 241 q 160 218 161 221 q 158 210 158 215 q 162 191 160 195 q 165 181 165 187 q 166 166 164 169 q 166 160 169 164 q 172 148 170 149 q 174 146 174 147 q 179 123 174 130 q 183 108 183 116 q 187 100 185 105 q 189 88 188 94 q 204 59 200 69 q 212 40 207 48 q 216 31 215 35 q 219 25 217 28 q 241 0 236 6 q 255 -13 246 -6 q 267 -25 264 -23 q 282 -42 278 -35 q 297 -52 287 -50 q 308 -64 299 -62 q 320 -74 317 -66 q 335 -81 328 -77 q 351 -88 341 -85 q 364 -99 360 -94 q 382 -102 379 -100 q 387 -103 385 -104 l 401 -109 q 418 -116 408 -115 q 438 -122 428 -118 q 451 -126 450 -124 q 455 -128 453 -128 q 466 -130 462 -127 q 474 -134 470 -134 q 487 -133 484 -134 q 496 -132 491 -132 q 515 -136 511 -137 q 523 -135 519 -135 q 536 -136 534 -137 q 541 -135 538 -135 q 567 -137 556 -134 q 583 -135 575 -135 q 599 -130 590 -131 q 615 -126 609 -130 q 630 -122 626 -124 q 640 -120 633 -119 q 653 -115 653 -112 q 656 -116 652 -118 q 670 -107 661 -109 q 690 -103 679 -104 q 697 -94 694 -97 q 708 -89 701 -90 q 716 -80 716 -82 q 721 -77 716 -77 q 731 -69 731 -71 q 735 -65 732 -66 q 773 -35 755 -46 q 785 -20 784 -21 q 789 -20 786 -18 q 795 -10 792 -13 q 798 0 798 -8 q 809 8 804 4 q 819 18 813 13 q 823 30 822 27 q 827 33 824 33 q 837 53 834 51 q 838 61 841 55 q 849 78 849 73 l 853 97 q 863 111 858 104 q 865 126 868 118 q 872 133 869 130 q 876 143 876 137 q 887 160 883 150 q 888 181 891 170 q 893 192 891 187 q 897 200 895 198 q 902 221 902 217 q 903 230 902 226 q 908 242 908 240 q 907 246 907 244 q 908 273 906 264 q 907 293 910 282 q 910 305 911 303 q 910 310 910 307 q 911 339 912 328 q 914 356 910 351 q 912 366 911 362 q 912 377 912 370 q 912 392 911 392 q 912 394 912 392 q 910 406 910 405 q 911 409 911 406 q 907 430 907 424 q 899 457 903 447 q 893 471 895 470 q 892 473 892 472 q 888 488 888 484 q 884 501 883 497 q 888 508 885 504 q 873 533 878 522 q 865 544 866 543 q 862 548 864 545 q 855 562 858 558 q 850 573 851 567 q 830 599 834 594 q 824 613 823 611 q 824 615 826 614 q 811 631 812 629 q 808 636 809 633 q 793 650 796 648 q 789 653 790 652 q 776 668 779 666 q 771 674 773 670 q 765 678 766 675 q 758 682 763 680 q 746 695 750 694 q 740 698 743 695 q 731 712 731 709 q 715 721 717 718 q 709 724 713 724 q 699 732 701 729 q 695 736 698 735 q 685 744 687 743 q 683 748 683 746 q 669 756 672 755 q 660 755 666 756 q 654 761 659 760 q 645 763 649 762 q 632 768 636 766 q 625 771 629 770 q 610 770 615 770 q 602 775 604 773 q 594 778 599 777 q 585 777 590 778 q 579 778 581 775 q 552 769 558 771 q 541 760 545 766 q 530 754 535 758 q 523 743 524 751 q 508 726 511 729 q 503 720 505 722 q 495 706 501 710 q 491 697 496 699 q 489 687 486 694 q 484 677 485 683 q 482 664 484 671 q 484 654 482 659 q 485 644 485 649 q 482 624 481 629 q 481 617 482 619 q 481 602 481 607 q 481 594 481 598 q 489 571 488 577 q 495 562 493 567 q 504 556 497 558 q 510 539 510 541 q 510 537 510 538 q 517 526 515 527 q 520 523 519 526 q 543 505 534 511 q 560 497 560 499 q 602 485 584 493 q 613 489 607 489 q 622 489 618 488 q 638 496 634 496 q 652 498 648 496 q 663 501 656 500 l 655 480 l 621 463 "},"3":{"x_min":6.78125,"x_max":796.234375,"ha":865,"o":"m 561 880 q 587 878 580 877 q 600 866 590 874 q 614 856 607 862 q 626 843 621 850 q 642 819 636 831 q 664 797 657 800 q 672 780 671 784 q 675 775 672 777 q 678 761 676 763 q 680 756 679 759 q 679 740 676 748 q 679 727 682 732 q 682 719 682 725 q 685 710 682 713 q 683 697 682 699 q 686 691 685 694 q 685 678 685 685 q 683 664 685 671 q 680 651 679 656 q 679 641 680 645 q 676 630 675 632 q 675 626 676 629 q 665 616 668 618 q 661 611 661 614 q 661 603 663 606 q 661 596 660 600 q 656 589 660 591 q 653 580 652 587 q 646 571 648 577 q 637 562 644 565 q 630 545 632 548 q 625 542 629 542 q 619 531 619 531 q 615 529 618 530 q 600 515 602 516 q 590 505 591 507 q 587 501 588 503 q 579 495 580 496 q 576 489 577 493 q 562 477 564 478 q 550 470 553 472 q 546 465 548 469 q 533 456 533 455 q 531 455 533 457 q 523 451 529 453 q 515 447 518 450 q 533 442 519 442 q 554 436 550 436 q 561 435 557 436 q 580 425 579 425 q 588 423 584 423 q 598 423 592 424 q 606 418 602 420 q 615 415 610 416 q 633 401 632 408 q 659 392 648 394 q 676 381 671 389 q 687 378 683 379 q 694 370 691 377 q 716 356 709 359 q 729 349 722 354 q 733 340 729 343 q 739 330 737 337 q 748 318 748 321 q 750 313 748 316 q 756 305 752 310 q 762 297 759 301 q 773 274 769 275 q 774 263 771 267 q 775 253 777 260 q 786 233 785 238 q 789 226 786 229 q 792 203 786 208 q 790 185 790 191 q 790 172 790 179 q 791 160 790 166 q 796 150 792 154 q 794 137 794 143 q 792 126 794 130 q 793 108 794 111 q 794 100 792 105 q 790 82 790 86 q 789 73 789 78 q 786 50 786 56 q 785 42 786 44 q 779 16 779 25 q 774 2 775 5 q 771 -4 773 0 q 765 -19 767 -17 q 765 -25 763 -21 q 752 -42 756 -40 q 748 -51 747 -44 q 737 -60 740 -54 q 727 -69 735 -66 q 714 -86 717 -82 q 708 -93 710 -90 q 701 -99 705 -96 q 694 -105 698 -103 q 685 -119 683 -118 q 685 -123 687 -120 q 668 -128 668 -124 q 660 -132 667 -132 q 650 -140 652 -137 q 645 -146 648 -143 q 632 -151 633 -150 q 629 -153 632 -151 q 622 -159 625 -157 q 617 -164 619 -161 q 602 -174 602 -169 q 588 -176 592 -172 q 580 -185 583 -180 q 563 -189 565 -187 q 557 -188 561 -191 q 541 -198 549 -196 q 522 -210 529 -208 q 512 -215 515 -211 q 496 -221 497 -217 q 481 -227 484 -221 q 472 -227 474 -225 q 463 -230 470 -230 q 453 -234 455 -233 q 447 -236 450 -236 q 438 -240 443 -238 q 431 -246 432 -241 q 411 -246 415 -246 q 401 -245 406 -246 q 376 -253 383 -249 q 362 -259 368 -257 q 349 -260 355 -261 q 336 -261 343 -259 q 319 -265 322 -263 q 313 -267 316 -267 q 298 -267 302 -271 q 287 -266 294 -267 q 276 -265 280 -265 q 259 -269 260 -269 q 256 -267 259 -268 q 246 -267 252 -267 q 236 -264 240 -268 q 229 -266 231 -267 q 221 -265 226 -265 q 210 -265 214 -267 q 200 -264 206 -263 q 194 -260 198 -261 q 184 -259 191 -259 q 157 -251 165 -255 q 141 -245 149 -248 q 126 -238 128 -242 q 105 -231 109 -234 q 99 -228 103 -229 q 92 -225 94 -227 q 80 -223 81 -225 q 74 -221 78 -221 q 62 -208 69 -208 q 56 -197 59 -202 q 48 -189 54 -192 q 35 -170 47 -180 q 32 -161 35 -164 q 27 -151 29 -158 q 19 -130 23 -135 q 14 -119 16 -126 q 16 -103 18 -104 q 12 -99 13 -101 q 8 -73 10 -81 q 6 -55 6 -65 q 6 -44 6 -51 q 8 -29 6 -36 q 13 -12 12 -14 q 13 -6 14 -9 q 20 9 18 6 q 21 17 21 12 q 33 40 29 35 q 35 50 37 46 q 42 59 39 54 q 46 71 44 63 q 56 84 52 84 q 62 95 59 90 q 69 105 65 100 q 75 116 73 115 q 75 122 77 118 q 95 137 88 132 q 104 151 103 141 q 120 166 120 161 q 138 174 132 161 q 147 177 142 176 q 153 183 151 179 q 174 193 169 191 q 181 200 179 195 q 196 204 191 199 q 211 206 202 208 q 221 210 215 208 q 229 218 226 212 q 236 218 231 217 q 245 218 240 219 q 276 227 263 222 q 295 229 287 230 q 307 233 302 229 q 324 233 314 233 q 341 231 333 233 q 352 231 349 233 q 356 230 354 230 q 368 230 366 231 q 373 229 370 229 q 382 229 378 227 q 390 229 386 230 q 409 222 402 226 q 422 220 420 222 q 427 218 424 218 q 441 212 438 215 q 448 211 444 210 q 460 196 458 198 q 462 192 462 195 q 458 177 465 179 q 472 164 469 168 q 474 157 474 161 q 473 143 476 150 q 473 131 470 137 q 462 100 462 113 q 454 85 455 88 q 454 78 453 82 q 443 72 448 75 q 435 63 438 69 q 421 58 424 63 q 408 54 419 52 q 385 45 392 44 q 370 44 379 46 q 368 63 363 59 q 368 74 373 67 q 379 96 377 92 q 383 105 381 101 q 381 118 382 112 q 383 131 381 124 q 370 152 377 149 q 360 162 363 155 q 341 170 347 169 q 330 174 335 172 q 309 175 318 172 q 290 176 301 179 q 271 177 278 177 q 255 174 264 177 q 227 170 234 170 q 219 160 219 170 q 200 151 202 154 q 193 147 199 147 q 191 139 193 142 q 185 134 188 137 q 173 117 174 120 q 166 113 172 113 q 158 99 161 103 q 150 92 155 94 q 145 81 147 85 q 146 69 143 77 q 138 54 141 62 q 131 42 135 47 q 126 18 127 28 q 122 11 124 16 q 120 2 120 6 q 119 -10 118 -4 q 118 -24 120 -17 q 118 -57 119 -42 q 126 -82 118 -73 q 132 -99 126 -96 q 138 -118 138 -118 q 148 -131 147 -131 q 150 -132 149 -131 q 168 -155 162 -150 q 176 -166 173 -160 q 193 -172 185 -169 q 206 -183 200 -176 q 221 -184 211 -184 l 240 -192 q 253 -195 252 -193 q 257 -198 255 -196 q 282 -202 274 -202 q 297 -206 290 -202 q 303 -203 299 -199 q 313 -204 307 -207 q 330 -206 325 -203 l 347 -207 q 356 -207 352 -206 q 362 -208 359 -208 q 377 -206 377 -206 q 378 -207 377 -207 q 390 -206 385 -206 q 401 -204 396 -206 q 430 -196 419 -196 q 453 -189 444 -193 q 469 -180 463 -185 q 484 -177 481 -180 q 489 -172 486 -174 q 506 -168 499 -170 q 520 -162 514 -165 q 535 -155 533 -157 q 539 -154 537 -154 q 562 -141 554 -147 q 580 -128 571 -134 q 587 -122 584 -123 q 592 -119 590 -120 q 598 -112 595 -116 q 603 -105 600 -108 q 619 -96 614 -100 q 628 -85 625 -92 q 642 -73 637 -77 q 651 -65 647 -70 q 663 -51 655 -55 q 679 -12 670 -31 q 686 29 689 5 q 691 45 691 40 q 691 54 690 50 q 693 73 694 69 q 693 84 693 77 q 693 96 694 94 q 691 99 691 97 q 693 117 691 109 q 691 134 694 124 q 689 141 690 137 q 689 151 687 145 q 685 164 685 164 q 687 168 686 165 q 684 176 685 170 q 686 184 683 181 q 678 204 682 195 q 671 225 674 214 q 664 236 667 233 q 660 241 661 238 q 656 254 657 252 q 652 259 655 256 q 637 284 644 278 q 628 299 630 290 q 614 307 615 306 q 614 311 613 309 q 607 315 611 314 q 602 321 603 316 q 592 326 594 324 q 588 330 590 328 q 571 337 580 335 q 556 347 562 340 q 545 349 549 345 q 535 352 542 352 q 518 360 526 358 q 508 366 515 364 q 497 371 501 367 q 490 371 495 371 q 482 370 485 371 q 454 382 461 377 q 436 381 447 381 q 416 385 424 382 q 396 377 401 377 q 389 377 392 378 q 373 366 375 364 q 368 367 371 368 q 348 358 355 362 q 335 352 341 354 q 319 352 322 354 q 314 352 316 351 q 306 360 307 355 q 299 368 305 364 q 301 375 302 373 q 302 383 301 378 q 318 392 316 393 q 322 393 320 392 q 349 406 339 404 l 374 423 q 389 423 385 421 q 397 427 393 424 q 447 457 425 447 q 457 465 454 463 q 462 472 459 467 q 477 482 476 478 q 481 488 478 485 q 496 499 491 493 q 510 508 501 504 q 526 529 515 520 q 530 540 526 535 q 538 550 534 545 q 543 559 541 553 q 552 568 546 565 q 558 584 552 577 q 563 597 562 594 q 567 603 564 600 q 573 629 567 623 q 576 649 576 640 q 576 671 576 659 q 577 687 577 686 q 575 707 576 702 q 572 716 573 712 q 573 725 572 720 q 572 732 573 729 q 566 748 571 739 q 558 763 562 756 q 554 769 556 766 q 546 774 552 773 q 543 784 548 782 q 538 793 538 786 q 524 805 526 803 q 519 808 522 807 q 505 820 512 817 q 489 827 499 823 q 481 834 485 830 q 472 841 477 838 q 458 843 465 842 q 444 845 451 843 q 433 847 438 846 q 425 850 428 849 q 417 851 421 851 q 409 853 412 850 q 401 851 405 853 q 393 850 397 850 q 372 852 374 851 q 366 851 370 853 q 347 847 354 847 q 335 846 341 847 q 324 833 326 834 q 320 831 322 832 q 313 824 314 828 q 305 819 311 819 q 297 805 302 811 q 290 792 293 800 q 281 781 282 784 q 280 775 280 778 q 268 760 269 763 q 265 751 267 756 q 255 739 253 740 q 256 735 257 737 q 251 727 255 729 q 249 716 248 724 q 243 704 241 705 q 244 701 245 704 q 240 687 240 687 q 241 685 241 686 q 240 669 238 675 q 236 660 241 663 q 238 647 240 655 q 234 634 237 640 q 238 617 237 628 q 238 598 240 606 q 256 573 246 579 q 262 562 255 564 q 271 554 269 561 q 279 551 276 554 q 286 546 282 548 q 287 530 287 531 q 287 522 287 529 q 274 512 276 512 q 271 508 272 511 q 257 504 260 505 q 252 500 253 503 q 238 489 241 496 q 229 486 233 488 q 219 482 225 485 q 199 496 200 491 q 177 508 183 505 q 169 518 172 511 q 161 522 164 519 q 153 529 158 526 q 144 544 150 537 q 132 558 138 552 q 130 569 130 561 q 130 583 131 576 q 128 599 128 598 q 127 603 127 600 q 126 625 127 618 q 127 638 126 632 q 128 651 130 649 q 128 655 127 652 q 134 683 132 675 q 142 698 137 691 q 145 712 142 709 q 150 717 147 714 q 156 734 150 729 q 164 750 162 739 q 174 764 172 763 q 177 767 176 765 q 186 781 185 777 q 188 789 187 786 q 196 797 193 796 q 200 803 199 798 q 215 815 208 808 q 230 827 222 822 q 246 839 242 835 q 252 847 249 843 q 262 849 257 846 q 269 855 267 853 q 282 862 282 859 q 286 864 283 864 q 300 870 297 869 q 305 874 303 870 q 318 878 317 877 q 321 880 320 880 q 335 887 335 884 q 347 889 347 888 q 349 891 347 889 q 373 897 362 895 q 394 903 383 900 q 411 904 408 903 q 417 907 415 906 q 446 909 439 910 q 459 908 453 908 q 487 907 478 908 q 505 908 496 906 q 520 904 514 904 q 529 900 523 899 q 538 895 535 900 q 550 893 548 897 q 560 889 553 889 l 561 880 "},"]":{"x_min":-42.046875,"x_max":231.953125,"ha":315,"o":"m 219 508 q 218 492 217 492 q 219 489 219 492 q 220 478 218 480 q 223 474 222 477 q 223 460 222 461 q 226 457 225 459 q 227 436 226 446 q 222 419 229 425 q 225 404 222 411 q 230 392 227 397 q 225 377 223 377 q 227 374 227 377 q 228 364 226 368 q 230 354 230 359 q 229 341 227 344 q 227 335 230 337 q 228 317 225 332 q 231 295 231 302 q 227 280 226 282 q 230 275 229 278 q 227 258 229 264 q 227 245 226 252 q 223 230 221 231 q 227 209 226 217 q 230 196 227 202 q 227 176 227 180 q 227 158 225 166 q 226 151 227 155 q 225 143 225 147 q 225 129 226 132 q 222 123 223 126 q 225 107 223 111 q 225 96 226 103 l 223 81 q 225 67 226 69 q 225 62 225 66 q 219 42 219 50 q 221 27 218 33 q 219 18 218 23 q 221 9 219 14 q 217 -6 217 1 q 214 -17 218 -14 q 215 -39 212 -35 q 219 -46 217 -43 q 217 -57 217 -55 q 219 -62 218 -59 q 217 -70 215 -65 q 219 -81 219 -75 q 219 -91 221 -86 q 218 -100 218 -96 l 217 -124 q 219 -136 217 -131 q 218 -146 222 -141 q 219 -172 219 -161 q 221 -196 218 -184 q 221 -208 222 -207 q 219 -212 219 -210 q 219 -226 221 -222 q 218 -236 218 -230 q 219 -252 219 -246 q 221 -264 218 -257 q 218 -297 221 -282 q 216 -307 217 -305 q 215 -313 215 -310 q 212 -332 215 -326 q 214 -341 212 -337 q 215 -349 215 -345 q 214 -368 215 -358 q 217 -385 212 -378 q 215 -407 212 -394 q 215 -430 217 -420 q 217 -450 221 -446 q 212 -458 214 -454 q 202 -457 207 -455 q 192 -459 198 -459 q 180 -458 185 -459 q 169 -458 174 -457 q 147 -459 153 -461 q 138 -458 142 -458 l 104 -459 q 89 -458 93 -458 q 75 -459 78 -459 q 69 -461 71 -458 q 44 -461 54 -462 q 27 -454 33 -459 q 12 -455 18 -458 q -5 -453 5 -453 q 4 -440 4 -442 q 5 -438 4 -439 q 17 -437 14 -435 q 23 -438 20 -439 q 43 -430 40 -430 q 60 -432 51 -428 q 75 -428 69 -435 q 96 -430 84 -431 q 101 -414 101 -416 q 104 -409 101 -412 q 102 -394 103 -394 q 101 -392 101 -394 q 103 -368 104 -377 q 105 -354 101 -360 q 103 -325 104 -333 q 107 -306 101 -317 q 105 -286 107 -287 l 108 -269 q 108 -259 108 -261 q 109 -253 108 -256 q 107 -237 108 -238 q 105 -234 105 -236 q 107 -203 107 -211 q 112 -189 108 -195 q 111 -173 113 -174 q 108 -169 108 -172 q 109 -147 109 -158 q 112 -130 109 -137 q 109 -118 109 -126 q 109 -103 108 -109 q 110 -93 112 -96 q 108 -88 108 -90 q 110 -69 109 -71 q 109 -62 111 -66 q 113 -39 109 -44 q 112 -17 112 -24 q 116 -8 112 -10 q 115 9 111 6 q 112 29 111 17 q 112 48 113 46 q 111 52 111 50 q 116 70 118 69 q 113 74 115 71 q 115 99 113 90 q 119 108 116 107 q 118 126 120 120 q 117 146 118 142 q 116 153 116 150 q 118 163 119 161 q 118 168 118 165 q 118 182 118 174 q 120 196 118 189 q 120 212 119 207 q 123 219 120 217 q 120 238 118 234 q 124 246 122 242 q 119 269 122 260 q 120 285 120 284 q 119 287 119 286 q 120 310 123 305 q 123 325 122 322 q 122 332 124 328 q 123 347 122 347 q 124 349 124 347 q 125 361 126 355 q 123 374 124 367 q 124 389 123 383 q 120 402 126 396 q 122 429 124 413 q 123 458 119 446 q 126 476 123 474 q 120 499 122 491 q 123 516 119 508 q 119 533 119 531 q 120 537 119 534 q 118 549 120 543 q 115 561 115 554 q 118 571 115 567 q 116 579 120 575 q 117 598 118 595 q 119 603 116 600 q 115 626 116 619 q 113 638 113 632 q 115 657 118 653 q 112 668 113 661 q 115 684 113 682 q 116 689 116 686 q 112 703 111 699 q 113 712 113 708 q 114 736 116 729 q 111 750 112 743 q 113 763 112 762 q 115 766 115 763 q 113 777 112 774 q 115 785 115 781 q 112 803 112 800 q 113 817 115 815 q 113 823 112 820 q 116 855 118 847 q 116 873 115 864 q 116 887 116 880 q 115 903 116 895 q 113 914 112 911 q 115 919 115 916 q 113 927 115 923 q 111 935 112 931 q 111 949 112 948 q 109 953 109 950 q 110 968 109 967 q 109 972 111 969 q 105 984 105 984 q 103 988 104 984 q 103 997 103 992 q 100 1005 103 1002 q 101 1016 103 1014 q 100 1021 100 1018 q 101 1039 101 1036 q 88 1053 97 1053 q 71 1049 80 1052 q 55 1048 62 1051 q 36 1047 43 1051 q 16 1047 29 1044 q 2 1045 5 1045 q -2 1045 0 1045 q -28 1049 -21 1045 q -42 1056 -35 1053 q -14 1081 -29 1074 q 1 1082 1 1078 q 10 1083 6 1081 q 18 1086 13 1086 q 33 1087 32 1085 q 36 1087 33 1089 q 44 1085 40 1086 q 54 1086 47 1085 q 66 1088 65 1089 q 70 1087 67 1087 q 87 1089 85 1087 q 90 1090 89 1090 q 105 1091 100 1090 q 133 1094 124 1094 q 151 1097 142 1094 q 164 1093 161 1093 q 169 1093 166 1094 q 196 1091 191 1097 q 215 1082 212 1086 q 221 1072 218 1078 q 216 1047 218 1056 q 219 1034 214 1037 q 216 1018 217 1020 q 215 1011 215 1015 q 216 992 215 995 q 219 987 217 988 q 216 971 214 972 q 217 968 218 971 q 220 936 218 945 q 225 918 222 927 q 221 895 223 902 q 219 883 218 889 q 222 869 223 872 q 222 864 221 866 q 224 848 222 851 q 226 842 226 845 q 225 830 227 835 q 229 820 223 824 q 226 792 229 800 q 223 775 223 784 q 224 767 223 771 q 225 759 225 763 l 225 729 q 221 713 219 713 q 221 698 219 701 q 219 693 222 695 q 221 678 222 687 q 221 666 222 670 q 223 660 221 663 q 220 654 222 657 q 217 647 218 651 q 223 630 221 634 q 223 622 225 625 q 219 611 221 613 q 218 602 218 609 q 217 584 222 584 q 220 571 219 572 q 222 568 221 571 q 224 552 221 560 q 229 538 227 543 q 225 526 226 530 q 223 519 225 523 l 219 508 "},"m":{"x_min":-62.390625,"x_max":1030.90625,"ha":926,"o":"m -4 402 q -30 387 -23 392 q -48 382 -37 383 q -54 387 -48 387 q -62 390 -59 387 q -56 404 -58 402 q -55 409 -55 406 q -48 414 -52 412 q -44 421 -44 416 q -25 434 -28 431 q -17 440 -21 438 q -8 449 -9 448 q -4 450 -6 450 q 15 462 12 458 q 27 466 18 466 q 35 472 31 470 q 43 478 40 474 q 75 491 61 482 q 86 492 80 493 q 96 493 93 491 q 107 488 101 491 q 119 485 112 485 q 143 473 128 477 q 151 463 146 466 q 162 457 157 459 q 168 439 165 442 q 174 430 172 436 q 177 417 176 420 q 180 411 179 413 q 179 398 176 400 q 183 392 181 396 q 187 371 181 374 q 189 360 191 362 q 188 356 188 359 q 189 344 191 348 q 189 335 188 340 q 195 314 196 317 q 193 307 193 311 q 207 321 207 306 q 213 328 211 324 q 221 335 215 332 q 225 352 225 352 q 235 368 233 366 q 240 371 237 370 q 243 379 240 378 q 246 387 246 381 q 261 401 256 397 q 268 412 267 405 q 284 419 274 413 q 295 430 293 427 q 301 438 298 434 q 311 446 309 442 q 317 454 314 450 q 335 453 326 448 q 354 465 351 462 q 363 466 356 467 q 374 471 367 469 q 387 476 381 473 q 404 482 402 480 q 409 484 406 484 q 440 482 430 485 q 463 481 451 480 q 472 476 467 478 q 480 470 476 473 q 488 448 484 450 q 496 443 492 446 q 504 421 500 428 q 515 409 508 415 q 516 401 514 404 q 519 393 519 398 q 522 379 522 386 q 524 368 523 373 q 535 377 531 370 q 538 392 539 385 q 557 412 549 405 q 567 432 565 419 q 580 448 577 446 q 583 455 583 450 q 592 460 588 458 q 599 465 595 462 q 606 476 604 473 q 610 480 607 478 q 623 489 622 489 q 628 491 625 489 q 636 499 632 497 q 642 504 640 500 q 657 516 657 511 q 660 523 657 520 q 670 520 667 520 q 678 520 674 520 q 687 525 683 522 q 697 529 690 529 q 720 539 713 538 q 733 539 727 539 q 752 535 743 538 q 767 534 760 531 q 784 524 775 526 q 790 511 786 516 q 796 499 793 505 q 801 482 800 488 q 804 470 803 477 q 810 457 811 459 q 809 451 809 454 q 817 428 815 432 q 816 417 819 424 q 822 398 820 412 q 822 384 820 386 q 824 379 823 382 q 826 360 826 368 q 830 341 826 351 q 828 330 827 336 q 830 317 828 324 q 830 303 831 303 q 830 302 828 303 q 832 290 830 295 q 834 279 834 286 q 833 264 831 268 q 838 255 835 260 q 833 238 834 244 q 836 231 832 233 q 832 209 834 219 q 835 195 830 199 q 832 168 834 174 q 831 155 831 161 q 833 145 834 147 q 832 141 832 142 q 832 131 832 137 q 832 122 831 126 q 830 107 828 109 q 834 100 832 105 q 837 92 841 93 q 835 85 834 90 q 838 71 834 78 q 835 59 842 65 q 838 51 838 56 q 843 43 839 46 q 845 28 843 32 q 845 18 846 24 q 847 -2 845 6 q 850 -21 850 -10 q 851 -31 853 -32 q 847 -36 849 -31 q 850 -55 854 -51 q 854 -70 853 -69 q 859 -87 858 -85 q 861 -90 861 -89 q 868 -113 864 -107 q 874 -126 872 -119 q 882 -132 878 -128 q 888 -139 885 -137 q 896 -146 892 -142 q 903 -154 900 -150 q 911 -157 908 -154 q 916 -162 914 -160 q 929 -165 923 -164 q 942 -166 935 -166 q 960 -166 957 -165 q 965 -165 963 -166 q 982 -160 980 -161 q 989 -153 986 -157 q 999 -147 992 -149 q 1006 -140 1002 -145 q 1017 -135 1010 -135 q 1030 -147 1029 -135 q 1026 -155 1024 -147 q 1020 -162 1028 -164 q 1015 -169 1021 -168 q 1007 -173 1010 -170 q 990 -178 994 -176 q 982 -180 987 -180 q 976 -183 979 -183 q 967 -187 973 -184 q 960 -191 964 -188 q 952 -195 956 -193 q 937 -195 944 -198 q 926 -202 933 -202 q 910 -206 919 -203 q 876 -208 883 -210 q 865 -211 866 -214 q 861 -208 864 -208 q 850 -208 851 -207 q 846 -210 849 -210 l 830 -206 q 824 -193 827 -195 q 820 -189 820 -192 q 807 -186 809 -188 q 797 -187 804 -184 q 787 -176 788 -180 q 782 -170 786 -172 q 767 -150 769 -157 q 765 -132 765 -143 q 754 -110 755 -115 q 755 -97 752 -105 q 750 -77 748 -88 q 746 -59 752 -66 q 746 -48 748 -54 q 746 -35 743 -42 q 742 -23 741 -25 q 746 -20 743 -21 q 737 2 740 -6 q 735 19 735 17 q 732 21 736 21 q 731 40 733 35 q 730 55 729 55 q 731 56 731 55 q 730 67 729 63 q 729 75 731 71 q 729 96 729 85 q 728 115 728 107 q 729 133 729 130 q 728 139 728 137 q 731 149 729 145 q 732 157 732 153 q 731 166 732 161 q 736 176 731 172 q 732 198 732 192 q 730 215 728 214 q 732 219 732 217 q 729 238 733 226 l 729 255 l 727 278 q 726 290 728 282 q 725 301 724 298 q 726 308 728 302 q 721 321 724 314 q 722 329 721 325 q 718 336 724 333 q 719 348 722 343 q 717 360 716 354 q 712 371 710 370 q 714 377 714 373 q 712 387 712 382 q 710 398 712 392 q 706 406 709 402 q 705 416 704 411 q 699 431 699 424 q 691 447 694 439 q 685 462 689 455 q 674 465 678 463 q 663 467 671 467 q 651 446 653 451 q 641 436 645 442 q 633 423 637 430 q 629 406 629 408 q 628 402 629 405 q 618 387 617 387 q 619 383 619 386 q 609 365 615 371 q 602 351 602 359 q 585 324 595 329 q 585 313 588 317 q 580 305 583 309 q 577 280 579 286 q 573 268 576 274 q 571 252 573 255 q 568 248 569 250 l 564 230 q 561 216 561 219 q 557 210 561 212 q 554 191 557 199 q 554 178 553 187 q 550 165 554 169 q 552 145 553 150 q 552 135 552 139 q 552 124 553 126 q 552 119 552 122 q 554 111 553 115 q 557 103 556 107 q 539 81 541 89 q 522 78 530 81 q 504 67 510 71 q 488 63 499 62 q 476 55 478 56 q 472 56 474 54 q 457 53 466 51 q 447 62 448 55 q 449 75 448 69 q 454 89 450 82 q 449 106 451 100 q 444 115 447 112 q 450 141 442 128 q 448 151 447 150 q 448 155 448 153 q 446 170 446 164 q 444 191 442 187 q 446 200 446 196 q 442 213 440 212 q 443 217 443 214 q 439 236 439 222 q 430 259 435 250 q 429 275 431 274 q 425 279 427 276 q 427 293 425 287 q 424 301 430 299 q 426 321 427 317 q 427 328 425 325 q 409 356 419 351 q 402 375 405 373 q 401 385 400 378 q 389 401 392 400 q 386 406 386 402 q 379 410 383 409 q 373 413 374 411 q 356 413 364 412 q 340 413 348 413 q 327 396 330 400 q 322 387 324 393 q 311 371 310 373 q 308 364 310 367 q 303 355 306 360 q 296 343 297 347 q 293 340 295 340 q 280 317 290 330 q 274 301 274 305 q 272 294 275 297 q 265 279 264 282 q 264 274 265 276 q 256 255 256 264 q 250 237 253 241 q 245 227 248 233 q 242 212 241 215 q 240 208 242 210 q 238 194 240 196 q 237 187 236 192 q 230 177 231 184 q 225 165 229 169 q 226 151 226 154 q 223 143 226 147 q 219 133 219 138 q 217 126 219 128 q 217 113 221 119 q 212 100 212 107 q 213 84 214 86 q 212 80 212 82 q 211 67 211 71 q 212 59 211 62 q 215 40 211 46 q 218 25 218 33 q 219 6 222 9 q 211 -1 215 2 q 198 -13 199 -13 l 183 -20 q 170 -31 173 -28 q 165 -36 168 -33 q 147 -44 149 -42 q 133 -48 134 -46 q 131 -51 132 -50 q 123 -48 126 -48 q 116 -44 120 -48 q 115 -34 118 -37 q 115 -25 112 -31 q 108 43 118 17 q 111 54 109 47 q 111 70 112 61 q 113 92 113 88 q 112 100 112 97 q 111 115 111 115 q 112 118 112 116 q 111 132 112 131 q 109 137 109 134 q 110 161 111 154 q 112 174 109 168 q 109 190 111 184 q 111 200 108 196 q 105 211 104 210 q 107 215 107 212 q 102 236 104 223 q 101 257 100 248 q 100 271 100 269 q 101 276 100 274 q 99 284 99 280 q 99 294 100 287 q 93 306 94 303 q 94 309 92 309 q 90 322 90 313 q 88 336 90 330 q 81 356 82 348 q 75 368 80 364 q 72 383 75 378 q 66 394 69 387 q 58 398 61 396 q 51 404 55 401 q 29 417 39 413 q 13 417 20 421 l -4 402 "},"9":{"x_min":41.59375,"x_max":771.8125,"ha":849,"o":"m 766 484 q 768 448 769 465 q 769 415 767 432 q 771 400 771 404 q 770 385 771 387 q 769 379 769 382 q 768 369 767 373 q 769 363 769 366 q 767 352 766 356 q 769 344 769 348 q 767 322 766 329 q 765 311 767 316 q 765 294 766 299 q 767 284 765 288 q 762 272 762 275 q 759 268 762 269 q 760 245 759 256 q 756 220 756 229 q 748 206 755 211 q 747 191 750 196 q 744 177 744 185 q 739 158 739 164 q 733 153 740 153 q 733 135 733 138 q 729 131 732 132 q 725 115 728 118 q 725 108 722 113 q 718 99 718 105 q 712 90 717 93 q 710 75 710 77 q 708 71 710 74 q 698 56 702 61 q 691 40 691 46 q 684 24 687 27 q 683 17 680 21 q 676 10 678 14 q 670 4 675 6 q 659 -14 660 -5 q 651 -21 652 -16 q 648 -32 649 -25 q 637 -46 638 -44 q 634 -51 636 -48 q 622 -64 626 -62 q 618 -71 618 -66 q 602 -86 607 -77 q 587 -97 598 -94 q 578 -110 580 -108 q 572 -115 576 -112 q 556 -128 560 -124 q 550 -134 553 -131 q 540 -138 543 -135 q 531 -142 537 -141 q 522 -153 523 -153 q 519 -154 520 -153 q 509 -162 510 -160 q 505 -164 508 -164 q 492 -173 496 -166 q 477 -181 488 -180 q 459 -190 463 -188 q 450 -193 455 -192 q 440 -204 443 -203 q 440 -207 438 -206 q 427 -210 428 -208 q 423 -214 425 -212 q 409 -223 413 -218 l 390 -229 q 376 -236 379 -238 q 370 -237 373 -234 q 356 -243 356 -244 q 352 -242 355 -242 q 324 -246 335 -245 q 303 -250 313 -248 q 286 -255 295 -253 q 269 -263 276 -256 q 260 -261 264 -259 q 253 -259 256 -264 q 238 -262 238 -263 q 237 -261 238 -261 q 219 -263 225 -264 q 206 -261 212 -261 q 190 -261 193 -263 q 184 -261 187 -259 q 169 -250 172 -255 q 158 -249 166 -246 q 152 -244 155 -246 q 142 -244 149 -242 q 126 -233 131 -237 q 113 -229 122 -229 q 97 -215 100 -217 q 92 -210 94 -212 q 86 -205 89 -207 q 78 -200 82 -203 q 72 -190 74 -191 q 67 -188 70 -189 q 56 -173 58 -179 q 46 -166 54 -168 q 43 -153 46 -155 q 42 -143 40 -150 q 46 -137 42 -138 q 48 -128 51 -137 q 57 -121 56 -128 q 59 -109 58 -113 q 89 -105 81 -108 q 101 -100 97 -103 q 119 -100 111 -101 q 126 -112 124 -112 q 128 -115 127 -112 q 157 -131 147 -130 q 162 -141 158 -138 q 173 -147 166 -145 q 187 -159 184 -157 q 195 -161 189 -161 q 202 -168 198 -166 q 208 -174 206 -170 q 222 -176 217 -173 q 233 -179 227 -179 q 246 -184 244 -185 q 252 -183 248 -183 q 259 -187 255 -185 q 265 -191 263 -188 q 284 -192 275 -192 q 305 -192 293 -192 q 318 -192 316 -191 q 322 -193 320 -193 q 332 -193 326 -193 q 341 -192 337 -192 q 367 -184 360 -191 q 384 -182 382 -181 q 387 -183 386 -183 q 397 -177 394 -179 q 401 -173 400 -176 q 421 -164 416 -168 q 432 -155 425 -160 q 444 -148 439 -151 q 453 -138 450 -145 q 465 -127 465 -132 q 478 -122 477 -123 q 482 -120 478 -120 q 493 -108 491 -108 q 497 -107 495 -108 q 515 -89 512 -96 q 526 -80 518 -82 q 536 -65 531 -69 q 542 -54 541 -62 q 562 -36 554 -43 q 572 -18 565 -25 q 581 -1 579 -12 q 594 17 591 5 q 604 37 596 29 q 610 51 609 50 q 614 55 611 52 q 619 66 621 65 q 618 70 618 67 q 623 78 622 73 q 625 90 623 84 q 632 104 630 101 q 634 109 634 107 q 642 131 637 126 l 647 155 q 652 168 649 162 q 655 184 655 174 q 664 211 659 206 q 665 224 663 223 q 667 227 667 225 q 669 243 670 242 q 668 245 668 244 q 670 260 671 256 q 668 268 668 264 q 670 287 672 283 q 671 295 668 291 q 655 288 657 288 q 651 284 653 287 q 641 272 641 278 q 628 261 628 264 q 626 257 629 259 q 613 252 615 255 q 603 248 610 249 q 593 237 592 240 q 591 234 594 234 q 575 231 575 236 q 558 219 561 219 q 553 217 556 219 l 538 210 q 522 204 523 206 q 516 203 520 203 q 512 197 514 200 q 503 195 510 193 q 484 187 492 191 q 472 180 476 184 q 438 172 450 179 q 411 168 425 165 q 397 162 405 165 q 381 160 389 160 q 362 157 363 157 q 336 155 351 155 q 309 157 321 154 q 301 159 305 157 q 291 162 297 161 q 273 165 282 165 q 257 170 264 165 q 248 172 253 169 q 238 177 242 174 q 223 183 227 183 q 214 187 218 184 q 196 198 202 195 q 184 204 191 202 q 164 222 176 215 q 155 231 161 229 q 147 241 150 234 q 135 254 139 250 q 127 261 131 257 q 124 278 124 275 q 123 284 124 282 q 118 302 118 295 q 111 323 113 318 q 105 333 108 328 q 102 351 104 348 q 99 358 100 354 q 96 365 97 360 q 93 373 96 370 q 92 394 92 385 q 89 409 93 404 q 92 420 93 415 q 90 432 90 425 q 91 453 90 450 q 92 459 92 457 q 92 473 93 473 q 90 474 90 473 q 92 482 90 477 q 92 493 94 488 q 97 522 94 511 q 104 539 101 534 q 105 555 105 548 q 109 565 104 562 q 109 573 107 569 q 109 583 112 576 q 115 598 115 596 q 116 603 116 599 q 121 621 122 617 q 122 629 120 626 q 126 643 127 641 q 124 648 124 645 q 133 661 130 657 q 134 672 137 666 q 149 692 142 686 q 153 710 155 698 q 168 728 162 724 q 174 740 174 732 q 187 752 184 751 q 189 759 191 754 q 206 777 202 773 q 214 790 211 782 q 224 798 222 797 q 225 803 226 798 q 242 813 238 809 q 252 819 245 816 q 269 832 265 828 q 280 836 274 835 q 302 847 284 850 l 314 857 q 339 869 335 864 q 366 880 362 874 q 383 881 382 880 q 387 884 385 883 q 402 888 398 888 q 410 891 406 891 q 416 895 413 892 q 438 895 432 900 q 461 895 453 896 q 478 899 470 895 q 498 895 493 895 q 508 893 503 896 q 531 892 522 893 q 548 887 541 891 q 562 885 561 885 q 562 881 564 884 q 569 878 567 880 q 577 877 572 876 q 591 869 580 872 q 599 859 599 861 q 602 855 599 858 q 617 846 613 849 q 626 832 625 834 q 630 828 628 830 q 641 817 637 820 q 649 809 645 813 q 659 790 655 794 q 671 782 664 786 q 676 763 676 763 q 682 756 679 759 q 689 748 686 752 q 693 735 690 737 q 701 729 697 732 q 701 719 699 722 q 706 713 704 716 q 708 705 705 706 q 712 698 712 704 q 719 686 720 690 q 720 678 718 682 q 725 666 721 672 q 728 652 729 659 q 739 630 735 634 q 740 621 737 625 q 744 613 743 617 q 747 598 746 600 q 748 591 748 596 q 748 581 748 585 q 752 573 748 577 q 754 556 754 561 q 756 545 754 550 q 761 533 762 537 q 765 529 760 529 q 762 510 762 523 l 766 484 m 192 538 q 189 532 189 535 q 187 523 188 529 q 183 496 184 505 q 178 484 180 485 q 176 482 176 484 q 178 472 177 474 q 177 467 179 470 q 182 456 183 462 q 180 443 181 450 q 182 434 183 438 q 180 424 181 430 q 185 412 183 417 q 189 398 188 406 q 200 373 196 378 q 204 362 203 368 q 206 347 204 348 q 207 344 207 347 q 217 320 212 324 q 226 311 222 316 q 234 297 229 302 l 253 278 q 261 270 256 272 q 268 264 265 268 q 285 255 276 256 q 299 246 294 253 q 309 245 306 248 q 316 240 311 242 q 329 236 329 238 q 332 234 329 234 q 344 232 343 233 q 347 230 345 231 q 358 227 354 229 q 368 222 363 225 q 382 221 375 221 q 392 219 389 222 q 415 222 404 225 q 440 222 427 219 q 461 226 451 223 q 477 227 470 229 q 491 233 488 234 q 496 234 495 233 q 505 239 501 236 q 512 245 510 242 q 520 248 516 246 q 526 253 523 250 q 541 259 537 252 q 556 267 545 267 q 562 276 557 274 q 571 282 568 278 q 577 292 579 290 q 579 295 576 295 q 586 299 585 294 q 595 302 587 305 q 602 314 596 310 q 611 326 607 318 l 623 337 q 630 352 630 349 q 636 360 636 358 q 637 366 636 363 q 650 384 645 374 q 661 402 655 394 q 664 417 664 411 q 673 436 671 434 q 675 442 675 439 q 675 461 675 454 q 673 469 675 465 q 671 476 671 473 l 671 491 q 664 510 668 505 q 663 524 661 523 q 663 526 664 524 q 659 547 660 542 q 656 556 657 552 q 655 568 657 565 q 652 573 653 571 q 649 585 649 580 q 645 594 649 591 q 642 614 644 607 q 637 626 641 621 l 633 648 q 623 664 626 657 q 618 674 621 671 q 614 683 618 680 q 611 694 610 686 q 603 699 604 695 q 599 706 602 704 q 592 722 594 718 q 588 731 591 727 l 577 747 q 572 753 573 750 q 565 759 571 756 q 556 773 560 770 q 550 778 553 775 q 534 790 537 792 q 522 803 526 798 q 513 809 515 807 q 508 812 511 811 q 498 811 501 811 q 488 812 495 812 q 482 817 485 815 q 473 819 480 820 q 456 827 459 826 q 450 828 453 828 q 438 830 442 828 q 428 831 435 832 q 408 836 413 835 q 397 835 402 836 q 386 833 387 832 q 382 832 385 834 q 372 831 378 830 q 362 831 366 832 q 345 824 347 824 q 335 815 336 817 q 332 809 335 812 q 324 811 329 812 q 314 809 318 811 q 303 792 305 794 q 299 786 301 789 q 290 781 294 784 q 287 773 287 778 q 280 766 284 769 q 275 758 276 763 q 266 750 269 751 q 264 741 263 748 q 255 735 259 739 q 252 724 250 732 q 244 719 245 724 q 241 710 244 714 q 231 685 236 689 q 221 668 223 674 q 221 656 219 663 q 214 645 215 651 q 207 634 212 640 q 202 621 202 623 q 203 615 203 618 q 194 600 198 604 q 191 590 191 596 q 191 576 193 577 q 188 572 189 575 q 192 552 189 557 l 192 538 "},"l":{"x_min":-56.0625,"x_max":287.5625,"ha":301,"o":"m 193 922 q 198 909 199 912 q 203 906 198 906 q 198 885 196 895 q 203 868 200 876 q 199 851 200 851 q 198 849 198 851 q 202 835 203 838 q 200 831 200 832 q 200 822 199 826 q 198 812 202 817 q 200 795 200 798 q 196 790 199 792 q 198 776 198 779 q 195 770 199 773 q 198 750 198 755 q 196 739 198 746 q 197 722 196 727 q 195 713 198 718 q 198 700 199 701 q 195 697 196 699 q 197 690 198 694 q 195 682 196 686 q 194 654 196 663 q 191 636 192 645 q 191 623 192 625 q 189 615 189 621 q 190 603 191 603 q 188 600 189 603 q 189 592 187 592 q 189 585 192 591 q 187 573 183 573 q 189 568 191 572 q 187 550 189 558 q 188 535 185 542 q 187 514 187 518 q 184 505 188 511 q 186 492 188 492 q 184 488 184 492 q 180 461 187 469 q 183 440 183 444 q 183 427 183 436 q 179 411 180 413 q 177 405 179 408 q 179 394 179 398 q 181 385 179 390 q 181 371 180 374 q 181 367 181 368 q 180 348 179 352 q 180 339 181 344 q 178 322 177 326 q 179 313 179 318 q 177 303 179 307 q 180 294 176 298 q 176 283 176 290 q 177 268 176 276 q 179 253 174 255 q 175 236 173 246 q 170 222 177 225 q 170 207 176 212 q 172 193 170 195 q 174 189 173 192 q 174 174 176 174 q 173 170 173 173 q 173 156 174 160 q 172 150 172 153 q 171 133 173 137 q 169 123 169 130 q 170 109 169 113 q 168 103 170 105 q 168 81 170 84 q 168 74 165 78 q 166 46 165 54 q 165 29 166 37 q 163 15 164 17 q 162 10 162 13 q 164 -1 165 0 q 164 -4 164 -2 q 164 -23 165 -20 q 164 -29 164 -25 q 166 -37 164 -33 q 168 -44 168 -40 q 168 -55 166 -52 q 168 -61 170 -58 q 177 -75 177 -74 q 177 -80 176 -77 q 181 -88 179 -84 q 185 -94 184 -92 q 193 -109 188 -105 q 200 -120 198 -113 q 218 -134 212 -124 q 237 -137 229 -134 q 256 -138 245 -139 q 287 -128 272 -128 q 284 -139 286 -135 q 283 -149 283 -142 q 271 -152 272 -151 q 268 -155 269 -153 q 260 -161 263 -158 q 255 -166 257 -164 q 236 -172 242 -166 q 222 -172 229 -179 q 211 -178 215 -173 q 200 -180 207 -183 q 184 -185 187 -188 q 159 -191 174 -193 q 134 -180 143 -188 q 115 -172 118 -174 q 108 -168 112 -170 q 105 -158 107 -160 q 100 -154 103 -157 q 90 -143 90 -146 q 88 -141 90 -139 q 82 -127 85 -128 q 82 -120 80 -126 q 75 -100 74 -113 q 69 -84 71 -92 q 67 -65 66 -77 q 67 -53 69 -55 q 66 -48 66 -51 q 66 -28 67 -33 q 65 -16 65 -23 q 65 -6 65 -13 q 66 6 65 0 q 69 35 70 24 q 70 54 67 47 q 70 63 71 58 q 73 73 69 69 q 71 88 71 86 q 70 90 70 89 q 72 125 71 107 q 73 162 73 143 q 73 173 71 172 q 74 177 74 174 q 73 191 74 183 q 73 207 71 199 q 75 217 73 212 q 77 227 77 222 q 76 242 75 238 q 77 248 77 245 q 77 262 75 261 q 78 264 78 263 q 79 282 78 279 q 77 290 80 286 q 80 297 78 293 q 81 305 81 301 q 79 321 77 320 q 82 325 81 322 q 81 338 80 329 q 80 354 82 347 q 83 370 84 367 q 85 377 82 373 q 83 387 84 382 q 84 402 82 393 q 86 429 89 420 q 90 446 84 439 q 87 473 85 462 q 89 503 89 484 q 91 521 92 515 q 90 534 90 527 q 92 548 90 541 q 90 561 93 554 q 94 571 93 564 q 94 584 94 579 q 92 595 92 591 q 93 602 93 599 q 97 626 96 619 q 99 638 99 632 q 97 668 97 656 q 99 693 97 680 q 101 709 101 708 q 100 713 100 710 q 102 729 101 728 q 101 733 103 731 q 101 752 100 748 q 101 760 101 756 q 99 771 99 769 q 100 775 100 773 q 101 792 101 790 q 100 796 100 793 q 101 812 100 809 q 101 817 101 815 q 98 833 99 828 q 97 843 97 838 q 98 861 99 857 q 100 870 97 865 q 96 910 99 897 q 96 937 94 923 q 90 953 93 949 q 89 961 88 957 q 82 980 92 968 q 66 995 73 991 q 56 994 59 992 q 48 996 54 995 q 40 988 43 987 q 33 988 36 988 q 18 978 18 980 q 1 966 5 967 q -5 961 -2 965 q -25 950 -25 957 q -34 952 -31 953 q -43 950 -37 950 q -48 956 -46 953 q -54 961 -50 960 q -54 969 -51 967 q -55 978 -56 971 q -34 990 -39 987 q -23 998 -29 994 q -12 1007 -13 1007 q -9 1009 -10 1007 q 16 1029 10 1022 q 31 1037 28 1029 q 48 1040 43 1043 q 62 1048 56 1045 q 92 1067 88 1055 q 107 1068 100 1067 q 120 1068 113 1068 q 135 1071 126 1072 q 153 1063 149 1063 q 164 1055 161 1055 q 169 1053 166 1055 q 176 1047 172 1051 q 183 1039 180 1044 q 189 1012 189 1018 q 189 999 188 1006 q 193 983 195 986 q 192 978 192 980 q 195 954 193 960 q 196 944 196 949 q 197 930 195 937 q 193 922 199 923 "},"8":{"x_min":20.34375,"x_max":706.03125,"ha":768,"o":"m 33 40 q 43 61 40 55 q 46 73 46 66 q 54 86 52 84 q 59 90 56 88 q 66 104 62 100 q 69 111 69 107 q 73 122 70 116 q 84 142 82 134 q 91 147 90 143 q 93 154 92 151 q 105 166 104 166 q 116 179 115 177 q 120 180 118 180 q 127 189 122 187 q 132 199 132 191 q 150 210 146 207 q 157 218 154 212 q 165 223 162 218 q 172 230 168 227 q 185 241 185 240 q 187 244 185 242 q 196 248 193 245 q 200 255 198 252 q 217 265 214 261 q 222 272 219 268 l 236 283 q 250 294 246 290 q 264 302 263 302 q 267 303 265 302 l 279 313 q 289 322 283 320 q 298 329 295 324 q 313 339 309 335 q 324 347 317 344 q 307 361 311 358 q 299 368 303 364 q 288 378 288 377 q 287 379 288 379 q 261 398 272 393 q 256 408 259 406 q 249 409 253 409 q 237 421 238 417 q 230 427 236 425 q 219 438 221 436 q 215 440 218 440 q 208 448 208 444 q 203 450 208 451 q 189 462 198 461 q 177 479 179 476 q 172 482 176 482 l 160 497 q 155 504 157 500 q 149 508 154 508 q 139 522 141 520 q 135 526 138 524 q 120 554 130 548 q 117 568 116 567 q 116 573 118 569 q 109 587 111 587 q 105 590 107 587 q 105 608 104 604 q 104 614 107 611 q 103 631 100 621 q 103 648 105 641 q 109 667 108 655 q 116 686 109 679 q 120 699 116 697 q 120 708 123 701 q 126 714 124 710 q 132 721 128 718 q 136 730 132 728 q 139 739 139 732 q 152 753 146 750 q 161 766 158 756 q 168 771 165 767 q 173 777 170 774 q 182 785 177 782 q 188 794 187 788 q 207 807 204 801 q 222 815 219 813 q 229 820 225 817 q 246 832 242 828 q 256 841 249 836 q 276 850 274 846 q 283 854 279 853 q 290 858 287 855 q 310 866 306 865 q 317 869 314 868 q 328 875 326 876 q 332 880 330 874 q 345 882 340 880 q 358 887 351 884 q 382 891 373 892 q 401 897 396 895 q 413 900 406 899 q 427 900 420 900 q 440 900 434 899 q 461 900 455 902 q 473 899 466 899 q 491 894 486 893 q 497 895 495 895 q 507 891 503 893 q 516 891 511 889 q 526 882 526 884 q 530 880 527 880 q 550 875 545 874 q 557 874 554 876 q 564 872 561 874 q 571 866 568 869 q 591 862 579 864 q 617 843 613 849 q 642 820 637 834 q 655 813 652 815 q 659 809 659 812 q 674 792 670 804 q 679 786 676 789 q 686 779 682 782 q 693 758 686 769 q 694 739 691 752 q 699 728 699 735 q 699 714 698 721 q 705 698 704 701 q 705 693 706 695 q 700 676 702 680 q 697 668 698 671 q 699 660 699 664 q 702 653 699 656 q 698 638 699 638 q 702 634 697 637 l 695 617 q 691 597 693 603 q 689 584 690 591 q 684 573 683 575 q 683 569 685 572 q 676 554 674 562 q 662 539 667 543 q 653 533 657 535 q 649 522 653 524 q 642 512 644 519 q 630 499 630 501 q 619 492 623 496 q 613 481 614 488 q 596 472 596 476 q 581 460 584 463 q 576 454 579 457 q 562 446 565 448 q 557 439 558 444 q 537 427 543 432 q 527 416 531 423 q 512 406 518 412 q 500 398 501 401 q 495 394 499 396 q 473 384 477 392 q 459 377 469 377 q 463 364 462 370 q 473 359 465 358 q 480 347 477 347 q 484 347 482 348 q 491 339 489 341 q 495 333 492 336 q 512 321 507 328 q 520 313 519 314 q 524 311 522 311 q 545 293 537 302 q 562 278 553 284 l 572 265 q 583 246 580 249 q 590 241 587 244 q 600 225 598 230 q 610 217 603 219 q 615 193 614 196 q 623 184 621 184 q 626 183 625 184 q 634 168 629 173 q 640 149 637 153 q 645 143 642 146 q 653 126 649 128 q 657 120 656 124 q 660 103 656 109 q 663 84 664 96 q 666 69 664 70 q 667 67 668 69 q 666 49 667 54 q 667 43 664 44 q 663 36 664 40 q 661 25 663 32 q 659 17 660 23 q 656 5 657 12 q 651 -11 652 -9 q 648 -16 651 -13 q 646 -29 648 -29 q 642 -31 644 -29 q 638 -41 640 -39 q 637 -47 637 -43 q 623 -73 625 -56 q 615 -89 618 -74 q 603 -101 606 -93 q 596 -116 600 -109 q 574 -131 580 -127 q 562 -142 568 -135 q 534 -158 549 -151 q 523 -166 529 -164 q 514 -174 518 -169 q 501 -181 501 -179 q 496 -183 501 -184 q 481 -193 484 -189 q 472 -199 478 -198 q 448 -214 450 -208 q 429 -219 438 -217 q 412 -225 420 -222 q 393 -236 401 -231 q 377 -240 385 -241 q 362 -247 364 -245 q 356 -250 359 -249 q 337 -252 341 -253 q 326 -253 332 -252 q 318 -256 322 -255 q 310 -257 313 -257 q 296 -259 297 -261 q 294 -257 295 -257 q 284 -260 288 -257 q 276 -264 280 -263 q 265 -263 272 -261 q 252 -263 257 -265 q 240 -262 249 -261 q 226 -261 230 -263 q 204 -260 210 -261 q 193 -257 199 -259 q 177 -258 180 -257 q 172 -257 174 -259 q 157 -257 157 -255 q 142 -248 153 -250 q 123 -246 131 -245 q 118 -239 122 -240 q 111 -233 113 -238 q 92 -218 92 -222 q 78 -208 84 -214 q 71 -197 73 -198 q 69 -193 70 -196 q 59 -174 62 -184 q 48 -161 52 -169 q 37 -147 44 -153 q 35 -138 36 -142 q 31 -134 35 -134 q 28 -121 31 -127 q 24 -108 25 -115 q 23 -96 25 -100 q 24 -85 21 -92 q 20 -52 25 -61 q 25 -29 23 -36 q 24 -14 28 -21 q 33 -1 33 -4 q 32 4 32 1 q 33 24 35 20 q 36 31 32 28 l 33 40 m 398 831 q 377 834 382 835 q 368 834 373 834 q 358 834 363 834 q 349 834 354 835 q 332 827 337 828 q 324 824 326 826 q 307 819 309 820 q 303 817 305 819 q 291 811 293 812 q 287 809 290 809 q 269 792 274 800 q 257 778 264 785 q 249 773 253 775 q 241 767 245 771 q 232 759 236 760 q 225 758 229 758 q 219 740 222 744 q 221 725 222 733 q 214 713 219 717 q 210 698 212 699 q 206 694 208 697 q 206 668 203 679 q 206 651 203 655 q 204 642 208 648 q 208 625 211 632 q 214 606 211 611 q 229 591 222 598 q 233 577 231 577 q 234 575 234 577 q 245 561 241 568 q 255 548 249 554 q 265 536 263 538 q 269 531 267 534 q 282 519 278 523 q 293 512 286 515 q 301 501 298 504 q 306 499 303 499 q 320 488 314 495 q 329 478 326 481 q 340 468 337 469 q 344 465 343 467 q 356 453 355 453 q 356 450 358 453 q 377 436 368 446 q 397 423 385 427 q 404 413 398 417 q 412 406 409 409 q 420 404 417 404 q 430 406 423 405 q 436 414 430 413 q 443 421 442 415 q 458 430 455 427 q 468 439 465 434 q 478 448 472 444 q 495 454 488 455 q 500 459 497 457 q 504 466 503 462 q 516 473 515 472 q 520 476 518 474 q 531 490 529 485 q 538 497 533 495 q 550 516 546 512 q 557 526 554 520 q 568 535 565 533 q 571 541 571 538 q 575 556 573 552 q 575 564 577 560 q 583 578 584 567 q 588 594 581 590 q 592 611 592 606 q 593 626 592 625 q 596 630 594 628 q 592 639 591 633 q 588 648 594 645 q 594 663 598 652 q 594 680 590 674 q 589 691 591 690 q 585 694 587 691 q 583 712 584 710 q 580 716 581 713 q 575 731 577 731 q 573 733 573 731 q 570 741 573 739 q 564 748 567 744 q 554 761 556 756 q 545 767 552 766 q 536 781 541 778 q 529 788 531 784 q 516 792 522 790 q 508 798 511 793 q 493 805 495 805 q 488 805 491 804 q 477 810 477 808 q 474 813 477 812 q 457 822 463 815 q 442 823 451 828 q 425 827 435 828 q 413 830 416 826 q 405 832 409 832 q 398 831 401 831 m 358 313 q 343 303 344 302 q 328 291 332 295 q 317 286 325 287 q 297 267 301 272 q 287 257 293 263 l 272 245 q 259 238 261 238 q 253 236 256 237 q 241 222 244 227 q 233 216 236 219 q 225 211 231 212 q 211 194 214 198 q 206 184 208 191 q 198 179 199 184 q 189 172 196 173 q 179 153 181 155 q 174 147 177 150 q 171 141 172 145 q 168 134 170 137 q 164 121 166 124 q 158 115 161 118 q 153 94 155 101 q 150 85 151 88 q 140 67 139 70 q 141 61 141 65 q 137 39 137 46 q 134 25 132 27 q 135 20 135 23 q 131 2 131 16 q 128 -17 131 -14 q 128 -25 126 -21 q 128 -32 130 -28 q 131 -54 131 -47 q 130 -67 131 -61 q 137 -89 139 -74 q 140 -96 138 -93 q 142 -107 142 -100 q 154 -113 149 -109 q 160 -126 160 -116 q 170 -138 169 -128 q 183 -147 179 -141 q 193 -155 187 -153 q 205 -164 204 -166 q 208 -162 206 -161 q 220 -171 218 -168 q 229 -173 222 -174 q 242 -183 237 -177 q 263 -187 253 -184 q 283 -185 274 -191 q 301 -189 299 -189 q 306 -188 303 -188 q 329 -190 322 -192 q 343 -185 336 -188 q 355 -187 349 -189 q 367 -184 360 -185 q 381 -183 377 -185 q 389 -183 385 -181 q 398 -181 396 -181 q 404 -180 401 -180 q 412 -173 406 -174 q 420 -168 417 -172 q 438 -166 431 -165 q 451 -164 444 -166 q 463 -154 462 -154 q 473 -149 470 -150 q 478 -146 476 -149 q 486 -138 482 -142 q 495 -132 489 -134 q 509 -116 507 -123 q 518 -107 511 -109 q 523 -94 523 -96 q 526 -92 523 -92 q 533 -78 527 -82 q 539 -63 539 -74 q 548 -44 545 -47 q 553 -36 550 -40 q 559 -8 556 -14 q 564 6 562 -1 q 563 18 562 17 q 564 21 564 20 q 564 35 562 32 q 565 42 565 39 q 562 59 565 48 q 558 73 560 73 q 557 77 557 74 l 553 92 q 543 105 543 104 q 537 120 541 116 q 537 130 534 124 q 522 147 524 141 q 517 158 518 155 q 514 164 516 161 q 507 170 511 166 q 505 177 504 173 q 497 184 499 183 q 496 189 496 185 q 487 195 489 191 q 482 204 485 199 q 469 219 470 218 q 463 221 467 219 q 443 244 450 237 q 425 259 436 252 q 415 276 420 272 q 395 288 402 283 q 385 301 387 293 q 368 313 368 310 l 358 313 "},"p":{"x_min":-201.734375,"x_max":505.953125,"ha":533,"o":"m 164 493 q 172 499 170 495 q 177 507 174 503 q 191 522 188 520 q 192 527 193 523 q 208 537 204 533 q 215 545 211 541 q 234 560 226 556 q 248 573 242 565 q 261 584 261 581 q 277 590 274 588 q 283 591 280 591 q 293 596 291 595 q 298 596 295 596 q 312 604 303 602 q 325 613 321 606 q 343 618 341 617 q 362 623 355 623 q 379 625 368 623 q 387 626 383 625 q 394 628 390 628 q 409 630 405 628 q 432 623 424 626 q 450 621 439 621 q 455 615 451 617 q 461 610 458 613 q 471 597 470 598 q 472 594 472 596 q 484 578 484 580 q 488 573 484 576 q 489 566 485 571 q 486 558 492 561 q 494 550 492 556 q 497 537 496 543 q 498 520 499 522 q 497 515 497 518 q 501 484 503 497 q 503 463 500 472 q 502 450 503 454 q 505 444 501 446 q 502 421 503 430 q 500 405 501 413 q 495 376 499 389 q 496 356 491 363 q 486 346 485 348 q 486 341 486 344 q 482 333 482 339 q 480 322 482 326 q 472 310 473 311 q 472 305 472 309 q 457 282 462 294 q 448 274 454 278 q 442 264 443 271 q 425 251 428 252 q 421 246 421 250 q 404 237 408 238 q 398 231 401 236 q 390 229 392 231 q 383 226 389 226 q 364 208 366 214 q 347 203 348 204 q 337 195 339 195 q 335 192 336 195 q 316 187 325 188 q 305 180 307 185 q 286 179 288 181 q 282 174 284 176 q 263 172 265 172 q 259 173 261 173 l 238 169 q 222 165 223 169 q 212 170 219 172 q 195 169 206 168 q 193 145 193 154 q 189 132 192 137 q 196 114 196 119 q 195 104 195 109 q 198 88 199 90 q 195 84 196 86 q 196 64 198 69 q 195 54 195 59 q 200 33 198 42 q 203 16 203 24 q 203 -35 198 -14 q 205 -48 204 -40 q 206 -58 206 -56 q 205 -68 206 -63 q 204 -75 204 -73 q 204 -90 203 -86 q 207 -96 206 -93 q 204 -113 204 -111 q 204 -125 206 -118 q 206 -137 202 -132 q 200 -144 202 -142 q 200 -153 199 -146 q 195 -162 192 -161 q 198 -169 198 -164 q 192 -185 191 -181 q 195 -191 193 -188 q 193 -200 192 -195 q 192 -211 195 -206 q 187 -223 191 -218 q 184 -233 184 -227 q 168 -240 170 -237 q 164 -245 166 -242 q 165 -268 168 -253 q 158 -279 157 -278 q 160 -283 160 -280 q 152 -292 155 -287 q 150 -306 149 -297 q 134 -324 137 -320 q 131 -333 132 -328 q 122 -341 123 -340 q 122 -345 122 -343 q 109 -355 112 -355 q 104 -356 107 -355 q 88 -380 99 -373 q 71 -398 77 -387 q 50 -415 52 -408 q 37 -420 37 -417 q 33 -425 36 -423 q 16 -440 21 -432 q 2 -451 2 -448 q -10 -456 -8 -455 q -16 -459 -13 -457 q -23 -464 -18 -462 q -35 -467 -28 -466 q -69 -489 -61 -481 q -81 -494 -78 -493 q -82 -497 -84 -495 q -112 -507 -100 -503 q -123 -508 -118 -508 q -131 -512 -128 -508 q -143 -512 -138 -510 q -151 -516 -147 -515 q -165 -518 -158 -519 q -177 -520 -172 -518 q -189 -518 -183 -518 q -200 -516 -195 -519 q -198 -505 -203 -508 q -189 -500 -193 -503 q -191 -493 -189 -496 q -192 -484 -192 -489 q -183 -482 -185 -485 q -177 -477 -181 -478 q -166 -478 -172 -478 q -155 -480 -160 -477 q -134 -480 -139 -478 q -122 -480 -128 -481 q -108 -476 -112 -476 q -101 -473 -104 -476 q -91 -465 -90 -462 q -88 -466 -92 -469 q -73 -458 -74 -459 q -69 -455 -71 -457 q -59 -449 -61 -453 q -51 -446 -56 -446 q -35 -431 -43 -439 l -20 -423 q -10 -415 -12 -417 q -6 -413 -9 -413 q 9 -393 6 -402 q 19 -388 17 -390 q 21 -382 21 -386 q 35 -373 35 -374 q 33 -370 35 -373 q 62 -333 50 -354 q 67 -321 65 -326 q 71 -309 69 -316 q 77 -298 74 -303 q 80 -286 80 -293 q 88 -276 86 -283 q 93 -265 89 -268 q 94 -251 93 -259 q 97 -234 96 -244 q 99 -225 99 -230 q 101 -218 99 -221 q 102 -193 100 -199 q 104 -180 104 -187 q 105 -158 104 -165 q 103 -141 105 -150 q 100 -118 105 -123 q 100 -101 103 -103 q 102 -78 105 -92 q 99 -51 99 -65 q 97 -36 100 -42 q 99 -28 103 -33 q 103 -20 96 -23 q 99 -6 99 -8 q 100 -1 100 -4 q 98 14 97 10 q 99 21 99 17 q 97 29 99 25 q 96 36 96 33 q 96 52 97 48 q 97 63 96 56 q 94 80 97 77 q 95 94 94 94 q 96 97 96 94 q 94 110 93 107 q 94 116 94 113 q 92 130 92 128 q 93 132 93 131 q 90 144 93 138 q 85 157 88 150 q 87 175 89 173 q 85 180 85 177 q 86 192 88 191 q 84 195 84 193 q 82 210 84 210 q 81 210 81 211 q 82 223 84 221 q 82 231 81 226 q 82 243 84 240 q 80 250 80 246 q 80 258 80 253 q 81 269 81 263 q 79 285 81 276 q 74 298 77 294 q 75 305 74 301 q 75 314 77 309 q 73 333 71 330 q 74 339 74 336 q 72 354 71 351 q 73 360 73 358 q 71 379 73 375 q 69 385 69 382 q 68 418 69 406 q 67 442 67 430 q 67 453 69 451 q 66 457 66 454 q 65 474 65 470 q 63 485 65 481 q 62 496 62 489 q 61 509 61 503 q 56 519 61 515 l 56 534 q 48 560 52 553 q 37 569 44 567 l 23 575 q -4 562 4 567 q -14 558 -9 560 q -23 552 -20 557 q -38 549 -33 550 q -52 550 -43 548 q -53 568 -59 560 q -40 579 -47 576 q -32 585 -36 583 q -20 590 -28 587 q -8 597 -9 595 q -5 600 -8 599 q 5 602 2 600 q 10 604 8 603 q 23 613 17 611 q 32 618 29 614 q 51 624 48 623 q 55 628 54 625 q 71 632 65 630 q 84 636 77 633 q 94 637 90 633 q 101 645 99 641 q 122 647 113 640 q 132 636 131 638 q 143 616 141 619 q 149 610 146 613 q 150 597 151 603 q 154 585 149 591 q 154 557 150 564 q 161 543 158 550 q 160 524 158 527 q 164 516 162 522 q 161 505 161 510 q 164 493 161 500 m 373 550 q 364 554 368 553 q 358 560 360 556 q 344 560 348 560 q 332 561 340 561 q 322 561 325 560 q 313 561 318 562 q 305 557 309 558 q 295 556 302 556 q 276 537 279 542 q 255 515 264 519 q 251 507 255 508 q 246 499 248 505 q 230 479 236 485 q 222 466 225 473 q 203 447 208 450 q 196 433 198 438 q 191 427 195 428 q 181 415 184 417 q 174 411 177 413 q 171 396 173 400 q 166 386 169 392 q 177 352 177 363 q 179 328 176 340 q 180 314 180 318 q 180 307 180 310 q 181 296 180 299 q 183 288 183 293 q 183 277 184 283 q 181 268 181 271 q 185 259 183 264 q 185 250 188 255 q 195 245 192 249 q 200 237 198 241 q 211 234 207 234 q 215 231 215 234 q 237 227 231 227 q 253 221 253 221 q 279 221 271 222 q 293 218 287 219 q 318 224 311 222 q 329 229 324 226 q 347 242 335 238 l 359 253 l 367 267 q 382 288 381 286 q 385 303 382 295 q 387 322 386 318 q 389 330 387 326 q 389 344 390 341 q 389 349 389 347 q 394 361 393 359 q 397 366 396 363 q 399 385 398 378 q 397 402 400 392 q 400 410 401 405 q 398 419 398 415 q 400 429 398 424 q 400 440 401 434 q 396 448 398 446 q 394 457 394 451 q 398 474 398 467 q 400 485 397 481 q 396 493 397 488 q 396 503 396 497 q 388 516 387 515 q 389 519 389 518 q 373 550 374 537 "},"4":{"x_min":-69.171875,"x_max":949.515625,"ha":883,"o":"m 531 963 q 537 944 537 949 q 543 914 543 929 q 545 880 542 899 q 540 859 539 865 q 545 851 541 854 q 543 836 541 845 q 539 830 537 835 q 537 823 541 826 q 538 809 538 812 q 535 804 538 807 q 535 793 535 797 q 534 782 535 789 q 534 767 535 770 q 531 760 533 765 q 531 752 530 756 q 529 746 531 748 q 523 720 523 729 q 519 708 523 712 q 510 680 510 689 q 503 671 510 672 q 502 649 507 659 q 495 630 497 640 q 486 610 489 619 q 477 596 482 600 q 472 579 474 584 q 469 571 470 575 q 465 562 466 567 q 459 557 463 558 q 452 538 453 541 q 448 533 451 535 q 438 516 440 522 q 428 510 436 511 q 425 501 427 504 q 423 491 424 497 q 415 477 417 486 q 401 453 405 469 q 394 446 397 450 q 386 440 392 442 q 370 419 377 425 q 360 408 359 411 q 359 405 360 405 q 349 396 352 402 q 337 389 345 390 q 329 376 329 378 q 328 373 329 374 q 316 364 316 364 q 316 362 317 363 q 301 351 303 354 q 297 344 298 348 q 287 337 290 341 q 279 329 284 332 q 265 321 265 321 q 261 320 264 321 q 249 309 250 309 q 233 298 236 299 q 231 293 230 297 q 216 286 222 288 q 206 278 210 283 q 181 267 184 274 q 206 258 196 259 q 221 253 215 257 q 241 248 234 249 q 257 244 256 244 q 282 237 276 237 q 293 231 287 237 q 301 229 298 231 q 309 223 305 226 q 321 220 320 222 q 324 221 322 218 q 341 214 337 215 q 352 210 351 210 q 356 210 354 211 q 371 206 368 207 q 381 202 377 204 q 393 200 386 199 q 411 196 406 199 q 420 195 416 192 q 429 192 428 191 q 435 192 431 193 q 446 189 444 191 q 454 188 448 187 q 472 183 467 184 q 482 184 477 181 q 495 177 485 177 q 511 174 505 177 q 550 172 534 172 q 556 204 557 189 q 556 234 556 219 q 557 250 558 245 q 558 263 556 256 q 557 278 557 274 q 558 288 557 283 q 559 305 560 303 q 558 309 558 306 q 560 324 560 317 q 558 339 561 330 q 562 363 558 356 q 560 395 560 382 q 561 419 561 408 q 556 440 558 436 q 556 450 554 444 q 552 474 554 465 q 552 493 549 484 l 546 510 q 541 522 543 516 q 535 534 538 529 q 535 545 537 545 q 533 550 533 546 q 536 560 533 557 q 542 569 539 564 q 551 572 546 571 q 558 576 556 573 q 577 581 575 581 q 583 581 580 580 q 594 585 588 583 q 610 585 600 588 q 626 585 623 588 q 630 580 628 581 q 636 563 634 569 q 644 553 638 557 q 645 536 642 543 q 645 522 648 529 q 649 503 648 510 q 653 479 652 485 q 655 467 653 473 q 656 456 656 462 q 652 446 656 450 q 657 432 655 439 q 660 415 660 424 q 659 400 659 400 q 659 377 657 382 q 657 370 660 373 q 655 354 657 358 l 655 333 q 652 325 653 329 q 649 317 651 321 q 654 308 655 313 q 653 298 653 303 q 652 283 651 283 q 653 280 653 283 q 652 266 655 265 q 648 264 649 267 q 653 236 653 244 q 651 221 652 229 q 651 208 649 208 q 652 204 652 207 l 651 188 q 650 169 648 172 q 651 164 652 166 q 672 164 663 162 q 689 169 680 166 q 701 167 701 168 q 704 166 701 166 q 717 168 714 169 q 724 170 720 168 q 741 175 740 176 q 746 176 743 174 q 763 182 755 179 q 782 185 771 185 q 793 191 788 188 q 805 195 798 193 q 817 207 813 203 q 840 219 835 215 q 850 226 845 223 q 864 240 858 231 q 876 254 876 246 q 884 264 877 261 q 891 277 887 271 q 899 290 895 283 q 914 298 914 297 q 918 301 915 299 q 933 303 925 303 q 949 298 942 303 q 946 278 949 280 q 941 266 942 268 q 940 261 940 264 q 924 240 931 244 q 912 227 916 236 q 899 222 904 226 q 889 212 893 218 q 870 199 877 202 q 859 189 864 196 q 849 185 853 191 q 836 183 846 180 q 819 174 820 176 q 816 170 819 172 q 800 166 805 166 q 793 164 796 165 q 779 157 785 157 q 771 157 774 157 q 756 152 758 154 q 752 150 755 150 q 736 148 739 151 q 731 142 733 145 q 708 139 714 139 q 697 135 702 138 q 684 137 685 135 q 680 137 683 138 q 664 126 675 131 q 655 127 659 128 q 647 123 651 126 q 647 90 645 99 q 645 74 649 82 q 644 61 648 61 q 641 59 641 62 q 639 47 637 50 q 642 39 641 44 q 638 20 638 25 q 633 14 638 14 q 642 0 638 6 q 642 -16 645 -5 q 640 -38 638 -33 q 640 -50 641 -43 q 639 -67 638 -63 q 642 -74 640 -71 q 637 -80 640 -78 q 633 -89 634 -82 q 637 -112 640 -107 q 634 -123 634 -118 q 638 -139 640 -139 q 636 -142 636 -139 q 635 -157 636 -153 q 632 -164 634 -161 q 638 -184 634 -180 q 638 -207 640 -203 q 637 -214 637 -211 q 642 -226 638 -221 q 642 -238 645 -231 q 653 -255 645 -244 q 658 -261 656 -257 q 661 -268 660 -264 q 660 -276 661 -272 q 659 -284 659 -279 q 649 -289 652 -286 q 644 -297 647 -293 q 617 -305 626 -295 q 600 -309 606 -303 q 587 -320 595 -316 l 568 -329 q 553 -324 561 -326 q 543 -308 542 -311 q 539 -302 543 -305 q 546 -278 548 -283 q 545 -267 545 -272 q 545 -248 546 -252 q 545 -238 545 -244 q 547 -223 545 -230 q 542 -210 549 -217 q 545 -196 545 -198 q 546 -192 546 -195 q 542 -176 543 -177 q 541 -173 541 -174 q 541 -164 541 -168 q 542 -155 542 -160 q 542 -141 543 -149 q 542 -124 541 -132 q 541 -108 543 -111 q 543 -92 541 -103 q 543 -74 543 -77 q 541 -67 542 -71 q 541 -38 539 -54 q 542 -9 543 -23 q 541 -1 541 -5 q 542 6 542 2 q 543 19 543 18 q 542 23 542 20 q 544 44 543 39 q 542 52 545 48 q 543 69 545 59 q 545 83 545 82 q 546 85 546 84 q 548 98 546 93 q 546 107 549 103 q 538 112 543 113 q 527 116 533 111 q 518 113 524 115 q 510 115 512 112 q 472 114 489 116 q 447 119 455 112 q 438 119 442 116 q 427 122 434 122 q 407 122 415 120 q 393 124 400 123 q 379 126 379 124 q 377 127 379 127 q 353 130 362 127 q 336 132 344 134 q 316 139 321 139 q 310 142 311 139 q 297 145 302 141 q 284 146 293 149 q 253 156 261 151 q 234 161 245 161 q 214 170 217 169 q 196 178 199 179 q 189 179 193 177 q 169 183 173 184 q 154 190 166 191 q 138 196 142 189 q 128 196 131 195 q 118 195 124 196 q 105 203 107 200 q 97 204 103 206 q 67 211 77 208 q 46 214 56 214 q 29 215 33 215 q 2 216 10 214 q -12 212 -5 218 q -36 217 -20 218 q -54 211 -48 211 q -65 223 -65 219 q -69 226 -66 226 q -66 238 -66 233 q -62 250 -66 244 q -46 257 -47 256 q -36 257 -44 257 q -22 266 -27 264 q -12 271 -17 268 q 8 278 2 278 q 18 278 14 278 q 31 276 29 275 q 33 276 32 276 q 54 277 50 278 q 63 279 59 276 q 75 275 67 274 q 90 276 82 276 q 101 275 97 276 q 111 275 104 274 q 120 277 118 276 q 127 280 123 278 q 142 289 137 288 q 150 291 147 290 q 160 297 155 294 q 168 302 164 299 q 178 307 173 305 q 185 313 183 310 q 208 328 203 324 q 218 337 212 333 q 226 343 222 340 q 234 349 230 345 l 245 362 q 259 373 256 371 q 263 379 261 375 q 278 393 272 389 q 286 405 283 397 q 297 418 295 417 q 298 421 299 419 q 308 429 303 425 q 314 443 313 434 q 325 455 322 447 q 335 467 328 462 q 346 487 343 484 q 352 496 349 491 q 360 508 358 507 q 360 512 362 510 q 373 527 367 524 q 377 535 379 530 q 385 545 382 539 q 389 561 389 550 q 398 576 398 573 q 401 577 398 579 q 408 596 402 591 q 408 607 406 603 q 413 613 411 610 q 415 626 415 625 q 417 630 416 628 q 422 646 420 645 q 424 648 424 647 q 429 663 427 660 q 431 676 431 667 q 440 701 435 693 q 447 717 444 709 q 448 729 448 724 q 451 737 448 733 q 452 764 448 751 q 451 790 455 777 q 457 817 457 801 q 457 834 458 826 q 454 847 457 842 q 451 881 459 870 q 453 893 454 891 q 451 897 451 895 q 451 911 453 908 q 451 916 450 914 q 451 931 450 930 q 455 934 453 931 q 464 946 461 945 q 465 950 467 946 q 497 955 485 952 q 516 965 508 959 q 524 964 520 964 q 531 963 529 964 "},"R":{"x_min":-111.671875,"x_max":1370.015625,"ha":1036,"o":"m 1007 -314 q 1009 -322 1009 -317 q 1010 -329 1009 -326 q 1020 -343 1020 -341 q 1021 -347 1020 -344 q 1027 -360 1028 -355 q 1032 -367 1026 -364 q 1038 -387 1030 -379 q 1045 -411 1045 -396 q 1063 -440 1053 -431 q 1068 -452 1064 -448 q 1071 -463 1072 -455 q 1089 -481 1083 -480 q 1095 -496 1091 -495 q 1101 -499 1098 -497 l 1115 -516 q 1127 -527 1121 -530 q 1134 -537 1132 -535 q 1140 -538 1136 -539 q 1154 -550 1151 -546 q 1159 -556 1157 -553 q 1172 -558 1167 -556 q 1185 -561 1177 -561 q 1197 -568 1197 -565 q 1200 -571 1197 -571 q 1212 -573 1208 -573 q 1216 -575 1216 -572 q 1231 -573 1224 -571 q 1245 -573 1238 -576 q 1266 -575 1261 -577 q 1276 -571 1270 -572 q 1293 -568 1289 -569 q 1303 -564 1296 -567 q 1316 -563 1314 -562 q 1321 -564 1318 -564 q 1334 -562 1332 -561 q 1341 -561 1337 -562 q 1346 -555 1344 -558 q 1353 -548 1349 -552 q 1359 -543 1356 -545 q 1370 -543 1363 -541 q 1362 -558 1360 -557 q 1361 -562 1364 -560 q 1334 -565 1344 -568 l 1319 -573 q 1308 -580 1311 -579 q 1303 -583 1306 -581 q 1290 -591 1292 -588 q 1284 -596 1288 -594 q 1267 -600 1269 -600 q 1262 -602 1265 -600 q 1249 -602 1253 -602 q 1239 -604 1245 -603 q 1228 -609 1230 -611 q 1224 -611 1226 -607 q 1213 -607 1219 -606 q 1199 -606 1207 -609 q 1179 -615 1185 -615 q 1170 -618 1173 -615 q 1159 -613 1165 -615 q 1146 -614 1152 -611 q 1119 -609 1128 -609 q 1102 -609 1109 -610 q 1087 -601 1091 -600 q 1079 -600 1082 -602 q 1068 -594 1072 -595 q 1064 -590 1064 -594 q 1053 -586 1058 -590 q 1043 -580 1049 -583 q 1022 -562 1029 -562 q 1013 -553 1015 -554 q 1007 -552 1010 -552 q 1000 -536 1003 -537 q 994 -533 996 -535 q 987 -516 988 -527 q 975 -503 976 -508 q 971 -496 973 -499 q 957 -470 965 -470 q 952 -457 953 -459 q 949 -453 952 -455 q 938 -433 941 -438 q 938 -424 935 -428 q 933 -415 935 -421 q 933 -404 930 -409 q 921 -391 922 -393 q 919 -383 919 -389 q 914 -366 916 -367 q 915 -362 912 -366 l 908 -348 q 902 -336 903 -343 q 899 -321 900 -329 l 892 -305 q 881 -288 884 -299 q 874 -267 877 -278 q 859 -238 866 -245 q 855 -222 857 -227 q 851 -210 854 -217 q 846 -187 846 -199 q 839 -175 842 -177 q 836 -166 836 -173 q 831 -154 835 -158 q 824 -143 827 -150 q 815 -109 816 -126 q 805 -96 805 -96 q 803 -87 805 -90 q 801 -81 801 -84 q 797 -67 798 -71 q 793 -61 796 -63 q 788 -46 790 -50 q 788 -39 786 -43 q 777 -27 777 -29 q 775 -18 777 -20 q 774 -10 773 -16 q 764 1 765 0 q 763 5 763 2 q 753 19 755 18 q 754 23 751 20 q 744 35 747 33 q 744 40 741 37 q 733 59 739 54 q 725 73 728 63 q 716 88 716 81 q 703 94 704 90 q 695 99 702 99 q 689 110 691 111 q 685 111 687 109 q 671 123 675 119 q 660 128 667 127 q 652 139 657 137 q 644 149 647 142 q 632 153 637 154 q 630 158 628 153 q 588 170 602 166 q 568 173 575 174 q 554 172 561 172 q 535 171 539 170 q 527 169 530 172 q 503 164 514 165 q 485 161 492 164 q 460 166 466 165 q 453 174 454 166 q 457 183 453 180 q 461 193 462 185 q 470 198 467 193 q 477 206 472 203 q 495 219 493 217 q 500 223 497 221 q 520 236 511 226 q 529 238 524 237 q 535 241 533 238 q 543 242 541 241 q 550 244 545 244 q 564 248 560 249 q 572 248 568 248 q 580 251 576 249 q 588 255 584 253 q 611 253 603 255 q 625 253 618 252 q 634 256 630 255 q 641 263 638 257 q 653 266 649 265 q 663 269 657 267 q 691 280 682 280 q 720 299 713 288 q 731 303 728 302 q 736 307 735 305 q 748 312 744 310 q 755 316 751 314 q 771 326 766 322 q 775 336 775 329 q 793 341 790 341 q 805 350 797 345 q 815 362 812 355 q 824 368 823 363 q 828 377 826 373 q 838 380 835 378 q 847 385 842 382 q 857 398 858 397 q 858 401 857 400 q 868 411 869 409 q 869 413 868 412 q 889 440 888 427 q 902 455 899 451 q 910 462 906 458 q 917 474 916 473 q 918 477 918 476 q 931 501 929 495 q 935 514 933 507 q 944 531 941 526 q 949 542 948 535 q 959 554 956 552 q 961 562 963 556 q 967 573 968 571 q 968 579 967 576 q 973 598 973 594 q 972 609 972 602 q 979 626 978 621 q 982 636 980 630 q 983 651 983 644 q 987 664 983 659 q 984 683 984 680 q 987 701 988 695 q 986 716 986 708 q 986 729 987 727 q 984 733 984 731 q 984 741 983 737 q 983 750 984 746 q 978 763 982 756 q 976 777 975 770 q 965 805 975 798 q 963 815 965 812 q 956 820 960 817 q 946 842 949 834 q 923 865 933 859 q 919 873 923 872 q 914 881 915 874 q 907 886 911 884 q 902 893 903 888 q 889 902 892 902 q 884 908 885 903 q 858 919 870 918 q 840 931 845 926 q 826 935 835 937 q 818 944 824 942 q 812 953 812 945 q 795 956 798 953 q 785 960 792 959 q 771 966 774 963 q 762 969 767 969 q 753 977 759 976 q 744 982 747 978 q 733 984 737 980 q 720 987 728 988 q 700 996 704 995 q 694 1001 697 996 q 682 1002 687 1001 q 671 1005 678 1003 q 661 1009 664 1010 q 655 1007 657 1007 q 641 1011 648 1009 q 628 1014 634 1014 q 610 1011 618 1010 q 596 1015 598 1014 q 594 1015 595 1015 q 571 1014 580 1018 q 556 1013 557 1014 q 553 1014 556 1011 q 528 1009 534 1009 q 515 1011 522 1010 q 499 1006 500 1005 q 495 1007 497 1007 q 481 1004 481 1003 q 480 1005 481 1005 q 472 1003 478 1005 q 462 1001 465 1001 q 447 998 447 998 q 419 991 430 991 q 402 983 413 986 q 381 980 390 980 q 373 973 378 978 q 363 972 368 969 q 345 960 348 961 q 338 959 340 961 q 329 959 336 957 l 314 950 q 299 939 302 941 q 290 934 295 937 q 261 918 267 925 q 249 907 250 908 q 245 907 248 906 q 231 888 233 892 q 217 877 222 880 q 210 868 211 874 q 197 862 200 868 q 187 854 193 857 q 178 842 181 843 q 172 838 174 841 q 161 826 165 834 q 150 816 157 819 q 140 803 141 805 q 137 803 139 801 q 128 788 128 793 q 123 777 127 782 q 119 765 120 769 q 115 760 118 762 q 107 748 112 752 q 103 733 103 743 q 92 720 96 728 q 82 708 89 712 q 70 680 74 691 q 59 659 66 668 q 59 649 59 652 q 61 641 58 647 q 58 627 58 632 q 55 619 58 622 q 54 600 58 611 q 54 579 51 588 q 56 560 58 567 q 59 552 55 554 q 57 533 58 537 q 59 524 56 529 q 59 506 56 515 q 61 486 62 497 q 63 467 61 476 q 71 453 71 455 q 77 437 78 439 q 77 432 77 435 q 93 423 81 423 q 107 408 103 409 q 115 401 112 406 q 122 398 120 401 q 130 394 123 394 q 139 383 137 385 q 146 382 142 382 q 158 374 150 375 q 168 367 165 373 q 179 364 174 367 q 189 366 184 362 q 206 359 193 363 q 221 355 210 358 q 230 340 229 352 q 226 332 229 336 q 226 321 223 328 q 206 305 212 310 q 193 294 200 299 q 180 281 183 286 q 169 278 177 276 q 150 274 155 271 q 141 274 145 271 q 131 276 138 278 q 120 284 120 282 q 116 287 119 286 q 104 290 109 288 q 92 293 99 291 q 80 297 85 295 q 71 303 75 298 q 58 309 63 307 q 54 317 52 310 q 42 326 43 324 q 40 330 40 328 q 32 332 33 329 q 25 335 31 335 q 18 343 23 341 q 12 351 14 345 q -8 374 0 367 q -17 396 -16 381 q -23 406 -20 401 q -27 417 -25 411 q -29 431 -29 424 q -31 444 -29 438 q -34 463 -35 458 q -36 472 -33 467 q -35 495 -33 488 q -35 504 -37 501 q -40 519 -39 518 q -39 545 -35 530 q -35 571 -43 560 q -35 581 -37 577 q -36 591 -33 585 q -27 611 -29 610 q -18 634 -18 629 q -12 642 -18 640 q -11 652 -13 649 q -8 660 -9 655 q 2 683 -2 670 q 12 699 12 695 q 14 708 12 704 q 23 721 21 720 q 28 728 25 725 q 33 733 31 731 q 40 749 37 746 q 47 755 43 752 q 63 778 52 770 q 69 793 69 793 q 70 794 70 793 q 83 806 82 804 q 88 808 84 808 q 105 826 101 819 q 118 838 109 834 q 126 849 126 846 q 131 851 126 853 q 135 858 132 855 q 139 865 138 861 q 155 874 150 868 q 165 887 161 880 q 177 892 172 888 q 185 902 181 896 q 196 910 193 908 q 200 914 198 912 q 206 920 204 916 q 214 925 208 923 q 231 944 226 935 q 242 950 238 945 q 253 957 246 954 l 268 964 q 279 971 272 968 q 288 979 286 973 q 302 984 295 982 q 311 994 309 987 q 320 996 318 994 q 325 1001 322 998 q 337 1005 332 1001 q 348 1007 341 1010 q 360 1015 355 1011 q 368 1021 364 1018 q 382 1028 381 1028 q 395 1031 392 1029 q 402 1032 398 1033 q 418 1041 409 1039 q 436 1047 427 1044 q 454 1050 453 1052 q 458 1049 455 1048 q 472 1056 472 1056 q 486 1064 478 1063 q 495 1055 492 1053 q 503 1058 499 1058 q 520 1064 512 1063 q 534 1063 529 1066 q 555 1068 546 1066 q 571 1072 564 1071 q 581 1078 581 1077 q 584 1079 581 1079 q 592 1079 587 1079 q 602 1078 596 1078 q 630 1085 619 1083 q 647 1082 640 1086 q 668 1083 667 1086 q 683 1084 675 1087 q 698 1081 691 1081 q 717 1080 714 1079 q 724 1082 720 1081 q 730 1078 727 1079 q 736 1072 733 1077 q 763 1066 756 1066 q 771 1060 769 1067 q 782 1057 778 1059 q 793 1053 786 1055 q 822 1043 812 1048 q 845 1034 831 1037 q 861 1026 859 1028 q 865 1021 862 1024 q 876 1019 872 1022 q 887 1015 880 1015 q 893 1006 892 1009 q 897 1003 895 1003 q 909 999 907 1002 q 915 999 911 996 q 921 991 916 992 q 927 984 925 990 q 945 975 937 978 q 956 965 953 973 q 971 957 971 960 q 975 957 972 954 q 988 942 984 948 q 998 935 991 937 q 1009 925 1001 927 q 1015 915 1010 918 q 1024 906 1021 912 q 1032 898 1029 903 q 1040 891 1036 893 q 1049 874 1047 881 q 1058 864 1052 868 q 1065 846 1063 849 q 1068 841 1067 843 q 1074 824 1072 826 q 1075 820 1075 823 q 1079 810 1077 813 q 1079 804 1081 807 q 1079 783 1078 788 q 1081 773 1079 778 q 1083 751 1079 759 q 1086 735 1087 743 q 1086 712 1086 720 q 1085 694 1086 705 q 1083 679 1085 683 q 1081 665 1082 668 q 1081 657 1079 661 q 1077 641 1078 644 q 1077 632 1075 638 q 1072 621 1074 629 q 1068 609 1071 614 q 1066 600 1067 604 q 1064 592 1064 596 q 1058 585 1060 590 q 1053 576 1056 580 q 1049 560 1051 562 q 1044 558 1047 558 q 1034 531 1037 538 q 1025 515 1030 523 q 1013 500 1017 503 q 1007 493 1010 497 q 1002 478 1007 484 q 996 470 999 474 q 987 462 994 465 q 975 447 976 450 q 973 442 973 444 q 964 433 967 439 q 956 423 961 427 q 943 408 948 416 q 929 397 938 401 q 920 386 922 390 q 915 379 918 382 q 901 368 902 371 q 895 366 900 364 q 886 356 892 359 q 873 349 880 354 q 859 337 861 339 q 855 332 858 335 l 841 326 q 835 320 841 321 q 830 313 830 320 q 813 302 816 309 q 805 299 808 301 q 797 295 801 297 q 784 285 785 284 q 782 286 784 286 q 768 275 771 276 q 762 274 765 274 q 749 265 751 265 q 747 261 747 264 q 737 257 739 259 q 735 252 736 255 q 718 244 722 252 q 705 240 708 245 q 694 231 702 234 q 701 227 697 227 q 710 225 706 227 q 728 210 724 215 q 740 204 732 206 q 756 191 746 192 q 773 174 760 179 q 782 163 774 166 q 788 151 790 160 q 798 146 794 150 q 809 139 803 142 q 828 113 817 122 q 836 99 835 100 q 847 80 846 82 q 847 75 847 78 q 854 66 853 73 q 861 56 855 59 q 869 35 866 37 q 874 31 872 33 q 876 17 876 21 q 878 9 876 13 q 886 -5 884 -1 q 891 -12 888 -9 q 894 -19 893 -16 q 900 -25 895 -23 q 904 -44 904 -42 q 903 -48 903 -46 q 912 -63 904 -59 q 915 -75 915 -70 q 922 -85 915 -81 q 925 -99 922 -93 q 929 -115 927 -105 q 937 -132 933 -124 q 944 -150 941 -141 q 952 -169 949 -164 q 959 -187 957 -184 q 961 -193 960 -189 q 967 -213 965 -208 q 971 -221 968 -218 q 980 -242 980 -237 q 982 -249 980 -246 q 984 -261 986 -257 q 984 -269 983 -264 q 996 -284 992 -284 q 1003 -305 1001 -299 q 1007 -314 1005 -310 m 656 803 q 667 799 666 797 q 671 801 668 801 q 683 794 680 794 q 689 790 686 793 q 686 779 687 784 q 682 771 685 775 q 674 759 675 760 q 671 755 672 758 q 661 754 664 758 q 655 752 659 750 q 638 736 644 741 q 619 724 625 735 q 609 722 611 721 q 603 724 606 724 q 596 719 599 721 q 585 720 592 717 q 556 713 567 721 q 538 712 545 720 q 524 702 531 705 q 506 682 512 687 q 497 670 500 678 q 488 663 491 668 q 480 656 485 659 q 476 645 480 645 q 476 641 473 645 q 461 625 466 628 q 455 613 461 617 q 451 598 450 609 q 447 589 448 591 q 447 583 446 587 l 438 569 q 436 557 439 562 q 439 546 434 552 q 434 531 432 535 q 432 520 435 526 q 428 507 428 512 q 428 500 428 503 q 423 485 423 485 q 423 475 424 478 q 421 470 421 472 q 420 454 420 455 q 419 442 420 446 q 420 436 419 439 q 419 422 420 425 q 416 417 419 419 q 417 404 419 411 q 419 389 415 397 q 415 379 416 385 q 420 368 415 373 q 417 349 419 354 q 416 341 416 345 q 419 332 417 336 q 416 324 420 328 q 418 305 419 310 q 415 298 417 301 q 416 278 419 280 q 413 271 413 275 q 415 255 416 264 q 420 242 415 246 q 421 221 419 226 q 423 205 424 206 q 423 203 421 204 q 425 191 424 192 q 427 188 427 189 q 430 164 430 176 q 431 142 430 153 q 434 118 435 124 q 439 104 434 111 q 437 82 438 92 q 443 67 436 73 q 441 53 440 62 q 444 42 442 44 q 447 26 450 27 q 446 21 444 25 q 448 14 448 17 q 450 4 447 10 q 451 -10 453 -4 q 451 -25 450 -17 q 450 -39 447 -36 q 455 -44 453 -42 q 455 -59 455 -51 q 458 -71 455 -66 q 455 -84 455 -84 q 454 -88 454 -85 q 457 -98 455 -94 q 457 -108 458 -101 q 455 -116 455 -112 q 451 -124 454 -120 q 455 -141 454 -131 q 450 -155 457 -150 q 451 -165 450 -161 q 451 -173 453 -169 q 447 -184 450 -180 q 447 -195 444 -188 q 440 -204 443 -203 q 439 -212 438 -206 q 428 -226 430 -223 q 420 -244 425 -244 q 411 -257 419 -252 q 406 -271 406 -269 q 404 -274 406 -274 q 393 -288 394 -287 q 393 -294 392 -290 q 381 -305 386 -303 q 373 -314 375 -307 q 360 -330 363 -328 q 356 -337 356 -332 q 343 -354 347 -343 l 326 -362 q 318 -370 322 -366 q 310 -379 313 -374 q 301 -389 303 -386 q 297 -396 298 -392 q 278 -401 282 -400 q 271 -405 275 -402 q 265 -411 268 -408 q 255 -415 261 -413 q 231 -433 238 -428 q 218 -444 225 -438 q 204 -448 208 -443 q 195 -457 199 -453 q 185 -461 188 -458 q 176 -466 183 -465 q 161 -470 162 -472 q 148 -481 154 -476 q 131 -488 142 -486 q 111 -491 119 -491 q 100 -488 104 -492 q 90 -490 97 -492 q 84 -493 84 -488 q 74 -489 80 -491 q 66 -491 69 -488 q 39 -483 47 -486 q 20 -477 31 -480 q -13 -457 -8 -470 q -23 -453 -20 -457 q -35 -450 -25 -448 q -40 -444 -37 -447 q -48 -440 -42 -440 q -55 -430 -54 -435 q -63 -425 -56 -425 q -67 -414 -65 -415 q -70 -411 -69 -413 q -81 -389 -78 -393 q -85 -379 -84 -385 q -92 -373 -90 -377 q -97 -366 -94 -368 q -109 -339 -103 -339 q -109 -306 -109 -324 q -110 -298 -109 -303 q -108 -290 -111 -293 q -111 -280 -109 -284 q -109 -268 -112 -275 q -106 -259 -108 -264 q -103 -249 -104 -255 q -101 -233 -103 -237 q -100 -225 -99 -229 q -95 -217 -96 -222 q -92 -208 -94 -212 q -88 -201 -90 -206 q -88 -191 -85 -196 q -78 -177 -82 -180 q -77 -172 -74 -174 q -63 -155 -69 -165 q -48 -138 -58 -145 q -39 -124 -40 -126 q -35 -123 -37 -122 q -23 -112 -28 -118 q -12 -104 -18 -107 q -2 -90 -2 -93 q -1 -85 -2 -88 q 16 -71 12 -85 q 25 -68 23 -71 q 32 -62 28 -65 q 52 -52 46 -54 q 63 -46 59 -51 q 77 -42 71 -47 q 89 -40 82 -37 q 100 -36 97 -35 q 105 -37 103 -37 q 118 -34 116 -36 q 123 -32 120 -32 q 142 -33 139 -32 q 147 -35 145 -35 q 155 -33 150 -35 q 166 -33 160 -32 q 185 -41 183 -39 q 191 -44 188 -43 q 204 -55 202 -54 q 208 -55 206 -56 q 218 -65 218 -63 q 219 -67 218 -66 q 230 -84 227 -82 q 236 -90 233 -86 q 241 -106 237 -101 q 246 -118 245 -111 q 248 -132 249 -124 q 245 -147 246 -141 q 242 -162 242 -160 q 238 -168 241 -165 q 231 -189 236 -184 q 229 -204 226 -195 q 221 -206 223 -204 q 214 -210 218 -208 q 199 -211 200 -208 q 195 -217 198 -214 q 178 -237 187 -233 q 161 -244 169 -241 q 151 -227 153 -231 q 151 -218 149 -222 q 155 -193 154 -200 q 154 -185 155 -189 q 155 -179 153 -181 q 153 -169 153 -173 q 146 -162 153 -165 q 141 -146 141 -149 q 139 -141 142 -143 l 127 -128 q 111 -123 112 -123 q 108 -122 111 -123 q 92 -115 94 -116 q 84 -113 90 -115 q 73 -111 78 -112 q 62 -118 67 -111 q 42 -122 50 -122 q 27 -128 33 -123 q 16 -139 17 -139 q 13 -141 14 -139 q 6 -161 6 -155 q 0 -169 5 -166 q -6 -187 0 -180 q -7 -196 -4 -192 q -8 -208 -10 -200 q -12 -229 -13 -229 q -13 -248 -16 -238 q -13 -268 -10 -257 q -6 -286 -10 -282 q 5 -317 0 -303 q 20 -343 12 -335 q 28 -356 24 -355 q 35 -360 32 -358 q 44 -372 42 -368 q 51 -379 47 -375 q 67 -387 65 -385 q 73 -390 70 -389 q 89 -396 85 -396 q 94 -400 93 -396 q 112 -405 105 -400 q 131 -406 127 -406 q 138 -408 135 -405 q 149 -407 145 -405 q 160 -409 154 -409 q 172 -404 166 -408 q 184 -405 177 -401 q 195 -402 188 -402 q 207 -400 202 -402 q 226 -389 225 -390 q 245 -375 241 -379 q 253 -368 249 -371 q 267 -356 265 -362 q 280 -344 276 -343 q 297 -317 293 -326 q 309 -301 302 -307 q 313 -291 309 -294 q 321 -286 317 -288 q 322 -275 322 -279 q 329 -268 322 -271 q 335 -252 330 -252 q 335 -243 333 -245 q 336 -236 336 -241 q 343 -223 341 -229 q 349 -215 345 -217 q 349 -191 348 -204 q 355 -169 351 -177 q 356 -136 359 -149 q 358 -116 354 -123 q 354 -105 355 -113 q 352 -85 354 -96 q 354 -69 352 -73 q 351 -63 355 -66 q 352 -54 354 -58 q 349 -43 349 -50 q 349 -34 349 -39 q 348 -23 349 -29 q 351 -8 352 -8 q 351 -5 351 -8 q 348 8 351 5 q 348 16 345 12 q 343 22 345 20 q 340 29 341 24 q 343 45 345 43 q 343 51 340 47 q 339 67 341 63 q 336 75 337 71 q 336 94 335 85 q 332 107 337 103 q 333 126 336 115 q 330 138 329 138 q 330 141 332 138 q 330 155 330 147 q 328 169 329 162 q 322 193 325 191 q 320 226 322 215 q 321 244 318 237 q 320 275 325 260 q 322 298 314 290 q 320 316 322 307 q 317 335 317 325 q 320 373 314 356 q 320 387 320 382 q 321 396 320 392 q 322 413 321 412 q 324 416 324 413 q 326 431 324 427 q 324 444 324 443 q 326 447 325 446 q 328 462 328 462 q 331 476 332 472 q 332 484 330 480 l 335 500 q 337 509 336 504 q 337 520 339 514 q 341 533 340 530 q 339 537 343 535 q 345 552 345 552 q 355 571 352 562 q 360 581 359 579 q 362 588 360 584 q 373 603 370 599 q 381 618 378 614 q 386 626 383 622 q 395 634 393 632 q 397 640 397 637 q 411 655 409 652 q 417 659 412 657 q 425 670 420 666 q 431 680 430 674 q 444 689 443 687 q 447 690 444 690 q 456 701 455 699 q 459 705 457 704 q 474 715 472 713 q 478 718 476 717 q 491 730 488 728 q 497 735 495 732 q 510 746 508 744 q 515 747 511 748 q 531 758 529 756 q 534 762 533 759 q 545 767 541 763 q 556 774 549 771 q 573 781 571 782 q 576 784 575 781 q 594 789 592 788 q 607 795 603 796 q 614 794 611 794 q 638 801 632 801 q 651 803 644 801 l 656 803 "},"o":{"x_min":6.78125,"x_max":410.09375,"ha":454,"o":"m 44 359 q 50 372 47 366 q 61 381 54 378 q 67 392 62 389 q 74 402 73 394 q 88 416 84 408 q 100 423 100 424 q 103 423 100 423 q 118 436 115 432 q 124 443 120 440 q 137 451 134 448 q 142 457 139 454 q 155 462 153 462 q 160 463 157 462 q 176 474 173 473 q 180 480 179 476 q 218 493 206 486 q 231 495 227 496 q 240 496 236 495 q 266 496 260 499 q 279 493 272 493 q 292 490 290 493 q 299 486 295 486 q 308 468 303 472 q 322 463 313 465 q 339 448 339 453 q 356 439 348 444 q 367 423 363 434 q 381 413 378 416 q 385 406 383 411 q 399 387 397 393 q 405 379 401 382 q 409 360 408 368 q 408 340 411 351 q 400 305 412 317 q 400 288 397 288 q 401 284 402 287 q 397 271 398 275 q 394 263 396 267 q 392 247 390 249 q 392 242 393 245 q 381 226 382 229 q 379 219 379 223 q 366 210 366 211 q 367 203 367 208 q 354 185 355 188 q 348 180 354 181 q 335 164 343 172 q 319 153 322 155 q 316 147 316 151 q 306 138 307 141 q 303 132 305 135 q 290 127 290 128 q 288 126 290 126 q 273 117 276 120 q 265 111 269 113 q 252 106 257 111 q 240 99 246 101 q 231 94 236 96 q 225 89 227 93 q 189 74 203 82 q 160 71 176 66 q 141 69 142 67 q 137 71 139 70 q 120 66 124 66 q 109 69 116 66 q 90 73 96 73 q 72 83 77 81 q 63 88 67 85 q 54 94 59 90 q 50 104 50 97 q 39 115 39 115 q 27 134 32 132 q 21 150 24 147 q 16 162 17 161 q 14 166 16 162 q 13 175 14 169 q 12 185 12 181 q 8 223 8 212 q 6 245 9 234 q 8 251 9 248 q 9 261 8 255 q 12 276 10 274 q 13 280 13 278 q 18 303 14 293 q 22 311 20 307 q 23 320 24 314 q 33 333 31 324 q 39 348 35 341 l 44 359 m 244 394 q 234 400 236 398 q 230 404 233 402 q 213 406 215 408 q 208 405 211 404 q 195 408 202 405 q 184 404 188 411 q 168 404 169 402 q 159 400 164 401 q 151 396 154 398 q 145 385 147 387 q 143 379 142 383 q 131 366 139 374 q 123 338 127 344 q 113 328 119 332 q 114 314 115 321 q 109 302 113 306 q 106 278 104 282 q 107 268 108 275 q 105 251 101 250 q 108 248 109 252 q 110 232 108 233 q 112 229 112 231 l 116 212 q 120 200 122 202 q 119 196 119 199 q 129 181 127 184 q 134 176 131 179 q 137 163 135 165 q 137 158 139 161 q 148 155 143 157 q 155 147 153 154 q 168 138 166 145 q 196 133 189 132 q 214 137 203 134 q 241 139 234 135 q 250 147 248 142 q 259 155 256 153 q 264 160 261 157 q 276 178 271 172 q 279 192 280 184 q 299 248 301 221 q 303 266 305 264 q 302 271 302 268 q 305 290 307 279 q 301 310 303 302 q 299 327 298 325 q 299 330 299 329 q 288 345 290 344 q 276 364 282 359 q 267 378 271 370 q 257 386 259 385 q 255 390 256 387 l 244 394 "},"5":{"x_min":6.78125,"x_max":771.234375,"ha":822,"o":"m 510 -124 q 522 -111 520 -119 q 539 -92 537 -101 q 550 -80 550 -85 q 566 -67 562 -71 q 572 -58 569 -62 q 586 -44 585 -48 q 591 -39 587 -40 q 602 -15 599 -24 q 615 -1 606 -6 q 620 8 617 5 q 625 18 623 12 q 632 31 629 28 q 637 37 634 35 q 644 67 647 52 q 652 83 649 80 q 655 92 655 86 q 660 111 660 108 q 663 118 660 115 q 661 126 660 123 q 664 135 663 130 q 666 146 664 145 q 668 150 667 147 q 666 171 667 164 q 671 185 666 179 q 670 196 668 192 q 674 206 672 200 q 674 240 672 227 q 674 267 675 252 l 670 294 q 667 309 671 305 q 664 324 663 313 q 652 355 661 349 q 648 371 651 371 q 646 385 645 383 q 645 389 647 386 q 637 406 640 400 q 628 417 634 413 q 617 436 618 435 q 611 442 614 439 q 603 447 609 444 q 596 461 596 459 q 592 462 595 462 q 580 473 591 469 q 560 497 564 486 q 534 507 548 501 q 522 513 523 514 q 519 512 520 512 q 505 515 505 514 q 501 516 504 516 q 486 519 486 520 q 484 518 486 518 q 467 521 477 519 q 450 520 457 523 q 433 521 438 523 q 423 518 428 519 q 415 518 419 518 q 406 516 411 519 q 398 514 404 515 q 385 511 392 512 q 360 496 366 500 q 350 485 352 485 q 347 484 348 485 q 329 474 333 474 q 322 470 325 473 q 311 460 314 459 q 307 459 309 461 q 292 442 297 446 q 282 435 287 438 q 264 413 271 420 q 244 400 249 406 q 230 390 240 393 q 218 360 227 370 q 217 352 215 356 q 218 344 219 348 q 193 324 215 330 q 187 316 191 318 q 181 307 184 313 q 169 301 172 306 q 162 293 166 297 q 152 288 153 290 q 149 284 151 287 q 128 278 135 283 q 122 285 124 282 q 113 291 119 288 q 111 301 113 298 q 105 310 108 305 q 111 337 112 329 q 112 351 109 344 q 111 378 111 370 q 113 393 111 386 q 113 413 107 404 q 113 438 112 424 q 112 463 113 451 q 113 473 112 467 q 111 481 115 478 q 114 520 118 500 q 123 552 111 539 q 117 566 118 564 q 116 571 116 568 q 118 585 120 580 q 118 603 116 602 q 118 606 119 604 q 116 622 115 619 q 115 629 118 625 q 116 646 115 644 q 118 651 118 648 q 111 669 112 666 q 108 675 109 672 q 103 708 105 695 q 94 731 101 721 q 87 728 92 728 q 81 724 82 728 q 71 718 73 721 q 69 713 70 716 q 54 706 61 709 q 37 699 39 699 q 20 699 31 695 q 6 710 9 702 q 10 722 8 717 q 10 733 12 727 q 24 741 17 740 q 32 747 29 744 q 39 751 35 750 q 44 756 42 754 q 52 759 47 759 q 65 767 62 766 q 74 771 69 769 q 82 780 80 778 q 89 782 84 782 q 103 790 96 786 q 115 800 111 793 q 131 805 126 803 q 139 812 137 808 q 155 817 154 817 q 160 817 157 816 q 195 831 183 826 q 219 834 207 836 q 228 841 222 841 q 237 846 234 842 q 252 850 248 843 q 264 849 259 847 q 278 853 269 850 q 289 854 287 855 q 294 854 291 853 q 305 857 303 858 q 310 857 306 855 q 337 859 326 858 q 358 858 348 861 q 392 862 381 858 q 411 861 402 866 q 457 862 425 865 q 468 859 465 858 q 474 861 472 861 q 501 859 493 861 q 516 857 510 857 q 526 857 524 858 q 531 855 529 855 q 539 857 535 855 q 546 854 542 858 q 571 854 560 854 q 590 855 581 854 q 602 855 596 855 q 611 859 609 854 q 627 860 625 861 q 632 861 629 859 q 658 866 652 866 q 671 869 664 866 q 682 874 680 873 q 687 877 685 876 l 702 885 q 712 897 709 892 q 723 902 718 899 q 733 907 728 906 q 753 912 748 911 q 765 912 758 912 q 759 901 763 904 q 758 891 755 897 q 752 886 752 889 q 748 878 751 883 q 736 870 736 872 q 733 866 736 868 q 724 862 729 864 q 716 857 718 861 q 708 851 713 854 q 701 843 704 847 q 690 838 693 841 q 685 832 687 835 q 668 824 671 824 q 661 823 664 824 q 647 817 649 819 q 622 807 626 812 q 612 805 615 808 q 602 804 609 803 q 592 800 594 801 q 588 797 591 798 q 559 794 571 793 q 539 789 548 796 q 521 790 533 789 q 501 788 510 790 q 485 788 489 786 q 476 788 481 790 q 454 787 459 786 q 446 785 448 788 q 427 788 438 792 q 406 789 416 785 q 389 787 400 785 q 371 789 378 789 q 361 788 366 789 q 351 786 356 786 q 339 786 341 788 q 335 785 337 785 q 327 787 332 785 q 317 786 322 789 q 302 782 305 782 q 278 784 284 785 q 265 782 272 782 q 250 780 257 779 q 237 777 242 781 q 215 771 218 774 q 206 769 211 769 q 205 756 202 762 q 210 743 208 750 q 208 735 210 739 q 207 727 207 731 q 210 709 208 710 q 211 706 211 708 q 213 691 211 695 q 217 680 215 686 q 216 662 217 666 q 212 656 215 659 q 217 636 214 641 q 218 623 219 632 q 211 599 210 603 q 214 584 212 585 q 215 580 215 583 q 208 555 208 560 q 206 543 208 550 q 209 505 208 518 q 203 482 210 493 q 206 467 204 476 q 206 453 208 459 q 208 441 210 448 q 200 430 206 434 q 217 428 214 428 q 218 431 219 428 l 231 446 q 253 462 246 457 q 265 477 260 467 q 274 482 272 478 q 283 488 276 486 q 295 499 294 496 q 302 501 297 501 q 314 514 311 510 q 322 518 316 518 q 339 529 339 529 q 351 535 345 531 q 363 542 356 538 q 373 548 371 546 q 382 550 375 550 q 392 559 385 557 q 402 567 398 561 q 420 572 419 571 q 424 575 421 573 q 434 576 427 576 q 444 577 440 576 q 461 584 455 583 q 472 588 467 585 q 492 590 488 591 q 499 590 496 590 q 509 593 504 591 q 519 590 514 595 q 544 589 537 590 q 554 583 552 588 q 569 583 561 584 q 582 581 579 580 q 588 577 585 581 q 602 577 599 579 q 609 573 604 575 q 629 565 625 568 q 637 560 633 562 q 644 554 641 557 q 651 548 648 552 q 667 538 661 538 q 688 519 679 522 q 702 510 697 516 q 708 489 702 499 q 722 476 720 482 q 732 467 724 469 q 743 451 736 455 q 748 435 741 442 q 750 417 750 417 q 753 411 751 415 q 756 404 755 406 q 766 389 759 389 q 763 377 760 383 q 762 364 766 370 q 762 350 762 355 q 762 341 762 345 q 769 330 767 333 q 767 325 771 326 q 771 307 770 311 q 767 302 771 302 q 769 280 771 286 q 770 268 767 275 q 764 252 767 263 q 770 238 760 241 q 765 219 767 226 q 765 204 762 211 q 758 189 756 189 q 759 185 759 188 q 753 152 756 168 q 750 122 750 137 q 741 99 744 103 q 740 88 737 94 q 735 78 739 81 q 732 67 731 75 q 722 52 725 55 q 720 44 720 50 q 699 17 709 23 q 695 6 698 10 q 689 -1 691 2 q 680 -16 683 -12 q 675 -21 678 -18 q 670 -27 672 -24 q 660 -42 661 -40 q 660 -46 659 -43 q 650 -54 653 -48 q 644 -65 647 -59 q 628 -84 633 -78 q 619 -96 623 -89 q 607 -105 610 -104 q 600 -107 603 -107 q 594 -113 598 -111 q 587 -120 590 -115 q 577 -126 580 -122 q 571 -134 575 -131 q 553 -145 557 -141 q 542 -151 549 -149 q 533 -161 535 -158 q 526 -166 530 -164 q 514 -177 516 -173 q 503 -181 511 -181 q 489 -192 492 -187 q 477 -198 485 -198 q 466 -210 472 -208 q 454 -212 461 -212 q 427 -223 438 -225 q 421 -228 423 -225 q 413 -230 420 -231 l 400 -241 q 388 -250 393 -250 q 381 -252 383 -249 q 349 -265 359 -260 q 323 -269 335 -264 q 301 -268 311 -274 q 280 -271 284 -269 q 272 -271 275 -274 q 257 -274 259 -275 q 253 -272 256 -274 q 231 -267 236 -271 q 221 -265 227 -264 q 191 -249 200 -259 q 161 -237 176 -237 q 148 -226 150 -227 q 143 -221 146 -225 q 127 -208 131 -211 q 112 -187 122 -192 q 105 -172 111 -180 q 103 -151 105 -154 q 97 -141 100 -147 q 94 -107 93 -119 q 90 -85 94 -96 q 96 -69 94 -70 q 97 -65 97 -67 l 97 -50 q 102 -40 100 -44 q 105 -31 104 -35 q 113 -10 109 -14 q 117 2 113 -2 q 120 14 120 6 q 128 29 131 25 q 138 38 138 35 q 142 43 138 42 q 161 70 155 65 q 170 82 168 80 q 183 96 180 93 q 189 103 187 100 q 201 108 195 105 q 210 118 207 111 q 222 127 217 119 q 257 146 242 139 q 269 153 267 151 q 274 153 272 154 q 299 163 284 160 q 328 172 313 166 q 339 175 333 174 q 348 176 344 176 q 364 177 359 174 q 373 179 368 179 q 385 179 383 177 q 390 180 387 180 q 401 179 398 179 q 406 176 404 180 q 421 174 415 179 q 436 170 427 170 q 436 142 440 155 q 428 139 432 141 q 421 139 424 138 q 411 125 413 127 q 406 120 409 123 q 387 104 390 109 q 364 103 370 99 q 354 108 359 107 q 337 113 339 116 q 320 120 325 119 q 311 119 316 120 q 299 115 307 118 q 284 116 291 113 q 256 100 271 105 q 249 88 252 90 q 244 84 246 85 q 242 75 242 77 q 240 67 241 74 q 223 56 225 58 q 217 42 218 46 q 217 36 217 39 q 209 25 210 28 q 211 21 208 21 q 204 4 204 4 q 203 -12 200 -9 q 196 -21 196 -14 q 191 -32 195 -28 q 192 -43 191 -39 q 188 -50 193 -47 q 191 -68 192 -66 q 191 -73 191 -70 q 195 -84 192 -80 q 195 -94 198 -89 l 206 -107 q 212 -122 208 -122 q 225 -141 222 -139 q 230 -153 226 -149 q 237 -161 234 -157 q 246 -161 244 -158 q 255 -165 249 -164 q 267 -176 265 -176 q 280 -178 279 -180 q 283 -177 280 -176 l 297 -185 q 323 -189 310 -187 q 349 -191 336 -192 q 390 -191 375 -193 q 420 -184 405 -189 l 436 -176 q 453 -162 444 -169 q 473 -151 462 -155 q 484 -138 481 -143 q 496 -132 495 -135 q 500 -130 497 -130 l 510 -124 "}},"cssFontWeight":"normal","ascender":1370,"underlinePosition":-77,"cssFontStyle":"normal","boundingBox":{"yMin":-777.5,"xMin":-340.921875,"yMax":1279.125,"xMax":1634.96875},"resolution":1000,"original_font_information":{"postscript_name":"PrincessSofia","version_string":"Version 1.000","vendor_url":"http://www.fontbros.com/tartworkshop.php","full_font_name":"Princess Sofia","font_family_name":"Princess Sofia","copyright":"Copyright (c) 2012 by Font Diner, Inc DBA Tart Workshop (diner@fontdiner.com) with Reseved Font Name \"Princess Sofia\"","description":"","trademark":"Princess Sofia is a trademark of Font Diner, Inc DBA Tart Workshop.","designer":"Crystal Kluge","designer_url":"http://www.tartworkshop.com","unique_font_identifier":"FontDiner,IncDBATartWorkshop: Princess Sofia: 2012","license_url":"http://scripts.sil.org/OFL","license_description":"This Font Software is licensed under the SIL Open Font License,\rVersion 1.1. This license is available with a FAQ at:\rhttp://scripts.sil.org/OFL","manufacturer_name":"Font Diner, Inc DBA Tart Workshop","font_sub_family_name":"Regular"},"descender":-779,"familyName":"Princess Sofia","lineHeight":2148,"underlineThickness":51});
// THIS FILE IS GENERATED - DO NOT EDIT!
/*global module:false, define:false*/

(function (define, undefined) {
define(function () {
    'use strict';

    var mobileDetectRules = {
    "phones": {
        "iPhone": "\\biPhone\\b|\\biPod\\b",
        "BlackBerry": "BlackBerry|\\bBB10\\b|rim[0-9]+",
        "HTC": "HTC|HTC.*(Sensation|Evo|Vision|Explorer|6800|8100|8900|A7272|S510e|C110e|Legend|Desire|T8282)|APX515CKT|Qtek9090|APA9292KT|HD_mini|Sensation.*Z710e|PG86100|Z715e|Desire.*(A8181|HD)|ADR6200|ADR6400L|ADR6425|001HT|Inspire 4G|Android.*\\bEVO\\b|T-Mobile G1|Z520m",
        "Nexus": "Nexus One|Nexus S|Galaxy.*Nexus|Android.*Nexus.*Mobile|Nexus 4|Nexus 5|Nexus 6",
        "Dell": "Dell.*Streak|Dell.*Aero|Dell.*Venue|DELL.*Venue Pro|Dell Flash|Dell Smoke|Dell Mini 3iX|XCD28|XCD35|\\b001DL\\b|\\b101DL\\b|\\bGS01\\b",
        "Motorola": "Motorola|DROIDX|DROID BIONIC|\\bDroid\\b.*Build|Android.*Xoom|HRI39|MOT-|A1260|A1680|A555|A853|A855|A953|A955|A956|Motorola.*ELECTRIFY|Motorola.*i1|i867|i940|MB200|MB300|MB501|MB502|MB508|MB511|MB520|MB525|MB526|MB611|MB612|MB632|MB810|MB855|MB860|MB861|MB865|MB870|ME501|ME502|ME511|ME525|ME600|ME632|ME722|ME811|ME860|ME863|ME865|MT620|MT710|MT716|MT720|MT810|MT870|MT917|Motorola.*TITANIUM|WX435|WX445|XT300|XT301|XT311|XT316|XT317|XT319|XT320|XT390|XT502|XT530|XT531|XT532|XT535|XT603|XT610|XT611|XT615|XT681|XT701|XT702|XT711|XT720|XT800|XT806|XT860|XT862|XT875|XT882|XT883|XT894|XT901|XT907|XT909|XT910|XT912|XT928|XT926|XT915|XT919|XT925",
        "Samsung": "Samsung|SGH-I337|BGT-S5230|GT-B2100|GT-B2700|GT-B2710|GT-B3210|GT-B3310|GT-B3410|GT-B3730|GT-B3740|GT-B5510|GT-B5512|GT-B5722|GT-B6520|GT-B7300|GT-B7320|GT-B7330|GT-B7350|GT-B7510|GT-B7722|GT-B7800|GT-C3010|GT-C3011|GT-C3060|GT-C3200|GT-C3212|GT-C3212I|GT-C3262|GT-C3222|GT-C3300|GT-C3300K|GT-C3303|GT-C3303K|GT-C3310|GT-C3322|GT-C3330|GT-C3350|GT-C3500|GT-C3510|GT-C3530|GT-C3630|GT-C3780|GT-C5010|GT-C5212|GT-C6620|GT-C6625|GT-C6712|GT-E1050|GT-E1070|GT-E1075|GT-E1080|GT-E1081|GT-E1085|GT-E1087|GT-E1100|GT-E1107|GT-E1110|GT-E1120|GT-E1125|GT-E1130|GT-E1160|GT-E1170|GT-E1175|GT-E1180|GT-E1182|GT-E1200|GT-E1210|GT-E1225|GT-E1230|GT-E1390|GT-E2100|GT-E2120|GT-E2121|GT-E2152|GT-E2220|GT-E2222|GT-E2230|GT-E2232|GT-E2250|GT-E2370|GT-E2550|GT-E2652|GT-E3210|GT-E3213|GT-I5500|GT-I5503|GT-I5700|GT-I5800|GT-I5801|GT-I6410|GT-I6420|GT-I7110|GT-I7410|GT-I7500|GT-I8000|GT-I8150|GT-I8160|GT-I8190|GT-I8320|GT-I8330|GT-I8350|GT-I8530|GT-I8700|GT-I8703|GT-I8910|GT-I9000|GT-I9001|GT-I9003|GT-I9010|GT-I9020|GT-I9023|GT-I9070|GT-I9082|GT-I9100|GT-I9103|GT-I9220|GT-I9250|GT-I9300|GT-I9305|GT-I9500|GT-I9505|GT-M3510|GT-M5650|GT-M7500|GT-M7600|GT-M7603|GT-M8800|GT-M8910|GT-N7000|GT-S3110|GT-S3310|GT-S3350|GT-S3353|GT-S3370|GT-S3650|GT-S3653|GT-S3770|GT-S3850|GT-S5210|GT-S5220|GT-S5229|GT-S5230|GT-S5233|GT-S5250|GT-S5253|GT-S5260|GT-S5263|GT-S5270|GT-S5300|GT-S5330|GT-S5350|GT-S5360|GT-S5363|GT-S5369|GT-S5380|GT-S5380D|GT-S5560|GT-S5570|GT-S5600|GT-S5603|GT-S5610|GT-S5620|GT-S5660|GT-S5670|GT-S5690|GT-S5750|GT-S5780|GT-S5830|GT-S5839|GT-S6102|GT-S6500|GT-S7070|GT-S7200|GT-S7220|GT-S7230|GT-S7233|GT-S7250|GT-S7500|GT-S7530|GT-S7550|GT-S7562|GT-S7710|GT-S8000|GT-S8003|GT-S8500|GT-S8530|GT-S8600|SCH-A310|SCH-A530|SCH-A570|SCH-A610|SCH-A630|SCH-A650|SCH-A790|SCH-A795|SCH-A850|SCH-A870|SCH-A890|SCH-A930|SCH-A950|SCH-A970|SCH-A990|SCH-I100|SCH-I110|SCH-I400|SCH-I405|SCH-I500|SCH-I510|SCH-I515|SCH-I600|SCH-I730|SCH-I760|SCH-I770|SCH-I830|SCH-I910|SCH-I920|SCH-I959|SCH-LC11|SCH-N150|SCH-N300|SCH-R100|SCH-R300|SCH-R351|SCH-R400|SCH-R410|SCH-T300|SCH-U310|SCH-U320|SCH-U350|SCH-U360|SCH-U365|SCH-U370|SCH-U380|SCH-U410|SCH-U430|SCH-U450|SCH-U460|SCH-U470|SCH-U490|SCH-U540|SCH-U550|SCH-U620|SCH-U640|SCH-U650|SCH-U660|SCH-U700|SCH-U740|SCH-U750|SCH-U810|SCH-U820|SCH-U900|SCH-U940|SCH-U960|SCS-26UC|SGH-A107|SGH-A117|SGH-A127|SGH-A137|SGH-A157|SGH-A167|SGH-A177|SGH-A187|SGH-A197|SGH-A227|SGH-A237|SGH-A257|SGH-A437|SGH-A517|SGH-A597|SGH-A637|SGH-A657|SGH-A667|SGH-A687|SGH-A697|SGH-A707|SGH-A717|SGH-A727|SGH-A737|SGH-A747|SGH-A767|SGH-A777|SGH-A797|SGH-A817|SGH-A827|SGH-A837|SGH-A847|SGH-A867|SGH-A877|SGH-A887|SGH-A897|SGH-A927|SGH-B100|SGH-B130|SGH-B200|SGH-B220|SGH-C100|SGH-C110|SGH-C120|SGH-C130|SGH-C140|SGH-C160|SGH-C170|SGH-C180|SGH-C200|SGH-C207|SGH-C210|SGH-C225|SGH-C230|SGH-C417|SGH-C450|SGH-D307|SGH-D347|SGH-D357|SGH-D407|SGH-D415|SGH-D780|SGH-D807|SGH-D980|SGH-E105|SGH-E200|SGH-E315|SGH-E316|SGH-E317|SGH-E335|SGH-E590|SGH-E635|SGH-E715|SGH-E890|SGH-F300|SGH-F480|SGH-I200|SGH-I300|SGH-I320|SGH-I550|SGH-I577|SGH-I600|SGH-I607|SGH-I617|SGH-I627|SGH-I637|SGH-I677|SGH-I700|SGH-I717|SGH-I727|SGH-i747M|SGH-I777|SGH-I780|SGH-I827|SGH-I847|SGH-I857|SGH-I896|SGH-I897|SGH-I900|SGH-I907|SGH-I917|SGH-I927|SGH-I937|SGH-I997|SGH-J150|SGH-J200|SGH-L170|SGH-L700|SGH-M110|SGH-M150|SGH-M200|SGH-N105|SGH-N500|SGH-N600|SGH-N620|SGH-N625|SGH-N700|SGH-N710|SGH-P107|SGH-P207|SGH-P300|SGH-P310|SGH-P520|SGH-P735|SGH-P777|SGH-Q105|SGH-R210|SGH-R220|SGH-R225|SGH-S105|SGH-S307|SGH-T109|SGH-T119|SGH-T139|SGH-T209|SGH-T219|SGH-T229|SGH-T239|SGH-T249|SGH-T259|SGH-T309|SGH-T319|SGH-T329|SGH-T339|SGH-T349|SGH-T359|SGH-T369|SGH-T379|SGH-T409|SGH-T429|SGH-T439|SGH-T459|SGH-T469|SGH-T479|SGH-T499|SGH-T509|SGH-T519|SGH-T539|SGH-T559|SGH-T589|SGH-T609|SGH-T619|SGH-T629|SGH-T639|SGH-T659|SGH-T669|SGH-T679|SGH-T709|SGH-T719|SGH-T729|SGH-T739|SGH-T746|SGH-T749|SGH-T759|SGH-T769|SGH-T809|SGH-T819|SGH-T839|SGH-T919|SGH-T929|SGH-T939|SGH-T959|SGH-T989|SGH-U100|SGH-U200|SGH-U800|SGH-V205|SGH-V206|SGH-X100|SGH-X105|SGH-X120|SGH-X140|SGH-X426|SGH-X427|SGH-X475|SGH-X495|SGH-X497|SGH-X507|SGH-X600|SGH-X610|SGH-X620|SGH-X630|SGH-X700|SGH-X820|SGH-X890|SGH-Z130|SGH-Z150|SGH-Z170|SGH-ZX10|SGH-ZX20|SHW-M110|SPH-A120|SPH-A400|SPH-A420|SPH-A460|SPH-A500|SPH-A560|SPH-A600|SPH-A620|SPH-A660|SPH-A700|SPH-A740|SPH-A760|SPH-A790|SPH-A800|SPH-A820|SPH-A840|SPH-A880|SPH-A900|SPH-A940|SPH-A960|SPH-D600|SPH-D700|SPH-D710|SPH-D720|SPH-I300|SPH-I325|SPH-I330|SPH-I350|SPH-I500|SPH-I600|SPH-I700|SPH-L700|SPH-M100|SPH-M220|SPH-M240|SPH-M300|SPH-M305|SPH-M320|SPH-M330|SPH-M350|SPH-M360|SPH-M370|SPH-M380|SPH-M510|SPH-M540|SPH-M550|SPH-M560|SPH-M570|SPH-M580|SPH-M610|SPH-M620|SPH-M630|SPH-M800|SPH-M810|SPH-M850|SPH-M900|SPH-M910|SPH-M920|SPH-M930|SPH-N100|SPH-N200|SPH-N240|SPH-N300|SPH-N400|SPH-Z400|SWC-E100|SCH-i909|GT-N7100|GT-N7105|SCH-I535|SM-N900A|SGH-I317|SGH-T999L|GT-S5360B|GT-I8262|GT-S6802|GT-S6312|GT-S6310|GT-S5312|GT-S5310|GT-I9105|GT-I8510|GT-S6790N|SM-G7105|SM-N9005|GT-S5301|GT-I9295|GT-I9195|SM-C101|GT-S7392|GT-S7560|GT-B7610|GT-I5510|GT-S7582|GT-S7530E|GT-I8750",
        "LG": "\\bLG\\b;|LG[- ]?(C800|C900|E400|E610|E900|E-900|F160|F180K|F180L|F180S|730|855|L160|LS840|LS970|LU6200|MS690|MS695|MS770|MS840|MS870|MS910|P500|P700|P705|VM696|AS680|AS695|AX840|C729|E970|GS505|272|C395|E739BK|E960|L55C|L75C|LS696|LS860|P769BK|P350|P500|P509|P870|UN272|US730|VS840|VS950|LN272|LN510|LS670|LS855|LW690|MN270|MN510|P509|P769|P930|UN200|UN270|UN510|UN610|US670|US740|US760|UX265|UX840|VN271|VN530|VS660|VS700|VS740|VS750|VS910|VS920|VS930|VX9200|VX11000|AX840A|LW770|P506|P925|P999|E612|D955|D802)",
        "Sony": "SonyST|SonyLT|SonyEricsson|SonyEricssonLT15iv|LT18i|E10i|LT28h|LT26w|SonyEricssonMT27i|C6902|C6903|C6906|C6943|D2533",
        "Asus": "Asus.*Galaxy|PadFone.*Mobile",
        "Micromax": "Micromax.*\\b(A210|A92|A88|A72|A111|A110Q|A115|A116|A110|A90S|A26|A51|A35|A54|A25|A27|A89|A68|A65|A57|A90)\\b",
        "Palm": "PalmSource|Palm",
        "Vertu": "Vertu|Vertu.*Ltd|Vertu.*Ascent|Vertu.*Ayxta|Vertu.*Constellation(F|Quest)?|Vertu.*Monika|Vertu.*Signature",
        "Pantech": "PANTECH|IM-A850S|IM-A840S|IM-A830L|IM-A830K|IM-A830S|IM-A820L|IM-A810K|IM-A810S|IM-A800S|IM-T100K|IM-A725L|IM-A780L|IM-A775C|IM-A770K|IM-A760S|IM-A750K|IM-A740S|IM-A730S|IM-A720L|IM-A710K|IM-A690L|IM-A690S|IM-A650S|IM-A630K|IM-A600S|VEGA PTL21|PT003|P8010|ADR910L|P6030|P6020|P9070|P4100|P9060|P5000|CDM8992|TXT8045|ADR8995|IS11PT|P2030|P6010|P8000|PT002|IS06|CDM8999|P9050|PT001|TXT8040|P2020|P9020|P2000|P7040|P7000|C790",
        "Fly": "IQ230|IQ444|IQ450|IQ440|IQ442|IQ441|IQ245|IQ256|IQ236|IQ255|IQ235|IQ245|IQ275|IQ240|IQ285|IQ280|IQ270|IQ260|IQ250",
        "iMobile": "i-mobile (IQ|i-STYLE|idea|ZAA|Hitz)",
        "SimValley": "\\b(SP-80|XT-930|SX-340|XT-930|SX-310|SP-360|SP60|SPT-800|SP-120|SPT-800|SP-140|SPX-5|SPX-8|SP-100|SPX-8|SPX-12)\\b",
        "Wolfgang": "AT-B24D|AT-AS50HD|AT-AS40W|AT-AS55HD|AT-AS45q2|AT-B26D|AT-AS50Q",
        "Alcatel": "Alcatel",
        "Nintendo": "Nintendo 3DS",
        "Amoi": "Amoi",
        "INQ": "INQ",
        "GenericPhone": "Tapatalk|PDA;|SAGEM|\\bmmp\\b|pocket|\\bpsp\\b|symbian|Smartphone|smartfon|treo|up.browser|up.link|vodafone|\\bwap\\b|nokia|Series40|Series60|S60|SonyEricsson|N900|MAUI.*WAP.*Browser"
    },
    "tablets": {
        "iPad": "iPad|iPad.*Mobile",
        "NexusTablet": "Android.*Nexus[\\s]+(7|9|10)|^.*Android.*Nexus(?:(?!Mobile).)*$",
        "SamsungTablet": "SAMSUNG.*Tablet|Galaxy.*Tab|SC-01C|GT-P1000|GT-P1003|GT-P1010|GT-P3105|GT-P6210|GT-P6800|GT-P6810|GT-P7100|GT-P7300|GT-P7310|GT-P7500|GT-P7510|SCH-I800|SCH-I815|SCH-I905|SGH-I957|SGH-I987|SGH-T849|SGH-T859|SGH-T869|SPH-P100|GT-P3100|GT-P3108|GT-P3110|GT-P5100|GT-P5110|GT-P6200|GT-P7320|GT-P7511|GT-N8000|GT-P8510|SGH-I497|SPH-P500|SGH-T779|SCH-I705|SCH-I915|GT-N8013|GT-P3113|GT-P5113|GT-P8110|GT-N8010|GT-N8005|GT-N8020|GT-P1013|GT-P6201|GT-P7501|GT-N5100|GT-N5105|GT-N5110|SHV-E140K|SHV-E140L|SHV-E140S|SHV-E150S|SHV-E230K|SHV-E230L|SHV-E230S|SHW-M180K|SHW-M180L|SHW-M180S|SHW-M180W|SHW-M300W|SHW-M305W|SHW-M380K|SHW-M380S|SHW-M380W|SHW-M430W|SHW-M480K|SHW-M480S|SHW-M480W|SHW-M485W|SHW-M486W|SHW-M500W|GT-I9228|SCH-P739|SCH-I925|GT-I9200|GT-I9205|GT-P5200|GT-P5210|GT-P5210X|SM-T311|SM-T310|SM-T310X|SM-T210|SM-T210R|SM-T211|SM-P600|SM-P601|SM-P605|SM-P900|SM-P901|SM-T217|SM-T217A|SM-T217S|SM-P6000|SM-T3100|SGH-I467|XE500|SM-T110|GT-P5220|GT-I9200X|GT-N5110X|GT-N5120|SM-P905|SM-T111|SM-T2105|SM-T315|SM-T320|SM-T320X|SM-T321|SM-T520|SM-T525|SM-T530NU|SM-T230NU|SM-T330NU|SM-T900|XE500T1C|SM-P605V|SM-P905V|SM-P600X|SM-P900X|SM-T210X|SM-T230|SM-T230X|SM-T325|GT-P7503|SM-T531|SM-T330|SM-T530|SM-T705C|SM-T535|SM-T331|SM-T800|SM-T700",
        "Kindle": "Kindle|Silk.*Accelerated|Android.*\\b(KFOT|KFTT|KFJWI|KFJWA|KFOTE|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|WFJWAE)\\b",
        "SurfaceTablet": "Windows NT [0-9.]+; ARM;.*(Tablet|ARMBJS)",
        "HPTablet": "HP Slate (7|8|10)|HP ElitePad 900|hp-tablet|EliteBook.*Touch|HP 8|Slate 21|HP SlateBook 10",
        "AsusTablet": "^.*PadFone((?!Mobile).)*$|Transformer|TF101|TF101G|TF300T|TF300TG|TF300TL|TF700T|TF700KL|TF701T|TF810C|ME171|ME301T|ME302C|ME371MG|ME370T|ME372MG|ME172V|ME173X|ME400C|Slider SL101|\\bK00F\\b|\\bK00C\\b|\\bK00E\\b|\\bK00L\\b|TX201LA|ME176C|ME102A|\\bM80TA\\b|ME372CL|ME560CG|ME372CG",
        "BlackBerryTablet": "PlayBook|RIM Tablet",
        "HTCtablet": "HTC Flyer|HTC Jetstream|HTC-P715a|HTC EVO View 4G|PG41200|PG09410",
        "MotorolaTablet": "xoom|sholest|MZ615|MZ605|MZ505|MZ601|MZ602|MZ603|MZ604|MZ606|MZ607|MZ608|MZ609|MZ615|MZ616|MZ617",
        "NookTablet": "Android.*Nook|NookColor|nook browser|BNRV200|BNRV200A|BNTV250|BNTV250A|BNTV400|BNTV600|LogicPD Zoom2",
        "AcerTablet": "Android.*; \\b(A100|A101|A110|A200|A210|A211|A500|A501|A510|A511|A700|A701|W500|W500P|W501|W501P|W510|W511|W700|G100|G100W|B1-A71|B1-710|B1-711|A1-810|A1-811|A1-830)\\b|W3-810|\\bA3-A10\\b",
        "ToshibaTablet": "Android.*(AT100|AT105|AT200|AT205|AT270|AT275|AT300|AT305|AT1S5|AT500|AT570|AT700|AT830)|TOSHIBA.*FOLIO",
        "LGTablet": "\\bL-06C|LG-V909|LG-V900|LG-V700|LG-V510|LG-V500|LG-V410|LG-V400|LG-VK810\\b",
        "FujitsuTablet": "Android.*\\b(F-01D|F-02F|F-05E|F-10D|M532|Q572)\\b",
        "PrestigioTablet": "PMP3170B|PMP3270B|PMP3470B|PMP7170B|PMP3370B|PMP3570C|PMP5870C|PMP3670B|PMP5570C|PMP5770D|PMP3970B|PMP3870C|PMP5580C|PMP5880D|PMP5780D|PMP5588C|PMP7280C|PMP7280C3G|PMP7280|PMP7880D|PMP5597D|PMP5597|PMP7100D|PER3464|PER3274|PER3574|PER3884|PER5274|PER5474|PMP5097CPRO|PMP5097|PMP7380D|PMP5297C|PMP5297C_QUAD",
        "LenovoTablet": "Idea(Tab|Pad)( A1|A10| K1|)|ThinkPad([ ]+)?Tablet|Lenovo.*(S2109|S2110|S5000|S6000|K3011|A3000|A3500|A1000|A2107|A2109|A1107|A5500|A7600|B6000|B8000|B8080)(-|)(FL|F|HV|H|)",
        "DellTablet": "Venue 11|Venue 8|Venue 7|Dell Streak 10|Dell Streak 7",
        "YarvikTablet": "Android.*\\b(TAB210|TAB211|TAB224|TAB250|TAB260|TAB264|TAB310|TAB360|TAB364|TAB410|TAB411|TAB420|TAB424|TAB450|TAB460|TAB461|TAB464|TAB465|TAB467|TAB468|TAB07-100|TAB07-101|TAB07-150|TAB07-151|TAB07-152|TAB07-200|TAB07-201-3G|TAB07-210|TAB07-211|TAB07-212|TAB07-214|TAB07-220|TAB07-400|TAB07-485|TAB08-150|TAB08-200|TAB08-201-3G|TAB08-201-30|TAB09-100|TAB09-211|TAB09-410|TAB10-150|TAB10-201|TAB10-211|TAB10-400|TAB10-410|TAB13-201|TAB274EUK|TAB275EUK|TAB374EUK|TAB462EUK|TAB474EUK|TAB9-200)\\b",
        "MedionTablet": "Android.*\\bOYO\\b|LIFE.*(P9212|P9514|P9516|S9512)|LIFETAB",
        "ArnovaTablet": "AN10G2|AN7bG3|AN7fG3|AN8G3|AN8cG3|AN7G3|AN9G3|AN7dG3|AN7dG3ST|AN7dG3ChildPad|AN10bG3|AN10bG3DT",
        "IntensoTablet": "INM8002KP|INM1010FP|INM805ND|Intenso Tab|TAB1004",
        "IRUTablet": "M702pro",
        "MegafonTablet": "MegaFon V9|\\bZTE V9\\b|Android.*\\bMT7A\\b",
        "EbodaTablet": "E-Boda (Supreme|Impresspeed|Izzycomm|Essential)",
        "AllViewTablet": "Allview.*(Viva|Alldro|City|Speed|All TV|Frenzy|Quasar|Shine|TX1|AX1|AX2)",
        "ArchosTablet": "\\b(101G9|80G9|A101IT)\\b|Qilive 97R|Archos5|\\bARCHOS (70|79|80|90|97|101|FAMILYPAD|)(b|)(G10| Cobalt| TITANIUM(HD|)| Xenon| Neon|XSK| 2| XS 2| PLATINUM| CARBON|GAMEPAD)\\b",
        "AinolTablet": "NOVO7|NOVO8|NOVO10|Novo7Aurora|Novo7Basic|NOVO7PALADIN|novo9-Spark",
        "SonyTablet": "Sony.*Tablet|Xperia Tablet|Sony Tablet S|SO-03E|SGPT12|SGPT13|SGPT114|SGPT121|SGPT122|SGPT123|SGPT111|SGPT112|SGPT113|SGPT131|SGPT132|SGPT133|SGPT211|SGPT212|SGPT213|SGP311|SGP312|SGP321|EBRD1101|EBRD1102|EBRD1201|SGP351|SGP341|SGP511|SGP512|SGP521|SGP541|SGP551",
        "PhilipsTablet": "\\b(PI2010|PI3000|PI3100|PI3105|PI3110|PI3205|PI3210|PI3900|PI4010|PI7000|PI7100)\\b",
        "CubeTablet": "Android.*(K8GT|U9GT|U10GT|U16GT|U17GT|U18GT|U19GT|U20GT|U23GT|U30GT)|CUBE U8GT",
        "CobyTablet": "MID1042|MID1045|MID1125|MID1126|MID7012|MID7014|MID7015|MID7034|MID7035|MID7036|MID7042|MID7048|MID7127|MID8042|MID8048|MID8127|MID9042|MID9740|MID9742|MID7022|MID7010",
        "MIDTablet": "M9701|M9000|M9100|M806|M1052|M806|T703|MID701|MID713|MID710|MID727|MID760|MID830|MID728|MID933|MID125|MID810|MID732|MID120|MID930|MID800|MID731|MID900|MID100|MID820|MID735|MID980|MID130|MID833|MID737|MID960|MID135|MID860|MID736|MID140|MID930|MID835|MID733",
        "MSITablet": "MSI \\b(Primo 73K|Primo 73L|Primo 81L|Primo 77|Primo 93|Primo 75|Primo 76|Primo 73|Primo 81|Primo 91|Primo 90|Enjoy 71|Enjoy 7|Enjoy 10)\\b",
        "SMiTTablet": "Android.*(\\bMID\\b|MID-560|MTV-T1200|MTV-PND531|MTV-P1101|MTV-PND530)",
        "RockChipTablet": "Android.*(RK2818|RK2808A|RK2918|RK3066)|RK2738|RK2808A",
        "FlyTablet": "IQ310|Fly Vision",
        "bqTablet": "bq.*(Elcano|Curie|Edison|Maxwell|Kepler|Pascal|Tesla|Hypatia|Platon|Newton|Livingstone|Cervantes|Avant)|Maxwell.*Lite|Maxwell.*Plus",
        "HuaweiTablet": "MediaPad|MediaPad 7 Youth|IDEOS S7|S7-201c|S7-202u|S7-101|S7-103|S7-104|S7-105|S7-106|S7-201|S7-Slim",
        "NecTablet": "\\bN-06D|\\bN-08D",
        "PantechTablet": "Pantech.*P4100",
        "BronchoTablet": "Broncho.*(N701|N708|N802|a710)",
        "VersusTablet": "TOUCHPAD.*[78910]|\\bTOUCHTAB\\b",
        "ZyncTablet": "z1000|Z99 2G|z99|z930|z999|z990|z909|Z919|z900",
        "PositivoTablet": "TB07STA|TB10STA|TB07FTA|TB10FTA",
        "NabiTablet": "Android.*\\bNabi",
        "KoboTablet": "Kobo Touch|\\bK080\\b|\\bVox\\b Build|\\bArc\\b Build",
        "DanewTablet": "DSlide.*\\b(700|701R|702|703R|704|802|970|971|972|973|974|1010|1012)\\b",
        "TexetTablet": "NaviPad|TB-772A|TM-7045|TM-7055|TM-9750|TM-7016|TM-7024|TM-7026|TM-7041|TM-7043|TM-7047|TM-8041|TM-9741|TM-9747|TM-9748|TM-9751|TM-7022|TM-7021|TM-7020|TM-7011|TM-7010|TM-7023|TM-7025|TM-7037W|TM-7038W|TM-7027W|TM-9720|TM-9725|TM-9737W|TM-1020|TM-9738W|TM-9740|TM-9743W|TB-807A|TB-771A|TB-727A|TB-725A|TB-719A|TB-823A|TB-805A|TB-723A|TB-715A|TB-707A|TB-705A|TB-709A|TB-711A|TB-890HD|TB-880HD|TB-790HD|TB-780HD|TB-770HD|TB-721HD|TB-710HD|TB-434HD|TB-860HD|TB-840HD|TB-760HD|TB-750HD|TB-740HD|TB-730HD|TB-722HD|TB-720HD|TB-700HD|TB-500HD|TB-470HD|TB-431HD|TB-430HD|TB-506|TB-504|TB-446|TB-436|TB-416|TB-146SE|TB-126SE",
        "PlaystationTablet": "Playstation.*(Portable|Vita)",
        "TrekstorTablet": "ST10416-1|VT10416-1|ST70408-1|ST702xx-1|ST702xx-2|ST80208|ST97216|ST70104-2|VT10416-2|ST10216-2A|SurfTab",
        "PyleAudioTablet": "\\b(PTBL10CEU|PTBL10C|PTBL72BC|PTBL72BCEU|PTBL7CEU|PTBL7C|PTBL92BC|PTBL92BCEU|PTBL9CEU|PTBL9CUK|PTBL9C)\\b",
        "AdvanTablet": "Android.* \\b(E3A|T3X|T5C|T5B|T3E|T3C|T3B|T1J|T1F|T2A|T1H|T1i|E1C|T1-E|T5-A|T4|E1-B|T2Ci|T1-B|T1-D|O1-A|E1-A|T1-A|T3A|T4i)\\b ",
        "DanyTechTablet": "Genius Tab G3|Genius Tab S2|Genius Tab Q3|Genius Tab G4|Genius Tab Q4|Genius Tab G-II|Genius TAB GII|Genius TAB GIII|Genius Tab S1",
        "GalapadTablet": "Android.*\\bG1\\b",
        "MicromaxTablet": "Funbook|Micromax.*\\b(P250|P560|P360|P362|P600|P300|P350|P500|P275)\\b",
        "KarbonnTablet": "Android.*\\b(A39|A37|A34|ST8|ST10|ST7|Smart Tab3|Smart Tab2)\\b",
        "AllFineTablet": "Fine7 Genius|Fine7 Shine|Fine7 Air|Fine8 Style|Fine9 More|Fine10 Joy|Fine11 Wide",
        "PROSCANTablet": "\\b(PEM63|PLT1023G|PLT1041|PLT1044|PLT1044G|PLT1091|PLT4311|PLT4311PL|PLT4315|PLT7030|PLT7033|PLT7033D|PLT7035|PLT7035D|PLT7044K|PLT7045K|PLT7045KB|PLT7071KG|PLT7072|PLT7223G|PLT7225G|PLT7777G|PLT7810K|PLT7849G|PLT7851G|PLT7852G|PLT8015|PLT8031|PLT8034|PLT8036|PLT8080K|PLT8082|PLT8088|PLT8223G|PLT8234G|PLT8235G|PLT8816K|PLT9011|PLT9045K|PLT9233G|PLT9735|PLT9760G|PLT9770G)\\b",
        "YONESTablet": "BQ1078|BC1003|BC1077|RK9702|BC9730|BC9001|IT9001|BC7008|BC7010|BC708|BC728|BC7012|BC7030|BC7027|BC7026",
        "ChangJiaTablet": "TPC7102|TPC7103|TPC7105|TPC7106|TPC7107|TPC7201|TPC7203|TPC7205|TPC7210|TPC7708|TPC7709|TPC7712|TPC7110|TPC8101|TPC8103|TPC8105|TPC8106|TPC8203|TPC8205|TPC8503|TPC9106|TPC9701|TPC97101|TPC97103|TPC97105|TPC97106|TPC97111|TPC97113|TPC97203|TPC97603|TPC97809|TPC97205|TPC10101|TPC10103|TPC10106|TPC10111|TPC10203|TPC10205|TPC10503",
        "GUTablet": "TX-A1301|TX-M9002|Q702|kf026",
        "PointOfViewTablet": "TAB-P506|TAB-navi-7-3G-M|TAB-P517|TAB-P-527|TAB-P701|TAB-P703|TAB-P721|TAB-P731N|TAB-P741|TAB-P825|TAB-P905|TAB-P925|TAB-PR945|TAB-PL1015|TAB-P1025|TAB-PI1045|TAB-P1325|TAB-PROTAB[0-9]+|TAB-PROTAB25|TAB-PROTAB26|TAB-PROTAB27|TAB-PROTAB26XL|TAB-PROTAB2-IPS9|TAB-PROTAB30-IPS9|TAB-PROTAB25XXL|TAB-PROTAB26-IPS10|TAB-PROTAB30-IPS10",
        "OvermaxTablet": "OV-(SteelCore|NewBase|Basecore|Baseone|Exellen|Quattor|EduTab|Solution|ACTION|BasicTab|TeddyTab|MagicTab|Stream|TB-08|TB-09)",
        "HCLTablet": "HCL.*Tablet|Connect-3G-2.0|Connect-2G-2.0|ME Tablet U1|ME Tablet U2|ME Tablet G1|ME Tablet X1|ME Tablet Y2|ME Tablet Sync",
        "DPSTablet": "DPS Dream 9|DPS Dual 7",
        "VistureTablet": "V97 HD|i75 3G|Visture V4( HD)?|Visture V5( HD)?|Visture V10",
        "CrestaTablet": "CTP(-)?810|CTP(-)?818|CTP(-)?828|CTP(-)?838|CTP(-)?888|CTP(-)?978|CTP(-)?980|CTP(-)?987|CTP(-)?988|CTP(-)?989",
        "MediatekTablet": "\\bMT8125|MT8389|MT8135|MT8377\\b",
        "ConcordeTablet": "Concorde([ ]+)?Tab|ConCorde ReadMan",
        "GoCleverTablet": "GOCLEVER TAB|A7GOCLEVER|M1042|M7841|M742|R1042BK|R1041|TAB A975|TAB A7842|TAB A741|TAB A741L|TAB M723G|TAB M721|TAB A1021|TAB I921|TAB R721|TAB I720|TAB T76|TAB R70|TAB R76.2|TAB R106|TAB R83.2|TAB M813G|TAB I721|GCTA722|TAB I70|TAB I71|TAB S73|TAB R73|TAB R74|TAB R93|TAB R75|TAB R76.1|TAB A73|TAB A93|TAB A93.2|TAB T72|TAB R83|TAB R974|TAB R973|TAB A101|TAB A103|TAB A104|TAB A104.2|R105BK|M713G|A972BK|TAB A971|TAB R974.2|TAB R104|TAB R83.3|TAB A1042",
        "ModecomTablet": "FreeTAB 9000|FreeTAB 7.4|FreeTAB 7004|FreeTAB 7800|FreeTAB 2096|FreeTAB 7.5|FreeTAB 1014|FreeTAB 1001 |FreeTAB 8001|FreeTAB 9706|FreeTAB 9702|FreeTAB 7003|FreeTAB 7002|FreeTAB 1002|FreeTAB 7801|FreeTAB 1331|FreeTAB 1004|FreeTAB 8002|FreeTAB 8014|FreeTAB 9704|FreeTAB 1003",
        "VoninoTablet": "\\b(Argus[ _]?S|Diamond[ _]?79HD|Emerald[ _]?78E|Luna[ _]?70C|Onyx[ _]?S|Onyx[ _]?Z|Orin[ _]?HD|Orin[ _]?S|Otis[ _]?S|SpeedStar[ _]?S|Magnet[ _]?M9|Primus[ _]?94[ _]?3G|Primus[ _]?94HD|Primus[ _]?QS|Android.*\\bQ8\\b|Sirius[ _]?EVO[ _]?QS|Sirius[ _]?QS|Spirit[ _]?S)\\b",
        "ECSTablet": "V07OT2|TM105A|S10OT1|TR10CS1",
        "StorexTablet": "eZee[_']?(Tab|Go)[0-9]+|TabLC7|Looney Tunes Tab",
        "VodafoneTablet": "SmartTab([ ]+)?[0-9]+|SmartTabII10|SmartTabII7",
        "EssentielBTablet": "Smart[ ']?TAB[ ]+?[0-9]+|Family[ ']?TAB2",
        "RossMoorTablet": "RM-790|RM-997|RMD-878G|RMD-974R|RMT-705A|RMT-701|RME-601|RMT-501|RMT-711",
        "iMobileTablet": "i-mobile i-note",
        "TolinoTablet": "tolino tab [0-9.]+|tolino shine",
        "AudioSonicTablet": "\\bC-22Q|T7-QC|T-17B|T-17P\\b",
        "AMPETablet": "Android.* A78 ",
        "SkkTablet": "Android.* (SKYPAD|PHOENIX|CYCLOPS)",
        "TecnoTablet": "TECNO P9",
        "JXDTablet": "Android.*\\b(F3000|A3300|JXD5000|JXD3000|JXD2000|JXD300B|JXD300|S5800|S7800|S602b|S5110b|S7300|S5300|S602|S603|S5100|S5110|S601|S7100a|P3000F|P3000s|P101|P200s|P1000m|P200m|P9100|P1000s|S6600b|S908|P1000|P300|S18|S6600|S9100)\\b",
        "iJoyTablet": "Tablet (Spirit 7|Essentia|Galatea|Fusion|Onix 7|Landa|Titan|Scooby|Deox|Stella|Themis|Argon|Unique 7|Sygnus|Hexen|Finity 7|Cream|Cream X2|Jade|Neon 7|Neron 7|Kandy|Scape|Saphyr 7|Rebel|Biox|Rebel|Rebel 8GB|Myst|Draco 7|Myst|Tab7-004|Myst|Tadeo Jones|Tablet Boing|Arrow|Draco Dual Cam|Aurix|Mint|Amity|Revolution|Finity 9|Neon 9|T9w|Amity 4GB Dual Cam|Stone 4GB|Stone 8GB|Andromeda|Silken|X2|Andromeda II|Halley|Flame|Saphyr 9,7|Touch 8|Planet|Triton|Unique 10|Hexen 10|Memphis 4GB|Memphis 8GB|Onix 10)",
        "FX2Tablet": "FX2 PAD7|FX2 PAD10",
        "XoroTablet": "KidsPAD 701|PAD[ ]?712|PAD[ ]?714|PAD[ ]?716|PAD[ ]?717|PAD[ ]?718|PAD[ ]?720|PAD[ ]?721|PAD[ ]?722|PAD[ ]?790|PAD[ ]?792|PAD[ ]?900|PAD[ ]?9715D|PAD[ ]?9716DR|PAD[ ]?9718DR|PAD[ ]?9719QR|PAD[ ]?9720QR|TelePAD1030|Telepad1032|TelePAD730|TelePAD731|TelePAD732|TelePAD735Q|TelePAD830|TelePAD9730|TelePAD795|MegaPAD 1331|MegaPAD 1851|MegaPAD 2151",
        "ViewsonicTablet": "ViewPad 10pi|ViewPad 10e|ViewPad 10s|ViewPad E72|ViewPad7|ViewPad E100|ViewPad 7e|ViewSonic VB733|VB100a",
        "OdysTablet": "LOOX|XENO10|ODYS[ -](Space|EVO|Xpress|NOON)|\\bXELIO\\b|Xelio10Pro|XELIO7PHONETAB|XELIO10EXTREME|XELIOPT2|NEO_QUAD10",
        "CaptivaTablet": "CAPTIVA PAD",
        "IconbitTablet": "NetTAB|NT-3702|NT-3702S|NT-3702S|NT-3603P|NT-3603P|NT-0704S|NT-0704S|NT-3805C|NT-3805C|NT-0806C|NT-0806C|NT-0909T|NT-0909T|NT-0907S|NT-0907S|NT-0902S|NT-0902S",
        "TeclastTablet": "\\(Linux;\\sAndroid\\s[\\d\\.]+;\\s[PXGAT]\\d{2,}.*\\sBuild\/.*?\\)",
        "JaytechTablet": "TPC-PA762",
        "BlaupunktTablet": "Endeavour 800NG|Endeavour 1010",
        "DigmaTablet": "\\b(iDx10|iDx9|iDx8|iDx7|iDxD7|iDxD8|iDsQ8|iDsQ7|iDsQ8|iDsD10|iDnD7|3TS804H|iDsQ11|iDj7|iDs10)\\b",
        "EvolioTablet": "ARIA_Mini_wifi|Aria[ _]Mini|Evolio X10|Evolio X7|Evolio X8|\\bEvotab\\b|\\bNeura\\b",
        "NexoTablet": "NEXO NOVA|NEXO 10|NEXO AVIO|NEXO FREE|NEXO GO|NEXO EVO|NEXO 3G|NEXO SMART|NEXO KIDDO|NEXO MOBI",
        "UbislateTablet": "UbiSlate[\\s]?7C",
        "PocketBookTablet": "Pocketbook",
        "Hudl": "Hudl HT7S3",
        "TelstraTablet": "T-Hub2",
        "GenericTablet": "Android.*\\b97D\\b|Tablet(?!.*PC)|BNTV250A|MID-WCDMA|LogicPD Zoom2|\\bA7EB\\b|CatNova8|A1_07|CT704|CT1002|\\bM721\\b|rk30sdk|\\bEVOTAB\\b|M758A|ET904|ALUMIUM10|Smartfren Tab|Endeavour 1010|Tablet-PC-4|Tagi Tab|\\bM6pro\\b|CT1020W|arc 10HD"
    },
    "oss": {
        "AndroidOS": "Android",
        "BlackBerryOS": "blackberry|\\bBB10\\b|rim tablet os",
        "PalmOS": "PalmOS|avantgo|blazer|elaine|hiptop|palm|plucker|xiino",
        "SymbianOS": "Symbian|SymbOS|Series60|Series40|SYB-[0-9]+|\\bS60\\b",
        "WindowsMobileOS": "Windows CE.*(PPC|Smartphone|Mobile|[0-9]{3}x[0-9]{3})|Window Mobile|Windows Phone [0-9.]+|WCE;",
        "WindowsPhoneOS": "Windows Phone 8.0|Windows Phone OS|XBLWP7|ZuneWP7|Windows NT 6.[23]; ARM;",
        "iOS": "\\biPhone.*Mobile|\\biPod|\\biPad",
        "MeeGoOS": "MeeGo",
        "MaemoOS": "Maemo",
        "JavaOS": "J2ME\/|\\bMIDP\\b|\\bCLDC\\b",
        "webOS": "webOS|hpwOS",
        "badaOS": "\\bBada\\b",
        "BREWOS": "BREW"
    },
    "uas": {
        "Chrome": "\\bCrMo\\b|CriOS|Android.*Chrome\/[.0-9]* (Mobile)?",
        "Dolfin": "\\bDolfin\\b",
        "Opera": "Opera.*Mini|Opera.*Mobi|Android.*Opera|Mobile.*OPR\/[0-9.]+|Coast\/[0-9.]+",
        "Skyfire": "Skyfire",
        "IE": "IEMobile|MSIEMobile",
        "Firefox": "fennec|firefox.*maemo|(Mobile|Tablet).*Firefox|Firefox.*Mobile",
        "Bolt": "bolt",
        "TeaShark": "teashark",
        "Blazer": "Blazer",
        "Safari": "Version.*Mobile.*Safari|Safari.*Mobile|MobileSafari",
        "Tizen": "Tizen",
        "UCBrowser": "UC.*Browser|UCWEB",
        "baiduboxapp": "baiduboxapp",
        "baidubrowser": "baidubrowser",
        "DiigoBrowser": "DiigoBrowser",
        "Puffin": "Puffin",
        "Mercury": "\\bMercury\\b",
        "ObigoBrowser": "Obigo",
        "NetFront": "NF-Browser",
        "GenericBrowser": "NokiaBrowser|OviBrowser|OneBrowser|TwonkyBeamBrowser|SEMC.*Browser|FlyFlow|Minimo|NetFront|Novarra-Vision|MQQBrowser|MicroMessenger"
    },
    "props": {
        "Mobile": "Mobile\/[VER]",
        "Build": "Build\/[VER]",
        "Version": "Version\/[VER]",
        "VendorID": "VendorID\/[VER]",
        "iPad": "iPad.*CPU[a-z ]+[VER]",
        "iPhone": "iPhone.*CPU[a-z ]+[VER]",
        "iPod": "iPod.*CPU[a-z ]+[VER]",
        "Kindle": "Kindle\/[VER]",
        "Chrome": [
            "Chrome\/[VER]",
            "CriOS\/[VER]",
            "CrMo\/[VER]"
        ],
        "Coast": [
            "Coast\/[VER]"
        ],
        "Dolfin": "Dolfin\/[VER]",
        "Firefox": "Firefox\/[VER]",
        "Fennec": "Fennec\/[VER]",
        "IE": [
            "IEMobile\/[VER];",
            "IEMobile [VER]",
            "MSIE [VER];"
        ],
        "NetFront": "NetFront\/[VER]",
        "NokiaBrowser": "NokiaBrowser\/[VER]",
        "Opera": [
            " OPR\/[VER]",
            "Opera Mini\/[VER]",
            "Version\/[VER]"
        ],
        "Opera Mini": "Opera Mini\/[VER]",
        "Opera Mobi": "Version\/[VER]",
        "UC Browser": "UC Browser[VER]",
        "MQQBrowser": "MQQBrowser\/[VER]",
        "MicroMessenger": "MicroMessenger\/[VER]",
        "baiduboxapp": "baiduboxapp\/[VER]",
        "baidubrowser": "baidubrowser\/[VER]",
        "Safari": [
            "Version\/[VER]",
            "Safari\/[VER]"
        ],
        "Skyfire": "Skyfire\/[VER]",
        "Tizen": "Tizen\/[VER]",
        "Webkit": "webkit[ \/][VER]",
        "Gecko": "Gecko\/[VER]",
        "Trident": "Trident\/[VER]",
        "Presto": "Presto\/[VER]",
        "iOS": " \\bOS\\b [VER] ",
        "Android": "Android [VER]",
        "BlackBerry": [
            "BlackBerry[\\w]+\/[VER]",
            "BlackBerry.*Version\/[VER]",
            "Version\/[VER]"
        ],
        "BREW": "BREW [VER]",
        "Java": "Java\/[VER]",
        "Windows Phone OS": [
            "Windows Phone OS [VER]",
            "Windows Phone [VER]"
        ],
        "Windows Phone": "Windows Phone [VER]",
        "Windows CE": "Windows CE\/[VER]",
        "Windows NT": "Windows NT [VER]",
        "Symbian": [
            "SymbianOS\/[VER]",
            "Symbian\/[VER]"
        ],
        "webOS": [
            "webOS\/[VER]",
            "hpwOS\/[VER];"
        ]
    },
    "utils": {
        "DesktopMode": "WPDesktop",
        "TV": "SonyDTV|HbbTV",
        "WebKit": "(webkit)[ \/]([\\w.]+)",
        "Bot": "Googlebot|YandexBot|bingbot|ia_archiver|AhrefsBot|Ezooms|GSLFbot|WBSearchBot|Twitterbot|TweetmemeBot|Twikle|PaperLiBot|Wotbox|UnwindFetchor|facebookexternalhit",
        "MobileBot": "Googlebot-Mobile|YahooSeeker\/M1A1-R2D2",
        "Console": "\\b(Nintendo|Nintendo WiiU|Nintendo 3DS|PLAYSTATION|Xbox)\\b",
        "Watch": "SM-V700"
    }
};

    // following patterns come from http://detectmobilebrowsers.com/
    var detectMobileBrowsers = {
        fullPattern: /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i,
        shortPattern: /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i
    };

    var hasOwnProp = Object.prototype.hasOwnProperty,
        isArray,
        FALLBACK_PHONE = 'UnknownPhone',
        FALLBACK_TABLET = 'UnknownTablet',
        FALLBACK_MOBILE = 'UnknownMobile';

    isArray = ('isArray' in Array) ?
        Array.isArray : function (value) { return Object.prototype.toString.call(value) === '[object Array]'; };

    (function init() {
        var key, values, value, i, len, verPos;
        for (key in mobileDetectRules.props) {
            if (hasOwnProp.call(mobileDetectRules.props, key)) {
                values = mobileDetectRules.props[key];
                if (!isArray(values)) {
                    values = [values];
                }
                len = values.length;
                for (i = 0; i < len; ++i) {
                    value = values[i];
                    verPos = value.indexOf('[VER]');
                    if (verPos >= 0) {
                        value = value.substring(0, verPos) + '([\\w._\\+]+)' + value.substring(verPos + 5);
                    }
                    values[i] = new RegExp(value, 'i');
                }
                mobileDetectRules.props[key] = values;
            }
        }
        convertPropsToRegExp(mobileDetectRules.oss);
        convertPropsToRegExp(mobileDetectRules.phones);
        convertPropsToRegExp(mobileDetectRules.tablets);
        convertPropsToRegExp(mobileDetectRules.uas);
        convertPropsToRegExp(mobileDetectRules.utils);
    }());

    function convertPropsToRegExp(object) {
        for (var key in object) {
            if (hasOwnProp.call(object, key)) {
                object[key] = new RegExp(object[key], 'i');
            }
        }
    }

    /**
     * Test userAgent string against a set of rules and find the matched key.
     * @param {Object} rules (key is String, value is RegExp)
     * @param {String} userAgent the navigator.userAgent (or HTTP-Header 'User-Agent').
     * @returns {String|null} the matched key if found, otherwise <tt>null</tt>
     * @private
     */
    function findMatch(rules, userAgent) {
        for (var key in rules) {
            if (hasOwnProp.call(rules, key)) {
                if (rules[key].test(userAgent)) {
                    return key;
                }
            }
        }
        return null;
    }

    /**
     * Check the version of the given property in the User-Agent.
     *
     * @param {String} propertyName
     * @param {String} userAgent
     * @return {String} version or <tt>null</tt> if version not found
     * @private
     */
    function getVersionStr(propertyName, userAgent) {
        var props = mobileDetectRules.props, patterns, i, len, match;
        if (hasOwnProp.call(props, propertyName)) {
            patterns = props[propertyName];
            len = patterns.length;
            for (i = 0; i < len; ++i) {
                match = patterns[i].exec(userAgent);
                if (match !== null) {
                    return match[1];
                }
            }
        }
        return null;
    }

    /**
     * Check the version of the given property in the User-Agent.
     * Will return a float number. (eg. 2_0 will return 2.0, 4.3.1 will return 4.31)
     *
     * @param {String} propertyName
     * @param {String} userAgent
     * @return {Number} version or <tt>NaN</tt> if version not found
     * @private
     */
    function getVersion(propertyName, userAgent) {
        var version = getVersionStr(propertyName, userAgent);
        return version ? prepareVersionNo(version) : NaN;
    }

    /**
     * Prepare the version number.
     *
     * @param {String} version
     * @return {Number} the version number as a floating number
     * @private
     */
    function prepareVersionNo(version) {
        var numbers;

        numbers = version.split(/[a-z._ \/\-]/i);
        if (numbers.length === 1) {
            version = numbers[0];
        }
        if (numbers.length > 1) {
            version = numbers[0] + '.';
            numbers.shift();
            version += numbers.join('');
        }
        return Number(version);
    }

    function equalIC(a, b) {
        return a != null && b != null && a.toLowerCase() === b.toLowerCase();
    }

    function isMobileFallback(userAgent) {
        return detectMobileBrowsers.fullPattern.test(userAgent) ||
            detectMobileBrowsers.shortPattern.test(userAgent.substr(0,4));
    }

    function prepareDetectionCache(cache, userAgent, maxPhoneWidth) {
        if (cache.mobile !== undefined) {
            return;
        }
        var phone, tablet, phoneSized;

        // first check for stronger tablet rules, then phone (see issue#5)
        tablet = findMatch(mobileDetectRules.tablets, userAgent);
        if (tablet) {
            cache.mobile = cache.tablet = tablet;
            cache.phone = null;
            return; // unambiguously identified as tablet
        }

        phone = findMatch(mobileDetectRules.phones, userAgent);
        if (phone) {
            cache.mobile = cache.phone = phone;
            cache.tablet = null;
            return; // unambiguously identified as phone
        }

        // our rules haven't found a match -> try more general fallback rules
        if (isMobileFallback(userAgent)) {
            phoneSized = MobileDetect.isPhoneSized(maxPhoneWidth);
            if (phoneSized === undefined) {
                cache.mobile = cache.tablet = cache.phone = FALLBACK_MOBILE;
            } else if (phoneSized) {
                cache.mobile = cache.phone = FALLBACK_PHONE;
                cache.tablet = null;
            } else {
                cache.mobile = cache.tablet = FALLBACK_TABLET;
                cache.phone = null;
            }
        } else {
            // not mobile at all!
            cache.mobile = cache.tablet = cache.phone = null;
        }
    }

    // t is a reference to a MobileDetect instance
    function mobileGrade(t) {
        // impl note:
        // To keep in sync w/ Mobile_Detect.php easily, the following code is tightly aligned to the PHP version.
        // When changes are made in Mobile_Detect.php, copy this method and replace:
        //     $this-> / t.
        //     self::MOBILE_GRADE_(.) / '$1'
        //     , self::VERSION_TYPE_FLOAT / (nothing)
        //     isIOS() / os('iOS')
        //     [reg] / (nothing)   <-- jsdelivr complaining about unescaped unicode character U+00AE
        var $isMobile = t.mobile() !== null;

        if (
            // Apple iOS 3.2-5.1 - Tested on the original iPad (4.3 / 5.0), iPad 2 (4.3), iPad 3 (5.1), original iPhone (3.1), iPhone 3 (3.2), 3GS (4.3), 4 (4.3 / 5.0), and 4S (5.1)
            t.os('iOS') && t.version('iPad')>=4.3 ||
            t.os('iOS') && t.version('iPhone')>=3.1 ||
            t.os('iOS') && t.version('iPod')>=3.1 ||

            // Android 2.1-2.3 - Tested on the HTC Incredible (2.2), original Droid (2.2), HTC Aria (2.1), Google Nexus S (2.3). Functional on 1.5 & 1.6 but performance may be sluggish, tested on Google G1 (1.5)
            // Android 3.1 (Honeycomb)  - Tested on the Samsung Galaxy Tab 10.1 and Motorola XOOM
            // Android 4.0 (ICS)  - Tested on a Galaxy Nexus. Note: transition performance can be poor on upgraded devices
            // Android 4.1 (Jelly Bean)  - Tested on a Galaxy Nexus and Galaxy 7
            ( t.version('Android')>2.1 && t.is('Webkit') ) ||

            // Windows Phone 7-7.5 - Tested on the HTC Surround (7.0) HTC Trophy (7.5), LG-E900 (7.5), Nokia Lumia 800
            t.version('Windows Phone OS')>=7.0 ||

            // Blackberry 7 - Tested on BlackBerry Torch 9810
            // Blackberry 6.0 - Tested on the Torch 9800 and Style 9670
            t.is('BlackBerry') && t.version('BlackBerry')>=6.0 ||
            // Blackberry Playbook (1.0-2.0) - Tested on PlayBook
            t.match('Playbook.*Tablet') ||

            // Palm WebOS (1.4-2.0) - Tested on the Palm Pixi (1.4), Pre (1.4), Pre 2 (2.0)
            ( t.version('webOS')>=1.4 && t.match('Palm|Pre|Pixi') ) ||
            // Palm WebOS 3.0  - Tested on HP TouchPad
            t.match('hp.*TouchPad') ||

            // Firefox Mobile (12 Beta) - Tested on Android 2.3 device
            ( t.is('Firefox') && t.version('Firefox')>=12 ) ||

            // Chrome for Android - Tested on Android 4.0, 4.1 device
            ( t.is('Chrome') && t.is('AndroidOS') && t.version('Android')>=4.0 ) ||

            // Skyfire 4.1 - Tested on Android 2.3 device
            ( t.is('Skyfire') && t.version('Skyfire')>=4.1 && t.is('AndroidOS') && t.version('Android')>=2.3 ) ||

            // Opera Mobile 11.5-12: Tested on Android 2.3
            ( t.is('Opera') && t.version('Opera Mobi')>11 && t.is('AndroidOS') ) ||

            // Meego 1.2 - Tested on Nokia 950 and N9
            t.is('MeeGoOS') ||

            // Tizen (pre-release) - Tested on early hardware
            t.is('Tizen') ||

            // Samsung Bada 2.0 - Tested on a Samsung Wave 3, Dolphin browser
            // @todo: more tests here!
            t.is('Dolfin') && t.version('Bada')>=2.0 ||

            // UC Browser - Tested on Android 2.3 device
            ( (t.is('UC Browser') || t.is('Dolfin')) && t.version('Android')>=2.3 ) ||

            // Kindle 3 and Fire  - Tested on the built-in WebKit browser for each
            ( t.match('Kindle Fire') ||
                t.is('Kindle') && t.version('Kindle')>=3.0 ) ||

            // Nook Color 1.4.1 - Tested on original Nook Color, not Nook Tablet
            t.is('AndroidOS') && t.is('NookTablet') ||

            // Chrome Desktop 11-21 - Tested on OS X 10.7 and Windows 7
            t.version('Chrome')>=11 && !$isMobile ||

            // Safari Desktop 4-5 - Tested on OS X 10.7 and Windows 7
            t.version('Safari')>=5.0 && !$isMobile ||

            // Firefox Desktop 4-13 - Tested on OS X 10.7 and Windows 7
            t.version('Firefox')>=4.0 && !$isMobile ||

            // Internet Explorer 7-9 - Tested on Windows XP, Vista and 7
            t.version('MSIE')>=7.0 && !$isMobile ||

            // Opera Desktop 10-12 - Tested on OS X 10.7 and Windows 7
            // @reference: http://my.opera.com/community/openweb/idopera/
            t.version('Opera')>=10 && !$isMobile

            ){
            return 'A';
        }

        if (
            t.os('iOS') && t.version('iPad')<4.3 ||
            t.os('iOS') && t.version('iPhone')<3.1 ||
            t.os('iOS') && t.version('iPod')<3.1 ||

            // Blackberry 5.0: Tested on the Storm 2 9550, Bold 9770
            t.is('Blackberry') && t.version('BlackBerry')>=5 && t.version('BlackBerry')<6 ||

            //Opera Mini (5.0-6.5) - Tested on iOS 3.2/4.3 and Android 2.3
            ( t.version('Opera Mini')>=5.0 && t.version('Opera Mini')<=6.5 &&
                (t.version('Android')>=2.3 || t.is('iOS')) ) ||

            // Nokia Symbian^3 - Tested on Nokia N8 (Symbian^3), C7 (Symbian^3), also works on N97 (Symbian^1)
            t.match('NokiaN8|NokiaC7|N97.*Series60|Symbian/3') ||

            // @todo: report this (tested on Nokia N71)
            t.version('Opera Mobi')>=11 && t.is('SymbianOS')
            ){
            return 'B';
        }

        if (
        // Blackberry 4.x - Tested on the Curve 8330
            t.version('BlackBerry')<5.0 ||
            // Windows Mobile - Tested on the HTC Leo (WinMo 5.2)
            t.match('MSIEMobile|Windows CE.*Mobile') || t.version('Windows Mobile')<=5.2

            ){
            return 'C';
        }

        //All older smartphone platforms and featurephones - Any device that doesn't support media queries
        //will receive the basic, C grade experience.
        return 'C';
    }

    /**
     * Constructor for MobileDetect object.
     * <br>
     * Such an object will keep a reference to the given user-agent string and cache most of the detect queries.<br>
     * <div style="background-color: #d9edf7; border: 1px solid #bce8f1; color: #3a87ad; padding: 14px; border-radius: 2px; margin-top: 20px">
     *     <strong>Find information how to download and install:</strong>
     *     <a href="https://github.com/hgoebl/mobile-detect.js/">github.com/hgoebl/mobile-detect.js/</a>
     * </div>
     *
     * @example <pre>
     *     var md = new MobileDetect(window.navigator.userAgent);
     *     if (md.mobile()) {
     *         location.href = (md.mobileGrade() === 'A') ? '/mobile/' : '/lynx/';
     *     }
     * </pre>
     *
     * @param {string} userAgent typically taken from window.navigator.userAgent or http_header['User-Agent']
     * @param {number} [maxPhoneWidth=650] <strong>only for browsers</strong> specify a value for the maximum
     *        width (in logical "CSS" pixels) until a device detected as mobile will be handled as phone.
     *        This is only used in cases where the device cannot be classified as phone or tablet.<br>
     *        See <a href="http://www.html5rocks.com/en/mobile/cross-device/">A non-responsive approach to
     *        building cross-device webapps</a>.<br>
     *        If you provide a value < 0, then this "fuzzy" check is disabled.
     * @constructor
     * @global
     */
    function MobileDetect(userAgent, maxPhoneWidth) {
        this.ua = userAgent || '';
        this._cache = {};
        this.maxPhoneWidth = maxPhoneWidth || 650;
    }

    MobileDetect.prototype = {
        constructor: MobileDetect,

        /**
         * Returns the detected phone or tablet type or <tt>null</tt> if it is not a mobile device.
         * <br>
         * For a list of possible return values see {@link MobileDetect#phone} and {@link MobileDetect#tablet}.<br>
         * <br>
         * If the device is not detected by the regular expressions from Mobile-Detect, a test is made against
         * the patterns of <a href="http://detectmobilebrowsers.com/">detectmobilebrowsers.com</a>. If this test
         * is positive, a value of <code>UnknownPhone</code>, <code>UnknownTablet</code> or
         * <code>UnknownMobile</code> is returned.<br>
         * When used in browser, the decision whether phone or tablet is made based on <code>screen.width</code>.<br>
         * When used server-side (node.js), there is no way to tell the difference between <code>UnknownPhone</code>
         * and <code>UnknownTablet</code>, so you will only get <code>UnknownMobile</code>.<br>
         * <br>
         * In most cases you will use the return value just as a boolean.
         *
         * @returns {String} the key for the phone family or tablet family, e.g. "Nexus".
         * @function MobileDetect#mobile
         */
        mobile: function () {
            prepareDetectionCache(this._cache, this.ua, this.maxPhoneWidth);
            return this._cache.mobile;
        },

        /**
         * Returns the detected phone type/family string or <tt>null</tt>.
         * <br>
         * The returned tablet (family or producer) is one of following keys:<br>
         * <br><tt>iPhone, BlackBerry, HTC, Nexus, Dell, Motorola, Samsung, LG, Sony, Asus,
         * Micromax, Palm, Vertu, Pantech, Fly, iMobile, SimValley, Wolfgang, Alcatel,
         * Nintendo, Amoi, INQ, GenericPhone</tt><br>
         * <br>
         * If the device is not detected by the regular expressions from Mobile-Detect, a test is made against
         * the patterns of <a href="http://detectmobilebrowsers.com/">detectmobilebrowsers.com</a>. If this test
         * is positive, a value of <code>UnknownPhone</code> or <code>UnknownMobile</code> is returned.<br>
         * When used in browser, the decision whether phone or tablet is made based on <code>screen.width</code>.<br>
         * When used server-side (node.js), there is no way to tell the difference between <code>UnknownPhone</code>
         * and <code>UnknownMobile</code>, so you will only get <code>UnknownMobile</code>.<br>
         * <br>
         * In most cases you will use the return value just as a boolean.
         *
         * @returns {String} the key of the phone family or producer, e.g. "iPhone"
         * @function MobileDetect#phone
         */
        phone: function () {
            prepareDetectionCache(this._cache, this.ua, this.maxPhoneWidth);
            return this._cache.phone;
        },

        /**
         * Returns the detected tablet type/family string or <tt>null</tt>.
         * <br>
         * The returned tablet (family or producer) is one of following keys:<br>
         * <br><tt>iPad, NexusTablet, SamsungTablet, Kindle, SurfaceTablet, HPTablet, AsusTablet,
         * BlackBerryTablet, HTCtablet, MotorolaTablet, NookTablet, AcerTablet,
         * ToshibaTablet, LGTablet, FujitsuTablet, PrestigioTablet, LenovoTablet,
         * DellTablet, YarvikTablet, MedionTablet, ArnovaTablet, IntensoTablet, IRUTablet,
         * MegafonTablet, EbodaTablet, AllViewTablet, ArchosTablet, AinolTablet,
         * SonyTablet, PhilipsTablet, CubeTablet, CobyTablet, MIDTablet, MSITablet,
         * SMiTTablet, RockChipTablet, FlyTablet, bqTablet, HuaweiTablet, NecTablet,
         * PantechTablet, BronchoTablet, VersusTablet, ZyncTablet, PositivoTablet,
         * NabiTablet, KoboTablet, DanewTablet, TexetTablet, PlaystationTablet,
         * TrekstorTablet, PyleAudioTablet, AdvanTablet, DanyTechTablet, GalapadTablet,
         * MicromaxTablet, KarbonnTablet, AllFineTablet, PROSCANTablet, YONESTablet,
         * ChangJiaTablet, GUTablet, PointOfViewTablet, OvermaxTablet, HCLTablet,
         * DPSTablet, VistureTablet, CrestaTablet, MediatekTablet, ConcordeTablet,
         * GoCleverTablet, ModecomTablet, VoninoTablet, ECSTablet, StorexTablet,
         * VodafoneTablet, EssentielBTablet, RossMoorTablet, iMobileTablet, TolinoTablet,
         * AudioSonicTablet, AMPETablet, SkkTablet, TecnoTablet, JXDTablet, iJoyTablet,
         * FX2Tablet, XoroTablet, ViewsonicTablet, OdysTablet, CaptivaTablet,
         * IconbitTablet, TeclastTablet, JaytechTablet, BlaupunktTablet, DigmaTablet,
         * EvolioTablet, NexoTablet, UbislateTablet, PocketBookTablet, Hudl,
         * TelstraTablet, GenericTablet</tt><br>
         * <br>
         * If the device is not detected by the regular expressions from Mobile-Detect, a test is made against
         * the patterns of <a href="http://detectmobilebrowsers.com/">detectmobilebrowsers.com</a>. If this test
         * is positive, a value of <code>UnknownTablet</code> or <code>UnknownMobile</code> is returned.<br>
         * When used in browser, the decision whether phone or tablet is made based on <code>screen.width</code>.<br>
         * When used server-side (node.js), there is no way to tell the difference between <code>UnknownTablet</code>
         * and <code>UnknownMobile</code>, so you will only get <code>UnknownMobile</code>.<br>
         * <br>
         * In most cases you will use the return value just as a boolean.
         *
         * @returns {String} the key of the tablet family or producer, e.g. "SamsungTablet"
         * @function MobileDetect#tablet
         */
        tablet: function () {
            prepareDetectionCache(this._cache, this.ua, this.maxPhoneWidth);
            return this._cache.tablet;
        },

        /**
         * Returns the detected user-agent string or <tt>null</tt>.
         * <br>
         * The returned user-agent is one of following keys:<br>
         * <br><tt>Chrome, Dolfin, Opera, Skyfire, IE, Firefox, Bolt, TeaShark, Blazer, Safari,
         * Tizen, UCBrowser, baiduboxapp, baidubrowser, DiigoBrowser, Puffin, Mercury,
         * ObigoBrowser, NetFront, GenericBrowser</tt><br>
         *
         * @returns {String} the key for the detected user-agent or <tt>null</tt>
         * @function MobileDetect#userAgent
         */
        userAgent: function () {
            if (this._cache.userAgent === undefined) {
                this._cache.userAgent = findMatch(mobileDetectRules.uas, this.ua);
            }
            return this._cache.userAgent;
        },

        /**
         * Returns the detected operating system string or <tt>null</tt>.
         * <br>
         * The operating system is one of following keys:<br>
         * <br><tt>AndroidOS, BlackBerryOS, PalmOS, SymbianOS, WindowsMobileOS, WindowsPhoneOS,
         * iOS, MeeGoOS, MaemoOS, JavaOS, webOS, badaOS, BREWOS</tt><br>
         *
         * @returns {String} the key for the detected operating system.
         * @function MobileDetect#os
         */
        os: function () {
            if (this._cache.os === undefined) {
                this._cache.os = findMatch(mobileDetectRules.oss, this.ua);
            }
            return this._cache.os;
        },

        /**
         * Get the version (as Number) of the given property in the User-Agent.
         * <br>
         * Will return a float number. (eg. 2_0 will return 2.0, 4.3.1 will return 4.31)
         *
         * @param {String} key a key defining a thing which has a version.<br>
         *        You can use one of following keys:<br>
         * <br><tt>Mobile, Build, Version, VendorID, iPad, iPhone, iPod, Kindle, Chrome, Coast,
         * Dolfin, Firefox, Fennec, IE, NetFront, NokiaBrowser, Opera, Opera Mini, Opera
         * Mobi, UC Browser, MQQBrowser, MicroMessenger, baiduboxapp, baidubrowser,
         * Safari, Skyfire, Tizen, Webkit, Gecko, Trident, Presto, iOS, Android,
         * BlackBerry, BREW, Java, Windows Phone OS, Windows Phone, Windows CE, Windows
         * NT, Symbian, webOS</tt><br>
         *
         * @returns {Number} the version as float or <tt>NaN</tt> if User-Agent doesn't contain this version.
         *          Be careful when comparing this value with '==' operator!
         * @function MobileDetect#version
         */
        version: function (key) {
            return getVersion(key, this.ua);
        },

        /**
         * Get the version (as String) of the given property in the User-Agent.
         * <br>
         *
         * @param {String} key a key defining a thing which has a version.<br>
         *        You can use one of following keys:<br>
         * <br><tt>Mobile, Build, Version, VendorID, iPad, iPhone, iPod, Kindle, Chrome, Coast,
         * Dolfin, Firefox, Fennec, IE, NetFront, NokiaBrowser, Opera, Opera Mini, Opera
         * Mobi, UC Browser, MQQBrowser, MicroMessenger, baiduboxapp, baidubrowser,
         * Safari, Skyfire, Tizen, Webkit, Gecko, Trident, Presto, iOS, Android,
         * BlackBerry, BREW, Java, Windows Phone OS, Windows Phone, Windows CE, Windows
         * NT, Symbian, webOS</tt><br>
         *
         * @returns {String} the "raw" version as String or <tt>null</tt> if User-Agent doesn't contain this version.
         *
         * @function MobileDetect#versionStr
         */
        versionStr: function (key) {
            return getVersionStr(key, this.ua);
        },

        /**
         * Global test key against userAgent, os, phone, tablet and some other properties of userAgent string.
         *
         * @param {String} key the key (case-insensitive) of a userAgent, an operating system, phone or
         *        tablet family.<br>
         *        For a complete list of possible values, see {@link MobileDetect#userAgent},
         *        {@link MobileDetect#os}, {@link MobileDetect#phone}, {@link MobileDetect#tablet}.<br>
         *        Additionally you have following keys:<br>
         * <br><tt>DesktopMode, TV, WebKit, Bot, MobileBot, Console, Watch</tt><br>
         *
         * @returns {boolean} <tt>true</tt> when the given key is one of the defined keys of userAgent, os, phone,
         *                    tablet or one of the listed additional keys, otherwise <tt>false</tt>
         * @function MobileDetect#is
         */
        is: function(key) {
            return equalIC(key, this.userAgent()) ||
                   equalIC(key, this.os()) ||
                   equalIC(key, this.phone()) ||
                   equalIC(key, this.tablet()) ||
                   equalIC(key, findMatch(mobileDetectRules.utils, this.ua));
        },

        /**
         * Do a quick test against navigator::userAgent.
         *
         * @param {String|RegExp} pattern the pattern, either as String or RegExp
         *                        (a string will be converted to a case-insensitive RegExp).
         * @returns {boolean} <tt>true</tt> when the pattern matches, otherwise <tt>false</tt>
         * @function MobileDetect#match
         */
        match: function (pattern) {
            if (!(pattern instanceof RegExp)) {
                pattern = new RegExp(pattern, 'i');
            }
            return pattern.test(this.ua);
        },

        /**
         * Checks whether the mobile device can be considered as phone regarding <code>screen.width</code>.
         * <br>
         * Obviously this method makes sense in browser environments only (not for Node.js)!
         * @param {number} [maxPhoneWidth] the maximum logical pixels (aka. CSS-pixels) to be considered as phone.<br>
         *        The argument is optional and if not present or falsy, the value of the constructor is taken.
         * @returns {boolean|undefined} <code>undefined</code> if screen size wasn't detectable, else <code>true</code>
         *          when screen.width is less or equal to maxPhoneWidth, otherwise <code>false</code>.<br>
         *          Will always return <code>undefined</code> server-side.
         */
        isPhoneSized: function (maxPhoneWidth) {
            return MobileDetect.isPhoneSized(maxPhoneWidth || this.maxPhoneWidth);
        },

        /**
         * Returns the mobile grade ('A', 'B', 'C').
         *
         * @returns {String} one of the mobile grades ('A', 'B', 'C').
         * @function MobileDetect#mobileGrade
         */
        mobileGrade: function () {
            if (this._cache.grade === undefined) {
                this._cache.grade = mobileGrade(this);
            }
            return this._cache.grade;
        }
    };

    // environment-dependent
    if (typeof window !== 'undefined' && window.screen && window.screen.width) {
        MobileDetect.isPhoneSized = function (maxPhoneWidth) {
            if (maxPhoneWidth < 0) {
                return undefined;
            }
            var physicalPixelWidth = window.screen.width,
                pixelRatio = window.devicePixelRatio || 1,
                cssPixelWidth = physicalPixelWidth / pixelRatio;

            return cssPixelWidth <= maxPhoneWidth;
        };
    } else {
        MobileDetect.isPhoneSized = function () {};
    }

    return MobileDetect;
}); // end of call of define()
})((function (undefined) {
    if (typeof define === 'function' && define.amd) {
        return define;
    } else if (typeof module !== 'undefined' && module.exports) {
        return function (factory) { module.exports = factory(); };
    } else if (typeof window !== 'undefined') {
        return function (factory) { window.MobileDetect = factory(); };
    } else {
        // please file a bug if you get this error!
        throw new Error('unknown environment');
    }
})());
