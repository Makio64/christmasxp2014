{"version":3,"sources":["Audio.js","OcclusionScene.js","Painter.js","Webgl.js","main.js","objects/FallingSnow.js","objects/Mountain.js","objects/Terrain.js","objects/Tunnel.js","shaders/AdditiveTextureShader.js","shaders/GodraysShader.js","shaders/MountainGradientShader.js","shaders/SimplexNoiseShader.js","shaders/SnowParticleShader.js","shaders/TextureMaskShader.js","audio/Asset.js","audio/Preset.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrpxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrfile":"app.min.js","sourcesContent":["var Audio = (function(){\n\n    function Audio(){\n        this.sound = new buzz.sound( \"assets/sounds/train\", {\n            formats: [ \"wav\" ],\n            volume: 0\n        });\n        this.duration = 3115;\n        this.sound.play()\n            .fadeTo(3)\n            .loop();\n\n        this.tunnelSound = new buzz.sound('assets/sounds/wind3', {\n            formats: ['wav'],\n            volume: 0\n        });\n        this.tunnelDuration = 3115;\n        this.tunnelSound.play()\n            .loop();\n    }\n\n    Audio.prototype.startTunnel = function() {\n        // this.tunnelSound.fadeTo(5, 300)\n    };\n\n    Audio.prototype.stopTunnel = function() {\n        // this.tunnelSound.fadeTo(0, 500)  \n    };\n\n    Audio.prototype.update = function() {\n        if(this.sound.getTime() > 3.00) {\n            this.sound.setTime(0);\n        }\n        if(this.tunnelSound.getTime() > 5.63) {\n            this.tunnelSound.setTime(0);\n        }\n    };\n\n    return Audio;\n\n})();","var OcclusionScene = (function(){\n\n    function OcclusionScene(width, height, renderer){\n        this.width = width;\n        this.height= height;\n        this.sunColor = 0x795a38;\n        \n        this.scene = new THREE.Scene();\n         \n        this.camera = new THREE.PerspectiveCamera(40, width / height, 0.1, 100000);\n        this.camera.position.set(0, 100, 1000);\n        this.camera.lookAt(new THREE.Vector3(0, 100, 0));\n\n        this.mountain = new Mountain(true);\n        this.scene.add(this.mountain);\n        this.mountain.position.set(0, -2000, -20000);\n\n        this.sunMesh = new THREE.Mesh(new THREE.CircleGeometry(800, 64), new THREE.MeshBasicMaterial({color: this.sunColor}));\n        this.scene.add(this.sunMesh);\n        this.sunMesh.position.set(0, 1600, -22000);\n\n        this.tunnel = new Tunnel(true);\n        this.scene.add(this.tunnel);\n\n        var renderTargetParameters = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat, stencilBufer: false };\n        this.renderTarget = new THREE.WebGLRenderTarget(this.width, this.height, renderTargetParameters);\n                \n        this.addPostprocessing(renderer);\n    }\n\n    OcclusionScene.prototype.addPostprocessing = function(renderer) {\n        this.composer = new THREE.EffectComposer(renderer, this.renderTarget);\n        this.composer.addPass(new THREE.RenderPass(this.scene, this.camera));\n\n        var hblur = new THREE.ShaderPass(THREE.HorizontalBlurShader);\n        var vblur = new THREE.ShaderPass(THREE.VerticalBlurShader);\n        hblur.uniforms.h.value = 8 / this.width;\n        vblur.uniforms.v.value = 8 / this.height;\n        \n        this.composer.addPass(hblur);\n        this.composer.addPass(vblur);\n        this.composer.addPass(hblur);\n        this.composer.addPass(vblur);\n        \n        \n        var grPass = new THREE.ShaderPass(GodraysShader);\n        this.composer.addPass(grPass);\n\n        // vblur.renderToScreen = true;\n    };\n\n    OcclusionScene.prototype.resize = function(width, height) {\n        this.camera.aspect = width / height;\n        this.camera.updateProjectionMatrix();\n        this.width = width;\n        this.height = height;\n    };\n\n    OcclusionScene.prototype.render = function(renderer) {\n        this.mountain.update();\n        this.tunnel.update();\n        renderer.setClearColor(0x000000)\n        // renderer.render(this.scene, this.camera);\n        this.composer.render();\n\n    };\n\n    return OcclusionScene;\n\n})();","var Painter = (function(){\n\n    function Painter(width, height){\n        this.width = width;\n        this.height = height;\n\n        this.canvas = document.createElement('canvas');\n        this.ctx = this.canvas.getContext('2d');\n        this.ctx.lineJoin = this.ctx.lineCap = 'round';\n\n        this.resize(width, height);\n\n        this.brushImage = new Image();\n        this.brushImage.src = 'assets/textures/brush5.png';\n\n        this.titleImagePolar = new Image();\n        this.titleImagePolar.src = 'assets/textures/polar.png';\n        this.titleWidth = 524;\n        this.titleHeight = 54;\n\n        this.titleImageSolar = new Image();\n        this.titleImageSolar.src = 'assets/textures/solar.png';\n\n        this.isDrawing = false;\n        this.lastPoint = null;\n\n        this.drawSolar = false;\n\n        this.lastTime = 0;\n        this.clearInterval = 0.25;\n\n        this.ctx.fillRect(0, 0, width, height);\n    }\n\n    Painter.prototype.mouseDown = function(e) {\n        if(!this.introOver) return;\n        this.isDrawing = true;\n        this.lastPoint = { x: e.clientX, y: e.clientY };\n    };\n\n    Painter.prototype.mouseUp = function(e) {\n        this.isDrawing = false;\n    };\n\n    Painter.prototype.mouseMove = function(e) {\n        if(!this.isDrawing || !this.introOver) return;\n\n        this.drawCurrentPointBrush(e.clientX, e.clientY);\n    };\n\n    Painter.prototype.drawCurrentPointBrush = function(x, y) {\n        var currentPoint = { x: x, y: y };\n        var dist = this.distanceBetween(this.lastPoint, currentPoint);\n        var angle = this.angleBetween(this.lastPoint, currentPoint);\n\n        for(var i = 0; i < dist; i++) {\n            x = this.lastPoint.x + (Math.sin(angle) * i) - 25;\n            y = this.lastPoint.y + (Math.cos(angle) * i) - 25;\n            this.ctx.drawImage(this.brushImage, x, y);\n        }\n        this.ctx.drawImage(this.drawSolar ? this.titleImageSolar : this.titleImagePolar, this.width * 0.5 - this.titleWidth * 0.5, this.height * 0.5 - this.titleHeight * 0.5);\n        this.lastPoint = currentPoint;\n    };\n\n    Painter.prototype.distanceBetween = function(point1, point2) {\n        return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));\n    };\n\n    Painter.prototype.angleBetween = function(point1, point2) {\n        return Math.atan2(point2.x - point1.x, point2.y - point1.y);\n    };\n\n    Painter.prototype.resize = function(width, height) {\n        this.width = width;\n        this.height = height;\n        this.canvas.width = width;\n        this.canvas.height = height;\n    };\n\n    Painter.prototype.reset = function() {\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 1.0)';\n        this.ctx.fillRect(0, 0, this.width, this.height);\n    };\n\n    Painter.prototype.startIntro = function() {\n        var point = {x: this.width * 0.5 - 350, y: this.height * 0.5 + 50};\n        this.lastPoint = { x: point.x, y: point.y };\n        var tl = new TimelineMax({onUpdate: function(){\n            this.drawCurrentPointBrush(point.x, point.y);\n        }.bind(this), onComplete: function(){\n            this.introOver = true;\n        }.bind(this)});\n        tl.to(point, 0.4, {x: point.x + 100, y: point.y - 150, ease: Quart.easeIn});\n        tl.to(point, 0.15, {x: point.x + 140, y: point.y, ease: Linear.easeNone});\n        tl.to(point, 0.15, {x: point.x + 210, y: point.y - 160, ease: Linear.easeNone});\n        tl.to(point, 0.15, {x: point.x + 250, y: point.y, ease: Linear.easeNone});\n        tl.to(point, 0.15, {x: point.x + 320, y: point.y - 140, ease: Linear.easeNone});\n        tl.to(point, 0.15, {x: point.x + 360, y: point.y, ease: Linear.easeNone});\n        tl.to(point, 0.15, {x: point.x + 400, y: point.y - 150, ease: Linear.easeNone});\n        tl.to(point, 0.15, {x: point.x + 410, y: point.y, ease: Linear.easeNone});\n        tl.to(point, 0.15, {x: point.x + 490, y: point.y - 160, ease: Linear.easeNone});\n        tl.to(point, 0.15, {x: point.x + 550, y: point.y, ease: Linear.easeNone});\n        tl.to(point, 0.4, {x: point.x + 600, y: point.y - 150, ease: Quart.easeOut});\n    };\n\n    Painter.prototype.render = function(time) {\n        if((time - this.lastTime) > this.clearInterval) {\n            this.lastTime = time;\n            this.ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\n            this.ctx.fillRect(0, 0, this.width, this.height);\n            this.ctx.drawImage(this.drawSolar ? this.titleImageSolar : this.titleImagePolar, this.width * 0.5 - this.titleWidth * 0.5, this.height * 0.5 - this.titleHeight * 0.5);\n        }\n    };\n\n    return Painter;\n\n})();","var Webgl = (function(){\n\n    function Webgl(width, height, painterCanvas, container){\n        this.width = width;\n        this.height= height;\n        this.backgroundColor = 0x75b6d8;\n        this.ambientColor = 0x2d6785;\n        this.fogColor = 0x51B5E8;\n        this.enablePainter = true;\n        this.painterCanvasTexture = new THREE.Texture(painterCanvas);\n\n        this.debug = false;\n        this.switchColorScheme = false;\n\n        this.clock = new THREE.Clock();\n\n        this.scene = new THREE.Scene();\n        this.scene.fog = new THREE.FogExp2(this.fogColor, 0.0001);\n        \n        this.frontScene = new THREE.Scene();\n        \n        \n        this.camera = new THREE.PerspectiveCamera(40, width / height, 0.1, 100000);\n        this.camera.position.set(0, 100, 1000);\n        this.camera.lookAt(new THREE.Vector3(0, 100, 0));\n\n        this.renderer = new THREE.WebGLRenderer({autoClear: false});\n        this.renderer.autoClear = false;\n        this.renderer.setSize(width, height);\n        this.renderer.setClearColor(this.backgroundColor);\n        container.appendChild(this.renderer.domElement);\n\n        this.light = new THREE.PointLight(0xFFFFFF, 1);\n        this.scene.add(this.light);\n        this.light.position.set(0, 1200, -7000);\n\n        this.ambientLight = new THREE.AmbientLight(this.ambientColor);\n        this.scene.add(this.ambientLight);\n\n        this.terrain = new Terrain(width, height);\n        this.scene.add(this.terrain);\n\n        this.fallingSnow = new FallingSnow();\n        this.scene.add(this.fallingSnow);\n\n        this.tunnel = new Tunnel();\n        this.frontScene.add(this.tunnel);\n\n\n        this.mountain = new Mountain();\n        this.scene.add(this.mountain);\n        this.mountain.position.set(0, -2000, -20000);\n\n        this.backgroundMesh = new THREE.Mesh(new THREE.PlaneBufferGeometry(400000, 10000), new THREE.MeshBasicMaterial({color: this.mountain.colors.top, fog: false}));\n        this.scene.add(this.backgroundMesh);\n        this.backgroundMesh.position.set(0, -7000, -20010);\n\n        this.occlusion = new OcclusionScene(width, height, this.renderer);\n\n        if(this.debug) {\n            this.controls = new THREE.TrackballControls(this.camera, this.renderer.domElement);\n        }\n        else {\n            this.addPostprocessing();\n        }\n\n        if(this.debug) {\n            gui.addColor(this, 'backgroundColor').listen().onChange(function(){\n                this.renderer.setClearColor(this.backgroundColor);\n            }.bind(this)).name('Clear Color');\n            gui.addColor(this, 'fogColor').onChange(function(){\n                this.scene.fog.color.setHex(this.fogColor);\n            }.bind(this)).listen().name('Fog Color');\n            gui.addColor(this, 'ambientColor').listen().onChange(function(){\n                this.ambientLight.color.setHex(this.ambientColor);\n            }.bind(this)).name('Ambient Color');\n            gui.addColor(this.occlusion, 'sunColor').onChange(function(){\n                this.occlusion.sunMesh.material.color.setHex(this.occlusion.sunColor);\n            }.bind(this)).listen().name('Sun Color');\n            gui.add(this.fallingSnow, 'visible').name('Show Snow');\n\n            gui.add(this, 'switchColorScheme').onChange(this.toggleColorScheme.bind(this)).name('Toggle Hot');\n        }\n    }\n\n    Webgl.prototype.tunnelTransition = function() {\n        if(!this.tunnelTransitionRunning) {\n            this.tunnelTransitionRunning = true;\n            this.switchColorScheme = !this.switchColorScheme;\n            this.tunnel.start(function(){\n                audio.startTunnel();\n                window.painter.drawSolar = this.switchColorScheme;\n                window.painter.reset();\n                TweenMax.to(this.lightenPass.uniforms.brightness, 0.3, {value: 0});\n                TweenMax.to(this.lightenPass.uniforms.contrast, 0.3, {value: 0});\n            }.bind(this), function(){\n                audio.stopTunnel();\n                if(this.switchColorScheme) {\n                    TweenMax.to(this.lightenPass.uniforms.brightness, 0.3, {value: 0.05});\n                    TweenMax.to(this.lightenPass.uniforms.contrast, 0.3, {value: 0.1});\n                }\n                else {\n                    TweenMax.to(this.lightenPass.uniforms.brightness, 0.3, {value: 0.1});\n                    TweenMax.to(this.lightenPass.uniforms.contrast, 0.3, {value: -0.2});\n                }\n                this.tunnelTransitionRunning = false;\n            }.bind(this));\n            this.occlusion.tunnel.start();\n            TweenMax.delayedCall(1, function(){\n                this.toggleColorScheme();\n            }.bind(this));\n        }\n    };\n\n    Webgl.prototype.toggleColorScheme = function() {\n        if(this.switchColorScheme) {\n            this.backgroundColor = 0x117cb3;\n            this.fogColor = 0x9d8469;\n            this.ambientColor = 0xb36E0F;\n            this.occlusion.sunColor = 0xFF5A00;\n            this.mountain.colors.top = 0x988264;\n            this.mountain.colors.bottom = 0x7d7d3d;\n            this.fallingSnow.visible = false;\n        }\n        else {\n            this.backgroundColor = 0x75b6d8;\n            this.fogColor = 0x51B5E8;\n            this.ambientColor = 0x2d6785;\n            this.occlusion.sunColor = 0x795a38;\n            this.mountain.colors.top = 0x5aa9d2;\n            this.mountain.colors.bottom = 0x415d6c;\n            this.fallingSnow.visible = true;\n        }\n\n        this.renderer.setClearColor(this.backgroundColor);\n        this.scene.fog.color.setHex(this.fogColor);\n        this.ambientLight.color.setHex(this.ambientColor);\n        this.occlusion.sunMesh.material.color.setHex(this.occlusion.sunColor);\n        this.mountain.uniforms.colorTop.value.setHex(this.mountain.colors.top);\n        this.mountain.uniforms.colorBottom.value.setHex(this.mountain.colors.bottom);\n        this.backgroundMesh.material.color.setHex(this.mountain.colors.top);\n    };\n\n    Webgl.prototype.addPostprocessing = function() {\n        this.composer = new THREE.EffectComposer(this.renderer);\n        this.renderPass = new THREE.RenderPass(this.scene, this.camera)\n        this.composer.addPass(this.renderPass);\n\n        // Render tunnel in front of everything\n        this.renderPassFront = new THREE.RenderPass(this.frontScene, this.camera)\n        this.renderPassFront.clear = false;\n        this.renderPassFront.clearDepth = true;\n        this.composer.addPass(this.renderPassFront);\n\n        // Vignette\n        this.composer.addPass(new THREE.ShaderPass(THREE.VignetteShader));\n\n        // Light effects from occlusion scene\n        this.glowPass = new THREE.ShaderPass(AdditiveTextureShader);\n        this.glowPass.uniforms.tDiffuse2.value = this.occlusion.renderTarget;\n        this.composer.addPass(this.glowPass);\n\n        // Save untouched rendering for later use\n        var renderTargetParams = { \n            minFilter: THREE.LinearFilter, \n            magFilter: THREE.LinearFilter, \n            format: THREE.RGBFormat, \n            stencilBuffer: false \n        };\n        this.savedRenderTarget = new THREE.WebGLRenderTarget(this.width, this.height, renderTargetParams);\n        this.savePass = new THREE.SavePass(this.savedRenderTarget);\n        this.composer.addPass(this.savePass);\n\n        // Blur\n        this.vBlurCold = new THREE.ShaderPass(THREE.VerticalBlurShader);\n        this.hBlurCold = new THREE.ShaderPass(THREE.HorizontalBlurShader);\n        this.bluriness = 2;\n        this.vBlurCold.uniforms.v.value = this.bluriness / this.height;\n        this.hBlurCold.uniforms.h.value = this.bluriness / this.width;\n        this.composer.addPass(this.vBlurCold);\n        this.composer.addPass(this.hBlurCold);\n\n        // Lighten\n        this.lightenPass = new THREE.ShaderPass(THREE.BrightnessContrastShader);\n        this.composer.addPass(this.lightenPass);\n        this.lightenPass.uniforms.brightness.value = 0.1;\n        this.lightenPass.uniforms.contrast.value = -0.2;\n\n        // Copy needed here for lighten to work...\n        this.copyPass = new THREE.ShaderPass(THREE.CopyShader);\n        this.composer.addPass(this.copyPass);\n        \n        // Apply masked saved rendering on top of blurry lightened\n        this.maskPass = new THREE.ShaderPass(TextureMaskShader);\n        this.composer.addPass(this.maskPass);\n        this.maskPass.uniforms.tDiffuse2.value = this.savedRenderTarget;\n        this.maskPass.uniforms.tMask.value = this.painterCanvasTexture;\n        this.maskPass.renderToScreen = true;\n    };\n\n    Webgl.prototype.resize = function(width, height) {\n        this.camera.aspect = width / height;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(width, height);\n        this.composer.setSize(width, height);\n        this.occlusion.resize(width, height);\n        // this.savedRenderTarget.setSize(width, height);\n        this.vBlurCold.uniforms.v.value = this.bluriness / this.height;\n        this.hBlurCold.uniforms.h.value = this.bluriness / this.width;\n        this.savePass.clear = true;\n    };\n\n    Webgl.prototype.render = function() {\n        var t = this.clock.getElapsedTime();\n\n        this.painterCanvasTexture.needsUpdate = true;\n        \n        this.terrain.update(t, this.renderer);\n        this.fallingSnow.update();\n        this.mountain.update();\n        this.tunnel.update();\n\n        this.occlusion.render(this.renderer);\n\n        if(this.debug) {\n            this.renderer.render(this.scene, this.camera);\n            this.controls.update();\n        }\n        else {\n            this.renderer.setClearColor(this.backgroundColor);\n            this.composer.render();\n        }\n    };\n\n    return Webgl;\n\n})();","var webgl, gui, painter, stats, audio;\n\ndocument.addEventListener('DOMContentLoaded', init);\n\nfunction init(){\n\n    // gui = new dat.GUI({width: 400});\n    // gui.close();\n    \n    painter = new Painter(window.innerWidth, window.innerHeight);\n\n    webgl = new Webgl(window.innerWidth, window.innerHeight, painter.canvas, document.querySelector('.three'));\n    // document.querySelector('.painter-debug').appendChild(painter.canvas);\n\n    audio = new Audio();\n\n    // stats = new Stats();\n    // stats.domElement.style.position = 'absolute';\n    // stats.domElement.style.left = '0px';\n    // stats.domElement.style.top = '0px';\n    // document.body.appendChild( stats.domElement );\n\n    window.onresize = resizeHandler;\n\n    window.addEventListener('mouseup', onMouseUp);\n    window.addEventListener('keyup', onKeyUp);\n    window.addEventListener('mousedown', onMouseDown);\n    window.addEventListener('mousemove', onMouseMove);\n\n    var button = document.querySelector('.invert-button');\n\n    button.addEventListener('click', webgl.tunnelTransition.bind(webgl));\n\n    animate();\n\n    painter.startIntro();\n}\n\nfunction onKeyUp(e) {\n    if(e.keyCode === 32) {\n        webgl.tunnelTransition();\n    }\n}\n\nfunction onMouseUp(e) {\n    if(webgl.enablePainter)\n        painter.mouseUp(e);\n}\n\nfunction onMouseDown(e) {\n    if(webgl.enablePainter)\n        painter.mouseDown(e);\n}\n\nfunction onMouseMove(e) {\n    if(webgl.enablePainter)\n        painter.mouseMove(e);\n}\n\nfunction resizeHandler() {\n    webgl.resize(window.innerWidth, window.innerHeight);\n    painter.resize(window.innerWidth, window.innerHeight);\n}\n\nfunction animate() {\n    requestAnimationFrame(animate);\n    audio.update();\n    // stats.begin();\n    if(webgl.enablePainter)\n        painter.render(webgl.clock.elapsedTime);    \n    webgl.render();\n    // stats.end();\n}","var FallingSnow = (function(){\n\n    function FallingSnow(){\n        THREE.Object3D.call(this);\n\n        this.zone = new THREE.Vector3(4000, 1000, 2000);\n        this.nbParticles = 20000;\n\n        var geometry = new THREE.BufferGeometry();\n        var positions = new Float32Array(this.nbParticles * 3);\n        \n        for(var i = 0, j = 0; i < this.nbParticles; i++, j += 3) {\n            positions[j + 0] = Math.random() * this.zone.x - this.zone.x * 0.5;\n            positions[j + 1] = Math.random() * this.zone.y - this.zone.y * 0.5;\n            positions[j + 2] = Math.random() * this.zone.z - this.zone.z * 0.5;\n        }\n\n        geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3));\n\n        var snowFlakeTexture = THREE.ImageUtils.loadTexture('assets/textures/snowflake.png');\n        var uniforms = THREE.UniformsUtils.clone(SnowParticleShader.uniforms);\n        uniforms.texture.value = snowFlakeTexture;\n        uniforms.color.value.setHex(0xFFFFFF);\n        uniforms.size.value = 2.0;\n\n        var material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: SnowParticleShader.vertexShader,\n            fragmentShader: SnowParticleShader.fragmentShader,\n            blending: THREE.AdditiveBlending,\n            transparent: true\n        });\n        \n        this.pointCloud = new THREE.PointCloud(geometry, material);\n        this.add(this.pointCloud);\n    }\n\n    FallingSnow.prototype = new THREE.Object3D;\n    FallingSnow.prototype.constructor = FallingSnow;\n\n    FallingSnow.prototype.update = function() {\n        var positions = this.pointCloud.geometry.attributes.position.array;\n        for(var i = 0, j = 0; i < this.nbParticles; i++, j += 3) {\n            positions[j + 1] -= 1;\n            positions[j + 0] -= 2.5;\n            if(positions[j + 1] < (-this.zone.y * 0.5)) {\n                positions[j + 1] = this.zone.y * 0.5;\n                positions[j + 0] = -positions[j + 0];\n            }\n        }\n        this.pointCloud.geometry.attributes.position.needsUpdate = true;\n    };\n\n    return FallingSnow;\n})();","var Mountain = (function(){\n\n    function Mountain(isOccluding){\n        THREE.Object3D.call(this);\n        \n        var terPoints = [183.8913420215249,183.12427003703482,187.86017283612907,187.9684585523993,184.2202560658527,186.5590813510202,187.78918639737535,192.2619798224098,196.27027776154912,199.8499035306104,198.88545726249896,204.04843085055202,202.8662468264407,202.54961729264397,201.96003472348946,208.48348253031864,210.47282528604316,211.39525643920547,207.49233439047617,208.65817422239624,213.39115065000982,216.51593723596557,223.65007518613254,228.08431599059395,227.18199198550423,225.9787548919379,231.47162019533036,229.43601244222958,226.42483616828602,229.3762847239669,230.70681761842795,227.66746243546095,230.29288402735054,226.30559202101355,224.0205430284197,225.3662961024547,221.69765334214145,222.847426291343,218.67452405038014,218.79650232229068,224.8284415158905,228.0816929072315,229.35819932093904,229.01117347746114,232.86455694952784,234.97812532355985,233.96911566216914,234.9938843277432,235.08936962945359,232.26251995311,232.1444522159032,230.85872683026415,234.17287685437256,229.56496721407305,228.75000901785893,224.95350431081806,223.82940932577648,224.32235570236992,221.22662243706293,226.01497098243607,223.93647398537684,224.20150561500603,226.0302620523236,226.66208702242417,223.29572404768177,226.8899805740177,230.23435477853215,234.92759792568563,237.32300739906606,236.2520635087821,236.65238372380412,238.16986513473816,240.73318449396595,242.94101569414386,245.30940448907958,248.74928303375088,245.986031698692,243.29918872950861,243.59781265951375,239.82589015304742,240.25993448156774,240.80823469963826,243.10977703165662,245.87441617642784,252.16318633474194,253.98261019855175,261.0352331673411,261.68663485336333,262.33601238612357,259.35197808312284,262.7440175615355,262.95308637893913,268.18060379026696,270.9342627421014,267.52540312798993,262.688258529194,261.8625547929831,264.99818787931514,271.1208424819301,273.03775651514184,281.3332336248237,283.13851721162246,281.6372007931925,286.75815585838996,286.71061782290025,285.83574333998075,291.79503578342167,292.7307271859847,294.42066740812214,297.44200257995925,293.79457548880373,299.25207758660713,300.05949963018884,301.02739954188894,303.76836385478765,301.8077755969088,299.9305103922269,297.000983415454,292.89575037650826,287.57589367099297,289.1809926753971,292.0443467654319,289.77651325463313,291.4264448441765,299.8813801480248,300.0639696595828,302.1308713773931,299.92383915306067,300.83178977907517,299.3516432415897,303.8737866501964,304.952667546633,302.63726294237506,297.06847947601636,295.77829716857553,297.6874202980122,296.7722178411707,294.01486487040506,293.6837956217582,286.5289871166719,285.07051804035825,282.1594461892012,281.8984674900575,284.1095289657805,283.2951405652187,280.89222221132155,285.333112071169,285.82538957389346,281.32784346879106,281.0816063235376,281.7567173212568,284.67289571694045,292.18855287477226,295.3023429020924,293.90283142126873,290.8675886812255,285.0082545182727,282.6924996569873,284.2555300448393,287.1957593778427,291.9591071481795,289.9326058492917,293.7948878858235,287.4294506127379,286.6303588868027,287.3404009173057,284.31670857404663,280.75536182623625,280.63541332566473,282.08420942755583,288.56878702754733,285.2204805838385,286.9821993459243,285.670625861723,286.43962933271376,283.0527561175027,285.6563707681586,283.4233152026622,282.91020791953474,279.10655563801384,272.37275409516525,274.49474173216356,274.17647285403785,270.41854025477653,267.72748916495607,263.62222100995183,263.133676718281,260.74433737349676,259.6267727399151,261.9964451341145,261.15981785570204,262.99920791129284,258.90709699485467,260.9614465819934,260.3572442203536,262.8303226744513,270.0256333416011,275.24140260441976,279.4782233920869,276.38276800541485,278.66017440646004,276.4208114993558,273.93154199054027,274.4170378681188,275.2174870101614,275.22813959427293,276.93003521866683,277.77770747857414,283.0398807839935,283.0780481898836,276.2604508141585,277.95778808414104,276.43354540600546,277.01768292251995,282.3509302424151,283.64594049331856,285.65037174787597,286.6614935977926,286.68096725684984,289.5011296072403,290.26622366727935,291.1759303052087,289.76438913947555,288.0646554772118,291.9444858941963,289.1034033762649,284.25889395081595,278.3698866145222,278.6475852026187,279.768874302087,281.8869772791605,278.86001853956986,275.4899309881743,273.6363228504798,273.03340292968414,272.78425913166296,277.6793550508779,278.2297393000349,274.3701712960595,275.68146809734515,273.6309060905914,268.1422984360878,269.36664549542013,268.07827476633423,266.7441681182397,266.3964010311217,270.61253354297884,268.83049983378567,272.27980107322117,278.6535121301005,278.1827052689249,277.81766954315736,281.4430578795174,279.9281758322153,276.66351708735687,275.61881789718893,279.7924263407243,277.11915309921477,279.72657008823234,278.9375669727894,277.2033594577305,273.47669081048355,276.0369699586559];\n\n        var offset = 1;\n        var sub = 100;\n        var stepLength = 4;\n        var shape = new THREE.Shape();\n        shape.moveTo(0, terPoints[0] - sub);\n        for (var i = 1, l = terPoints.length; i < l; i++) {\n\t\t\tshape.lineTo(offset, terPoints[i] - sub);\n\t\t\toffset += stepLength;\n        }\n        for (var i = l - 1; i > 0; i--) {\n\t\t\tshape.lineTo(offset, terPoints[i] - sub);\n\t\t\toffset += stepLength;\n        }\n        shape.lineTo(offset, 0);\n        shape.lineTo(0, 0);\n        shape.lineTo(0, terPoints[0] - sub);\n\n        this.meshWidth = terPoints.length * stepLength * 2;\n\n\t\tvar geometry = new THREE.ShapeGeometry(shape);\n\t\tvar material;\n\t\tif(isOccluding) {\n\t\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\tcolor: 0x000000\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis.colors = {\n\t\t\t\ttop: 0x5aa9d2,\n\t\t\t\tbottom: 0x415d6c\n\t\t\t}\n\n\t\t\tthis.uniforms = THREE.UniformsUtils.clone(MountainGradientShader.uniforms);\n\t\t\tthis.uniforms.colorTop.value.setHex(this.colors.top);\n\t\t\tthis.uniforms.colorBottom.value.setHex(this.colors.bottom);\n\n\t\t\t// gui.add(this.uniforms.maxheight, 'value').min(0).max(1000).name('Gradient Mountain Height');\n\t\t\t// gui.addColor(this.colors, 'top').listen().onChange(function(){\n\t\t\t// \tthis.uniforms.colorTop.value.setHex(this.colors.top);\n\t\t\t// }.bind(this)).name('Gradient Mountain Top');\n\t\t\t// gui.addColor(this.colors, 'bottom').listen().onChange(function(){\n\t\t\t// \tthis.uniforms.colorBottom.value.setHex(this.colors.bottom);\n\t\t\t// }.bind(this)).name('Gradient Mountain Bottom');\n\n\t\t\tmaterial = new THREE.ShaderMaterial({\n\t\t\t\tvertexShader: MountainGradientShader.vertexShader,\n\t\t\t\tfragmentShader: MountainGradientShader.fragmentShader,\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tfog: false\n\t\t\t});\n\t\t}\n\n\t\t\n\n\t\tthis.mesh1 = new THREE.Mesh(geometry, material);\n\t\tthis.scale.multiplyScalar(20);\n\t\tthis.mesh1.position.x -= this.meshWidth * 0.5;\n\t\t\n\t\tthis.mesh2 = this.mesh1.clone();\n\t\tthis.mesh2.position.x = this.mesh1.position.x + this.meshWidth - 10;\n\n\t\tthis.add(this.mesh1);\n\t\tthis.add(this.mesh2);\n    }\n\n    Mountain.prototype = new THREE.Object3D;\n    Mountain.prototype.constructor = Mountain;\n\n    Mountain.prototype.update = function() {\n    \tthis.mesh1.position.x -= 10;\n    \tthis.mesh2.position.x -= 10;\n    \tif(this.mesh1.position.x < -this.meshWidth * 1.5) {\n    \t\tthis.mesh1.position.x = this.mesh2.position.x + this.meshWidth - 10;\n    \t}\n    \tif(this.mesh2.position.x < -this.meshWidth * 1.5) {\n    \t\tthis.mesh2.position.x = this.mesh1.position.x + this.meshWidth - 10;\n    \t}\n    };\n\n    return Mountain;\n})();\n\n","var Terrain = (function(){\n\n    function Terrain(width, height){\n        THREE.Object3D.call(this);\n\n        this.sceneRenderTarget = new THREE.Scene();\n        this.cameraOrtho = new THREE.OrthographicCamera(width / - 2, width / 2, height / 2, height / - 2, -10000, 10000);\n        this.cameraOrtho.position.z = 100;\n        this.sceneRenderTarget.add(this.cameraOrtho);\n\n        var normalShader = THREE.NormalMapShader;\n        var rx = 256, ry = 256;\n        var pars = { \n            minFilter: THREE.LinearMipmapLinearFilter, \n            magFilter: THREE.LinearFilter, \n            format: THREE.RGBFormat \n        };\n\n        this.heightMap = new THREE.WebGLRenderTarget(rx, ry, pars);\n        this.normalMap = new THREE.WebGLRenderTarget(rx, ry, pars);\n\n        this.uniformsNormal = THREE.UniformsUtils.clone(THREE.NormalMapShader.uniforms);\n        this.uniformsNormal.height.value = 0.05;\n        this.uniformsNormal.resolution.value.set(rx, ry);\n        this.uniformsNormal.heightMap.value = this.heightMap;\n        var materialNormal = new THREE.ShaderMaterial({\n            uniforms: this.uniformsNormal,\n            vertexShader: THREE.NormalMapShader.vertexShader,\n            fragmentShader: THREE.NormalMapShader.fragmentShader\n        });\n\n        this.uniformsNoise = THREE.UniformsUtils.clone(SimplexNoiseShader.uniforms);\n        this.uniformsNoise.scale.value.set(1, 1);\n        var materialNoise = new THREE.ShaderMaterial({\n            uniforms: this.uniformsNoise,\n            vertexShader: SimplexNoiseShader.vertexShader,\n            fragmentShader: SimplexNoiseShader.fragmentShader\n        });\n\n        this.planeNoise = new THREE.Mesh(new THREE.PlaneBufferGeometry(width, height), materialNoise);\n        this.sceneRenderTarget.add(this.planeNoise);\n        this.planeNoise.position.z = -500;\n\n        this.planeNormal = new THREE.Mesh(new THREE.PlaneBufferGeometry(width, height), materialNormal);\n        this.sceneRenderTarget.add(this.planeNormal);\n        this.planeNormal.position.z = -500;\n\n        var shaderTerrain = THREE.ShaderLib['normalmap'];\n\n        this.uniformsTerrain = THREE.UniformsUtils.clone(shaderTerrain.uniforms);\n        this.uniformsTerrain[ \"enableSpecular\" ].value = true;\n        this.uniformsTerrain[ \"enableDisplacement\" ].value = true;\n        this.uniformsTerrain[ \"tNormal\" ].value = this.normalMap;\n        this.uniformsTerrain[ \"tSpecular\" ].value = this.heightMap;\n        this.uniformsTerrain[ \"tDisplacement\" ].value = this.heightMap;\n        this.uniformsTerrain[ \"uDisplacementScale\" ].value = 1000.0;\n        this.uniformsTerrain[ \"uNormalScale\" ].value.set(0.0, 0.5);\n        this.uniformsTerrain[ \"diffuse\" ].value.setHex( 0xFFFFFF );\n        this.uniformsTerrain[ \"shininess\" ].value = 50.0;\n\n        this.terrainMaterial = new THREE.ShaderMaterial({\n            uniforms: this.uniformsTerrain,\n            vertexShader: shaderTerrain.vertexShader,\n            fragmentShader: shaderTerrain.fragmentShader,\n            lights: true,\n            fog: true\n        });\n        this.terrainGeometry = new THREE.PlaneBufferGeometry(16000, 16000, 300, 300)\n        this.terrainGeometry.computeTangents();\n        this.debugMesh = new THREE.Mesh(this.terrainGeometry, this.terrainMaterial);\n        this.add(this.debugMesh);\n        this.debugMesh.rotation.x = -Math.PI * 0.5;\n        this.debugMesh.position.y = -1200;\n        this.debugMesh.position.z = -7000;\n    }\n\n    Terrain.prototype = new THREE.Object3D;\n    Terrain.prototype.constructor = Terrain;\n\n    Terrain.prototype.update = function(t, renderer) {\n        this.uniformsNoise.offset.value.x += 0.01;\n        this.planeNormal.visible = false;\n        this.planeNoise.visible = true;\n        renderer.render(this.sceneRenderTarget, this.cameraOrtho, this.heightMap, true);\n        this.planeNormal.visible = true;\n        this.planeNoise.visible = false;\n        renderer.render(this.sceneRenderTarget, this.cameraOrtho, this.normalMap, true);\n    };\n\n    return Terrain;\n})();\n\n","var Tunnel = (function(){\n\n    function Tunnel(isOccluding){\n        THREE.Object3D.call(this);\n\n        this.tunnelLength = 30000;\n        var geometry = new THREE.PlaneBufferGeometry(this.tunnelLength, 1000);\n        var material;\n        if(isOccluding) {\n            material = new THREE.MeshBasicMaterial({color: 0x000000});\n        }\n        else {\n            material = new THREE.MeshLambertMaterial({color: 0x232323, ambient: 0x000000});\n        }\n\n        var windowGeometry = new THREE.PlaneBufferGeometry(100, 30);\n        var windowMaterial = new THREE.MeshBasicMaterial({color: isOccluding ? 0xFFCD72 : 0xFFCD72});\n\n\n        this.wallMesh = new THREE.Mesh(geometry, material);\n        this.add(this.wallMesh);\n\n\n        // this.wallMesh.position.x = 5000;\n        this.wallMesh.position.z = -3;\n\n        this.windows = [];\n        this.windowStep = 2000;\n        this.nbWindows =  ~~(this.tunnelLength / this.windowStep) - 1;\n\n        if(isOccluding) {\n            var exitGeometry = new THREE.PlaneBufferGeometry(1000, 1000);\n            var exitMaterial = new THREE.MeshBasicMaterial({color: 0x372716});\n            var exitMesh = new THREE.Mesh(exitGeometry, exitMaterial);\n            var entranceMesh = new THREE.Mesh(exitGeometry, exitMaterial);\n            this.add(exitMesh);\n            this.add(entranceMesh);\n            exitMesh.position.set(this.tunnelLength * 0.5 + 250, 0, 0);\n            entranceMesh.position.set(-(this.tunnelLength * 0.5 + 250), 0, 0);\n        }\n\n\n\n        var mesh;\n        for (var i = 0; i < this.nbWindows; i++) {\n        \tmesh = new THREE.Mesh(windowGeometry, windowMaterial);\n\t        this.add(mesh);\n\t        this.windows.push(mesh);\n            mesh.position.x = -(this.nbWindows * this.windowStep * 0.5) + i * this.windowStep;\n\t        mesh.position.y = 200;\n        }\n\n        this.position.x = this.tunnelLength * 0.5 + 3000;\n        this.finished = true;\n        \n    }\n\n    Tunnel.prototype = new THREE.Object3D;\n    Tunnel.prototype.constructor = Tunnel;\n\n    Tunnel.prototype.start = function(enterCallback, leaveCallback) {\n        this.finished = false;\n        this.enterCallback = enterCallback;\n        this.leaveCallback = leaveCallback;\n        this.entered = false;\n        this.left = false;\n    };\n\n    Tunnel.prototype.update = function() {\n        if(!this.finished) {\n        \tthis.position.x -= 300;\n            if(this.position.x <= (this.tunnelLength * 0.5) && !this.entered) {\n                this.entered = true;\n                if(this.enterCallback) this.enterCallback();\n            }\n            if(this.position.x <= (-this.tunnelLength * 0.5) && !this.left) {\n                this.left = true;\n                if(this.leaveCallback) this.leaveCallback();\n            }\n            if(this.position.x < -(this.tunnelLength * 0.5 + 3000)) {\n                this.position.x = this.tunnelLength * 0.5 + 3000;\n                this.finished = true;\n            }\n        }\n    };\n\n    return Tunnel;\n})();","var AdditiveTextureShader = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\"tDiffuse2\": { type: \"t\", value: null }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\t\"vUv = uv;\",\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join(\"\\n\"),\n\n\tfragmentShader: [\n\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\"uniform sampler2D tDiffuse2;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\t\"vec4 texel1 = texture2D( tDiffuse, vUv );\",\n\t\t\t\"vec4 texel2 = texture2D( tDiffuse2, vUv );\",\n\t\t\t\"gl_FragColor = texel1 + vec4(0.5, 0.75, 1.0, 1.0) * texel2 * 2.0;\",\n\t\t\t// \"gl_FragColor = vec4(texel1.xyz + texel2.xyz, 1.0);\",\n\n\t\t\"}\"\n\n\t].join(\"\\n\")\n\n};\n"," /*\n * @author Thibaut 'BKcore' Despoulain <http://bkcore.com>\n */\n var GodraysShader = {\n    uniforms: {\n            tDiffuse: {type: \"t\", value:0, texture:null},\n            fX: {type: \"f\", value: 0.5},\n            fY: {type: \"f\", value: 0.5},\n            fExposure: {type: \"f\", value: 0.6},\n            fDecay: {type: \"f\", value: 0.93},\n            fDensity: {type: \"f\", value: 0.96},\n            fWeight: {type: \"f\", value: 0.4},\n            fClamp: {type: \"f\", value: 1.0}\n    },\n\n    vertexShader: [\n            \"varying vec2 vUv;\",\n\n            \"void main() {\",\n                \"vUv = uv;\",\n                \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n            \"}\"\n    ].join(\"\\n\"),\n\n    fragmentShader: [\n            \"varying vec2 vUv;\",\n            \"uniform sampler2D tDiffuse;\",\n\n            \"uniform float fX;\",\n            \"uniform float fY;\",\n            \"uniform float fExposure;\",\n            \"uniform float fDecay;\",\n            \"uniform float fDensity;\",\n            \"uniform float fWeight;\",\n            \"uniform float fClamp;\",\n\n            \"const int iSamples = 20;\",\n\n            \"void main() {\",\n                \"vec2 deltaTextCoord = vec2(vUv - vec2(fX,fY));\",\n                \"deltaTextCoord *= 1.0 /  float(iSamples) * fDensity;\",\n                \"vec2 coord = vUv;\",\n                \"float illuminationDecay = 1.0;\",\n                \"vec4 FragColor = vec4(0.0);\",\n\n                \"for(int i=0; i < iSamples ; i++)\",\n                \"{\",\n                        \"coord -= deltaTextCoord;\",\n                        \"vec4 texel = texture2D(tDiffuse, coord);\",\n                        \"texel *= illuminationDecay * fWeight;\",\n\n                        \"FragColor += texel;\",\n\n                        \"illuminationDecay *= fDecay;\",\n                \"}\",\n                \"FragColor *= fExposure;\",\n                \"FragColor = clamp(FragColor, 0.0, fClamp);\",\n                \"gl_FragColor = FragColor;\",\n            \"}\"\n    ].join(\"\\n\")\n};\n","/**\n * @author mrdoob / http://www.mrdoob.com\n *\n * Simple test shader\n */\n\nvar MountainGradientShader = {\n\n\tuniforms: {\n\t\t\"maxheight\": {type: \"f\", value: 300.0},\n\t\t\"colorTop\": {type: \"c\", value: new THREE.Color(0xFF0000)},\n\t\t\"colorBottom\": {type: \"c\", value: new THREE.Color(0x0000FF)}\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying float vHeight;\",\n\n\t\t\"void main() {\",\n\t\t\t\"vHeight = position.y;\",\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join(\"\\n\"),\n\n\tfragmentShader: [\n\n\t\t\"uniform float maxheight;\",\n\t\t\"uniform vec3 colorTop;\",\n\t\t\"uniform vec3 colorBottom;\",\n\n\t\t\"varying float vHeight;\",\n\n\t\t\"void main() {\",\n\t\t\t\"float ratioHeight = vHeight / maxheight;\",\n\t\t\t\"vec3 gradient = mix(colorTop, colorBottom, ratioHeight - 0.3);\",\n\t\t\t\"gl_FragColor = vec4( gradient, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join(\"\\n\")\n\n};\n","//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nvar SimplexNoiseShader = {\n\n    uniforms: {\n        time:   { type: \"f\", value: 1.0 },\n        scale:  { type: \"v2\", value: new THREE.Vector2( 1.5, 1.5 ) },\n        offset: { type: \"v2\", value: new THREE.Vector2( 0, 0 ) }\n    },\n\n    vertexShader: [\n        \"varying vec2 vUv;\",\n        \"uniform vec2 scale;\",\n        \"uniform vec2 offset;\",\n\n        \"void main( void ) {\",\n\n            \"vUv = uv * scale + offset;\",\n            \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n        \"}\"\n\n    ].join(\"\\n\"),\n\n    fragmentShader: [\n\n        \"uniform float time;\",\n        \"varying vec2 vUv;\",\n\n        \"vec4 permute( vec4 x ) {\",\n\n            \"return mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\",\n\n        \"}\",\n\n        \"vec4 taylorInvSqrt( vec4 r ) {\",\n\n            \"return 1.79284291400159 - 0.85373472095314 * r;\",\n\n        \"}\",\n\n        \"float snoise( vec3 v ) {\",\n\n            \"const vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\",\n            \"const vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\",\n\n            // First corner\n\n            \"vec3 i  = floor( v + dot( v, C.yyy ) );\",\n            \"vec3 x0 = v - i + dot( i, C.xxx );\",\n\n            // Other corners\n\n            \"vec3 g = step( x0.yzx, x0.xyz );\",\n            \"vec3 l = 1.0 - g;\",\n            \"vec3 i1 = min( g.xyz, l.zxy );\",\n            \"vec3 i2 = max( g.xyz, l.zxy );\",\n\n            \"vec3 x1 = x0 - i1 + 1.0 * C.xxx;\",\n            \"vec3 x2 = x0 - i2 + 2.0 * C.xxx;\",\n            \"vec3 x3 = x0 - 1. + 3.0 * C.xxx;\",\n\n            // Permutations\n\n            \"i = mod( i, 289.0 );\",\n            \"vec4 p = permute( permute( permute(i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\",\n\n            // Gradients\n            // ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n            \"float n_ = 1.0 / 7.0;\", // N=7\n\n            \"vec3 ns = n_ * D.wyz - D.xzx;\",\n\n            \"vec4 j = p - 49.0 * floor( p * ns.z *ns.z );\", //  mod(p,N*N)\n\n            \"vec4 x_ = floor( j * ns.z );\",\n            \"vec4 y_ = floor( j - 7.0 * x_ );\", // mod(j,N)\n\n            \"vec4 x = x_ *ns.x + ns.yyyy;\",\n            \"vec4 y = y_ *ns.x + ns.yyyy;\",\n            \"vec4 h = 1.0 - abs( x ) - abs( y );\",\n\n            \"vec4 b0 = vec4( x.xy, y.xy );\",\n            \"vec4 b1 = vec4( x.zw, y.zw );\",\n\n\n            \"vec4 s0 = floor( b0 ) * 2.0 + 1.0;\",\n            \"vec4 s1 = floor( b1 ) * 2.0 + 1.0;\",\n            \"vec4 sh = -step( h, vec4( 0.0 ) );\",\n\n            \"vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\",\n            \"vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\",\n\n            \"vec3 p0 = vec3( a0.xy, h.x );\",\n            \"vec3 p1 = vec3( a0.zw, h.y );\",\n            \"vec3 p2 = vec3( a1.xy, h.z );\",\n            \"vec3 p3 = vec3( a1.zw, h.w );\",\n\n            // Normalise gradients\n\n            \"vec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\",\n            \"p0 *= norm.x;\",\n            \"p1 *= norm.y;\",\n            \"p2 *= norm.z;\",\n            \"p3 *= norm.w;\",\n\n            // Mix final noise value\n\n            \"vec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\",\n            \"m = m * m;\",\n            \"return 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 ), dot( p3, x3 ) ) );\",\n\n        \"}\",\n\n        \"float surface3( vec3 coord ) {\",\n\n            \"float n = 0.0;\",\n\n            \"n += 0.5 * abs( snoise( coord ) );\",\n            \"n += 0.25 * abs( snoise( coord * 2.0 ) );\",\n            \"n += 0.25 * abs( snoise( coord * 4.0 ) );\",\n            // \"n += 0.5 * abs( snoise( coord * 8.0 ) );\",\n            // \"n += 0.075 * abs( snoise( coord * 16.0 ) );\",\n\n            \"return n;\",\n\n        \"}\",\n\n        \"void main( void ) {\",\n\n            \"vec3 coord = vec3( vUv, -time );\",\n            \"float n = surface3( coord );\",\n\n            \"gl_FragColor = vec4( vec3( n, n, n ), 1.0 );\",\n\n        \"}\"\n\n\n    ].join(\"\\n\")\n\n};\n\n\n","var SnowParticleShader = {\n\n    uniforms: {\n        \"texture\": {type: \"t\", value: null},\n        \"color\": {type: \"c\", value: new THREE.Color(0xFFFFFF)},\n        \"size\": {type: \"f\", value: 1.0}\n    },\n\n    vertexShader: [\n\n        \"uniform float size;\",\n\n        \"void main() {\",\n\n            \"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n            \"gl_PointSize = size * ( 1000.0 / length( mvPosition.xyz ) );\",\n            \"gl_Position = projectionMatrix * mvPosition;\",\n\n        \"}\"\n\n    ].join(\"\\n\"),\n\n    fragmentShader: [\n\n        \"uniform vec3 color;\",\n        \"uniform sampler2D texture;\",\n\n        \"void main() {\",\n\n            \"gl_FragColor = vec4( color, 1.0 );\",\n            \"gl_FragColor = gl_FragColor * texture2D( texture, gl_PointCoord );\",\n\n        \"}\",\n\n    ].join(\"\\n\")\n\n};\n","var TextureMaskShader = {\n\n    uniforms: {\n\n        \"tDiffuse1\": { type: \"t\", value: null },\n        \"tDiffuse2\": { type: \"t\", value: null },\n        \"tMask\":     { type: \"t\", value: null }\n\n    },\n\n    vertexShader: [\n\n        \"varying vec2 vUv;\",\n\n        \"void main() {\",\n\n            \"vUv = uv;\",\n            \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n        \"}\"\n\n    ].join(\"\\n\"),\n\n    fragmentShader: [\n        \"uniform sampler2D tDiffuse1;\",\n        \"uniform sampler2D tDiffuse2;\",\n        \"uniform sampler2D tMask;\",\n\n        \"varying vec2 vUv;\",\n\n        \"void main() {\",\n\n            \"vec4 texel1 = texture2D( tDiffuse1, vUv );\",\n            \"vec4 texel2 = texture2D( tDiffuse2, vUv );\",\n            \"vec4 texelMask = texture2D( tMask, vUv );\",\n            \"gl_FragColor = mix( texel1, texel2, texelMask.r);\",\n\n        \"}\"\n\n    ].join(\"\\n\")\n\n};\n","var Asset = (function(){\n\n    function Asset(url, index, type) {\n        this.url = url;\n        this.index = index;\n        this.type = type;\n        this.startedLoading = false;\n        this.loaded = false;\n        this.buffer = 0;\n        this.presetList = new Array();\n    }\n\n    Asset.prototype.load = function(preset) {\n        if (this.loaded) {\n            // Already loaded\n            preset.assetFinishedLoading(this);\n            return;\n        }\n\n        // Keep track of this preset as a dependency\n        var n = this.presetList.length;\n        this.presetList[n] = preset;\n        \n        if (this.startedLoading) {\n            return;\n        }\n\n        this.startedLoading = true;\n            \n        // Load asynchronously\n        var request = new XMLHttpRequest();\n        request.open(\"GET\", this.url, true);\n        request.responseType = \"arraybuffer\";\n        this.request = request;\n        \n        var asset = this;\n\n        request.onload = function() {\n            context.decodeAudioData(\n                request.response,\n                function(buffer) {\n                    asset.buffer = buffer;\n                    asset.loaded = true;\n                    \n                    // Tell all the presets that depend on us that we're ready\n                    for (i = 0; i < asset.presetList.length; i++) {\n                        var preset = asset.presetList[i];\n                        preset.assetFinishedLoading(asset);\n                    }\n                },\n                \n                function(buffer) {\n                    // alert(\"ERROR!!!!! \" + asset.url);\n                }\n            );\n        }\n\n        request.send();\n    }\n    \n    return Asset;\n})();\n","var Preset = (function(){\n\n    function Preset(presetIndex, title, sampleIndex, impulseResponseIndex, mainGain, sendGain) {\n        this.mainGain = mainGain;\n        this.sendGain = sendGain;\n\n        this.title = title;\n        this.presetIndex = presetIndex;\n        this.sampleIndex = sampleIndex;\n        this.impulseResponseIndex = impulseResponseIndex + responseOffset; // passed in index starts at 0 for responses\n        this.sampleBuffer = 0;\n        this.impulseResponseBuffer = 0;\n    }\n\n    Preset.prototype.assetFinishedLoading = function(asset) {\n        switch (asset.type) {\n            case 0: this.sampleBuffer = asset.buffer; break;\n            case 1: this.impulseResponseBuffer = asset.buffer; break;\n        }\n        \n        if (this.isFullyLoaded()) {\n            // Autoplay first preset\n            if (this.presetIndex == 0) {\n                this.play();\n            }\n        }\n    }\n\n    Preset.prototype.isFullyLoaded = function() {\n        return this.sampleBuffer && this.impulseResponseBuffer;\n    }\n\n    Preset.prototype.load = function() {\n        sampleAsset = assetList[this.sampleIndex];\n        impulseResponseAsset = assetList[this.impulseResponseIndex];\n        \n        sampleAsset.load(this);\n        impulseResponseAsset.load(this);    \n    }\n\n    Preset.prototype.play = function() {\n        source.buffer = this.sampleBuffer;\n        convolver.buffer = this.impulseResponseBuffer;\n\n        gainNode1.gain.value = this.mainGain;\n        gainNode2.gain.value = this.sendGain;\n\n        if (!isStarted) {\n            isStarted = true;\n            source.start(0);\n        }\n    }\n\n    return Preset;\n\n})();"],"sourceRoot":"/source/"}